
tutorial_mqtt3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b4  080048b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080048b4  080048b4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b4  080048b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08004918  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004918  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc88  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ceb  00000000  00000000  0002bd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ff  00000000  00000000  0002e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b917  00000000  00000000  0002ea67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd8e  00000000  00000000  0004a37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a22e3  00000000  00000000  0005710c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000297c  00000000  00000000  000f93f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000fbd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004828 	.word	0x08004828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004828 	.word	0x08004828

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <send_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t samples_adc;


void send_uart(uint32_t valor){
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	char buffer[20];
	sprintf(buffer, "%lu\r\n",valor);
 8000288:	f107 030c 	add.w	r3, r7, #12
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	490b      	ldr	r1, [pc, #44]	; (80002bc <send_uart+0x3c>)
 8000290:	4618      	mov	r0, r3
 8000292:	f003 fe25 	bl	8003ee0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000296:	f107 030c 	add.w	r3, r7, #12
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff98 	bl	80001d0 <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	f107 010c 	add.w	r1, r7, #12
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <send_uart+0x40>)
 80002ae:	f003 fa41 	bl	8003734 <HAL_UART_Transmit>
}
 80002b2:	bf00      	nop
 80002b4:	3720      	adds	r7, #32
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	08004840 	.word	0x08004840
 80002c0:	2000010c 	.word	0x2000010c

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fb02 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f81c 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f000 f91c 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 80002d4:	f000 f8fc 	bl	80004d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002d8:	f000 f8ca 	bl	8000470 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002dc:	f000 f86c 	bl	80003b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, &samples_adc, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	4907      	ldr	r1, [pc, #28]	; (8000300 <main+0x3c>)
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <main+0x40>)
 80002e6:	f000 fd21 	bl	8000d2c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  send_uart(samples_adc);
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <main+0x3c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ffc6 	bl	8000280 <send_uart>
	  HAL_Delay(700);
 80002f4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80002f8:	f000 fb50 	bl	800099c <HAL_Delay>
	  send_uart(samples_adc);
 80002fc:	e7f5      	b.n	80002ea <main+0x26>
 80002fe:	bf00      	nop
 8000300:	20000194 	.word	0x20000194
 8000304:	20000078 	.word	0x20000078

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b09c      	sub	sp, #112	; 0x70
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fe02 	bl	8003f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2234      	movs	r2, #52	; 0x34
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fdf4 	bl	8003f20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	2310      	movs	r3, #16
 8000342:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2302      	movs	r3, #2
 8000346:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000348:	2300      	movs	r3, #0
 800034a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800034c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000356:	4618      	mov	r0, r3
 8000358:	f001 fd98 	bl	8001e8c <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000362:	f000 f93b 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	230f      	movs	r3, #15
 8000368:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2302      	movs	r3, #2
 800036c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fdc0 	bl	8002f08 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800038e:	f000 f925 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800039a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039c:	463b      	mov	r3, r7
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 ffe8 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003aa:	f000 f917 	bl	80005dc <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3770      	adds	r7, #112	; 0x70
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003be:	463b      	mov	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
 80003cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ce:	4b27      	ldr	r3, [pc, #156]	; (800046c <MX_ADC1_Init+0xb4>)
 80003d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d6:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_ADC1_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_ADC1_Init+0xb4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_ADC1_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_ADC1_Init+0xb4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_ADC1_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_ADC1_Init+0xb4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_ADC1_Init+0xb4>)
 80003fe:	2201      	movs	r2, #1
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_ADC1_Init+0xb4>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_ADC1_Init+0xb4>)
 800040a:	2201      	movs	r2, #1
 800040c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_ADC1_Init+0xb4>)
 8000410:	2201      	movs	r2, #1
 8000412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_ADC1_Init+0xb4>)
 8000418:	2204      	movs	r2, #4
 800041a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_ADC1_Init+0xb4>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_ADC1_Init+0xb4>)
 8000424:	2200      	movs	r2, #0
 8000426:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000428:	4810      	ldr	r0, [pc, #64]	; (800046c <MX_ADC1_Init+0xb4>)
 800042a:	f000 faf9 	bl	8000a20 <HAL_ADC_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000434:	f000 f8d2 	bl	80005dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000438:	2301      	movs	r3, #1
 800043a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043c:	2301      	movs	r3, #1
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000444:	2307      	movs	r3, #7
 8000446:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_ADC1_Init+0xb4>)
 8000456:	f000 fd05 	bl	8000e64 <HAL_ADC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000460:	f000 f8bc 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000078 	.word	0x20000078

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <MX_USART2_UART_Init+0x5c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800047c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004b4:	f003 f8f0 	bl	8003698 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f88d 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000010c 	.word	0x2000010c
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_DMA_Init+0x38>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <MX_DMA_Init+0x38>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_DMA_Init+0x38>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200b      	movs	r0, #11
 80004f4:	f001 f973 	bl	80017de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f8:	200b      	movs	r0, #11
 80004fa:	f001 f98c 	bl	8001816 <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a2a      	ldr	r2, [pc, #168]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_GPIO_Init+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_GPIO_Init+0xc4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0xc8>)
 800058a:	f001 fc67 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_GPIO_Init+0xcc>)
 80005a6:	f001 fae7 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xc8>)
 80005c4:	f001 fad8 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000400 	.word	0x48000400
 80005d8:	48000800 	.word	0x48000800

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x44>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_MspInit+0x44>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800061e:	2007      	movs	r0, #7
 8000620:	f001 f8d2 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000650:	d14c      	bne.n	80006ec <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <HAL_ADC_MspInit+0xc4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f001 fa6e 	bl	8001b78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_ADC_MspInit+0xcc>)
 80006a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006d2:	f001 f8ba 	bl	800184a <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80006dc:	f7ff ff7e 	bl	80005dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_ADC_MspInit+0xc8>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	200000c8 	.word	0x200000c8
 80006fc:	40020008 	.word	0x40020008

08000700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <HAL_UART_MspInit+0x7c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d128      	bne.n	8000774 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_UART_MspInit+0x80>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_UART_MspInit+0x80>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_UART_MspInit+0x80>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_UART_MspInit+0x80>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_UART_MspInit+0x80>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_UART_MspInit+0x80>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000752:	230c      	movs	r3, #12
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000762:	2307      	movs	r3, #7
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 fa02 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40004400 	.word	0x40004400
 8000780:	40021000 	.word	0x40021000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f8c4 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <DMA1_Channel1_IRQHandler+0x10>)
 80007de:	f001 f8da 	bl	8001996 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000c8 	.word	0x200000c8

080007ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <_sbrk+0x5c>)
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <_sbrk+0x60>)
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <_sbrk+0x64>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <_sbrk+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d207      	bcs.n	800082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800081c:	f003 fb88 	bl	8003f30 <__errno>
 8000820:	4603      	mov	r3, r0
 8000822:	220c      	movs	r2, #12
 8000824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	e009      	b.n	8000840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <_sbrk+0x64>)
 800083c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20004000 	.word	0x20004000
 800084c:	00000400 	.word	0x00000400
 8000850:	20000198 	.word	0x20000198
 8000854:	200002e8 	.word	0x200002e8

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f003 fb47 	bl	8003f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fd09 	bl	80002c4 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c0:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 80008c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c8:	200002e8 	.word	0x200002e8

080008cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 ff71 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fe7c 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 ff89 	bl	8001832 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 ff51 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	2000019c 	.word	0x2000019c

08000984 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;  
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000019c 	.word	0x2000019c

0800099c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	; 0x68
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d101      	bne.n	8000a40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e169      	b.n	8000d14 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d176      	bne.n	8000b40 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d152      	bne.n	8000b00 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fddb 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d13b      	bne.n	8000b00 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fd67 	bl	800155c <ADC_Disable>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d12f      	bne.n	8000b00 <HAL_ADC_Init+0xe0>
 8000aa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d12b      	bne.n	8000b00 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab0:	f023 0302 	bic.w	r3, r3, #2
 8000ab4:	f043 0202 	orr.w	r2, r3, #2
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000aca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ada:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000adc:	4b8f      	ldr	r3, [pc, #572]	; (8000d1c <HAL_ADC_Init+0x2fc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a8f      	ldr	r2, [pc, #572]	; (8000d20 <HAL_ADC_Init+0x300>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	0c9a      	lsrs	r2, r3, #18
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000af2:	e002      	b.n	8000afa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f9      	bne.n	8000af4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b1c:	d110      	bne.n	8000b40 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f023 0312 	bic.w	r3, r3, #18
 8000b26:	f043 0210 	orr.w	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f040 80d6 	bne.w	8000cfa <HAL_ADC_Init+0x2da>
 8000b4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 80d1 	bne.w	8000cfa <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 80c9 	bne.w	8000cfa <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b70:	f043 0202 	orr.w	r2, r3, #2
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b78:	4b6a      	ldr	r3, [pc, #424]	; (8000d24 <HAL_ADC_Init+0x304>)
 8000b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d108      	bne.n	8000ba0 <HAL_ADC_Init+0x180>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d101      	bne.n	8000ba0 <HAL_ADC_Init+0x180>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_ADC_Init+0x182>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d11c      	bne.n	8000be0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d010      	beq.n	8000bce <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d107      	bne.n	8000bc8 <HAL_ADC_Init+0x1a8>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d101      	bne.n	8000bc8 <HAL_ADC_Init+0x1a8>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_ADC_Init+0x1aa>
 8000bc8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d108      	bne.n	8000be0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bde:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7e5b      	ldrb	r3, [r3, #25]
 8000be4:	035b      	lsls	r3, r3, #13
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bea:	2a01      	cmp	r2, #1
 8000bec:	d002      	beq.n	8000bf4 <HAL_ADC_Init+0x1d4>
 8000bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf2:	e000      	b.n	8000bf6 <HAL_ADC_Init+0x1d6>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c06:	4313      	orrs	r3, r2
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d11b      	bne.n	8000c4c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7e5b      	ldrb	r3, [r3, #25]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c20:	3b01      	subs	r3, #1
 8000c22:	045a      	lsls	r2, r3, #17
 8000c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8000c2e:	e00d      	b.n	8000c4c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c38:	f043 0220 	orr.w	r2, r3, #32
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d007      	beq.n	8000c64 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c60:	4313      	orrs	r3, r2
 8000c62:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d114      	bne.n	8000c9c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c80:	f023 0302 	bic.w	r3, r3, #2
 8000c84:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7e1b      	ldrb	r3, [r3, #24]
 8000c8a:	039a      	lsls	r2, r3, #14
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4313      	orrs	r3, r2
 8000c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <HAL_ADC_Init+0x308>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000cac:	430b      	orrs	r3, r1
 8000cae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f023 010f 	bic.w	r1, r3, #15
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd0:	e007      	b.n	8000ce2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 020f 	bic.w	r2, r2, #15
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf8:	e00a      	b.n	8000d10 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f023 0312 	bic.w	r3, r3, #18
 8000d02:	f043 0210 	orr.w	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3768      	adds	r7, #104	; 0x68
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	50000300 	.word	0x50000300
 8000d28:	fff0c007 	.word	0xfff0c007

08000d2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d17e      	bne.n	8000e48 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_ADC_Start_DMA+0x2c>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e07a      	b.n	8000e4e <HAL_ADC_Start_DMA+0x122>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 fb97 	bl	8001494 <ADC_Enable>
 8000d66:	4603      	mov	r3, r0
 8000d68:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d166      	bne.n	8000e3e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000da6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dba:	d106      	bne.n	8000dca <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f023 0206 	bic.w	r2, r3, #6
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000dc8:	e002      	b.n	8000dd0 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_ADC_Start_DMA+0x12c>)
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_ADC_Start_DMA+0x130>)
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <HAL_ADC_Start_DMA+0x134>)
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	221c      	movs	r2, #28
 8000df6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0210 	orr.w	r2, r2, #16
 8000e06:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3340      	adds	r3, #64	; 0x40
 8000e22:	4619      	mov	r1, r3
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f000 fd56 	bl	80018d8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0204 	orr.w	r2, r2, #4
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e006      	b.n	8000e4c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e46:	e001      	b.n	8000e4c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080013c9 	.word	0x080013c9
 8000e5c:	08001443 	.word	0x08001443
 8000e60:	0800145f 	.word	0x0800145f

08000e64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b09b      	sub	sp, #108	; 0x6c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_ADC_ConfigChannel+0x22>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e295      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x54e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f040 8279 	bne.w	8001390 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d81c      	bhi.n	8000ee0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	461a      	mov	r2, r3
 8000eba:	231f      	movs	r3, #31
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4019      	ands	r1, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ede:	e063      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d81e      	bhi.n	8000f26 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	3b1e      	subs	r3, #30
 8000efc:	221f      	movs	r2, #31
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4019      	ands	r1, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
 8000f24:	e040      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b0e      	cmp	r3, #14
 8000f2c:	d81e      	bhi.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	3b3c      	subs	r3, #60	; 0x3c
 8000f42:	221f      	movs	r2, #31
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4019      	ands	r1, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	3b3c      	subs	r3, #60	; 0x3c
 8000f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
 8000f6a:	e01d      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	3b5a      	subs	r3, #90	; 0x5a
 8000f80:	221f      	movs	r2, #31
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4019      	ands	r1, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	3b5a      	subs	r3, #90	; 0x5a
 8000f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 80e5 	bne.w	8001182 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d91c      	bls.n	8000ffa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6999      	ldr	r1, [r3, #24]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4019      	ands	r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6898      	ldr	r0, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b1e      	subs	r3, #30
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	e019      	b.n	800102e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6959      	ldr	r1, [r3, #20]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	2207      	movs	r2, #7
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	4019      	ands	r1, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6898      	ldr	r0, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	fa00 f203 	lsl.w	r2, r0, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	3b01      	subs	r3, #1
 800104c:	2b03      	cmp	r3, #3
 800104e:	d84f      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0x28c>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <HAL_ADC_ConfigChannel+0x1f4>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	08001069 	.word	0x08001069
 800105c:	0800108b 	.word	0x0800108b
 8001060:	080010ad 	.word	0x080010ad
 8001064:	080010cf 	.word	0x080010cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800106e:	4b97      	ldr	r3, [pc, #604]	; (80012cc <HAL_ADC_ConfigChannel+0x468>)
 8001070:	4013      	ands	r3, r2
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	0691      	lsls	r1, r2, #26
 8001078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800107a:	430a      	orrs	r2, r1
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001086:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001088:	e07b      	b.n	8001182 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001090:	4b8e      	ldr	r3, [pc, #568]	; (80012cc <HAL_ADC_ConfigChannel+0x468>)
 8001092:	4013      	ands	r3, r2
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	0691      	lsls	r1, r2, #26
 800109a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800109c:	430a      	orrs	r2, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010aa:	e06a      	b.n	8001182 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010b2:	4b86      	ldr	r3, [pc, #536]	; (80012cc <HAL_ADC_ConfigChannel+0x468>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	0691      	lsls	r1, r2, #26
 80010bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010be:	430a      	orrs	r2, r1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010cc:	e059      	b.n	8001182 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010d4:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <HAL_ADC_ConfigChannel+0x468>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	0691      	lsls	r1, r2, #26
 80010de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e0:	430a      	orrs	r2, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010ee:	e048      	b.n	8001182 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	429a      	cmp	r2, r3
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001112:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800111a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	069b      	lsls	r3, r3, #26
 8001124:	429a      	cmp	r2, r3
 8001126:	d107      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001136:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800113e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	069b      	lsls	r3, r3, #26
 8001148:	429a      	cmp	r2, r3
 800114a:	d107      	bne.n	800115c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800115a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	069b      	lsls	r3, r3, #26
 800116c:	429a      	cmp	r2, r3
 800116e:	d107      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800117e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001180:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x33e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x33e>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x340>
 80011a2:	2300      	movs	r3, #0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 80fe 	bne.w	80013a6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d00f      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43da      	mvns	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	400a      	ands	r2, r1
 80011cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80011d0:	e049      	b.n	8001266 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d91c      	bls.n	800122e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6999      	ldr	r1, [r3, #24]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1b      	subs	r3, #27
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	3b1b      	subs	r3, #27
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e01b      	b.n	8001266 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6959      	ldr	r1, [r3, #20]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	2207      	movs	r2, #7
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	4019      	ands	r1, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	6898      	ldr	r0, [r3, #8]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_ADC_ConfigChannel+0x46c>)
 8001268:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d105      	bne.n	800127e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001282:	2b11      	cmp	r3, #17
 8001284:	d105      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00a      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001296:	2b12      	cmp	r3, #18
 8001298:	f040 8085 	bne.w	80013a6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d17e      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10c      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x470>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x470>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e004      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x472>
 80012cc:	83fff000 	.word	0x83fff000
 80012d0:	50000300 	.word	0x50000300
 80012d4:	2300      	movs	r3, #0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d150      	bne.n	800137c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012da:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d010      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x498>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x498>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_ADC_ConfigChannel+0x49a>
 80012fc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d13c      	bne.n	800137c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d11d      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x4e2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001312:	d118      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_ADC_ConfigChannel+0x55c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_ADC_ConfigChannel+0x560>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001336:	e002      	b.n	800133e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3b01      	subs	r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001344:	e02e      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b11      	cmp	r3, #17
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x502>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001356:	d106      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001362:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001364:	e01e      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b12      	cmp	r3, #18
 800136c:	d11a      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800136e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001378:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800137a:	e013      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f043 0220 	orr.w	r2, r3, #32
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800138e:	e00a      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013a2:	e000      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013a4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	376c      	adds	r7, #108	; 0x6c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d126      	bne.n	8001430 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d115      	bne.n	8001428 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fadb 	bl	80009e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800142e:	e004      	b.n	800143a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff fad1 	bl	80009f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fac1 	bl	8000a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <ADC_Enable+0x2c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <ADC_Enable+0x2c>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <ADC_Enable+0x2e>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d143      	bne.n	800154e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <ADC_Enable+0xc4>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f043 0210 	orr.w	r2, r3, #16
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e02f      	b.n	8001550 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001500:	f7ff fa40 	bl	8000984 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001506:	e01b      	b.n	8001540 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001508:	f7ff fa3c 	bl	8000984 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d914      	bls.n	8001540 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d00d      	beq.n	8001540 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e007      	b.n	8001550 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b01      	cmp	r3, #1
 800154c:	d1dc      	bne.n	8001508 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	8000003f 	.word	0x8000003f

0800155c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <ADC_Disable+0x2c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <ADC_Disable+0x2c>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <ADC_Disable+0x2e>
 8001588:	2300      	movs	r3, #0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d047      	beq.n	800161e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030d 	and.w	r3, r3, #13
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10f      	bne.n	80015bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0202 	orr.w	r2, r2, #2
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2203      	movs	r2, #3
 80015b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015b4:	f7ff f9e6 	bl	8000984 <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015ba:	e029      	b.n	8001610 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e023      	b.n	8001620 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015d8:	f7ff f9d4 	bl	8000984 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d914      	bls.n	8001610 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10d      	bne.n	8001610 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0210 	orr.w	r2, r3, #16
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e007      	b.n	8001620 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d0dc      	beq.n	80015d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff3e 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff8e 	bl	800171c <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff31 	bl	800168c <__NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa2 	bl	8001784 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e037      	b.n	80018d0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001876:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800187a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f940 	bl	8001b38 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}  
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_DMA_Start_IT+0x20>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e04a      	b.n	800198e <HAL_DMA_Start_IT+0xb6>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001906:	2b01      	cmp	r3, #1
 8001908:	d13a      	bne.n	8001980 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f8d4 	bl	8001adc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 020e 	orr.w	r2, r2, #14
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e00f      	b.n	800196e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 020a 	orr.w	r2, r2, #10
 800195c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0204 	bic.w	r2, r2, #4
 800196c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e005      	b.n	800198c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800198c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x72>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01f      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0204 	bic.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	2104      	movs	r1, #4
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	e065      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02c      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xdc>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d027      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10b      	bne.n	8001a48 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020a 	bic.w	r2, r2, #10
 8001a3e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	2102      	movs	r1, #2
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d035      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a70:	e030      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2208      	movs	r2, #8
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d028      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020e 	bic.w	r2, r2, #14
 8001a9a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
    }
  }
}  
 8001ad2:	e7ff      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f202 	lsl.w	r2, r1, r2
 8001af8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d108      	bne.n	8001b1c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b1a:	e007      	b.n	8001b2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <DMA_CalcBaseAndBitshift+0x34>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <DMA_CalcBaseAndBitshift+0x38>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	009a      	lsls	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	bffdfff8 	.word	0xbffdfff8
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e14e      	b.n	8001e26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8140 	beq.w	8001e20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d005      	beq.n	8001bb8 <HAL_GPIO_Init+0x40>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d017      	beq.n	8001c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d123      	bne.n	8001caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 809a 	beq.w	8001e20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_GPIO_Init+0x2d8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1d8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_GPIO_Init+0x2dc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1d4>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6a:	4937      	ldr	r1, [pc, #220]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f aea9 	bne.w	8001b88 <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f001 b823 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 817d 	beq.w	80021c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ec8:	4bbc      	ldr	r3, [pc, #752]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00c      	beq.n	8001eee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed4:	4bb9      	ldr	r3, [pc, #740]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d15c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x10e>
 8001ee0:	4bb6      	ldr	r3, [pc, #728]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d155      	bne.n	8001f9a <HAL_RCC_OscConfig+0x10e>
 8001eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0x94>
 8001f1a:	4ba8      	ldr	r3, [pc, #672]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_OscConfig+0xc0>
 8001f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f48:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 811f 	beq.w	80021c0 <HAL_RCC_OscConfig+0x334>
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8116 	bne.w	80021c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f000 bfaf 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x12e>
 8001fac:	4b83      	ldr	r3, [pc, #524]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a82      	ldr	r2, [pc, #520]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e036      	b.n	8002028 <HAL_RCC_OscConfig+0x19c>
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x158>
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b79      	ldr	r3, [pc, #484]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a78      	ldr	r2, [pc, #480]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e021      	b.n	8002028 <HAL_RCC_OscConfig+0x19c>
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x184>
 8001ff6:	4b71      	ldr	r3, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a70      	ldr	r2, [pc, #448]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6d      	ldr	r2, [pc, #436]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x19c>
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f023 020f 	bic.w	r2, r3, #15
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	495f      	ldr	r1, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 800203e:	4313      	orrs	r3, r2
 8002040:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d059      	beq.n	8002106 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fc97 	bl	8000984 <HAL_GetTick>
 8002056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fc92 	bl	8000984 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d902      	bls.n	8002072 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	f000 bf43 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002076:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002086:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x218>
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e015      	b.n	80020d0 <HAL_RCC_OscConfig+0x244>
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f042 0220 	orr.w	r2, r2, #32
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f002 021f 	and.w	r2, r2, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ab      	beq.n	800205c <HAL_RCC_OscConfig+0x1d0>
 8002104:	e05d      	b.n	80021c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fc3d 	bl	8000984 <HAL_GetTick>
 800210a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fc38 	bl	8000984 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d902      	bls.n	8002126 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	f000 bee9 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800213a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x2cc>
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e015      	b.n	8002184 <HAL_RCC_OscConfig+0x2f8>
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002170:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002174:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002188:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800218c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002198:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ab      	bne.n	8002110 <HAL_RCC_OscConfig+0x284>
 80021b8:	e003      	b.n	80021c2 <HAL_RCC_OscConfig+0x336>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 817d 	beq.w	80024d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021d8:	4ba6      	ldr	r3, [pc, #664]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021e4:	4ba3      	ldr	r3, [pc, #652]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d172      	bne.n	80022d6 <HAL_RCC_OscConfig+0x44a>
 80021f0:	4ba0      	ldr	r3, [pc, #640]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d16c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x44a>
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800220e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_RCC_OscConfig+0x3a0>
 8002226:	4b93      	ldr	r3, [pc, #588]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e013      	b.n	8002254 <HAL_RCC_OscConfig+0x3c8>
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002244:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002250:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2202      	movs	r2, #2
 8002256:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800225a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800225e:	fa92 f2a2 	rbit	r2, r2
 8002262:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002266:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800226a:	fab2 f282 	clz	r2, r2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f042 0220 	orr.w	r2, r2, #32
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f002 021f 	and.w	r2, r2, #31
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f202 	lsl.w	r2, r1, r2
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCC_OscConfig+0x410>
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d002      	beq.n	800229c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f000 be2e 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	21f8      	movs	r1, #248	; 0xf8
 80022b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022ba:	fa91 f1a1 	rbit	r1, r1
 80022be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022c6:	fab1 f181 	clz	r1, r1
 80022ca:	b2c9      	uxtb	r1, r1
 80022cc:	408b      	lsls	r3, r1
 80022ce:	4969      	ldr	r1, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d4:	e0fd      	b.n	80024d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8088 	beq.w	80023f8 <HAL_RCC_OscConfig+0x56c>
 80022e8:	2301      	movs	r3, #1
 80022ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	461a      	mov	r2, r3
 8002310:	2301      	movs	r3, #1
 8002312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fb36 	bl	8000984 <HAL_GetTick>
 8002318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe fb31 	bl	8000984 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	f000 bde2 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002346:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d102      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d8>
 800235e:	4b45      	ldr	r3, [pc, #276]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e013      	b.n	800238c <HAL_RCC_OscConfig+0x500>
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800237c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2202      	movs	r2, #2
 800238e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002392:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002396:	fa92 f2a2 	rbit	r2, r2
 800239a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800239e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023a2:	fab2 f282 	clz	r2, r2
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f042 0220 	orr.w	r2, r2, #32
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f002 021f 	and.w	r2, r2, #31
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0af      	beq.n	800231e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	21f8      	movs	r1, #248	; 0xf8
 80023d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023dc:	fa91 f1a1 	rbit	r1, r1
 80023e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023e8:	fab1 f181 	clz	r1, r1
 80023ec:	b2c9      	uxtb	r1, r1
 80023ee:	408b      	lsls	r3, r1
 80023f0:	4920      	ldr	r1, [pc, #128]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e06c      	b.n	80024d2 <HAL_RCC_OscConfig+0x646>
 80023f8:	2301      	movs	r3, #1
 80023fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800240a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	461a      	mov	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe faae 	bl	8000984 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe faa9 	bl	8000984 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	f000 bd5a 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d104      	bne.n	8002478 <HAL_RCC_OscConfig+0x5ec>
 800246e:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCC_OscConfig+0x5e8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x614>
 8002474:	40021000 	.word	0x40021000
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002490:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800249c:	4bc8      	ldr	r3, [pc, #800]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	2202      	movs	r2, #2
 80024a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ad      	bne.n	800242e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8110 	beq.w	8002708 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d079      	beq.n	80025ec <HAL_RCC_OscConfig+0x760>
 80024f8:	2301      	movs	r3, #1
 80024fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800250a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	4bab      	ldr	r3, [pc, #684]	; (80027c4 <HAL_RCC_OscConfig+0x938>)
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	2301      	movs	r3, #1
 8002520:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fa2f 	bl	8000984 <HAL_GetTick>
 8002526:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fa2a 	bl	8000984 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d902      	bls.n	8002542 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	f000 bcdb 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800255c:	2202      	movs	r2, #2
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002580:	2202      	movs	r2, #2
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800259a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259c:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 800259e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025a8:	2102      	movs	r1, #2
 80025aa:	6019      	str	r1, [r3, #0]
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f1a3 	rbit	r1, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025c2:	6019      	str	r1, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0a0      	beq.n	800252c <HAL_RCC_OscConfig+0x6a0>
 80025ea:	e08d      	b.n	8002708 <HAL_RCC_OscConfig+0x87c>
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800260e:	601a      	str	r2, [r3, #0]
  return result;
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002618:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x938>)
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	461a      	mov	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fe f9a9 	bl	8000984 <HAL_GetTick>
 8002632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe f9a4 	bl	8000984 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d902      	bls.n	800264e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	f000 bc55 	b.w	8002ef8 <HAL_RCC_OscConfig+0x106c>
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002656:	2202      	movs	r2, #2
 8002658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800267a:	2202      	movs	r2, #2
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 80026bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026c6:	2102      	movs	r1, #2
 80026c8:	6019      	str	r1, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f1a3 	rbit	r1, r3
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026e0:	6019      	str	r1, [r3, #0]
  return result;
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d197      	bne.n	8002638 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 81a1 	beq.w	8002a60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	61d3      	str	r3, [r2, #28]
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002756:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_RCC_OscConfig+0x93c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11a      	bne.n	80027a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x93c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_RCC_OscConfig+0x93c>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe f905 	bl	8000984 <HAL_GetTick>
 800277a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	e009      	b.n	8002794 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe f900 	bl	8000984 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e3b1      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCC_OscConfig+0x93c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10d      	bne.n	80027cc <HAL_RCC_OscConfig+0x940>
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a02      	ldr	r2, [pc, #8]	; (80027c0 <HAL_RCC_OscConfig+0x934>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e03c      	b.n	8002838 <HAL_RCC_OscConfig+0x9ac>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	10908120 	.word	0x10908120
 80027c8:	40007000 	.word	0x40007000
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x96a>
 80027dc:	4bc1      	ldr	r3, [pc, #772]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4ac0      	ldr	r2, [pc, #768]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6213      	str	r3, [r2, #32]
 80027e8:	4bbe      	ldr	r3, [pc, #760]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4abd      	ldr	r2, [pc, #756]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	e020      	b.n	8002838 <HAL_RCC_OscConfig+0x9ac>
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b05      	cmp	r3, #5
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x994>
 8002806:	4bb7      	ldr	r3, [pc, #732]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4ab6      	ldr	r2, [pc, #728]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4bb4      	ldr	r3, [pc, #720]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4ab3      	ldr	r2, [pc, #716]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0x9ac>
 8002820:	4bb0      	ldr	r3, [pc, #704]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4aaf      	ldr	r2, [pc, #700]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	4bad      	ldr	r3, [pc, #692]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4aac      	ldr	r2, [pc, #688]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002832:	f023 0304 	bic.w	r3, r3, #4
 8002836:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8081 	beq.w	800294c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe f89b 	bl	8000984 <HAL_GetTick>
 800284e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe f896 	bl	8000984 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e345      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002874:	2202      	movs	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002898:	2202      	movs	r2, #2
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f2a3 	rbit	r2, r3
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028b2:	601a      	str	r2, [r3, #0]
  return result;
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_OscConfig+0xa4c>
 80028d2:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	e013      	b.n	8002900 <HAL_RCC_OscConfig+0xa74>
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028e0:	2202      	movs	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002904:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002908:	2102      	movs	r1, #2
 800290a:	6011      	str	r1, [r2, #0]
 800290c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002910:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	fa92 f1a2 	rbit	r1, r2
 800291a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002922:	6011      	str	r1, [r2, #0]
  return result;
 8002924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002928:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d084      	beq.n	8002854 <HAL_RCC_OscConfig+0x9c8>
 800294a:	e07f      	b.n	8002a4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe f81a 	bl	8000984 <HAL_GetTick>
 8002950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00b      	b.n	800296e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe f815 	bl	8000984 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e2c4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002976:	2202      	movs	r2, #2
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0xb4e>
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	e013      	b.n	8002a02 <HAL_RCC_OscConfig+0xb76>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029e2:	2202      	movs	r2, #2
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fa92 f1a2 	rbit	r1, r2
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a24:	6011      	str	r1, [r2, #0]
  return result;
 8002a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d184      	bne.n	8002956 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8242 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_RCC_OscConfig+0xc58>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	f000 8213 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f040 8162 	bne.w	8002d56 <HAL_RCC_OscConfig+0xeca>
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ab6:	601a      	str	r2, [r3, #0]
  return result;
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ac0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fd ff54 	bl	8000984 <HAL_GetTick>
 8002adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_OscConfig+0xc70>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fd ff4c 	bl	8000984 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1fd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b20:	601a      	str	r2, [r3, #0]
  return result;
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d102      	bne.n	8002b46 <HAL_RCC_OscConfig+0xcba>
 8002b40:	4bb0      	ldr	r3, [pc, #704]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	e027      	b.n	8002b96 <HAL_RCC_OscConfig+0xd0a>
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	4b9c      	ldr	r3, [pc, #624]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba2:	6011      	str	r1, [r2, #0]
 8002ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	fa92 f1a2 	rbit	r1, r2
 8002bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bba:	6011      	str	r1, [r2, #0]
  return result;
 8002bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	fab2 f282 	clz	r2, r2
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	f042 0220 	orr.w	r2, r2, #32
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f002 021f 	and.w	r2, r2, #31
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d182      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	497f      	ldr	r1, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd fe98 	bl	8000984 <HAL_GetTick>
 8002c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fd fe93 	bl	8000984 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e144      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c92:	601a      	str	r2, [r3, #0]
  return result;
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe2c>
 8002cb2:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e027      	b.n	8002d08 <HAL_RCC_OscConfig+0xe7c>
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	fa92 f1a2 	rbit	r1, r2
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d2c:	6011      	str	r1, [r2, #0]
  return result;
 8002d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fab2 f282 	clz	r2, r2
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f042 0220 	orr.w	r2, r2, #32
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f002 021f 	and.w	r2, r2, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d082      	beq.n	8002c5a <HAL_RCC_OscConfig+0xdce>
 8002d54:	e0cf      	b.n	8002ef6 <HAL_RCC_OscConfig+0x106a>
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fdf2 	bl	8000984 <HAL_GetTick>
 8002da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	e009      	b.n	8002dba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fd fded 	bl	8000984 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e09e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f2a3 	rbit	r2, r3
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dde:	601a      	str	r2, [r3, #0]
  return result;
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002de8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d104      	bne.n	8002e08 <HAL_RCC_OscConfig+0xf7c>
 8002dfe:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <HAL_RCC_OscConfig+0xf78>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e029      	b.n	8002e58 <HAL_RCC_OscConfig+0xfcc>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x1078>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e64:	6011      	str	r1, [r2, #0]
 8002e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	fa92 f1a2 	rbit	r1, r2
 8002e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e7c:	6011      	str	r1, [r2, #0]
  return result;
 8002e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f002 021f 	and.w	r2, r2, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d180      	bne.n	8002da6 <HAL_RCC_OscConfig+0xf1a>
 8002ea4:	e027      	b.n	8002ef6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e01e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_OscConfig+0x1078>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ec6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b09e      	sub	sp, #120	; 0x78
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e162      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b90      	ldr	r3, [pc, #576]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b8d      	ldr	r3, [pc, #564]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	498b      	ldr	r1, [pc, #556]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b89      	ldr	r3, [pc, #548]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e14a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	497f      	ldr	r1, [pc, #508]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80dc 	beq.w	8003134 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d13c      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xf6>
 8002f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_ClockConfig+0xa6>
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e00f      	b.n	8002fce <HAL_RCC_ClockConfig+0xc6>
 8002fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	667b      	str	r3, [r7, #100]	; 0x64
 8002fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d17b      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0f3      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d13c      	bne.n	8003080 <HAL_RCC_ClockConfig+0x178>
 8003006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_RCC_ClockConfig+0x128>
 800302a:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	e00f      	b.n	8003050 <HAL_RCC_ClockConfig+0x148>
 8003030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003034:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
 800303e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
 8003044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003054:	63ba      	str	r2, [r7, #56]	; 0x38
 8003056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003058:	fa92 f2a2 	rbit	r2, r2
 800305c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800305e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d13a      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b2      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
 8003080:	2302      	movs	r3, #2
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e00d      	b.n	80030c4 <HAL_RCC_ClockConfig+0x1bc>
 80030a8:	2302      	movs	r3, #2
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	2302      	movs	r3, #2
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2202      	movs	r2, #2
 80030c6:	61ba      	str	r2, [r7, #24]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	fa92 f2a2 	rbit	r2, r2
 80030ce:	617a      	str	r2, [r7, #20]
  return result;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f042 0220 	orr.w	r2, r2, #32
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f002 021f 	and.w	r2, r2, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e079      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	491a      	ldr	r1, [pc, #104]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fd fc3e 	bl	8000984 <HAL_GetTick>
 8003108:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fd fc3a 	bl	8000984 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e061      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_ClockConfig+0x260>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d214      	bcs.n	800316c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4906      	ldr	r1, [pc, #24]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_ClockConfig+0x25c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e040      	b.n	80031e6 <HAL_RCC_ClockConfig+0x2de>
 8003164:	40022000 	.word	0x40022000
 8003168:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_ClockConfig+0x2e8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	491a      	ldr	r1, [pc, #104]	; (80031f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HAL_RCC_ClockConfig+0x2e8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031aa:	f000 f829 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031ae:	4601      	mov	r1, r0
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_RCC_ClockConfig+0x2e8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	22f0      	movs	r2, #240	; 0xf0
 80031ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	fa92 f2a2 	rbit	r2, r2
 80031c2:	60fa      	str	r2, [r7, #12]
  return result;
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	fab2 f282 	clz	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	40d3      	lsrs	r3, r2
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x2ec>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	fa21 f303 	lsr.w	r3, r1, r3
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <HAL_RCC_ClockConfig+0x2f0>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_RCC_ClockConfig+0x2f4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fb8c 	bl	80008fc <HAL_InitTick>
  
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3778      	adds	r7, #120	; 0x78
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08004848 	.word	0x08004848
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b08b      	sub	sp, #44	; 0x2c
 8003204:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x30>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x36>
 800322e:	e03c      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003232:	623b      	str	r3, [r7, #32]
      break;
 8003234:	e03c      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800323c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003240:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	fa92 f2a2 	rbit	r2, r2
 8003248:	607a      	str	r2, [r7, #4]
  return result;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	40d3      	lsrs	r3, r2
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	220f      	movs	r2, #15
 8003264:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	fa92 f2a2 	rbit	r2, r2
 800326c:	60fa      	str	r2, [r7, #12]
  return result;
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	40d3      	lsrs	r3, r2
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
 8003298:	e004      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	623b      	str	r3, [r7, #32]
      break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032ac:	623b      	str	r3, [r7, #32]
      break;
 80032ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b0:	6a3b      	ldr	r3, [r7, #32]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	372c      	adds	r7, #44	; 0x2c
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	08004860 	.word	0x08004860
 80032cc:	08004870 	.word	0x08004870
 80032d0:	003d0900 	.word	0x003d0900

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000000 	.word	0x20000000

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032f2:	f7ff ffef 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003300:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	603a      	str	r2, [r7, #0]
  return result;
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	40d3      	lsrs	r3, r2
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_RCC_GetPCLK1Freq+0x40>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	08004858 	.word	0x08004858

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003336:	f7ff ffcd 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800333a:	4601      	mov	r1, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003344:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003348:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	fa92 f2a2 	rbit	r2, r2
 8003350:	603a      	str	r2, [r7, #0]
  return result;
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	fab2 f282 	clz	r2, r2
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	40d3      	lsrs	r3, r2
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x40>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	08004858 	.word	0x08004858

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80d4 	beq.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003398:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4a4a      	ldr	r2, [pc, #296]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	61d3      	str	r3, [r2, #28]
 80033b0:	4b48      	ldr	r3, [pc, #288]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fd fad3 	bl	8000984 <HAL_GetTick>
 80033de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fd facf 	bl	8000984 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	; 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e14b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8084 	beq.w	800351a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d07c      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003420:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	461a      	mov	r2, r3
 800344a:	2301      	movs	r3, #1
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	461a      	mov	r2, r3
 800346e:	2300      	movs	r3, #0
 8003470:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003476:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04b      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fd fa7f 	bl	8000984 <HAL_GetTick>
 8003486:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fa7b 	bl	8000984 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0f5      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80034a0:	2302      	movs	r3, #2
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	2302      	movs	r3, #2
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	61fb      	str	r3, [r7, #28]
  return result;
 80034b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d108      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034ce:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	e00d      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40007000 	.word	0x40007000
 80034dc:	10908100 	.word	0x10908100
 80034e0:	2302      	movs	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	4b69      	ldr	r3, [pc, #420]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2202      	movs	r2, #2
 80034f2:	613a      	str	r2, [r7, #16]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	60fa      	str	r2, [r7, #12]
  return result;
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0b7      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	495b      	ldr	r1, [pc, #364]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003528:	4313      	orrs	r3, r2
 800352a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800352c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4a56      	ldr	r2, [pc, #344]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800354c:	4b51      	ldr	r3, [pc, #324]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f023 0203 	bic.w	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494e      	ldr	r1, [pc, #312]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800355a:	4313      	orrs	r3, r2
 800355c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f023 0210 	bic.w	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4947      	ldr	r1, [pc, #284]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003578:	4313      	orrs	r3, r2
 800357a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	493f      	ldr	r1, [pc, #252]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f023 0220 	bic.w	r2, r3, #32
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	4938      	ldr	r1, [pc, #224]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c4:	4b33      	ldr	r3, [pc, #204]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4930      	ldr	r1, [pc, #192]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4929      	ldr	r1, [pc, #164]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003600:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4921      	ldr	r1, [pc, #132]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800360e:	4313      	orrs	r3, r2
 8003610:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	491a      	ldr	r1, [pc, #104]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800362c:	4313      	orrs	r3, r2
 800362e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	4912      	ldr	r1, [pc, #72]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800364a:	4313      	orrs	r3, r2
 800364c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003668:	4313      	orrs	r3, r2
 800366a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003686:	4313      	orrs	r3, r2
 8003688:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3748      	adds	r7, #72	; 0x48
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f820 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8b6 	bl	8003848 <UART_SetConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e022      	b.n	800372c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9e0 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fa67 	bl	8003bf8 <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	2b20      	cmp	r3, #32
 800374a:	d178      	bne.n	800383e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x24>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e071      	b.n	8003840 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	; 0x21
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd f90b 	bl	8000984 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x68>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a4:	e030      	b.n	8003808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fac9 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03c      	b.n	8003840 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	b292      	uxth	r2, r2
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3302      	adds	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e008      	b.n	80037f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b292      	uxth	r2, r2
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1c8      	bne.n	80037a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa92 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e005      	b.n	8003840 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <UART_SetConfig+0x254>)
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a78      	ldr	r2, [pc, #480]	; (8003aa0 <UART_SetConfig+0x258>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d120      	bne.n	8003906 <UART_SetConfig+0xbe>
 80038c4:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <UART_SetConfig+0x25c>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d817      	bhi.n	8003900 <UART_SetConfig+0xb8>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0x90>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f5 	.word	0x080038f5
 80038e0:	080038fb 	.word	0x080038fb
 80038e4:	080038ef 	.word	0x080038ef
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e01d      	b.n	800392a <UART_SetConfig+0xe2>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e01a      	b.n	800392a <UART_SetConfig+0xe2>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e017      	b.n	800392a <UART_SetConfig+0xe2>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e014      	b.n	800392a <UART_SetConfig+0xe2>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e011      	b.n	800392a <UART_SetConfig+0xe2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <UART_SetConfig+0x260>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d102      	bne.n	8003916 <UART_SetConfig+0xce>
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e009      	b.n	800392a <UART_SetConfig+0xe2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a64      	ldr	r2, [pc, #400]	; (8003aac <UART_SetConfig+0x264>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <UART_SetConfig+0xde>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e001      	b.n	800392a <UART_SetConfig+0xe2>
 8003926:	2310      	movs	r3, #16
 8003928:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003932:	d15a      	bne.n	80039ea <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003934:	7ffb      	ldrb	r3, [r7, #31]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d827      	bhi.n	800398a <UART_SetConfig+0x142>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0xf8>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7ff fcc2 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8003968:	61b8      	str	r0, [r7, #24]
        break;
 800396a:	e013      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fce0 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e00f      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <UART_SetConfig+0x268>)
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e00c      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff fc41 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800397e:	61b8      	str	r0, [r7, #24]
        break;
 8003980:	e008      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	61bb      	str	r3, [r7, #24]
        break;
 8003988:	e004      	b.n	8003994 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	77bb      	strb	r3, [r7, #30]
        break;
 8003992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d074      	beq.n	8003a84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	005a      	lsls	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d916      	bls.n	80039e4 <UART_SetConfig+0x19c>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d212      	bcs.n	80039e4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f023 030f 	bic.w	r3, r3, #15
 80039c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	89fa      	ldrh	r2, [r7, #14]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	e04f      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	77bb      	strb	r3, [r7, #30]
 80039e8:	e04c      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ea:	7ffb      	ldrb	r3, [r7, #31]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d828      	bhi.n	8003a42 <UART_SetConfig+0x1fa>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x1b0>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff fc66 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7ff fc84 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <UART_SetConfig+0x268>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7ff fbe5 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	085a      	lsrs	r2, r3, #1
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b0f      	cmp	r3, #15
 8003a6a:	d909      	bls.n	8003a80 <UART_SetConfig+0x238>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d205      	bcs.n	8003a80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	e001      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	efff69f3 	.word	0xefff69f3
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b098      	sub	sp, #96	; 0x60
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fc febc 	bl	8000984 <HAL_GetTick>
 8003c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d12e      	bne.n	8003c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f88c 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d021      	beq.n	8003c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
 8003c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e6      	bne.n	8003c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e062      	b.n	8003d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d149      	bne.n	8003d1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f856 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03c      	beq.n	8003d1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	617b      	str	r3, [r7, #20]
   return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e011      	b.n	8003d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3758      	adds	r7, #88	; 0x58
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	e049      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d045      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fc fe0f 	bl	8000984 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e048      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d031      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d110      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f838 	bl	8003e16 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2208      	movs	r2, #8
 8003daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e029      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc8:	d111      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f81e 	bl	8003e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00f      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d0a6      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b095      	sub	sp, #84	; 0x54
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d118      	bne.n	8003ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f023 0310 	bic.w	r3, r3, #16
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ed2:	bf00      	nop
 8003ed4:	3754      	adds	r7, #84	; 0x54
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <siprintf>:
 8003ee0:	b40e      	push	{r1, r2, r3}
 8003ee2:	b500      	push	{lr}
 8003ee4:	b09c      	sub	sp, #112	; 0x70
 8003ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee8:	9002      	str	r0, [sp, #8]
 8003eea:	9006      	str	r0, [sp, #24]
 8003eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ef0:	4809      	ldr	r0, [pc, #36]	; (8003f18 <siprintf+0x38>)
 8003ef2:	9107      	str	r1, [sp, #28]
 8003ef4:	9104      	str	r1, [sp, #16]
 8003ef6:	4909      	ldr	r1, [pc, #36]	; (8003f1c <siprintf+0x3c>)
 8003ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003efc:	9105      	str	r1, [sp, #20]
 8003efe:	6800      	ldr	r0, [r0, #0]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	a902      	add	r1, sp, #8
 8003f04:	f000 f992 	bl	800422c <_svfiprintf_r>
 8003f08:	9b02      	ldr	r3, [sp, #8]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	b01c      	add	sp, #112	; 0x70
 8003f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f14:	b003      	add	sp, #12
 8003f16:	4770      	bx	lr
 8003f18:	20000058 	.word	0x20000058
 8003f1c:	ffff0208 	.word	0xffff0208

08003f20 <memset>:
 8003f20:	4402      	add	r2, r0
 8003f22:	4603      	mov	r3, r0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d100      	bne.n	8003f2a <memset+0xa>
 8003f28:	4770      	bx	lr
 8003f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2e:	e7f9      	b.n	8003f24 <memset+0x4>

08003f30 <__errno>:
 8003f30:	4b01      	ldr	r3, [pc, #4]	; (8003f38 <__errno+0x8>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000058 	.word	0x20000058

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4d0d      	ldr	r5, [pc, #52]	; (8003f74 <__libc_init_array+0x38>)
 8003f40:	4c0d      	ldr	r4, [pc, #52]	; (8003f78 <__libc_init_array+0x3c>)
 8003f42:	1b64      	subs	r4, r4, r5
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	2600      	movs	r6, #0
 8003f48:	42a6      	cmp	r6, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	4d0b      	ldr	r5, [pc, #44]	; (8003f7c <__libc_init_array+0x40>)
 8003f4e:	4c0c      	ldr	r4, [pc, #48]	; (8003f80 <__libc_init_array+0x44>)
 8003f50:	f000 fc6a 	bl	8004828 <_init>
 8003f54:	1b64      	subs	r4, r4, r5
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	2600      	movs	r6, #0
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f64:	4798      	blx	r3
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6e:	4798      	blx	r3
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	080048b4 	.word	0x080048b4
 8003f78:	080048b4 	.word	0x080048b4
 8003f7c:	080048b4 	.word	0x080048b4
 8003f80:	080048b8 	.word	0x080048b8

08003f84 <__retarget_lock_acquire_recursive>:
 8003f84:	4770      	bx	lr

08003f86 <__retarget_lock_release_recursive>:
 8003f86:	4770      	bx	lr

08003f88 <_free_r>:
 8003f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d044      	beq.n	8004018 <_free_r+0x90>
 8003f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f92:	9001      	str	r0, [sp, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f1a1 0404 	sub.w	r4, r1, #4
 8003f9a:	bfb8      	it	lt
 8003f9c:	18e4      	addlt	r4, r4, r3
 8003f9e:	f000 f8df 	bl	8004160 <__malloc_lock>
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <_free_r+0x94>)
 8003fa4:	9801      	ldr	r0, [sp, #4]
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	b933      	cbnz	r3, 8003fb8 <_free_r+0x30>
 8003faa:	6063      	str	r3, [r4, #4]
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	b003      	add	sp, #12
 8003fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fb4:	f000 b8da 	b.w	800416c <__malloc_unlock>
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	d908      	bls.n	8003fce <_free_r+0x46>
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	1961      	adds	r1, r4, r5
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	bf01      	itttt	eq
 8003fc4:	6819      	ldreq	r1, [r3, #0]
 8003fc6:	685b      	ldreq	r3, [r3, #4]
 8003fc8:	1949      	addeq	r1, r1, r5
 8003fca:	6021      	streq	r1, [r4, #0]
 8003fcc:	e7ed      	b.n	8003faa <_free_r+0x22>
 8003fce:	461a      	mov	r2, r3
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b10b      	cbz	r3, 8003fd8 <_free_r+0x50>
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	d9fa      	bls.n	8003fce <_free_r+0x46>
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	1855      	adds	r5, r2, r1
 8003fdc:	42a5      	cmp	r5, r4
 8003fde:	d10b      	bne.n	8003ff8 <_free_r+0x70>
 8003fe0:	6824      	ldr	r4, [r4, #0]
 8003fe2:	4421      	add	r1, r4
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	d1e0      	bne.n	8003fae <_free_r+0x26>
 8003fec:	681c      	ldr	r4, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6053      	str	r3, [r2, #4]
 8003ff2:	440c      	add	r4, r1
 8003ff4:	6014      	str	r4, [r2, #0]
 8003ff6:	e7da      	b.n	8003fae <_free_r+0x26>
 8003ff8:	d902      	bls.n	8004000 <_free_r+0x78>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6003      	str	r3, [r0, #0]
 8003ffe:	e7d6      	b.n	8003fae <_free_r+0x26>
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	1961      	adds	r1, r4, r5
 8004004:	428b      	cmp	r3, r1
 8004006:	bf04      	itt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	bf04      	itt	eq
 8004010:	1949      	addeq	r1, r1, r5
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	6054      	str	r4, [r2, #4]
 8004016:	e7ca      	b.n	8003fae <_free_r+0x26>
 8004018:	b003      	add	sp, #12
 800401a:	bd30      	pop	{r4, r5, pc}
 800401c:	200002e0 	.word	0x200002e0

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0e      	ldr	r6, [pc, #56]	; (800405c <sbrk_aligned+0x3c>)
 8004024:	460c      	mov	r4, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	4605      	mov	r5, r0
 800402a:	b911      	cbnz	r1, 8004032 <sbrk_aligned+0x12>
 800402c:	f000 fba6 	bl	800477c <_sbrk_r>
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 fba1 	bl	800477c <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d00a      	beq.n	8004054 <sbrk_aligned+0x34>
 800403e:	1cc4      	adds	r4, r0, #3
 8004040:	f024 0403 	bic.w	r4, r4, #3
 8004044:	42a0      	cmp	r0, r4
 8004046:	d007      	beq.n	8004058 <sbrk_aligned+0x38>
 8004048:	1a21      	subs	r1, r4, r0
 800404a:	4628      	mov	r0, r5
 800404c:	f000 fb96 	bl	800477c <_sbrk_r>
 8004050:	3001      	adds	r0, #1
 8004052:	d101      	bne.n	8004058 <sbrk_aligned+0x38>
 8004054:	f04f 34ff 	mov.w	r4, #4294967295
 8004058:	4620      	mov	r0, r4
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	200002e4 	.word	0x200002e4

08004060 <_malloc_r>:
 8004060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004064:	1ccd      	adds	r5, r1, #3
 8004066:	f025 0503 	bic.w	r5, r5, #3
 800406a:	3508      	adds	r5, #8
 800406c:	2d0c      	cmp	r5, #12
 800406e:	bf38      	it	cc
 8004070:	250c      	movcc	r5, #12
 8004072:	2d00      	cmp	r5, #0
 8004074:	4607      	mov	r7, r0
 8004076:	db01      	blt.n	800407c <_malloc_r+0x1c>
 8004078:	42a9      	cmp	r1, r5
 800407a:	d905      	bls.n	8004088 <_malloc_r+0x28>
 800407c:	230c      	movs	r3, #12
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	2600      	movs	r6, #0
 8004082:	4630      	mov	r0, r6
 8004084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004088:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800415c <_malloc_r+0xfc>
 800408c:	f000 f868 	bl	8004160 <__malloc_lock>
 8004090:	f8d8 3000 	ldr.w	r3, [r8]
 8004094:	461c      	mov	r4, r3
 8004096:	bb5c      	cbnz	r4, 80040f0 <_malloc_r+0x90>
 8004098:	4629      	mov	r1, r5
 800409a:	4638      	mov	r0, r7
 800409c:	f7ff ffc0 	bl	8004020 <sbrk_aligned>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	4604      	mov	r4, r0
 80040a4:	d155      	bne.n	8004152 <_malloc_r+0xf2>
 80040a6:	f8d8 4000 	ldr.w	r4, [r8]
 80040aa:	4626      	mov	r6, r4
 80040ac:	2e00      	cmp	r6, #0
 80040ae:	d145      	bne.n	800413c <_malloc_r+0xdc>
 80040b0:	2c00      	cmp	r4, #0
 80040b2:	d048      	beq.n	8004146 <_malloc_r+0xe6>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	4631      	mov	r1, r6
 80040b8:	4638      	mov	r0, r7
 80040ba:	eb04 0903 	add.w	r9, r4, r3
 80040be:	f000 fb5d 	bl	800477c <_sbrk_r>
 80040c2:	4581      	cmp	r9, r0
 80040c4:	d13f      	bne.n	8004146 <_malloc_r+0xe6>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	1a6d      	subs	r5, r5, r1
 80040ca:	4629      	mov	r1, r5
 80040cc:	4638      	mov	r0, r7
 80040ce:	f7ff ffa7 	bl	8004020 <sbrk_aligned>
 80040d2:	3001      	adds	r0, #1
 80040d4:	d037      	beq.n	8004146 <_malloc_r+0xe6>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	442b      	add	r3, r5
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	f8d8 3000 	ldr.w	r3, [r8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d038      	beq.n	8004156 <_malloc_r+0xf6>
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	42a2      	cmp	r2, r4
 80040e8:	d12b      	bne.n	8004142 <_malloc_r+0xe2>
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	e00f      	b.n	8004110 <_malloc_r+0xb0>
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	1b52      	subs	r2, r2, r5
 80040f4:	d41f      	bmi.n	8004136 <_malloc_r+0xd6>
 80040f6:	2a0b      	cmp	r2, #11
 80040f8:	d917      	bls.n	800412a <_malloc_r+0xca>
 80040fa:	1961      	adds	r1, r4, r5
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	6025      	str	r5, [r4, #0]
 8004100:	bf18      	it	ne
 8004102:	6059      	strne	r1, [r3, #4]
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	bf08      	it	eq
 8004108:	f8c8 1000 	streq.w	r1, [r8]
 800410c:	5162      	str	r2, [r4, r5]
 800410e:	604b      	str	r3, [r1, #4]
 8004110:	4638      	mov	r0, r7
 8004112:	f104 060b 	add.w	r6, r4, #11
 8004116:	f000 f829 	bl	800416c <__malloc_unlock>
 800411a:	f026 0607 	bic.w	r6, r6, #7
 800411e:	1d23      	adds	r3, r4, #4
 8004120:	1af2      	subs	r2, r6, r3
 8004122:	d0ae      	beq.n	8004082 <_malloc_r+0x22>
 8004124:	1b9b      	subs	r3, r3, r6
 8004126:	50a3      	str	r3, [r4, r2]
 8004128:	e7ab      	b.n	8004082 <_malloc_r+0x22>
 800412a:	42a3      	cmp	r3, r4
 800412c:	6862      	ldr	r2, [r4, #4]
 800412e:	d1dd      	bne.n	80040ec <_malloc_r+0x8c>
 8004130:	f8c8 2000 	str.w	r2, [r8]
 8004134:	e7ec      	b.n	8004110 <_malloc_r+0xb0>
 8004136:	4623      	mov	r3, r4
 8004138:	6864      	ldr	r4, [r4, #4]
 800413a:	e7ac      	b.n	8004096 <_malloc_r+0x36>
 800413c:	4634      	mov	r4, r6
 800413e:	6876      	ldr	r6, [r6, #4]
 8004140:	e7b4      	b.n	80040ac <_malloc_r+0x4c>
 8004142:	4613      	mov	r3, r2
 8004144:	e7cc      	b.n	80040e0 <_malloc_r+0x80>
 8004146:	230c      	movs	r3, #12
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4638      	mov	r0, r7
 800414c:	f000 f80e 	bl	800416c <__malloc_unlock>
 8004150:	e797      	b.n	8004082 <_malloc_r+0x22>
 8004152:	6025      	str	r5, [r4, #0]
 8004154:	e7dc      	b.n	8004110 <_malloc_r+0xb0>
 8004156:	605b      	str	r3, [r3, #4]
 8004158:	deff      	udf	#255	; 0xff
 800415a:	bf00      	nop
 800415c:	200002e0 	.word	0x200002e0

08004160 <__malloc_lock>:
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <__malloc_lock+0x8>)
 8004162:	f7ff bf0f 	b.w	8003f84 <__retarget_lock_acquire_recursive>
 8004166:	bf00      	nop
 8004168:	200002dc 	.word	0x200002dc

0800416c <__malloc_unlock>:
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <__malloc_unlock+0x8>)
 800416e:	f7ff bf0a 	b.w	8003f86 <__retarget_lock_release_recursive>
 8004172:	bf00      	nop
 8004174:	200002dc 	.word	0x200002dc

08004178 <__ssputs_r>:
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	688e      	ldr	r6, [r1, #8]
 800417e:	461f      	mov	r7, r3
 8004180:	42be      	cmp	r6, r7
 8004182:	680b      	ldr	r3, [r1, #0]
 8004184:	4682      	mov	sl, r0
 8004186:	460c      	mov	r4, r1
 8004188:	4690      	mov	r8, r2
 800418a:	d82c      	bhi.n	80041e6 <__ssputs_r+0x6e>
 800418c:	898a      	ldrh	r2, [r1, #12]
 800418e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004192:	d026      	beq.n	80041e2 <__ssputs_r+0x6a>
 8004194:	6965      	ldr	r5, [r4, #20]
 8004196:	6909      	ldr	r1, [r1, #16]
 8004198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800419c:	eba3 0901 	sub.w	r9, r3, r1
 80041a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041a4:	1c7b      	adds	r3, r7, #1
 80041a6:	444b      	add	r3, r9
 80041a8:	106d      	asrs	r5, r5, #1
 80041aa:	429d      	cmp	r5, r3
 80041ac:	bf38      	it	cc
 80041ae:	461d      	movcc	r5, r3
 80041b0:	0553      	lsls	r3, r2, #21
 80041b2:	d527      	bpl.n	8004204 <__ssputs_r+0x8c>
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7ff ff53 	bl	8004060 <_malloc_r>
 80041ba:	4606      	mov	r6, r0
 80041bc:	b360      	cbz	r0, 8004218 <__ssputs_r+0xa0>
 80041be:	6921      	ldr	r1, [r4, #16]
 80041c0:	464a      	mov	r2, r9
 80041c2:	f000 faeb 	bl	800479c <memcpy>
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	6126      	str	r6, [r4, #16]
 80041d4:	6165      	str	r5, [r4, #20]
 80041d6:	444e      	add	r6, r9
 80041d8:	eba5 0509 	sub.w	r5, r5, r9
 80041dc:	6026      	str	r6, [r4, #0]
 80041de:	60a5      	str	r5, [r4, #8]
 80041e0:	463e      	mov	r6, r7
 80041e2:	42be      	cmp	r6, r7
 80041e4:	d900      	bls.n	80041e8 <__ssputs_r+0x70>
 80041e6:	463e      	mov	r6, r7
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	4632      	mov	r2, r6
 80041ec:	4641      	mov	r1, r8
 80041ee:	f000 faab 	bl	8004748 <memmove>
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	1b9b      	subs	r3, r3, r6
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	4433      	add	r3, r6
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	2000      	movs	r0, #0
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	462a      	mov	r2, r5
 8004206:	f000 fad7 	bl	80047b8 <_realloc_r>
 800420a:	4606      	mov	r6, r0
 800420c:	2800      	cmp	r0, #0
 800420e:	d1e0      	bne.n	80041d2 <__ssputs_r+0x5a>
 8004210:	6921      	ldr	r1, [r4, #16]
 8004212:	4650      	mov	r0, sl
 8004214:	f7ff feb8 	bl	8003f88 <_free_r>
 8004218:	230c      	movs	r3, #12
 800421a:	f8ca 3000 	str.w	r3, [sl]
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	e7e9      	b.n	8004200 <__ssputs_r+0x88>

0800422c <_svfiprintf_r>:
 800422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004230:	4698      	mov	r8, r3
 8004232:	898b      	ldrh	r3, [r1, #12]
 8004234:	061b      	lsls	r3, r3, #24
 8004236:	b09d      	sub	sp, #116	; 0x74
 8004238:	4607      	mov	r7, r0
 800423a:	460d      	mov	r5, r1
 800423c:	4614      	mov	r4, r2
 800423e:	d50e      	bpl.n	800425e <_svfiprintf_r+0x32>
 8004240:	690b      	ldr	r3, [r1, #16]
 8004242:	b963      	cbnz	r3, 800425e <_svfiprintf_r+0x32>
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	f7ff ff0b 	bl	8004060 <_malloc_r>
 800424a:	6028      	str	r0, [r5, #0]
 800424c:	6128      	str	r0, [r5, #16]
 800424e:	b920      	cbnz	r0, 800425a <_svfiprintf_r+0x2e>
 8004250:	230c      	movs	r3, #12
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e0d0      	b.n	80043fc <_svfiprintf_r+0x1d0>
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	616b      	str	r3, [r5, #20]
 800425e:	2300      	movs	r3, #0
 8004260:	9309      	str	r3, [sp, #36]	; 0x24
 8004262:	2320      	movs	r3, #32
 8004264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004268:	f8cd 800c 	str.w	r8, [sp, #12]
 800426c:	2330      	movs	r3, #48	; 0x30
 800426e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004414 <_svfiprintf_r+0x1e8>
 8004272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004276:	f04f 0901 	mov.w	r9, #1
 800427a:	4623      	mov	r3, r4
 800427c:	469a      	mov	sl, r3
 800427e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004282:	b10a      	cbz	r2, 8004288 <_svfiprintf_r+0x5c>
 8004284:	2a25      	cmp	r2, #37	; 0x25
 8004286:	d1f9      	bne.n	800427c <_svfiprintf_r+0x50>
 8004288:	ebba 0b04 	subs.w	fp, sl, r4
 800428c:	d00b      	beq.n	80042a6 <_svfiprintf_r+0x7a>
 800428e:	465b      	mov	r3, fp
 8004290:	4622      	mov	r2, r4
 8004292:	4629      	mov	r1, r5
 8004294:	4638      	mov	r0, r7
 8004296:	f7ff ff6f 	bl	8004178 <__ssputs_r>
 800429a:	3001      	adds	r0, #1
 800429c:	f000 80a9 	beq.w	80043f2 <_svfiprintf_r+0x1c6>
 80042a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a2:	445a      	add	r2, fp
 80042a4:	9209      	str	r2, [sp, #36]	; 0x24
 80042a6:	f89a 3000 	ldrb.w	r3, [sl]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a1 	beq.w	80043f2 <_svfiprintf_r+0x1c6>
 80042b0:	2300      	movs	r3, #0
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295
 80042b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ba:	f10a 0a01 	add.w	sl, sl, #1
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	9307      	str	r3, [sp, #28]
 80042c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042c6:	931a      	str	r3, [sp, #104]	; 0x68
 80042c8:	4654      	mov	r4, sl
 80042ca:	2205      	movs	r2, #5
 80042cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d0:	4850      	ldr	r0, [pc, #320]	; (8004414 <_svfiprintf_r+0x1e8>)
 80042d2:	f7fb ff85 	bl	80001e0 <memchr>
 80042d6:	9a04      	ldr	r2, [sp, #16]
 80042d8:	b9d8      	cbnz	r0, 8004312 <_svfiprintf_r+0xe6>
 80042da:	06d0      	lsls	r0, r2, #27
 80042dc:	bf44      	itt	mi
 80042de:	2320      	movmi	r3, #32
 80042e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e4:	0711      	lsls	r1, r2, #28
 80042e6:	bf44      	itt	mi
 80042e8:	232b      	movmi	r3, #43	; 0x2b
 80042ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ee:	f89a 3000 	ldrb.w	r3, [sl]
 80042f2:	2b2a      	cmp	r3, #42	; 0x2a
 80042f4:	d015      	beq.n	8004322 <_svfiprintf_r+0xf6>
 80042f6:	9a07      	ldr	r2, [sp, #28]
 80042f8:	4654      	mov	r4, sl
 80042fa:	2000      	movs	r0, #0
 80042fc:	f04f 0c0a 	mov.w	ip, #10
 8004300:	4621      	mov	r1, r4
 8004302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004306:	3b30      	subs	r3, #48	; 0x30
 8004308:	2b09      	cmp	r3, #9
 800430a:	d94d      	bls.n	80043a8 <_svfiprintf_r+0x17c>
 800430c:	b1b0      	cbz	r0, 800433c <_svfiprintf_r+0x110>
 800430e:	9207      	str	r2, [sp, #28]
 8004310:	e014      	b.n	800433c <_svfiprintf_r+0x110>
 8004312:	eba0 0308 	sub.w	r3, r0, r8
 8004316:	fa09 f303 	lsl.w	r3, r9, r3
 800431a:	4313      	orrs	r3, r2
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	46a2      	mov	sl, r4
 8004320:	e7d2      	b.n	80042c8 <_svfiprintf_r+0x9c>
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	9103      	str	r1, [sp, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfbb      	ittet	lt
 800432e:	425b      	neglt	r3, r3
 8004330:	f042 0202 	orrlt.w	r2, r2, #2
 8004334:	9307      	strge	r3, [sp, #28]
 8004336:	9307      	strlt	r3, [sp, #28]
 8004338:	bfb8      	it	lt
 800433a:	9204      	strlt	r2, [sp, #16]
 800433c:	7823      	ldrb	r3, [r4, #0]
 800433e:	2b2e      	cmp	r3, #46	; 0x2e
 8004340:	d10c      	bne.n	800435c <_svfiprintf_r+0x130>
 8004342:	7863      	ldrb	r3, [r4, #1]
 8004344:	2b2a      	cmp	r3, #42	; 0x2a
 8004346:	d134      	bne.n	80043b2 <_svfiprintf_r+0x186>
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	9203      	str	r2, [sp, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	bfb8      	it	lt
 8004354:	f04f 33ff 	movlt.w	r3, #4294967295
 8004358:	3402      	adds	r4, #2
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004424 <_svfiprintf_r+0x1f8>
 8004360:	7821      	ldrb	r1, [r4, #0]
 8004362:	2203      	movs	r2, #3
 8004364:	4650      	mov	r0, sl
 8004366:	f7fb ff3b 	bl	80001e0 <memchr>
 800436a:	b138      	cbz	r0, 800437c <_svfiprintf_r+0x150>
 800436c:	9b04      	ldr	r3, [sp, #16]
 800436e:	eba0 000a 	sub.w	r0, r0, sl
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	4082      	lsls	r2, r0
 8004376:	4313      	orrs	r3, r2
 8004378:	3401      	adds	r4, #1
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004380:	4825      	ldr	r0, [pc, #148]	; (8004418 <_svfiprintf_r+0x1ec>)
 8004382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004386:	2206      	movs	r2, #6
 8004388:	f7fb ff2a 	bl	80001e0 <memchr>
 800438c:	2800      	cmp	r0, #0
 800438e:	d038      	beq.n	8004402 <_svfiprintf_r+0x1d6>
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <_svfiprintf_r+0x1f0>)
 8004392:	bb1b      	cbnz	r3, 80043dc <_svfiprintf_r+0x1b0>
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	3307      	adds	r3, #7
 8004398:	f023 0307 	bic.w	r3, r3, #7
 800439c:	3308      	adds	r3, #8
 800439e:	9303      	str	r3, [sp, #12]
 80043a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a2:	4433      	add	r3, r6
 80043a4:	9309      	str	r3, [sp, #36]	; 0x24
 80043a6:	e768      	b.n	800427a <_svfiprintf_r+0x4e>
 80043a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ac:	460c      	mov	r4, r1
 80043ae:	2001      	movs	r0, #1
 80043b0:	e7a6      	b.n	8004300 <_svfiprintf_r+0xd4>
 80043b2:	2300      	movs	r3, #0
 80043b4:	3401      	adds	r4, #1
 80043b6:	9305      	str	r3, [sp, #20]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f04f 0c0a 	mov.w	ip, #10
 80043be:	4620      	mov	r0, r4
 80043c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c4:	3a30      	subs	r2, #48	; 0x30
 80043c6:	2a09      	cmp	r2, #9
 80043c8:	d903      	bls.n	80043d2 <_svfiprintf_r+0x1a6>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0c6      	beq.n	800435c <_svfiprintf_r+0x130>
 80043ce:	9105      	str	r1, [sp, #20]
 80043d0:	e7c4      	b.n	800435c <_svfiprintf_r+0x130>
 80043d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80043d6:	4604      	mov	r4, r0
 80043d8:	2301      	movs	r3, #1
 80043da:	e7f0      	b.n	80043be <_svfiprintf_r+0x192>
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	462a      	mov	r2, r5
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <_svfiprintf_r+0x1f4>)
 80043e4:	a904      	add	r1, sp, #16
 80043e6:	4638      	mov	r0, r7
 80043e8:	f3af 8000 	nop.w
 80043ec:	1c42      	adds	r2, r0, #1
 80043ee:	4606      	mov	r6, r0
 80043f0:	d1d6      	bne.n	80043a0 <_svfiprintf_r+0x174>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	065b      	lsls	r3, r3, #25
 80043f6:	f53f af2d 	bmi.w	8004254 <_svfiprintf_r+0x28>
 80043fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043fc:	b01d      	add	sp, #116	; 0x74
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	ab03      	add	r3, sp, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	462a      	mov	r2, r5
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <_svfiprintf_r+0x1f4>)
 800440a:	a904      	add	r1, sp, #16
 800440c:	4638      	mov	r0, r7
 800440e:	f000 f879 	bl	8004504 <_printf_i>
 8004412:	e7eb      	b.n	80043ec <_svfiprintf_r+0x1c0>
 8004414:	08004880 	.word	0x08004880
 8004418:	0800488a 	.word	0x0800488a
 800441c:	00000000 	.word	0x00000000
 8004420:	08004179 	.word	0x08004179
 8004424:	08004886 	.word	0x08004886

08004428 <_printf_common>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	4699      	mov	r9, r3
 8004430:	688a      	ldr	r2, [r1, #8]
 8004432:	690b      	ldr	r3, [r1, #16]
 8004434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004438:	4293      	cmp	r3, r2
 800443a:	bfb8      	it	lt
 800443c:	4613      	movlt	r3, r2
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004444:	4607      	mov	r7, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b10a      	cbz	r2, 800444e <_printf_common+0x26>
 800444a:	3301      	adds	r3, #1
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0699      	lsls	r1, r3, #26
 8004452:	bf42      	ittt	mi
 8004454:	6833      	ldrmi	r3, [r6, #0]
 8004456:	3302      	addmi	r3, #2
 8004458:	6033      	strmi	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	f015 0506 	ands.w	r5, r5, #6
 8004460:	d106      	bne.n	8004470 <_printf_common+0x48>
 8004462:	f104 0a19 	add.w	sl, r4, #25
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	6832      	ldr	r2, [r6, #0]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc26      	bgt.n	80044be <_printf_common+0x96>
 8004470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004474:	1e13      	subs	r3, r2, #0
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	bf18      	it	ne
 800447a:	2301      	movne	r3, #1
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d42b      	bmi.n	80044d8 <_printf_common+0xb0>
 8004480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d01e      	beq.n	80044cc <_printf_common+0xa4>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	2b04      	cmp	r3, #4
 8004498:	bf02      	ittt	eq
 800449a:	68e5      	ldreq	r5, [r4, #12]
 800449c:	6833      	ldreq	r3, [r6, #0]
 800449e:	1aed      	subeq	r5, r5, r3
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	bf0c      	ite	eq
 80044a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a8:	2500      	movne	r5, #0
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bfc4      	itt	gt
 80044ae:	1a9b      	subgt	r3, r3, r2
 80044b0:	18ed      	addgt	r5, r5, r3
 80044b2:	2600      	movs	r6, #0
 80044b4:	341a      	adds	r4, #26
 80044b6:	42b5      	cmp	r5, r6
 80044b8:	d11a      	bne.n	80044f0 <_printf_common+0xc8>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e008      	b.n	80044d0 <_printf_common+0xa8>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	4649      	mov	r1, r9
 80044c4:	4638      	mov	r0, r7
 80044c6:	47c0      	blx	r8
 80044c8:	3001      	adds	r0, #1
 80044ca:	d103      	bne.n	80044d4 <_printf_common+0xac>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7c6      	b.n	8004466 <_printf_common+0x3e>
 80044d8:	18e1      	adds	r1, r4, r3
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	2030      	movs	r0, #48	; 0x30
 80044de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e2:	4422      	add	r2, r4
 80044e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ec:	3302      	adds	r3, #2
 80044ee:	e7c7      	b.n	8004480 <_printf_common+0x58>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4622      	mov	r2, r4
 80044f4:	4649      	mov	r1, r9
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c0      	blx	r8
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa4>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d9      	b.n	80044b6 <_printf_common+0x8e>
	...

08004504 <_printf_i>:
 8004504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	7e0f      	ldrb	r7, [r1, #24]
 800450a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800450c:	2f78      	cmp	r7, #120	; 0x78
 800450e:	4691      	mov	r9, r2
 8004510:	4680      	mov	r8, r0
 8004512:	460c      	mov	r4, r1
 8004514:	469a      	mov	sl, r3
 8004516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800451a:	d807      	bhi.n	800452c <_printf_i+0x28>
 800451c:	2f62      	cmp	r7, #98	; 0x62
 800451e:	d80a      	bhi.n	8004536 <_printf_i+0x32>
 8004520:	2f00      	cmp	r7, #0
 8004522:	f000 80d4 	beq.w	80046ce <_printf_i+0x1ca>
 8004526:	2f58      	cmp	r7, #88	; 0x58
 8004528:	f000 80c0 	beq.w	80046ac <_printf_i+0x1a8>
 800452c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004534:	e03a      	b.n	80045ac <_printf_i+0xa8>
 8004536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453a:	2b15      	cmp	r3, #21
 800453c:	d8f6      	bhi.n	800452c <_printf_i+0x28>
 800453e:	a101      	add	r1, pc, #4	; (adr r1, 8004544 <_printf_i+0x40>)
 8004540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004544:	0800459d 	.word	0x0800459d
 8004548:	080045b1 	.word	0x080045b1
 800454c:	0800452d 	.word	0x0800452d
 8004550:	0800452d 	.word	0x0800452d
 8004554:	0800452d 	.word	0x0800452d
 8004558:	0800452d 	.word	0x0800452d
 800455c:	080045b1 	.word	0x080045b1
 8004560:	0800452d 	.word	0x0800452d
 8004564:	0800452d 	.word	0x0800452d
 8004568:	0800452d 	.word	0x0800452d
 800456c:	0800452d 	.word	0x0800452d
 8004570:	080046b5 	.word	0x080046b5
 8004574:	080045dd 	.word	0x080045dd
 8004578:	0800466f 	.word	0x0800466f
 800457c:	0800452d 	.word	0x0800452d
 8004580:	0800452d 	.word	0x0800452d
 8004584:	080046d7 	.word	0x080046d7
 8004588:	0800452d 	.word	0x0800452d
 800458c:	080045dd 	.word	0x080045dd
 8004590:	0800452d 	.word	0x0800452d
 8004594:	0800452d 	.word	0x0800452d
 8004598:	08004677 	.word	0x08004677
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09f      	b.n	80046f0 <_printf_i+0x1ec>
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	0607      	lsls	r7, r0, #24
 80045b6:	f103 0104 	add.w	r1, r3, #4
 80045ba:	6029      	str	r1, [r5, #0]
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0xbe>
 80045be:	681e      	ldr	r6, [r3, #0]
 80045c0:	e003      	b.n	80045ca <_printf_i+0xc6>
 80045c2:	0646      	lsls	r6, r0, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0xba>
 80045c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	da03      	bge.n	80045d6 <_printf_i+0xd2>
 80045ce:	232d      	movs	r3, #45	; 0x2d
 80045d0:	4276      	negs	r6, r6
 80045d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d6:	485a      	ldr	r0, [pc, #360]	; (8004740 <_printf_i+0x23c>)
 80045d8:	230a      	movs	r3, #10
 80045da:	e012      	b.n	8004602 <_printf_i+0xfe>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	0605      	lsls	r5, r0, #24
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0xe8>
 80045e8:	681e      	ldr	r6, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0xee>
 80045ec:	0641      	lsls	r1, r0, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0xe4>
 80045f0:	881e      	ldrh	r6, [r3, #0]
 80045f2:	4853      	ldr	r0, [pc, #332]	; (8004740 <_printf_i+0x23c>)
 80045f4:	2f6f      	cmp	r7, #111	; 0x6f
 80045f6:	bf0c      	ite	eq
 80045f8:	2308      	moveq	r3, #8
 80045fa:	230a      	movne	r3, #10
 80045fc:	2100      	movs	r1, #0
 80045fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004602:	6865      	ldr	r5, [r4, #4]
 8004604:	60a5      	str	r5, [r4, #8]
 8004606:	2d00      	cmp	r5, #0
 8004608:	bfa2      	ittt	ge
 800460a:	6821      	ldrge	r1, [r4, #0]
 800460c:	f021 0104 	bicge.w	r1, r1, #4
 8004610:	6021      	strge	r1, [r4, #0]
 8004612:	b90e      	cbnz	r6, 8004618 <_printf_i+0x114>
 8004614:	2d00      	cmp	r5, #0
 8004616:	d04b      	beq.n	80046b0 <_printf_i+0x1ac>
 8004618:	4615      	mov	r5, r2
 800461a:	fbb6 f1f3 	udiv	r1, r6, r3
 800461e:	fb03 6711 	mls	r7, r3, r1, r6
 8004622:	5dc7      	ldrb	r7, [r0, r7]
 8004624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004628:	4637      	mov	r7, r6
 800462a:	42bb      	cmp	r3, r7
 800462c:	460e      	mov	r6, r1
 800462e:	d9f4      	bls.n	800461a <_printf_i+0x116>
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10b      	bne.n	800464c <_printf_i+0x148>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	07de      	lsls	r6, r3, #31
 8004638:	d508      	bpl.n	800464c <_printf_i+0x148>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	6861      	ldr	r1, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	bfde      	ittt	le
 8004642:	2330      	movle	r3, #48	; 0x30
 8004644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800464c:	1b52      	subs	r2, r2, r5
 800464e:	6122      	str	r2, [r4, #16]
 8004650:	f8cd a000 	str.w	sl, [sp]
 8004654:	464b      	mov	r3, r9
 8004656:	aa03      	add	r2, sp, #12
 8004658:	4621      	mov	r1, r4
 800465a:	4640      	mov	r0, r8
 800465c:	f7ff fee4 	bl	8004428 <_printf_common>
 8004660:	3001      	adds	r0, #1
 8004662:	d14a      	bne.n	80046fa <_printf_i+0x1f6>
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	b004      	add	sp, #16
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	4833      	ldr	r0, [pc, #204]	; (8004744 <_printf_i+0x240>)
 8004678:	2778      	movs	r7, #120	; 0x78
 800467a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6829      	ldr	r1, [r5, #0]
 8004682:	061f      	lsls	r7, r3, #24
 8004684:	f851 6b04 	ldr.w	r6, [r1], #4
 8004688:	d402      	bmi.n	8004690 <_printf_i+0x18c>
 800468a:	065f      	lsls	r7, r3, #25
 800468c:	bf48      	it	mi
 800468e:	b2b6      	uxthmi	r6, r6
 8004690:	07df      	lsls	r7, r3, #31
 8004692:	bf48      	it	mi
 8004694:	f043 0320 	orrmi.w	r3, r3, #32
 8004698:	6029      	str	r1, [r5, #0]
 800469a:	bf48      	it	mi
 800469c:	6023      	strmi	r3, [r4, #0]
 800469e:	b91e      	cbnz	r6, 80046a8 <_printf_i+0x1a4>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	f023 0320 	bic.w	r3, r3, #32
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	2310      	movs	r3, #16
 80046aa:	e7a7      	b.n	80045fc <_printf_i+0xf8>
 80046ac:	4824      	ldr	r0, [pc, #144]	; (8004740 <_printf_i+0x23c>)
 80046ae:	e7e4      	b.n	800467a <_printf_i+0x176>
 80046b0:	4615      	mov	r5, r2
 80046b2:	e7bd      	b.n	8004630 <_printf_i+0x12c>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	6826      	ldr	r6, [r4, #0]
 80046b8:	6961      	ldr	r1, [r4, #20]
 80046ba:	1d18      	adds	r0, r3, #4
 80046bc:	6028      	str	r0, [r5, #0]
 80046be:	0635      	lsls	r5, r6, #24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	d501      	bpl.n	80046c8 <_printf_i+0x1c4>
 80046c4:	6019      	str	r1, [r3, #0]
 80046c6:	e002      	b.n	80046ce <_printf_i+0x1ca>
 80046c8:	0670      	lsls	r0, r6, #25
 80046ca:	d5fb      	bpl.n	80046c4 <_printf_i+0x1c0>
 80046cc:	8019      	strh	r1, [r3, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	4615      	mov	r5, r2
 80046d4:	e7bc      	b.n	8004650 <_printf_i+0x14c>
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	602a      	str	r2, [r5, #0]
 80046dc:	681d      	ldr	r5, [r3, #0]
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7fb fd7c 	bl	80001e0 <memchr>
 80046e8:	b108      	cbz	r0, 80046ee <_printf_i+0x1ea>
 80046ea:	1b40      	subs	r0, r0, r5
 80046ec:	6060      	str	r0, [r4, #4]
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	2300      	movs	r3, #0
 80046f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f8:	e7aa      	b.n	8004650 <_printf_i+0x14c>
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	462a      	mov	r2, r5
 80046fe:	4649      	mov	r1, r9
 8004700:	4640      	mov	r0, r8
 8004702:	47d0      	blx	sl
 8004704:	3001      	adds	r0, #1
 8004706:	d0ad      	beq.n	8004664 <_printf_i+0x160>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	079b      	lsls	r3, r3, #30
 800470c:	d413      	bmi.n	8004736 <_printf_i+0x232>
 800470e:	68e0      	ldr	r0, [r4, #12]
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	4298      	cmp	r0, r3
 8004714:	bfb8      	it	lt
 8004716:	4618      	movlt	r0, r3
 8004718:	e7a6      	b.n	8004668 <_printf_i+0x164>
 800471a:	2301      	movs	r3, #1
 800471c:	4632      	mov	r2, r6
 800471e:	4649      	mov	r1, r9
 8004720:	4640      	mov	r0, r8
 8004722:	47d0      	blx	sl
 8004724:	3001      	adds	r0, #1
 8004726:	d09d      	beq.n	8004664 <_printf_i+0x160>
 8004728:	3501      	adds	r5, #1
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	9903      	ldr	r1, [sp, #12]
 800472e:	1a5b      	subs	r3, r3, r1
 8004730:	42ab      	cmp	r3, r5
 8004732:	dcf2      	bgt.n	800471a <_printf_i+0x216>
 8004734:	e7eb      	b.n	800470e <_printf_i+0x20a>
 8004736:	2500      	movs	r5, #0
 8004738:	f104 0619 	add.w	r6, r4, #25
 800473c:	e7f5      	b.n	800472a <_printf_i+0x226>
 800473e:	bf00      	nop
 8004740:	08004891 	.word	0x08004891
 8004744:	080048a2 	.word	0x080048a2

08004748 <memmove>:
 8004748:	4288      	cmp	r0, r1
 800474a:	b510      	push	{r4, lr}
 800474c:	eb01 0402 	add.w	r4, r1, r2
 8004750:	d902      	bls.n	8004758 <memmove+0x10>
 8004752:	4284      	cmp	r4, r0
 8004754:	4623      	mov	r3, r4
 8004756:	d807      	bhi.n	8004768 <memmove+0x20>
 8004758:	1e43      	subs	r3, r0, #1
 800475a:	42a1      	cmp	r1, r4
 800475c:	d008      	beq.n	8004770 <memmove+0x28>
 800475e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004766:	e7f8      	b.n	800475a <memmove+0x12>
 8004768:	4402      	add	r2, r0
 800476a:	4601      	mov	r1, r0
 800476c:	428a      	cmp	r2, r1
 800476e:	d100      	bne.n	8004772 <memmove+0x2a>
 8004770:	bd10      	pop	{r4, pc}
 8004772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800477a:	e7f7      	b.n	800476c <memmove+0x24>

0800477c <_sbrk_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d06      	ldr	r5, [pc, #24]	; (8004798 <_sbrk_r+0x1c>)
 8004780:	2300      	movs	r3, #0
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7fc f830 	bl	80007ec <_sbrk>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_sbrk_r+0x1a>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_sbrk_r+0x1a>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	200002d8 	.word	0x200002d8

0800479c <memcpy>:
 800479c:	440a      	add	r2, r1
 800479e:	4291      	cmp	r1, r2
 80047a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047a4:	d100      	bne.n	80047a8 <memcpy+0xc>
 80047a6:	4770      	bx	lr
 80047a8:	b510      	push	{r4, lr}
 80047aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047b2:	4291      	cmp	r1, r2
 80047b4:	d1f9      	bne.n	80047aa <memcpy+0xe>
 80047b6:	bd10      	pop	{r4, pc}

080047b8 <_realloc_r>:
 80047b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047bc:	4680      	mov	r8, r0
 80047be:	4614      	mov	r4, r2
 80047c0:	460e      	mov	r6, r1
 80047c2:	b921      	cbnz	r1, 80047ce <_realloc_r+0x16>
 80047c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	4611      	mov	r1, r2
 80047ca:	f7ff bc49 	b.w	8004060 <_malloc_r>
 80047ce:	b92a      	cbnz	r2, 80047dc <_realloc_r+0x24>
 80047d0:	f7ff fbda 	bl	8003f88 <_free_r>
 80047d4:	4625      	mov	r5, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047dc:	f000 f81b 	bl	8004816 <_malloc_usable_size_r>
 80047e0:	4284      	cmp	r4, r0
 80047e2:	4607      	mov	r7, r0
 80047e4:	d802      	bhi.n	80047ec <_realloc_r+0x34>
 80047e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047ea:	d812      	bhi.n	8004812 <_realloc_r+0x5a>
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f7ff fc36 	bl	8004060 <_malloc_r>
 80047f4:	4605      	mov	r5, r0
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d0ed      	beq.n	80047d6 <_realloc_r+0x1e>
 80047fa:	42bc      	cmp	r4, r7
 80047fc:	4622      	mov	r2, r4
 80047fe:	4631      	mov	r1, r6
 8004800:	bf28      	it	cs
 8004802:	463a      	movcs	r2, r7
 8004804:	f7ff ffca 	bl	800479c <memcpy>
 8004808:	4631      	mov	r1, r6
 800480a:	4640      	mov	r0, r8
 800480c:	f7ff fbbc 	bl	8003f88 <_free_r>
 8004810:	e7e1      	b.n	80047d6 <_realloc_r+0x1e>
 8004812:	4635      	mov	r5, r6
 8004814:	e7df      	b.n	80047d6 <_realloc_r+0x1e>

08004816 <_malloc_usable_size_r>:
 8004816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481a:	1f18      	subs	r0, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfbc      	itt	lt
 8004820:	580b      	ldrlt	r3, [r1, r0]
 8004822:	18c0      	addlt	r0, r0, r3
 8004824:	4770      	bx	lr
	...

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
