
freertos_jorge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007188  08007188  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  20000060  080071f0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  080071f0  00021304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae36  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000369b  00000000  00000000  0003af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124c  00000000  00000000  0003fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0d1  00000000  00000000  00040f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aacf  00000000  00000000  0006b03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ddec  00000000  00000000  00085b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067b0  00000000  00000000  001938f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0019a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007094 	.word	0x08007094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007094 	.word	0x08007094

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000007c 	.word	0x2000007c
 8000d38:	2000011c 	.word	0x2000011c

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b09c      	sub	sp, #112	; 0x70
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f000 fc59 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f865 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 f979 	bl	8001040 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4e:	f000 f959 	bl	8001004 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d52:	f000 f927 	bl	8000fa4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d56:	f000 f8af 	bl	8000eb8 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of lcd */
  osThreadDef(lcd, Startlcd, osPriorityNormal, 0, 128);
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <main+0xb8>)
 8000d5c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdHandle = osThreadCreate(osThread(lcd), NULL);
 8000d6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fe57 	bl	8005a28 <osThreadCreate>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <main+0xbc>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of adc */
  osThreadDef(adc, Startadc, osPriorityIdle, 0, 128);
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <main+0xc0>)
 8000d82:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d86:	461d      	mov	r5, r3
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcHandle = osThreadCreate(osThread(adc), NULL);
 8000d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fe44 	bl	8005a28 <osThreadCreate>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <main+0xc4>)
 8000da4:	6013      	str	r3, [r2, #0]

  /* definition and creation of led */
  osThreadDef(led, Startled, osPriorityIdle, 0, 128);
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <main+0xc8>)
 8000da8:	f107 041c 	add.w	r4, r7, #28
 8000dac:	461d      	mov	r5, r3
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledHandle = osThreadCreate(osThread(led), NULL);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fe31 	bl	8005a28 <osThreadCreate>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <main+0xcc>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcj */
  osThreadDef(adcj, Startadcj, osPriorityIdle, 0, 128);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <main+0xd0>)
 8000dce:	463c      	mov	r4, r7
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcjHandle = osThreadCreate(osThread(adcj), NULL);
 8000dde:	463b      	mov	r3, r7
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 fe20 	bl	8005a28 <osThreadCreate>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <main+0xd4>)
 8000dec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dee:	f004 fe14 	bl	8005a1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <main+0xb6>
 8000df4:	080070b0 	.word	0x080070b0
 8000df8:	20000450 	.word	0x20000450
 8000dfc:	080070d0 	.word	0x080070d0
 8000e00:	20000454 	.word	0x20000454
 8000e04:	080070f0 	.word	0x080070f0
 8000e08:	20000458 	.word	0x20000458
 8000e0c:	08007114 	.word	0x08007114
 8000e10:	2000045c 	.word	0x2000045c

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2244      	movs	r2, #68	; 0x44
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 f85a 	bl	8006edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e3a:	f002 fac3 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e44:	f000 f9d6 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2310      	movs	r3, #16
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e62:	230a      	movs	r3, #10
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e66:	2307      	movs	r3, #7
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fafa 	bl	8003470 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e82:	f000 f9b7 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
 8000e88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fec2 	bl	8003c28 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eaa:	f000 f9a3 	bl	80011f4 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3758      	adds	r7, #88	; 0x58
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000edc:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <MX_ADC1_Init+0xe4>)
 8000ede:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f3c:	f000 fd72 	bl	8001a24 <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f46:	f000 f955 	bl	80011f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f56:	f001 fcc1 	bl	80028dc <HAL_ADCEx_MultiModeConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f60:	f000 f948 	bl	80011f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f70:	237f      	movs	r3, #127	; 0x7f
 8000f72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f74:	2304      	movs	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0xe0>)
 8000f82:	f000 ff79 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 f932 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000031c 	.word	0x2000031c
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	04300002 	.word	0x04300002

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <MX_USART2_UART_Init+0x5c>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe8:	f003 ffe4 	bl	8004fb4 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ff2:	f000 f8ff 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200003c8 	.word	0x200003c8
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <MX_DMA_Init+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6493      	str	r3, [r2, #72]	; 0x48
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_DMA_Init+0x38>)
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	200b      	movs	r0, #11
 8001028:	f001 fdc0 	bl	8002bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800102c:	200b      	movs	r0, #11
 800102e:	f001 fdd9 	bl	8002be4 <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_GPIO_Init+0xc4>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_GPIO_Init+0xc4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_GPIO_Init+0xc4>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_GPIO_Init+0xc4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <MX_GPIO_Init+0xc4>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_GPIO_Init+0xc4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	21e0      	movs	r1, #224	; 0xe0
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f002 f941 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <MX_GPIO_Init+0xc8>)
 80010da:	f001 ff89 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 80010de:	23e0      	movs	r3, #224	; 0xe0
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f001 ff7a 	bl	8002ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <Startlcd>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startlcd */
void Startlcd(void const * argument)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(led1_GPIO_Port,led1_Pin);
 8001114:	2120      	movs	r1, #32
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f002 f92b 	bl	8003374 <HAL_GPIO_TogglePin>
    osDelay(200);
 800111e:	20c8      	movs	r0, #200	; 0xc8
 8001120:	f004 fcce 	bl	8005ac0 <osDelay>
	HAL_GPIO_TogglePin(led1_GPIO_Port,led1_Pin);
 8001124:	e7f6      	b.n	8001114 <Startlcd+0x8>

08001126 <Startadc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startadc */
void Startadc(void const * argument)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startadc */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led2_GPIO_Port,led2_Pin);
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f002 f91e 	bl	8003374 <HAL_GPIO_TogglePin>
	     osDelay(200);
 8001138:	20c8      	movs	r0, #200	; 0xc8
 800113a:	f004 fcc1 	bl	8005ac0 <osDelay>
	  HAL_GPIO_TogglePin(led2_GPIO_Port,led2_Pin);
 800113e:	e7f6      	b.n	800112e <Startadc+0x8>

08001140 <Startled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startled */
void Startled(void const * argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startled */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led3_GPIO_Port,led3_Pin);
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f002 f911 	bl	8003374 <HAL_GPIO_TogglePin>
	     osDelay(200);
 8001152:	20c8      	movs	r0, #200	; 0xc8
 8001154:	f004 fcb4 	bl	8005ac0 <osDelay>
	  HAL_GPIO_TogglePin(led3_GPIO_Port,led3_Pin);
 8001158:	e7f6      	b.n	8001148 <Startled+0x8>
 800115a:	0000      	movs	r0, r0
 800115c:	0000      	movs	r0, r0
	...

08001160 <Startadcj>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startadcj */
void Startadcj(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, &medicion, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	4915      	ldr	r1, [pc, #84]	; (80011c0 <Startadcj+0x60>)
 800116c:	4815      	ldr	r0, [pc, #84]	; (80011c4 <Startadcj+0x64>)
 800116e:	f000 fda9 	bl	8001cc4 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN Startadcj */
  /* Infinite loop */
  for(;;)
  {
	  Volt = (medicion / 4096.0) * voltaje;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <Startadcj+0x60>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f96c 	bl	8000454 <__aeabi_ui2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <Startadcj+0x68>)
 8001182:	f7ff fb0b 	bl	800079c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	a30a      	add	r3, pc, #40	; (adr r3, 80011b8 <Startadcj+0x58>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f9d8 	bl	8000548 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fbe4 	bl	800096c <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <Startadcj+0x6c>)
 80011a8:	6013      	str	r3, [r2, #0]
    osDelay(4);
 80011aa:	2004      	movs	r0, #4
 80011ac:	f004 fc88 	bl	8005ac0 <osDelay>
	  Volt = (medicion / 4096.0) * voltaje;
 80011b0:	e7df      	b.n	8001172 <Startadcj+0x12>
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	66666666 	.word	0x66666666
 80011bc:	400a6666 	.word	0x400a6666
 80011c0:	20000460 	.word	0x20000460
 80011c4:	2000031c 	.word	0x2000031c
 80011c8:	40b00000 	.word	0x40b00000
 80011cc:	20000464 	.word	0x20000464

080011d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011e2:	f000 fa29 	bl	8001638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40000400 	.word	0x40000400

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_MspInit+0x4c>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_MspInit+0x4c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_MspInit+0x4c>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_MspInit+0x4c>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_MspInit+0x4c>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	210f      	movs	r1, #15
 800123a:	f06f 0001 	mvn.w	r0, #1
 800123e:	f001 fcb5 	bl	8002bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	; 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2288      	movs	r2, #136	; 0x88
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fe33 	bl	8006edc <memset>
  if(hadc->Instance==ADC1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x11c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d171      	bne.n	8001364 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001284:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800128a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001296:	2308      	movs	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800129a:	2307      	movs	r3, #7
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ff0f 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012bc:	f7ff ff9a 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a24      	ldr	r2, [pc, #144]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_ADC_MspInit+0x120>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012f6:	230b      	movs	r3, #11
 80012f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001306:	4619      	mov	r1, r3
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <HAL_ADC_MspInit+0x124>)
 800130a:	f001 fe71 	bl	8002ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001310:	4a1a      	ldr	r2, [pc, #104]	; (800137c <HAL_ADC_MspInit+0x12c>)
 8001312:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_ADC_MspInit+0x128>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_ADC_MspInit+0x128>)
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_ADC_MspInit+0x128>)
 800133e:	2220      	movs	r2, #32
 8001340:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_ADC_MspInit+0x128>)
 800134a:	f001 fc59 	bl	8002c00 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001354:	f7ff ff4e 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_ADC_MspInit+0x128>)
 800135c:	64da      	str	r2, [r3, #76]	; 0x4c
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_ADC_MspInit+0x128>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	37b0      	adds	r7, #176	; 0xb0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	50040000 	.word	0x50040000
 8001370:	40021000 	.word	0x40021000
 8001374:	48000800 	.word	0x48000800
 8001378:	20000380 	.word	0x20000380
 800137c:	40020008 	.word	0x40020008

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	; 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2288      	movs	r2, #136	; 0x88
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 fd9b 	bl	8006edc <memset>
  if(huart->Instance==USART2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_UART_MspInit+0xb0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13b      	bne.n	8001428 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fe89 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c8:	f7ff ff14 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d6:	6593      	str	r3, [r2, #88]	; 0x58
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fc:	230c      	movs	r3, #12
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001414:	2307      	movs	r3, #7
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f001 fde4 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	37b0      	adds	r7, #176	; 0xb0
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40004400 	.word	0x40004400
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_InitTick+0xe0>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <HAL_InitTick+0xe0>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_InitTick+0xe0>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800145e:	f107 0210 	add.w	r2, r7, #16
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fda1 	bl	8003fb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001478:	f002 fd6e 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 800147c:	6378      	str	r0, [r7, #52]	; 0x34
 800147e:	e004      	b.n	800148a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001480:	f002 fd6a 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8001484:	4603      	mov	r3, r0
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_InitTick+0xe4>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	3b01      	subs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_InitTick+0xe8>)
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_InitTick+0xec>)
 800149c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_InitTick+0xe8>)
 80014a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_InitTick+0xe8>)
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_InitTick+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_InitTick+0xe8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_InitTick+0xe8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <HAL_InitTick+0xe8>)
 80014c0:	f003 fac4 	bl	8004a4c <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11b      	bne.n	800150a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <HAL_InitTick+0xe8>)
 80014d4:	f003 fb1c 	bl	8004b10 <HAL_TIM_Base_Start_IT>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d111      	bne.n	800150a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e6:	201d      	movs	r0, #29
 80014e8:	f001 fb7c 	bl	8002be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	d808      	bhi.n	8001504 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80014f2:	2200      	movs	r2, #0
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	201d      	movs	r0, #29
 80014f8:	f001 fb58 	bl	8002bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_InitTick+0xf0>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e002      	b.n	800150a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800150a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800150e:	4618      	mov	r0, r3
 8001510:	3738      	adds	r7, #56	; 0x38
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	20000468 	.word	0x20000468
 8001524:	40000400 	.word	0x40000400
 8001528:	20000004 	.word	0x20000004

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Channel1_IRQHandler+0x10>)
 800155e:	f001 fc67 	bl	8002e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000380 	.word	0x20000380

0800156c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM3_IRQHandler+0x10>)
 8001572:	f003 fb3d 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000468 	.word	0x20000468

08001580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f005 fce1 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d6:	f7ff fbb1 	bl	8000d3c <main>

080015da <LoopForever>:

LoopForever:
    b LoopForever
 80015da:	e7fe      	b.n	80015da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015e8:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 80015ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015f0:	20001304 	.word	0x20001304

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_Init+0x3c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_Init+0x3c>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f001 fac1 	bl	8002b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	200f      	movs	r0, #15
 8001616:	f7ff ff0f 	bl	8001438 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	e001      	b.n	800162a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001626:	f7ff fdeb 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	200004b4 	.word	0x200004b4

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200004b4 	.word	0x200004b4

08001678 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3360      	adds	r3, #96	; 0x60
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_ADC_SetOffset+0x44>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	4313      	orrs	r3, r2
 8001710:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	03fff000 	.word	0x03fff000

08001728 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3360      	adds	r3, #96	; 0x60
 8001736:	461a      	mov	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3330      	adds	r3, #48	; 0x30
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	211f      	movs	r1, #31
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 011f 	and.w	r1, r3, #31
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3314      	adds	r3, #20
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	0e5b      	lsrs	r3, r3, #25
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0d1b      	lsrs	r3, r3, #20
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2107      	movs	r1, #7
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	0d1b      	lsrs	r3, r3, #20
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0318 	and.w	r3, r3, #24
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001884:	40d9      	lsrs	r1, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	400b      	ands	r3, r1
 800188a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0007ffff 	.word	0x0007ffff

080018a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6093      	str	r3, [r2, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018fc:	d101      	bne.n	8001902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194c:	d101      	bne.n	8001952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <LL_ADC_IsEnabled+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_IsEnabled+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d101      	bne.n	80019ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d101      	bne.n	8001a14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e130      	b.n	8001ca0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fbff 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff3f 	bl	80018e8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff25 	bl	80018c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff5a 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff3e 	bl	8001910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a94:	4b84      	ldr	r3, [pc, #528]	; (8001ca8 <HAL_ADC_Init+0x284>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	4a84      	ldr	r2, [pc, #528]	; (8001cac <HAL_ADC_Init+0x288>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff3c 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff75 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001aec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80c9 	bne.w	8001c8e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80c5 	bne.w	8001c8e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b0c:	f043 0202 	orr.w	r2, r3, #2
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff35 	bl	8001988 <LL_ADC_IsEnabled>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d115      	bne.n	8001b50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b24:	4862      	ldr	r0, [pc, #392]	; (8001cb0 <HAL_ADC_Init+0x28c>)
 8001b26:	f7ff ff2f 	bl	8001988 <LL_ADC_IsEnabled>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4861      	ldr	r0, [pc, #388]	; (8001cb4 <HAL_ADC_Init+0x290>)
 8001b2e:	f7ff ff2b 	bl	8001988 <LL_ADC_IsEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	431c      	orrs	r4, r3
 8001b36:	4860      	ldr	r0, [pc, #384]	; (8001cb8 <HAL_ADC_Init+0x294>)
 8001b38:	f7ff ff26 	bl	8001988 <LL_ADC_IsEnabled>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4323      	orrs	r3, r4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	485c      	ldr	r0, [pc, #368]	; (8001cbc <HAL_ADC_Init+0x298>)
 8001b4c:	f7ff fd94 	bl	8001678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e5b      	ldrb	r3, [r3, #25]
 8001b54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	3b01      	subs	r3, #1
 8001b84:	045b      	lsls	r3, r3, #17
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_ADC_Init+0x29c>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff1b 	bl	80019fc <LL_ADC_INJ_IsConversionOngoing>
 8001bc6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d13d      	bne.n	8001c4a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf0:	f023 0302 	bic.w	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d118      	bne.n	8001c3a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10c      	bne.n	8001c6c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f023 010f 	bic.w	r1, r3, #15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020f 	bic.w	r2, r2, #15
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f023 0303 	bic.w	r3, r3, #3
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c8c:	e007      	b.n	8001c9e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0210 	orr.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3724      	adds	r7, #36	; 0x24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	053e2d63 	.word	0x053e2d63
 8001cb0:	50040000 	.word	0x50040000
 8001cb4:	50040100 	.word	0x50040100
 8001cb8:	50040200 	.word	0x50040200
 8001cbc:	50040300 	.word	0x50040300
 8001cc0:	fff0c007 	.word	0xfff0c007

08001cc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cd0:	4853      	ldr	r0, [pc, #332]	; (8001e20 <HAL_ADC_Start_DMA+0x15c>)
 8001cd2:	f7ff fde9 	bl	80018a8 <LL_ADC_GetMultimode>
 8001cd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe7a 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 8093 	bne.w	8001e10 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_Start_DMA+0x34>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e08e      	b.n	8001e16 <HAL_ADC_Start_DMA+0x152>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <HAL_ADC_Start_DMA+0x160>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d008      	beq.n	8001d1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d002      	beq.n	8001d1c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d172      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fc9d 	bl	800265c <ADC_Enable>
 8001d22:	4603      	mov	r3, r0
 8001d24:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d165      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_ADC_Start_DMA+0x164>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d002      	beq.n	8001d50 <HAL_ADC_Start_DMA+0x8c>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e000      	b.n	8001d52 <HAL_ADC_Start_DMA+0x8e>
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_ADC_Start_DMA+0x168>)
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f023 0206 	bic.w	r2, r3, #6
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	659a      	str	r2, [r3, #88]	; 0x58
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_ADC_Start_DMA+0x16c>)
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_ADC_Start_DMA+0x170>)
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_ADC_Start_DMA+0x174>)
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	221c      	movs	r2, #28
 8001daa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0210 	orr.w	r2, r2, #16
 8001dc2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3340      	adds	r3, #64	; 0x40
 8001dde:	4619      	mov	r1, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f000 ffc4 	bl	8002d70 <HAL_DMA_Start_IT>
 8001de8:	4603      	mov	r3, r0
 8001dea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fddc 	bl	80019ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001df6:	e00d      	b.n	8001e14 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e00:	e008      	b.n	8001e14 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e0e:	e001      	b.n	8001e14 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	50040300 	.word	0x50040300
 8001e24:	50040200 	.word	0x50040200
 8001e28:	50040100 	.word	0x50040100
 8001e2c:	50040000 	.word	0x50040000
 8001e30:	08002769 	.word	0x08002769
 8001e34:	08002841 	.word	0x08002841
 8001e38:	0800285d 	.word	0x0800285d

08001e3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b6      	sub	sp, #216	; 0xd8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x22>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e3c9      	b.n	800262e <HAL_ADC_ConfigChannel+0x7b6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fd95 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 83aa 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d824      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	3b02      	subs	r3, #2
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d81b      	bhi.n	8001f06 <HAL_ADC_ConfigChannel+0x8e>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_ADC_ConfigChannel+0x5c>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001eed 	.word	0x08001eed
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001efd 	.word	0x08001efd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eea:	e010      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001eec:	2312      	movs	r3, #18
 8001eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ef2:	e00c      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ef4:	2318      	movs	r3, #24
 8001ef6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f06:	2306      	movs	r3, #6
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f0c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f1c:	f7ff fc48 	bl	80017b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fd56 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001f2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fd62 	bl	80019fc <LL_ADC_INJ_IsConversionOngoing>
 8001f38:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 81a4 	bne.w	800228e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 819f 	bne.w	800228e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f7ff fc53 	bl	8001808 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00a      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6919      	ldr	r1, [r3, #16]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f94:	f7ff fba4 	bl	80016e0 <LL_ADC_SetOffset>
 8001f98:	e179      	b.n	800228e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fbc1 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x14e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fbb6 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	e01e      	b.n	8002004 <HAL_ADC_ConfigChannel+0x18c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fbab 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e004      	b.n	8002002 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1a4>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	e018      	b.n	800204e <HAL_ADC_ConfigChannel+0x1d6>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb7a 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fb5e 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0x214>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb53 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	e01e      	b.n	80020ca <HAL_ADC_ConfigChannel+0x252>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb48 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80020aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80020b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80020be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x26a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	e018      	b.n	8002114 <HAL_ADC_ConfigChannel+0x29c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800210a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fb17 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fafb 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x2da>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2102      	movs	r1, #2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff faf0 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	e01e      	b.n	8002190 <HAL_ADC_ConfigChannel+0x318>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2102      	movs	r1, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fae5 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x330>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e014      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x35a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80021b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80021bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e004      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d106      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fab8 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2103      	movs	r1, #3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fa9c 	bl	8001728 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x398>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2103      	movs	r1, #3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fa91 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	f003 021f 	and.w	r2, r3, #31
 800220e:	e017      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3c8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2103      	movs	r1, #3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fa86 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e003      	b.n	800223e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x3e0>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	e011      	b.n	800227c <HAL_ADC_ConfigChannel+0x404>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002268:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800226a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	2103      	movs	r1, #3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa63 	bl	8001754 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fb78 	bl	8001988 <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 8140 	bne.w	8002520 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f7ff fad7 	bl	8001860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a8f      	ldr	r2, [pc, #572]	; (80024f4 <HAL_ADC_ConfigChannel+0x67c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	f040 8131 	bne.w	8002520 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x46e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b09      	cmp	r3, #9
 80022dc:	bf94      	ite	ls
 80022de:	2301      	movls	r3, #1
 80022e0:	2300      	movhi	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	e019      	b.n	800231a <HAL_ADC_ConfigChannel+0x4a2>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b09      	cmp	r3, #9
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231a:	2b00      	cmp	r3, #0
 800231c:	d079      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <HAL_ADC_ConfigChannel+0x4c2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	3301      	adds	r3, #1
 8002332:	069b      	lsls	r3, r3, #26
 8002334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002338:	e015      	b.n	8002366 <HAL_ADC_ConfigChannel+0x4ee>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	069b      	lsls	r3, r3, #26
 8002362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x50e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	3301      	adds	r3, #1
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	e017      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x53e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e003      	b.n	80023aa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	ea42 0103 	orr.w	r1, r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x564>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	e018      	b.n	800240e <HAL_ADC_ConfigChannel+0x596>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	f003 021f 	and.w	r2, r3, #31
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240e:	430b      	orrs	r3, r1
 8002410:	e081      	b.n	8002516 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_ADC_ConfigChannel+0x5b6>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	3301      	adds	r3, #1
 8002426:	069b      	lsls	r3, r3, #26
 8002428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242c:	e015      	b.n	800245a <HAL_ADC_ConfigChannel+0x5e2>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e003      	b.n	8002452 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	069b      	lsls	r3, r3, #26
 8002456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_ADC_ConfigChannel+0x602>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	3301      	adds	r3, #1
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	e017      	b.n	80024aa <HAL_ADC_ConfigChannel+0x632>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	61bb      	str	r3, [r7, #24]
  return result;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	ea42 0103 	orr.w	r1, r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x65e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1e      	subs	r3, #30
 80024ce:	051b      	lsls	r3, r3, #20
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d4:	e01e      	b.n	8002514 <HAL_ADC_ConfigChannel+0x69c>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  return result;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024ee:	2320      	movs	r3, #32
 80024f0:	e006      	b.n	8002500 <HAL_ADC_ConfigChannel+0x688>
 80024f2:	bf00      	nop
 80024f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3b1e      	subs	r3, #30
 800250e:	051b      	lsls	r3, r3, #20
 8002510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002514:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251a:	4619      	mov	r1, r3
 800251c:	f7ff f974 	bl	8001808 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_ADC_ConfigChannel+0x7c0>)
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d07a      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252c:	4843      	ldr	r0, [pc, #268]	; (800263c <HAL_ADC_ConfigChannel+0x7c4>)
 800252e:	f7ff f8c9 	bl	80016c4 <LL_ADC_GetCommonPathInternalCh>
 8002532:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a41      	ldr	r2, [pc, #260]	; (8002640 <HAL_ADC_ConfigChannel+0x7c8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d12c      	bne.n	800259a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d126      	bne.n	800259a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a3c      	ldr	r2, [pc, #240]	; (8002644 <HAL_ADC_ConfigChannel+0x7cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x6e8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <HAL_ADC_ConfigChannel+0x7d0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d15d      	bne.n	800261c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002568:	4619      	mov	r1, r3
 800256a:	4834      	ldr	r0, [pc, #208]	; (800263c <HAL_ADC_ConfigChannel+0x7c4>)
 800256c:	f7ff f897 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_ADC_ConfigChannel+0x7d4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	4a36      	ldr	r2, [pc, #216]	; (8002650 <HAL_ADC_ConfigChannel+0x7d8>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800258a:	e002      	b.n	8002592 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3b01      	subs	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002598:	e040      	b.n	800261c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d118      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d112      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a23      	ldr	r2, [pc, #140]	; (8002644 <HAL_ADC_ConfigChannel+0x7cc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x74c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_ADC_ConfigChannel+0x7d0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d12d      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025cc:	4619      	mov	r1, r3
 80025ce:	481b      	ldr	r0, [pc, #108]	; (800263c <HAL_ADC_ConfigChannel+0x7c4>)
 80025d0:	f7ff f865 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d4:	e024      	b.n	8002620 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_ADC_ConfigChannel+0x7e0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d120      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11a      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_ADC_ConfigChannel+0x7cc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d115      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fe:	4619      	mov	r1, r3
 8002600:	480e      	ldr	r0, [pc, #56]	; (800263c <HAL_ADC_ConfigChannel+0x7c4>)
 8002602:	f7ff f84c 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
 8002606:	e00c      	b.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800261a:	e002      	b.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002620:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800262a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800262e:	4618      	mov	r0, r3
 8002630:	37d8      	adds	r7, #216	; 0xd8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	80080000 	.word	0x80080000
 800263c:	50040300 	.word	0x50040300
 8002640:	c7520000 	.word	0xc7520000
 8002644:	50040000 	.word	0x50040000
 8002648:	50040200 	.word	0x50040200
 800264c:	20000000 	.word	0x20000000
 8002650:	053e2d63 	.word	0x053e2d63
 8002654:	cb840000 	.word	0xcb840000
 8002658:	80000001 	.word	0x80000001

0800265c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f98b 	bl	8001988 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d169      	bne.n	800274c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <ADC_Enable+0xfc>)
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e055      	b.n	800274e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f95a 	bl	8001960 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026ac:	482b      	ldr	r0, [pc, #172]	; (800275c <ADC_Enable+0x100>)
 80026ae:	f7ff f809 	bl	80016c4 <LL_ADC_GetCommonPathInternalCh>
 80026b2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <ADC_Enable+0x104>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <ADC_Enable+0x108>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026d6:	e002      	b.n	80026de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026e4:	f7fe ffbc 	bl	8001660 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ea:	e028      	b.n	800273e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f949 	bl	8001988 <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f92d 	bl	8001960 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002706:	f7fe ffab 	bl	8001660 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d914      	bls.n	800273e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d00d      	beq.n	800273e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d1cf      	bne.n	80026ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	8000003f 	.word	0x8000003f
 800275c:	50040300 	.word	0x50040300
 8002760:	20000000 	.word	0x20000000
 8002764:	053e2d63 	.word	0x053e2d63

08002768 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800277e:	2b00      	cmp	r3, #0
 8002780:	d14b      	bne.n	800281a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d021      	beq.n	80027e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fff2 	bl	800178a <LL_ADC_REG_IsTriggerSourceSWStart>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d032      	beq.n	8002812 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d12b      	bne.n	8002812 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11f      	bne.n	8002812 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
 80027de:	e018      	b.n	8002812 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d111      	bne.n	8002812 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fb12 	bl	8001e3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002818:	e00e      	b.n	8002838 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fb1c 	bl	8001e64 <HAL_ADC_ErrorCallback>
}
 800282c:	e004      	b.n	8002838 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fafe 	bl	8001e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff faee 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <LL_ADC_IsEnabled>:
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_IsEnabled+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_IsEnabled+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d101      	bne.n	80028ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b09f      	sub	sp, #124	; 0x7c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e093      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002902:	2300      	movs	r3, #0
 8002904:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002906:	2300      	movs	r3, #0
 8002908:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e001      	b.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e072      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ffb9 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 8002944:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ffb3 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d154      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	2b00      	cmp	r3, #0
 800295a:	d151      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800295e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02c      	beq.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800297a:	035b      	lsls	r3, r3, #13
 800297c:	430b      	orrs	r3, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002984:	4829      	ldr	r0, [pc, #164]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002986:	f7ff ff83 	bl	8002890 <LL_ADC_IsEnabled>
 800298a:	4604      	mov	r4, r0
 800298c:	4828      	ldr	r0, [pc, #160]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800298e:	f7ff ff7f 	bl	8002890 <LL_ADC_IsEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	431c      	orrs	r4, r3
 8002996:	4828      	ldr	r0, [pc, #160]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002998:	f7ff ff7a 	bl	8002890 <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	4323      	orrs	r3, r4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d137      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ac:	f023 030f 	bic.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	6811      	ldr	r1, [r2, #0]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029c0:	e028      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ce:	4817      	ldr	r0, [pc, #92]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029d0:	f7ff ff5e 	bl	8002890 <LL_ADC_IsEnabled>
 80029d4:	4604      	mov	r4, r0
 80029d6:	4816      	ldr	r0, [pc, #88]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029d8:	f7ff ff5a 	bl	8002890 <LL_ADC_IsEnabled>
 80029dc:	4603      	mov	r3, r0
 80029de:	431c      	orrs	r4, r3
 80029e0:	4815      	ldr	r0, [pc, #84]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029e2:	f7ff ff55 	bl	8002890 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4323      	orrs	r3, r4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d112      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f6:	f023 030f 	bic.w	r3, r3, #15
 80029fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029fe:	e009      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a12:	e000      	b.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	377c      	adds	r7, #124	; 0x7c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	50040100 	.word	0x50040100
 8002a34:	50040300 	.word	0x50040300
 8002a38:	50040200 	.word	0x50040200

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff4c 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbe:	f7ff ff61 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002bc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f7ff ffb1 	bl	8002b30 <NVIC_EncodePriority>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff80 	bl	8002adc <__NVIC_SetPriority>
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff54 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e098      	b.n	8002d44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <HAL_DMA_Init+0x150>)
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d80f      	bhi.n	8002c3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_DMA_Init+0x154>)
 8002c26:	4413      	add	r3, r2
 8002c28:	4a4b      	ldr	r2, [pc, #300]	; (8002d58 <HAL_DMA_Init+0x158>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	009a      	lsls	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a48      	ldr	r2, [pc, #288]	; (8002d5c <HAL_DMA_Init+0x15c>)
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3c:	e00e      	b.n	8002c5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_DMA_Init+0x160>)
 8002c46:	4413      	add	r3, r2
 8002c48:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <HAL_DMA_Init+0x158>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_DMA_Init+0x164>)
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb6:	d039      	beq.n	8002d2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_DMA_Init+0x15c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d11a      	bne.n	8002cf8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_DMA_Init+0x168>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f003 031c 	and.w	r3, r3, #28
 8002cce:	210f      	movs	r1, #15
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4924      	ldr	r1, [pc, #144]	; (8002d68 <HAL_DMA_Init+0x168>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_DMA_Init+0x168>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f003 031c 	and.w	r3, r3, #28
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	491d      	ldr	r1, [pc, #116]	; (8002d68 <HAL_DMA_Init+0x168>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	e019      	b.n	8002d2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_DMA_Init+0x16c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f003 031c 	and.w	r3, r3, #28
 8002d04:	210f      	movs	r1, #15
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4917      	ldr	r1, [pc, #92]	; (8002d6c <HAL_DMA_Init+0x16c>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <HAL_DMA_Init+0x16c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f003 031c 	and.w	r3, r3, #28
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	4911      	ldr	r1, [pc, #68]	; (8002d6c <HAL_DMA_Init+0x16c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40020407 	.word	0x40020407
 8002d54:	bffdfff8 	.word	0xbffdfff8
 8002d58:	cccccccd 	.word	0xcccccccd
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	bffdfbf8 	.word	0xbffdfbf8
 8002d64:	40020400 	.word	0x40020400
 8002d68:	400200a8 	.word	0x400200a8
 8002d6c:	400204a8 	.word	0x400204a8

08002d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Start_IT+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e04b      	b.n	8002e28 <HAL_DMA_Start_IT+0xb8>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d13a      	bne.n	8002e1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8e0 	bl	8002f8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 020e 	orr.w	r2, r2, #14
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00f      	b.n	8002e08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0204 	bic.w	r2, r2, #4
 8002df6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 020a 	orr.w	r2, r2, #10
 8002e06:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e005      	b.n	8002e26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
 8002e24:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f003 031c 	and.w	r3, r3, #28
 8002e50:	2204      	movs	r2, #4
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d026      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x7a>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d021      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f003 021c 	and.w	r2, r3, #28
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2104      	movs	r1, #4
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d071      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ea8:	e06c      	b.n	8002f84 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f003 031c 	and.w	r3, r3, #28
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02e      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xec>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d029      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020a 	bic.w	r2, r2, #10
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 021c 	and.w	r2, r3, #28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2102      	movs	r1, #2
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d038      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f1a:	e033      	b.n	8002f84 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f003 031c 	and.w	r3, r3, #28
 8002f24:	2208      	movs	r2, #8
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x156>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d025      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f003 021c 	and.w	r2, r3, #28
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
}
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f003 021c 	and.w	r2, r3, #28
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d108      	bne.n	8002fd2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fd0:	e007      	b.n	8002fe2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	60da      	str	r2, [r3, #12]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	e17f      	b.n	8003300 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8171 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d005      	beq.n	8003030 <HAL_GPIO_Init+0x40>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d130      	bne.n	8003092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003066:	2201      	movs	r2, #1
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0201 	and.w	r2, r3, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d118      	bne.n	80030d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d017      	beq.n	800310c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d123      	bne.n	8003160 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3208      	adds	r2, #8
 800315a:	6939      	ldr	r1, [r7, #16]
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80ac 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6613      	str	r3, [r2, #96]	; 0x60
 80031ae:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ba:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_GPIO_Init+0x334>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x242>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4e      	ldr	r2, [pc, #312]	; (800332c <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4d      	ldr	r2, [pc, #308]	; (8003330 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4a      	ldr	r2, [pc, #296]	; (800333c <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x22a>
 8003216:	2306      	movs	r3, #6
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321a:	2307      	movs	r3, #7
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_GPIO_Init+0x334>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003276:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_GPIO_Init+0x350>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032a0:	4a27      	ldr	r2, [pc, #156]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f ae78 	bne.w	8003000 <HAL_GPIO_Init+0x10>
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	48000400 	.word	0x48000400
 800332c:	48000800 	.word	0x48000800
 8003330:	48000c00 	.word	0x48000c00
 8003334:	48001000 	.word	0x48001000
 8003338:	48001400 	.word	0x48001400
 800333c:	48001800 	.word	0x48001800
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003360:	e002      	b.n	8003368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43d9      	mvns	r1, r3
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	400b      	ands	r3, r1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d130      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d038      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2232      	movs	r2, #50	; 0x32
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	0c9b      	lsrs	r3, r3, #18
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003408:	e002      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341c:	d102      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f2      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d110      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d007      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800344c:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000
 8003468:	20000000 	.word	0x20000000
 800346c:	431bde83 	.word	0x431bde83

08003470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e3ca      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80e4 	beq.w	800366c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_RCC_OscConfig+0x4a>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f040 808b 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 8087 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3a2      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_RCC_OscConfig+0x7c>
 80034e2:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_OscConfig+0x88>
 80034ec:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d223      	bcs.n	8003544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd87 	bl	8004014 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e383      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a72      	ldr	r2, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	496d      	ldr	r1, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	4968      	ldr	r1, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e025      	b.n	8003590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003544:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4960      	ldr	r1, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	495b      	ldr	r1, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd47 	bl	8004014 <RCC_SetFlashLatencyFromMSIRange>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e343      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003590:	f000 fc4a 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4950      	ldr	r1, [pc, #320]	; (80036e4 <HAL_RCC_OscConfig+0x274>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a4e      	ldr	r2, [pc, #312]	; (80036e8 <HAL_RCC_OscConfig+0x278>)
 80035ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035b0:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCC_OscConfig+0x27c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd ff3f 	bl	8001438 <HAL_InitTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d052      	beq.n	800366a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	e327      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d032      	beq.n	8003636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035dc:	f7fe f840 	bl	8001660 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e4:	f7fe f83c 	bl	8001660 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e310      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4931      	ldr	r1, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	492c      	ldr	r1, [pc, #176]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e01a      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003642:	f7fe f80d 	bl	8001660 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7fe f809 	bl	8001660 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e2dd      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x1da>
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d074      	beq.n	8003762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x21a>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d10e      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d064      	beq.n	8003760 <HAL_RCC_OscConfig+0x2f0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d160      	bne.n	8003760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e2ba      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x24a>
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c2:	d115      	bne.n	80036f0 <HAL_RCC_OscConfig+0x280>
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08007138 	.word	0x08007138
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000004 	.word	0x20000004
 80036f0:	4ba0      	ldr	r3, [pc, #640]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a9f      	ldr	r2, [pc, #636]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b9d      	ldr	r3, [pc, #628]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a9c      	ldr	r2, [pc, #624]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd ffa6 	bl	8001660 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fd ffa2 	bl	8001660 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e276      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x2a8>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd ff92 	bl	8001660 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fd ff8e 	bl	8001660 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e262      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x2d0>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d060      	beq.n	8003830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x310>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d119      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d116      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003780:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x328>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e23f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	4973      	ldr	r1, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ac:	e040      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d023      	beq.n	80037fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd ff4d 	bl	8001660 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fd ff49 	bl	8001660 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e21d      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	495f      	ldr	r1, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e018      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5c      	ldr	r2, [pc, #368]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd ff29 	bl	8001660 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003812:	f7fd ff25 	bl	8001660 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1f9      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01c      	beq.n	800387e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd ff04 	bl	8001660 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fd ff00 	bl	8001660 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1d4      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <HAL_RCC_OscConfig+0x3ec>
 800387c:	e01b      	b.n	80038b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd fee7 	bl	8001660 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd fee3 	bl	8001660 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1b7      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a6 	beq.w	8003a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	; 0x58
 80038e0:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d118      	bne.n	800392e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003908:	f7fd feaa 	bl	8001660 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fd fea6 	bl	8001660 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e17a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_RCC_OscConfig+0x508>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0x4d8>
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003946:	e029      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d115      	bne.n	800397c <HAL_RCC_OscConfig+0x50c>
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a07      	ldr	r2, [pc, #28]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_RCC_OscConfig+0x504>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	4b9c      	ldr	r3, [pc, #624]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	4a9b      	ldr	r2, [pc, #620]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800398c:	4b98      	ldr	r3, [pc, #608]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a97      	ldr	r2, [pc, #604]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fe5c 	bl	8001660 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd fe58 	bl	8001660 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e12a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ed      	beq.n	80039ac <HAL_RCC_OscConfig+0x53c>
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fe45 	bl	8001660 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fe41 	bl	8001660 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e113      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ed      	bne.n	80039da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	4a79      	ldr	r2, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80fe 	beq.w	8003c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f040 80d0 	bne.w	8003bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a24:	4b72      	ldr	r3, [pc, #456]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d130      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d127      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d11f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a64:	2a07      	cmp	r2, #7
 8003a66:	bf14      	ite	ne
 8003a68:	2201      	movne	r2, #1
 8003a6a:	2200      	moveq	r2, #0
 8003a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	3b01      	subs	r3, #1
 8003a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d06e      	beq.n	8003b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d069      	beq.n	8003b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0ad      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac8:	f7fd fdca 	bl	8001660 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fdc6 	bl	8001660 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e09a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aee:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x784>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b08:	0212      	lsls	r2, r2, #8
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0552      	lsls	r2, r2, #21
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b1c:	0852      	lsrs	r2, r2, #1
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	0652      	lsls	r2, r2, #25
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b28:	0912      	lsrs	r2, r2, #4
 8003b2a:	0452      	lsls	r2, r2, #17
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4930      	ldr	r1, [pc, #192]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b4c:	f7fd fd88 	bl	8001660 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fd84 	bl	8001660 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b72:	e050      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d148      	bne.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b9c:	f7fd fd60 	bl	8001660 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd fd5c 	bl	8001660 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e030      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x734>
 8003bc2:	e028      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fd43 	bl	8001660 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bdc:	e00c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fd fd3f 	bl	8001660 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d905      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e013      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ec      	bne.n	8003bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4905      	ldr	r1, [pc, #20]	; (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x7b4>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
 8003c10:	e001      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	feeefffc 	.word	0xfeeefffc

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0e7      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b75      	ldr	r3, [pc, #468]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4970      	ldr	r1, [pc, #448]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cf      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d908      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4960      	ldr	r1, [pc, #384]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04c      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0a6      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e09a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cde:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e086      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4943      	ldr	r1, [pc, #268]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fca6 	bl	8001660 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd fca2 	bl	8001660 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e06e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d208      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	492b      	ldr	r1, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d210      	bcs.n	8003d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4923      	ldr	r1, [pc, #140]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4918      	ldr	r1, [pc, #96]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 f824 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	490b      	ldr	r1, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1fc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fb19 	bl	8001438 <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08007138 	.word	0x08007138
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11e      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d102      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d134      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xa6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed0:	617b      	str	r3, [r7, #20]
      break;
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	617b      	str	r3, [r7, #20]
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	fb03 f202 	mul.w	r2, r3, r2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0e5b      	lsrs	r3, r3, #25
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f20:	69bb      	ldr	r3, [r7, #24]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08007150 	.word	0x08007150
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	007a1200 	.word	0x007a1200

08003f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000000 	.word	0x20000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08007148 	.word	0x08007148

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f88:	f7ff ffda 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	08007148 	.word	0x08007148

08003fb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <HAL_RCC_GetClockConfig+0x60>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0207 	and.w	r2, r3, #7
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	40022000 	.word	0x40022000

08004014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800402c:	f7ff f9bc 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8004030:	6178      	str	r0, [r7, #20]
 8004032:	e014      	b.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403e:	6593      	str	r3, [r2, #88]	; 0x58
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800404c:	f7ff f9ac 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8004050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d10b      	bne.n	800407e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d919      	bls.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2ba0      	cmp	r3, #160	; 0xa0
 8004070:	d902      	bls.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004072:	2302      	movs	r3, #2
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e013      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004078:	2301      	movs	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	e010      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d902      	bls.n	800408a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004084:	2303      	movs	r3, #3
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	e00a      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d102      	bne.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004090:	2302      	movs	r3, #2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	e004      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b70      	cmp	r3, #112	; 0x70
 800409a:	d101      	bne.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800409c:	2301      	movs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 0207 	bic.w	r2, r3, #7
 80040a8:	4909      	ldr	r1, [pc, #36]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40022000 	.word	0x40022000

080040d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d041      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040f8:	d02a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040fe:	d824      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800410a:	d81e      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004114:	d010      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004116:	e018      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004118:	4b86      	ldr	r3, [pc, #536]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a85      	ldr	r2, [pc, #532]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004124:	e015      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fabb 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3320      	adds	r3, #32
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fba6 	bl	8004890 <RCCEx_PLLSAI2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	74fb      	strb	r3, [r7, #19]
      break;
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004158:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004166:	4973      	ldr	r1, [pc, #460]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d041      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004188:	d02a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800418a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800418e:	d824      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419a:	d81e      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a4:	d010      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041a6:	e018      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a8:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a61      	ldr	r2, [pc, #388]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b4:	e015      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa73 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3320      	adds	r3, #32
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb5e 	bl	8004890 <RCCEx_PLLSAI2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	74fb      	strb	r3, [r7, #19]
      break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041e8:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f6:	494f      	ldr	r1, [pc, #316]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80a0 	beq.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	4a40      	ldr	r2, [pc, #256]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004248:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3a      	ldr	r2, [pc, #232]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004254:	f7fd fa04 	bl	8001660 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800425a:	e009      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd fa00 	bl	8001660 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	74fb      	strb	r3, [r7, #19]
        break;
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d15c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	d019      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a20      	ldr	r2, [pc, #128]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd f9bf 	bl	8001660 <HAL_GetTick>
 80042e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e4:	e00b      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd f9bb 	bl	8001660 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d902      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	74fb      	strb	r3, [r7, #19]
            break;
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ec      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800432a:	e009      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	74bb      	strb	r3, [r7, #18]
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004340:	7c7b      	ldrb	r3, [r7, #17]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4a9d      	ldr	r2, [pc, #628]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435e:	4b98      	ldr	r3, [pc, #608]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 0203 	bic.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	4994      	ldr	r1, [pc, #592]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004380:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 020c 	bic.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	498c      	ldr	r1, [pc, #560]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a2:	4b87      	ldr	r3, [pc, #540]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	4983      	ldr	r1, [pc, #524]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c4:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	497b      	ldr	r1, [pc, #492]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e6:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	4972      	ldr	r1, [pc, #456]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004408:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	496a      	ldr	r1, [pc, #424]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	4961      	ldr	r1, [pc, #388]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800444c:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445a:	4959      	ldr	r1, [pc, #356]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	4950      	ldr	r1, [pc, #320]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	4948      	ldr	r1, [pc, #288]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b2:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	493f      	ldr	r1, [pc, #252]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d028      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e2:	4937      	ldr	r1, [pc, #220]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f2:	d106      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a31      	ldr	r2, [pc, #196]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
 8004500:	e011      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800450a:	d10c      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f8c8 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004522:	7cfb      	ldrb	r3, [r7, #19]
 8004524:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d028      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	491f      	ldr	r1, [pc, #124]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004550:	d106      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455c:	60d3      	str	r3, [r2, #12]
 800455e:	e011      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f899 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02b      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	4908      	ldr	r1, [pc, #32]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a02      	ldr	r2, [pc, #8]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ba:	60d3      	str	r3, [r2, #12]
 80045bc:	e014      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2101      	movs	r1, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f867 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02f      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004602:	4928      	ldr	r1, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f844 	bl	80046a8 <RCCEx_PLLSAI1_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	74bb      	strb	r3, [r7, #18]
 800462e:	e011      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004638:	d10c      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3320      	adds	r3, #32
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f925 	bl	8004890 <RCCEx_PLLSAI2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800469a:	7cbb      	ldrb	r3, [r7, #18]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000

080046a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046b6:	4b75      	ldr	r3, [pc, #468]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046c2:	4b72      	ldr	r3, [pc, #456]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0203 	and.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d10d      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
       ||
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046da:	4b6c      	ldr	r3, [pc, #432]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d047      	beq.n	800477e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
 80046f2:	e044      	b.n	800477e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d018      	beq.n	800472e <RCCEx_PLLSAI1_Config+0x86>
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d825      	bhi.n	800474c <RCCEx_PLLSAI1_Config+0xa4>
 8004700:	2b01      	cmp	r3, #1
 8004702:	d002      	beq.n	800470a <RCCEx_PLLSAI1_Config+0x62>
 8004704:	2b02      	cmp	r3, #2
 8004706:	d009      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x74>
 8004708:	e020      	b.n	800474c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800470a:	4b60      	ldr	r3, [pc, #384]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11d      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471a:	e01a      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800471c:	4b5b      	ldr	r3, [pc, #364]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d116      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472c:	e013      	b.n	8004756 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800472e:	4b57      	ldr	r3, [pc, #348]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800473a:	4b54      	ldr	r3, [pc, #336]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800474a:	e006      	b.n	800475a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e004      	b.n	800475c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800475a:	bf00      	nop
    }

    if(status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004762:	4b4a      	ldr	r3, [pc, #296]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	430b      	orrs	r3, r1
 8004778:	4944      	ldr	r1, [pc, #272]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d17d      	bne.n	8004880 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004784:	4b41      	ldr	r3, [pc, #260]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a40      	ldr	r2, [pc, #256]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800478e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fc ff66 	bl	8001660 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fc ff62 	bl	8001660 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
        break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ac:	4b37      	ldr	r3, [pc, #220]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ef      	bne.n	8004798 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d160      	bne.n	8004880 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d111      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c4:	4b31      	ldr	r3, [pc, #196]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6892      	ldr	r2, [r2, #8]
 80047d4:	0211      	lsls	r1, r2, #8
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68d2      	ldr	r2, [r2, #12]
 80047da:	0912      	lsrs	r2, r2, #4
 80047dc:	0452      	lsls	r2, r2, #17
 80047de:	430a      	orrs	r2, r1
 80047e0:	492a      	ldr	r1, [pc, #168]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	610b      	str	r3, [r1, #16]
 80047e6:	e027      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d112      	bne.n	8004814 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	0211      	lsls	r1, r2, #8
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6912      	ldr	r2, [r2, #16]
 8004804:	0852      	lsrs	r2, r2, #1
 8004806:	3a01      	subs	r2, #1
 8004808:	0552      	lsls	r2, r2, #21
 800480a:	430a      	orrs	r2, r1
 800480c:	491f      	ldr	r1, [pc, #124]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	610b      	str	r3, [r1, #16]
 8004812:	e011      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800481c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	0211      	lsls	r1, r2, #8
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6952      	ldr	r2, [r2, #20]
 800482a:	0852      	lsrs	r2, r2, #1
 800482c:	3a01      	subs	r2, #1
 800482e:	0652      	lsls	r2, r2, #25
 8004830:	430a      	orrs	r2, r1
 8004832:	4916      	ldr	r1, [pc, #88]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004838:	4b14      	ldr	r3, [pc, #80]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a13      	ldr	r2, [pc, #76]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc ff0c 	bl	8001660 <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800484a:	e009      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800484c:	f7fc ff08 	bl	8001660 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	73fb      	strb	r3, [r7, #15]
          break;
 800485e:	e005      	b.n	800486c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	4904      	ldr	r1, [pc, #16]	; (800488c <RCCEx_PLLSAI1_Config+0x1e4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000

08004890 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048aa:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0203 	and.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d10d      	bne.n	80048d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
       ||
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048c2:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
       ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d047      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	e044      	b.n	8004966 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d018      	beq.n	8004916 <RCCEx_PLLSAI2_Config+0x86>
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d825      	bhi.n	8004934 <RCCEx_PLLSAI2_Config+0xa4>
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d002      	beq.n	80048f2 <RCCEx_PLLSAI2_Config+0x62>
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d009      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x74>
 80048f0:	e020      	b.n	8004934 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048f2:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11d      	bne.n	800493a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004902:	e01a      	b.n	800493a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d116      	bne.n	800493e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004914:	e013      	b.n	800493e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004916:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004922:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004932:	e006      	b.n	8004942 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      break;
 8004938:	e004      	b.n	8004944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800493a:	bf00      	nop
 800493c:	e002      	b.n	8004944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004942:	bf00      	nop
    }

    if(status == HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	430b      	orrs	r3, r1
 8004960:	4939      	ldr	r1, [pc, #228]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d167      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a35      	ldr	r2, [pc, #212]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fc fe72 	bl	8001660 <HAL_GetTick>
 800497c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800497e:	e009      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004980:	f7fc fe6e 	bl	8001660 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d902      	bls.n	8004994 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	73fb      	strb	r3, [r7, #15]
        break;
 8004992:	e005      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004994:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ef      	bne.n	8004980 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d14a      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d111      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ac:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	0211      	lsls	r1, r2, #8
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68d2      	ldr	r2, [r2, #12]
 80049c2:	0912      	lsrs	r2, r2, #4
 80049c4:	0452      	lsls	r2, r2, #17
 80049c6:	430a      	orrs	r2, r1
 80049c8:	491f      	ldr	r1, [pc, #124]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	614b      	str	r3, [r1, #20]
 80049ce:	e011      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6892      	ldr	r2, [r2, #8]
 80049e0:	0211      	lsls	r1, r2, #8
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6912      	ldr	r2, [r2, #16]
 80049e6:	0852      	lsrs	r2, r2, #1
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0652      	lsls	r2, r2, #25
 80049ec:	430a      	orrs	r2, r1
 80049ee:	4916      	ldr	r1, [pc, #88]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fc fe2e 	bl	8001660 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a08:	f7fc fe2a 	bl	8001660 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
          break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ef      	beq.n	8004a08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	4904      	ldr	r1, [pc, #16]	; (8004a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000

08004a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e049      	b.n	8004af2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f841 	bl	8004afa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f000 f9da 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e04f      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_TIM_Base_Start_IT+0xdc>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	00010007 	.word	0x00010007

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0202 	mvn.w	r2, #2
 8004c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8e4 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8d6 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8e7 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8be 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8b0 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8c1 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0208 	mvn.w	r2, #8
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f898 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f88a 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f89b 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d020      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f872 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f864 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f875 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0201 	mvn.w	r2, #1
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fa3a 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f906 	bl	8004f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8fe 	bl	8004fa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f834 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0220 	mvn.w	r2, #32
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8c6 	bl	8004f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3c      	ldr	r2, [pc, #240]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d01b      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d017      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <TIM_Base_SetConfig+0x128>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0x9a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a10      	ldr	r2, [pc, #64]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00f      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <TIM_Base_SetConfig+0x128>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a10      	ldr	r2, [pc, #64]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d103      	bne.n	8004f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	615a      	str	r2, [r3, #20]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40013400 	.word	0x40013400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800

08004f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e040      	b.n	8005048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc f9d2 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2224      	movs	r2, #36	; 0x24
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fae0 	bl	80055c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f825 	bl	8005050 <UART_SetConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e01b      	b.n	8005048 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb5f 	bl	8005704 <UART_CheckIdleState>
 8005046:	4603      	mov	r3, r0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	431a      	orrs	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4313      	orrs	r3, r2
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4ba4      	ldr	r3, [pc, #656]	; (8005310 <UART_SetConfig+0x2c0>)
 8005080:	4013      	ands	r3, r2
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005088:	430b      	orrs	r3, r1
 800508a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a99      	ldr	r2, [pc, #612]	; (8005314 <UART_SetConfig+0x2c4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a90      	ldr	r2, [pc, #576]	; (8005318 <UART_SetConfig+0x2c8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d126      	bne.n	8005128 <UART_SetConfig+0xd8>
 80050da:	4b90      	ldr	r3, [pc, #576]	; (800531c <UART_SetConfig+0x2cc>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d81b      	bhi.n	8005120 <UART_SetConfig+0xd0>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0xa0>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005111 	.word	0x08005111
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005119 	.word	0x08005119
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e116      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510e:	e112      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e10e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e10a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e106      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7c      	ldr	r2, [pc, #496]	; (8005320 <UART_SetConfig+0x2d0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d138      	bne.n	80051a4 <UART_SetConfig+0x154>
 8005132:	4b7a      	ldr	r3, [pc, #488]	; (800531c <UART_SetConfig+0x2cc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d82d      	bhi.n	800519c <UART_SetConfig+0x14c>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xf8>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800517d 	.word	0x0800517d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	0800519d 	.word	0x0800519d
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800519d 	.word	0x0800519d
 8005170:	0800519d 	.word	0x0800519d
 8005174:	0800519d 	.word	0x0800519d
 8005178:	08005195 	.word	0x08005195
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e0d8      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e0d4      	b.n	8005336 <UART_SetConfig+0x2e6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e0d0      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e0cc      	b.n	8005336 <UART_SetConfig+0x2e6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e0c8      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5e      	ldr	r2, [pc, #376]	; (8005324 <UART_SetConfig+0x2d4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d125      	bne.n	80051fa <UART_SetConfig+0x1aa>
 80051ae:	4b5b      	ldr	r3, [pc, #364]	; (800531c <UART_SetConfig+0x2cc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d016      	beq.n	80051ea <UART_SetConfig+0x19a>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d818      	bhi.n	80051f2 <UART_SetConfig+0x1a2>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d00a      	beq.n	80051da <UART_SetConfig+0x18a>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d814      	bhi.n	80051f2 <UART_SetConfig+0x1a2>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <UART_SetConfig+0x182>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d008      	beq.n	80051e2 <UART_SetConfig+0x192>
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0x1a2>
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d8:	e0ad      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051da:	2302      	movs	r3, #2
 80051dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e0:	e0a9      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051e2:	2304      	movs	r3, #4
 80051e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e8:	e0a5      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051ea:	2308      	movs	r3, #8
 80051ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f0:	e0a1      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051f2:	2310      	movs	r3, #16
 80051f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f8:	e09d      	b.n	8005336 <UART_SetConfig+0x2e6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <UART_SetConfig+0x2d8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d125      	bne.n	8005250 <UART_SetConfig+0x200>
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <UART_SetConfig+0x2cc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520e:	2bc0      	cmp	r3, #192	; 0xc0
 8005210:	d016      	beq.n	8005240 <UART_SetConfig+0x1f0>
 8005212:	2bc0      	cmp	r3, #192	; 0xc0
 8005214:	d818      	bhi.n	8005248 <UART_SetConfig+0x1f8>
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d00a      	beq.n	8005230 <UART_SetConfig+0x1e0>
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d814      	bhi.n	8005248 <UART_SetConfig+0x1f8>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <UART_SetConfig+0x1d8>
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d008      	beq.n	8005238 <UART_SetConfig+0x1e8>
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x1f8>
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e082      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005236:	e07e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523e:	e07a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005246:	e076      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524e:	e072      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a35      	ldr	r2, [pc, #212]	; (800532c <UART_SetConfig+0x2dc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d12a      	bne.n	80052b0 <UART_SetConfig+0x260>
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <UART_SetConfig+0x2cc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005268:	d01a      	beq.n	80052a0 <UART_SetConfig+0x250>
 800526a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0x258>
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d00c      	beq.n	8005290 <UART_SetConfig+0x240>
 8005276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527a:	d815      	bhi.n	80052a8 <UART_SetConfig+0x258>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <UART_SetConfig+0x238>
 8005280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005284:	d008      	beq.n	8005298 <UART_SetConfig+0x248>
 8005286:	e00f      	b.n	80052a8 <UART_SetConfig+0x258>
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e052      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e04e      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e04a      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e046      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e042      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <UART_SetConfig+0x2c4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d13a      	bne.n	8005330 <UART_SetConfig+0x2e0>
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <UART_SetConfig+0x2cc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c8:	d01a      	beq.n	8005300 <UART_SetConfig+0x2b0>
 80052ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ce:	d81b      	bhi.n	8005308 <UART_SetConfig+0x2b8>
 80052d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d4:	d00c      	beq.n	80052f0 <UART_SetConfig+0x2a0>
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d815      	bhi.n	8005308 <UART_SetConfig+0x2b8>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <UART_SetConfig+0x298>
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d008      	beq.n	80052f8 <UART_SetConfig+0x2a8>
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x2b8>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e022      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e01e      	b.n	8005336 <UART_SetConfig+0x2e6>
 80052f8:	2304      	movs	r3, #4
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e01a      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005300:	2308      	movs	r3, #8
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e016      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005308:	2310      	movs	r3, #16
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e012      	b.n	8005336 <UART_SetConfig+0x2e6>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40008000 	.word	0x40008000
 8005318:	40013800 	.word	0x40013800
 800531c:	40021000 	.word	0x40021000
 8005320:	40004400 	.word	0x40004400
 8005324:	40004800 	.word	0x40004800
 8005328:	40004c00 	.word	0x40004c00
 800532c:	40005000 	.word	0x40005000
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a9f      	ldr	r2, [pc, #636]	; (80055b8 <UART_SetConfig+0x568>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d17a      	bne.n	8005436 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005344:	2b08      	cmp	r3, #8
 8005346:	d824      	bhi.n	8005392 <UART_SetConfig+0x342>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x300>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	08005393 	.word	0x08005393
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005393 	.word	0x08005393
 8005360:	08005383 	.word	0x08005383
 8005364:	08005393 	.word	0x08005393
 8005368:	08005393 	.word	0x08005393
 800536c:	08005393 	.word	0x08005393
 8005370:	0800538b 	.word	0x0800538b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe fdf0 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005378:	61f8      	str	r0, [r7, #28]
        break;
 800537a:	e010      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800537c:	4b8f      	ldr	r3, [pc, #572]	; (80055bc <UART_SetConfig+0x56c>)
 800537e:	61fb      	str	r3, [r7, #28]
        break;
 8005380:	e00d      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005382:	f7fe fd51 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005386:	61f8      	str	r0, [r7, #28]
        break;
 8005388:	e009      	b.n	800539e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e005      	b.n	800539e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800539c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80fb 	beq.w	800559c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d305      	bcc.n	80053c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d903      	bls.n	80053ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053c8:	e0e8      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2200      	movs	r2, #0
 80053ce:	461c      	mov	r4, r3
 80053d0:	4615      	mov	r5, r2
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	022b      	lsls	r3, r5, #8
 80053dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053e0:	0222      	lsls	r2, r4, #8
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6849      	ldr	r1, [r1, #4]
 80053e6:	0849      	lsrs	r1, r1, #1
 80053e8:	2000      	movs	r0, #0
 80053ea:	4688      	mov	r8, r1
 80053ec:	4681      	mov	r9, r0
 80053ee:	eb12 0a08 	adds.w	sl, r2, r8
 80053f2:	eb43 0b09 	adc.w	fp, r3, r9
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005404:	4650      	mov	r0, sl
 8005406:	4659      	mov	r1, fp
 8005408:	f7fb fb00 	bl	8000a0c <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800541a:	d308      	bcc.n	800542e <UART_SetConfig+0x3de>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005422:	d204      	bcs.n	800542e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e0b6      	b.n	800559c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005434:	e0b2      	b.n	800559c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d15e      	bne.n	80054fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005444:	2b08      	cmp	r3, #8
 8005446:	d828      	bhi.n	800549a <UART_SetConfig+0x44a>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x400>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549b 	.word	0x0800549b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800549b 	.word	0x0800549b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fe fd70 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005478:	61f8      	str	r0, [r7, #28]
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547c:	f7fe fd82 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8005480:	61f8      	str	r0, [r7, #28]
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <UART_SetConfig+0x56c>)
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fe fccd 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 800548e:	61f8      	str	r0, [r7, #28]
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	61fb      	str	r3, [r7, #28]
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d077      	beq.n	800559c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005a      	lsls	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	441a      	add	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d916      	bls.n	80054f6 <UART_SetConfig+0x4a6>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ce:	d212      	bcs.n	80054f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f023 030f 	bic.w	r3, r3, #15
 80054d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	8afb      	ldrh	r3, [r7, #22]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	8afa      	ldrh	r2, [r7, #22]
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e052      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054fc:	e04e      	b.n	800559c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005502:	2b08      	cmp	r3, #8
 8005504:	d827      	bhi.n	8005556 <UART_SetConfig+0x506>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x4bc>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe fd12 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005534:	61f8      	str	r0, [r7, #28]
        break;
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe fd24 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 800553c:	61f8      	str	r0, [r7, #28]
        break;
 800553e:	e010      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <UART_SetConfig+0x56c>)
 8005542:	61fb      	str	r3, [r7, #28]
        break;
 8005544:	e00d      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fe fc6f 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 800554a:	61f8      	str	r0, [r7, #28]
        break;
 800554c:	e009      	b.n	8005562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005552:	61fb      	str	r3, [r7, #28]
        break;
 8005554:	e005      	b.n	8005562 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005560:	bf00      	nop
    }

    if (pclk != 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d019      	beq.n	800559c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	085a      	lsrs	r2, r3, #1
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	441a      	add	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d909      	bls.n	8005596 <UART_SetConfig+0x546>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d205      	bcs.n	8005596 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e002      	b.n	800559c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b6:	bf00      	nop
 80055b8:	40008000 	.word	0x40008000
 80055bc:	00f42400 	.word	0x00f42400

080055c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d10a      	bne.n	80056d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b098      	sub	sp, #96	; 0x60
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb ffa4 	bl	8001660 <HAL_GetTick>
 8005718:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d12e      	bne.n	8005786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f88c 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d021      	beq.n	8005786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800576e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e062      	b.n	800584c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b04      	cmp	r3, #4
 8005792:	d149      	bne.n	8005828 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579c:	2200      	movs	r2, #0
 800579e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f856 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03c      	beq.n	8005828 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	623b      	str	r3, [r7, #32]
   return(result);
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005800:	61fa      	str	r2, [r7, #28]
 8005802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	617b      	str	r3, [r7, #20]
   return(result);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e011      	b.n	800584c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3758      	adds	r7, #88	; 0x58
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005864:	e049      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d045      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586e:	f7fb fef7 	bl	8001660 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <UART_WaitOnFlagUntilTimeout+0x30>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e048      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d031      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d110      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2208      	movs	r2, #8
 80058aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f838 	bl	8005922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2208      	movs	r2, #8
 80058b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e029      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d4:	d111      	bne.n	80058fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f81e 	bl	8005922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e00f      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	429a      	cmp	r2, r3
 8005916:	d0a6      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005922:	b480      	push	{r7}
 8005924:	b095      	sub	sp, #84	; 0x54
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800593e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005948:	643b      	str	r3, [r7, #64]	; 0x40
 800594a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800594e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	61fb      	str	r3, [r7, #28]
   return(result);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800597c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005994:	2b01      	cmp	r3, #1
 8005996:	d118      	bne.n	80059ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	647b      	str	r3, [r7, #68]	; 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	613b      	str	r3, [r7, #16]
   return(result);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059de:	bf00      	nop
 80059e0:	3754      	adds	r7, #84	; 0x54
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	4603      	mov	r3, r0
 80059f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fc:	2b84      	cmp	r3, #132	; 0x84
 80059fe:	d005      	beq.n	8005a0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	3303      	adds	r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a1e:	f000 faf5 	bl	800600c <vTaskStartScheduler>
  
  return osOK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af04      	add	r7, sp, #16
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d020      	beq.n	8005a7c <osThreadCreate+0x54>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01c      	beq.n	8005a7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685c      	ldr	r4, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691e      	ldr	r6, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ffc8 	bl	80059ea <makeFreeRtosPriority>
 8005a5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a64:	9202      	str	r2, [sp, #8]
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	9100      	str	r1, [sp, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 f8ed 	bl	8005c50 <xTaskCreateStatic>
 8005a76:	4603      	mov	r3, r0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e01c      	b.n	8005ab6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685c      	ldr	r4, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ffaa 	bl	80059ea <makeFreeRtosPriority>
 8005a96:	4602      	mov	r2, r0
 8005a98:	f107 030c 	add.w	r3, r7, #12
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9200      	str	r2, [sp, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f92f 	bl	8005d0a <xTaskCreate>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d001      	beq.n	8005ab6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ac0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <osDelay+0x16>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	e000      	b.n	8005ad8 <osDelay+0x18>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fa63 	bl	8005fa4 <vTaskDelay>
  
  return osOK;
 8005ade:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f103 0208 	add.w	r2, r3, #8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295
 8005b00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f103 0208 	add.w	r2, r3, #8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f103 0208 	add.w	r2, r3, #8
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d103      	bne.n	8005baa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e00c      	b.n	8005bc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3308      	adds	r3, #8
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <vListInsert+0x2e>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d2f6      	bcs.n	8005bb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6852      	ldr	r2, [r2, #4]
 8005c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d103      	bne.n	8005c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	61fb      	str	r3, [r7, #28]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c96:	23a0      	movs	r3, #160	; 0xa0
 8005c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2ba0      	cmp	r3, #160	; 0xa0
 8005c9e:	d00a      	beq.n	8005cb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	61bb      	str	r3, [r7, #24]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01e      	beq.n	8005cfc <xTaskCreateStatic+0xac>
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9303      	str	r3, [sp, #12]
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	f107 0314 	add.w	r3, r7, #20
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f850 	bl	8005d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cf6:	f000 f8eb 	bl	8005ed0 <prvAddNewTaskToReadyList>
 8005cfa:	e001      	b.n	8005d00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
	}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3728      	adds	r7, #40	; 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b08c      	sub	sp, #48	; 0x30
 8005d0e:	af04      	add	r7, sp, #16
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fef2 	bl	8006b08 <pvPortMalloc>
 8005d24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d2c:	20a0      	movs	r0, #160	; 0xa0
 8005d2e:	f000 feeb 	bl	8006b08 <pvPortMalloc>
 8005d32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d40:	e005      	b.n	8005d4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f000 ffac 	bl	8006ca0 <vPortFree>
 8005d48:	e001      	b.n	8005d4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d017      	beq.n	8005d84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f80e 	bl	8005d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d78:	69f8      	ldr	r0, [r7, #28]
 8005d7a:	f000 f8a9 	bl	8005ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e002      	b.n	8005d8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295
 8005d88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dac:	3b01      	subs	r3, #1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <prvInitialiseNewTask+0x48>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	617b      	str	r3, [r7, #20]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01f      	beq.n	8005e22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e012      	b.n	8005e0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	7819      	ldrb	r1, [r3, #0]
 8005df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	3334      	adds	r3, #52	; 0x34
 8005df8:	460a      	mov	r2, r1
 8005dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b0f      	cmp	r3, #15
 8005e12:	d9e9      	bls.n	8005de8 <prvInitialiseNewTask+0x54>
 8005e14:	e000      	b.n	8005e18 <prvInitialiseNewTask+0x84>
			{
				break;
 8005e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e20:	e003      	b.n	8005e2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	2b06      	cmp	r3, #6
 8005e2e:	d901      	bls.n	8005e34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e30:	2306      	movs	r3, #6
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	2200      	movs	r2, #0
 8005e44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fe6c 	bl	8005b28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	3318      	adds	r3, #24
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fe67 	bl	8005b28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f1c3 0207 	rsb	r2, r3, #7
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	334c      	adds	r3, #76	; 0x4c
 8005e84:	224c      	movs	r2, #76	; 0x4c
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f827 	bl	8006edc <memset>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <prvInitialiseNewTask+0x130>)
 8005e92:	651a      	str	r2, [r3, #80]	; 0x50
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	4a0c      	ldr	r2, [pc, #48]	; (8005ec8 <prvInitialiseNewTask+0x134>)
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ecc <prvInitialiseNewTask+0x138>)
 8005e9e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	69b8      	ldr	r0, [r7, #24]
 8005ea6:	f000 fc1f 	bl	80066e8 <pxPortInitialiseStack>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ebc:	bf00      	nop
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200011c4 	.word	0x200011c4
 8005ec8:	2000122c 	.word	0x2000122c
 8005ecc:	20001294 	.word	0x20001294

08005ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ed8:	f000 fd34 	bl	8006944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005edc:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <prvAddNewTaskToReadyList+0xb8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a29      	ldr	r2, [pc, #164]	; (8005f88 <prvAddNewTaskToReadyList+0xb8>)
 8005ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <prvAddNewTaskToReadyList+0xbc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eee:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <prvAddNewTaskToReadyList+0xbc>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <prvAddNewTaskToReadyList+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d110      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005efc:	f000 facc 	bl	8006498 <prvInitialiseTaskLists>
 8005f00:	e00d      	b.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <prvAddNewTaskToReadyList+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f0a:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <prvAddNewTaskToReadyList+0xbc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d802      	bhi.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <prvAddNewTaskToReadyList+0xbc>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <prvAddNewTaskToReadyList+0xc4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <prvAddNewTaskToReadyList+0xc4>)
 8005f26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <prvAddNewTaskToReadyList+0xcc>)
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7ff fdf6 	bl	8005b42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f56:	f000 fd25 	bl	80069a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <prvAddNewTaskToReadyList+0xc0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <prvAddNewTaskToReadyList+0xbc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d207      	bcs.n	8005f80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <prvAddNewTaskToReadyList+0xd0>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	200005b8 	.word	0x200005b8
 8005f8c:	200004b8 	.word	0x200004b8
 8005f90:	200005c4 	.word	0x200005c4
 8005f94:	200005d4 	.word	0x200005d4
 8005f98:	200005c0 	.word	0x200005c0
 8005f9c:	200004bc 	.word	0x200004bc
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <vTaskDelay+0x60>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <vTaskDelay+0x30>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60bb      	str	r3, [r7, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fd4:	f000 f884 	bl	80060e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fb1e 	bl	800661c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fe0:	f000 f88c 	bl	80060fc <xTaskResumeAll>
 8005fe4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d107      	bne.n	8005ffc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <vTaskDelay+0x64>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	200005e0 	.word	0x200005e0
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800601a:	463a      	mov	r2, r7
 800601c:	1d39      	adds	r1, r7, #4
 800601e:	f107 0308 	add.w	r3, r7, #8
 8006022:	4618      	mov	r0, r3
 8006024:	f7fa fe70 	bl	8000d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	460a      	mov	r2, r1
 800603a:	4921      	ldr	r1, [pc, #132]	; (80060c0 <vTaskStartScheduler+0xb4>)
 800603c:	4821      	ldr	r0, [pc, #132]	; (80060c4 <vTaskStartScheduler+0xb8>)
 800603e:	f7ff fe07 	bl	8005c50 <xTaskCreateStatic>
 8006042:	4603      	mov	r3, r0
 8006044:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <vTaskStartScheduler+0xbc>)
 8006046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006048:	4b1f      	ldr	r3, [pc, #124]	; (80060c8 <vTaskStartScheduler+0xbc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e001      	b.n	800605a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d11b      	bne.n	8006098 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
}
 8006072:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006074:	4b15      	ldr	r3, [pc, #84]	; (80060cc <vTaskStartScheduler+0xc0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	334c      	adds	r3, #76	; 0x4c
 800607a:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <vTaskStartScheduler+0xc4>)
 800607c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <vTaskStartScheduler+0xc8>)
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006086:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <vTaskStartScheduler+0xcc>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800608c:	4b13      	ldr	r3, [pc, #76]	; (80060dc <vTaskStartScheduler+0xd0>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006092:	f000 fbb5 	bl	8006800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006096:	e00e      	b.n	80060b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d10a      	bne.n	80060b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <vTaskStartScheduler+0xa8>
}
 80060b6:	bf00      	nop
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	08007130 	.word	0x08007130
 80060c4:	08006469 	.word	0x08006469
 80060c8:	200005dc 	.word	0x200005dc
 80060cc:	200004b8 	.word	0x200004b8
 80060d0:	2000005c 	.word	0x2000005c
 80060d4:	200005d8 	.word	0x200005d8
 80060d8:	200005c4 	.word	0x200005c4
 80060dc:	200005bc 	.word	0x200005bc

080060e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <vTaskSuspendAll+0x18>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a03      	ldr	r2, [pc, #12]	; (80060f8 <vTaskSuspendAll+0x18>)
 80060ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	200005e0 	.word	0x200005e0

080060fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800610a:	4b41      	ldr	r3, [pc, #260]	; (8006210 <xTaskResumeAll+0x114>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <xTaskResumeAll+0x2c>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	603b      	str	r3, [r7, #0]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006128:	f000 fc0c 	bl	8006944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <xTaskResumeAll+0x114>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	4a37      	ldr	r2, [pc, #220]	; (8006210 <xTaskResumeAll+0x114>)
 8006134:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <xTaskResumeAll+0x114>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d161      	bne.n	8006202 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800613e:	4b35      	ldr	r3, [pc, #212]	; (8006214 <xTaskResumeAll+0x118>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d05d      	beq.n	8006202 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006146:	e02e      	b.n	80061a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	4b33      	ldr	r3, [pc, #204]	; (8006218 <xTaskResumeAll+0x11c>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fd51 	bl	8005bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fd4c 	bl	8005bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	4b2b      	ldr	r3, [pc, #172]	; (800621c <xTaskResumeAll+0x120>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4313      	orrs	r3, r2
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <xTaskResumeAll+0x120>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <xTaskResumeAll+0x124>)
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7ff fcd8 	bl	8005b42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	4b23      	ldr	r3, [pc, #140]	; (8006224 <xTaskResumeAll+0x128>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80061a0:	4b21      	ldr	r3, [pc, #132]	; (8006228 <xTaskResumeAll+0x12c>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061a6:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <xTaskResumeAll+0x11c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1cc      	bne.n	8006148 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061b4:	f000 fa12 	bl	80065dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061b8:	4b1c      	ldr	r3, [pc, #112]	; (800622c <xTaskResumeAll+0x130>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d010      	beq.n	80061e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061c4:	f000 f836 	bl	8006234 <xTaskIncrementTick>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80061ce:	4b16      	ldr	r3, [pc, #88]	; (8006228 <xTaskResumeAll+0x12c>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f1      	bne.n	80061c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <xTaskResumeAll+0x130>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <xTaskResumeAll+0x12c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <xTaskResumeAll+0x134>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006202:	f000 fbcf 	bl	80069a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006206:	68bb      	ldr	r3, [r7, #8]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200005e0 	.word	0x200005e0
 8006214:	200005b8 	.word	0x200005b8
 8006218:	20000578 	.word	0x20000578
 800621c:	200005c0 	.word	0x200005c0
 8006220:	200004bc 	.word	0x200004bc
 8006224:	200004b8 	.word	0x200004b8
 8006228:	200005cc 	.word	0x200005cc
 800622c:	200005c8 	.word	0x200005c8
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800623e:	4b4e      	ldr	r3, [pc, #312]	; (8006378 <xTaskIncrementTick+0x144>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 808e 	bne.w	8006364 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006248:	4b4c      	ldr	r3, [pc, #304]	; (800637c <xTaskIncrementTick+0x148>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006250:	4a4a      	ldr	r2, [pc, #296]	; (800637c <xTaskIncrementTick+0x148>)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d120      	bne.n	800629e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800625c:	4b48      	ldr	r3, [pc, #288]	; (8006380 <xTaskIncrementTick+0x14c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <xTaskIncrementTick+0x48>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	603b      	str	r3, [r7, #0]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <xTaskIncrementTick+0x46>
 800627c:	4b40      	ldr	r3, [pc, #256]	; (8006380 <xTaskIncrementTick+0x14c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	4b40      	ldr	r3, [pc, #256]	; (8006384 <xTaskIncrementTick+0x150>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3e      	ldr	r2, [pc, #248]	; (8006380 <xTaskIncrementTick+0x14c>)
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4a3e      	ldr	r2, [pc, #248]	; (8006384 <xTaskIncrementTick+0x150>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b3d      	ldr	r3, [pc, #244]	; (8006388 <xTaskIncrementTick+0x154>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <xTaskIncrementTick+0x154>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	f000 f99f 	bl	80065dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800629e:	4b3b      	ldr	r3, [pc, #236]	; (800638c <xTaskIncrementTick+0x158>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d348      	bcc.n	800633a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a8:	4b35      	ldr	r3, [pc, #212]	; (8006380 <xTaskIncrementTick+0x14c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	4b36      	ldr	r3, [pc, #216]	; (800638c <xTaskIncrementTick+0x158>)
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	601a      	str	r2, [r3, #0]
					break;
 80062ba:	e03e      	b.n	800633a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062bc:	4b30      	ldr	r3, [pc, #192]	; (8006380 <xTaskIncrementTick+0x14c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d203      	bcs.n	80062dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062d4:	4a2d      	ldr	r2, [pc, #180]	; (800638c <xTaskIncrementTick+0x158>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062da:	e02e      	b.n	800633a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fc8b 	bl	8005bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3318      	adds	r3, #24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fc82 	bl	8005bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	2201      	movs	r2, #1
 80062fe:	409a      	lsls	r2, r3
 8006300:	4b23      	ldr	r3, [pc, #140]	; (8006390 <xTaskIncrementTick+0x15c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	4a22      	ldr	r2, [pc, #136]	; (8006390 <xTaskIncrementTick+0x15c>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <xTaskIncrementTick+0x160>)
 8006318:	441a      	add	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff fc0e 	bl	8005b42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <xTaskIncrementTick+0x164>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	429a      	cmp	r2, r3
 8006332:	d3b9      	bcc.n	80062a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006338:	e7b6      	b.n	80062a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <xTaskIncrementTick+0x164>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4914      	ldr	r1, [pc, #80]	; (8006394 <xTaskIncrementTick+0x160>)
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d901      	bls.n	8006356 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <xTaskIncrementTick+0x168>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e004      	b.n	800636e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <xTaskIncrementTick+0x16c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a0d      	ldr	r2, [pc, #52]	; (80063a0 <xTaskIncrementTick+0x16c>)
 800636c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800636e:	697b      	ldr	r3, [r7, #20]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200005e0 	.word	0x200005e0
 800637c:	200005bc 	.word	0x200005bc
 8006380:	20000570 	.word	0x20000570
 8006384:	20000574 	.word	0x20000574
 8006388:	200005d0 	.word	0x200005d0
 800638c:	200005d8 	.word	0x200005d8
 8006390:	200005c0 	.word	0x200005c0
 8006394:	200004bc 	.word	0x200004bc
 8006398:	200004b8 	.word	0x200004b8
 800639c:	200005cc 	.word	0x200005cc
 80063a0:	200005c8 	.word	0x200005c8

080063a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063aa:	4b29      	ldr	r3, [pc, #164]	; (8006450 <vTaskSwitchContext+0xac>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063b2:	4b28      	ldr	r3, [pc, #160]	; (8006454 <vTaskSwitchContext+0xb0>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063b8:	e044      	b.n	8006444 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <vTaskSwitchContext+0xb0>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <vTaskSwitchContext+0xb4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	fab3 f383 	clz	r3, r3
 80063cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f1c3 031f 	rsb	r3, r3, #31
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	4921      	ldr	r1, [pc, #132]	; (800645c <vTaskSwitchContext+0xb8>)
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <vTaskSwitchContext+0x5c>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <vTaskSwitchContext+0x5a>
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4a14      	ldr	r2, [pc, #80]	; (800645c <vTaskSwitchContext+0xb8>)
 800640c:	4413      	add	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3308      	adds	r3, #8
 8006422:	429a      	cmp	r2, r3
 8006424:	d104      	bne.n	8006430 <vTaskSwitchContext+0x8c>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <vTaskSwitchContext+0xbc>)
 8006438:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <vTaskSwitchContext+0xbc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	334c      	adds	r3, #76	; 0x4c
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <vTaskSwitchContext+0xc0>)
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	200005e0 	.word	0x200005e0
 8006454:	200005cc 	.word	0x200005cc
 8006458:	200005c0 	.word	0x200005c0
 800645c:	200004bc 	.word	0x200004bc
 8006460:	200004b8 	.word	0x200004b8
 8006464:	2000005c 	.word	0x2000005c

08006468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006470:	f000 f852 	bl	8006518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006474:	4b06      	ldr	r3, [pc, #24]	; (8006490 <prvIdleTask+0x28>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d9f9      	bls.n	8006470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <prvIdleTask+0x2c>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800648c:	e7f0      	b.n	8006470 <prvIdleTask+0x8>
 800648e:	bf00      	nop
 8006490:	200004bc 	.word	0x200004bc
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	e00c      	b.n	80064be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <prvInitialiseTaskLists+0x60>)
 80064b0:	4413      	add	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fb18 	bl	8005ae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3301      	adds	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d9ef      	bls.n	80064a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064c4:	480d      	ldr	r0, [pc, #52]	; (80064fc <prvInitialiseTaskLists+0x64>)
 80064c6:	f7ff fb0f 	bl	8005ae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <prvInitialiseTaskLists+0x68>)
 80064cc:	f7ff fb0c 	bl	8005ae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064d0:	480c      	ldr	r0, [pc, #48]	; (8006504 <prvInitialiseTaskLists+0x6c>)
 80064d2:	f7ff fb09 	bl	8005ae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064d6:	480c      	ldr	r0, [pc, #48]	; (8006508 <prvInitialiseTaskLists+0x70>)
 80064d8:	f7ff fb06 	bl	8005ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064dc:	480b      	ldr	r0, [pc, #44]	; (800650c <prvInitialiseTaskLists+0x74>)
 80064de:	f7ff fb03 	bl	8005ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <prvInitialiseTaskLists+0x78>)
 80064e4:	4a05      	ldr	r2, [pc, #20]	; (80064fc <prvInitialiseTaskLists+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvInitialiseTaskLists+0x7c>)
 80064ea:	4a05      	ldr	r2, [pc, #20]	; (8006500 <prvInitialiseTaskLists+0x68>)
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	200004bc 	.word	0x200004bc
 80064fc:	20000548 	.word	0x20000548
 8006500:	2000055c 	.word	0x2000055c
 8006504:	20000578 	.word	0x20000578
 8006508:	2000058c 	.word	0x2000058c
 800650c:	200005a4 	.word	0x200005a4
 8006510:	20000570 	.word	0x20000570
 8006514:	20000574 	.word	0x20000574

08006518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800651e:	e019      	b.n	8006554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006520:	f000 fa10 	bl	8006944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <prvCheckTasksWaitingTermination+0x50>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fb63 	bl	8005bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <prvCheckTasksWaitingTermination+0x54>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a0b      	ldr	r2, [pc, #44]	; (800656c <prvCheckTasksWaitingTermination+0x54>)
 800653e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3b01      	subs	r3, #1
 8006546:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800654a:	f000 fa2b 	bl	80069a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f810 	bl	8006574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e1      	bne.n	8006520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000058c 	.word	0x2000058c
 800656c:	200005b8 	.word	0x200005b8
 8006570:	200005a0 	.word	0x200005a0

08006574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	334c      	adds	r3, #76	; 0x4c
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fcb3 	bl	8006eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800658c:	2b00      	cmp	r3, #0
 800658e:	d108      	bne.n	80065a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fb83 	bl	8006ca0 <vPortFree>
				vPortFree( pxTCB );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fb80 	bl	8006ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065a0:	e018      	b.n	80065d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d103      	bne.n	80065b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fb77 	bl	8006ca0 <vPortFree>
	}
 80065b2:	e00f      	b.n	80065d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d00a      	beq.n	80065d4 <prvDeleteTCB+0x60>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <prvDeleteTCB+0x5e>
	}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <prvResetNextTaskUnblockTime+0x38>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <prvResetNextTaskUnblockTime+0x3c>)
 80065ee:	f04f 32ff 	mov.w	r2, #4294967295
 80065f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065f4:	e008      	b.n	8006608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <prvResetNextTaskUnblockTime+0x38>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a04      	ldr	r2, [pc, #16]	; (8006618 <prvResetNextTaskUnblockTime+0x3c>)
 8006606:	6013      	str	r3, [r2, #0]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	20000570 	.word	0x20000570
 8006618:	200005d8 	.word	0x200005d8

0800661c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3304      	adds	r3, #4
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fae2 	bl	8005bfc <uxListRemove>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	2201      	movs	r2, #1
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43da      	mvns	r2, r3
 800664c:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4013      	ands	r3, r2
 8006652:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006654:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d10a      	bne.n	8006674 <prvAddCurrentTaskToDelayedList+0x58>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	481a      	ldr	r0, [pc, #104]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800666e:	f7ff fa68 	bl	8005b42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006672:	e026      	b.n	80066c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800667c:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d209      	bcs.n	80066a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668c:	4b13      	ldr	r3, [pc, #76]	; (80066dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7ff fa76 	bl	8005b8a <vListInsert>
}
 800669e:	e010      	b.n	80066c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a0:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7ff fa6c 	bl	8005b8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d202      	bcs.n	80066c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6013      	str	r3, [r2, #0]
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200005bc 	.word	0x200005bc
 80066d0:	200004b8 	.word	0x200004b8
 80066d4:	200005c0 	.word	0x200005c0
 80066d8:	200005a4 	.word	0x200005a4
 80066dc:	20000574 	.word	0x20000574
 80066e0:	20000570 	.word	0x20000570
 80066e4:	200005d8 	.word	0x200005d8

080066e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3b04      	subs	r3, #4
 80066f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b04      	subs	r3, #4
 8006706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f023 0201 	bic.w	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3b04      	subs	r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006718:	4a0c      	ldr	r2, [pc, #48]	; (800674c <pxPortInitialiseStack+0x64>)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b14      	subs	r3, #20
 8006722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3b04      	subs	r3, #4
 800672e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f06f 0202 	mvn.w	r2, #2
 8006736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b20      	subs	r3, #32
 800673c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	08006751 	.word	0x08006751

08006750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800675a:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <prvTaskExitError+0x54>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006762:	d00a      	beq.n	800677a <prvTaskExitError+0x2a>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvTaskExitError+0x28>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	60bb      	str	r3, [r7, #8]
}
 800678c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800678e:	bf00      	nop
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0fc      	beq.n	8006790 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	2000000c 	.word	0x2000000c
	...

080067b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <pxCurrentTCBConst2>)
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6808      	ldr	r0, [r1, #0]
 80067b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f380 8809 	msr	PSP, r0
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8811 	msr	BASEPRI, r0
 80067ca:	4770      	bx	lr
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst2>:
 80067d0:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067d8:	4808      	ldr	r0, [pc, #32]	; (80067fc <prvPortStartFirstTask+0x24>)
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	f380 8808 	msr	MSP, r0
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8814 	msr	CONTROL, r0
 80067ea:	b662      	cpsie	i
 80067ec:	b661      	cpsie	f
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	df00      	svc	0
 80067f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067fa:	bf00      	nop
 80067fc:	e000ed08 	.word	0xe000ed08

08006800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006806:	4b46      	ldr	r3, [pc, #280]	; (8006920 <xPortStartScheduler+0x120>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a46      	ldr	r2, [pc, #280]	; (8006924 <xPortStartScheduler+0x124>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10a      	bne.n	8006826 <xPortStartScheduler+0x26>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006826:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <xPortStartScheduler+0x120>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a3f      	ldr	r2, [pc, #252]	; (8006928 <xPortStartScheduler+0x128>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10a      	bne.n	8006846 <xPortStartScheduler+0x46>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <xPortStartScheduler+0x12c>)
 8006848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <xPortStartScheduler+0x130>)
 800686c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800686e:	4b31      	ldr	r3, [pc, #196]	; (8006934 <xPortStartScheduler+0x134>)
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006874:	e009      	b.n	800688a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006876:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <xPortStartScheduler+0x134>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3b01      	subs	r3, #1
 800687c:	4a2d      	ldr	r2, [pc, #180]	; (8006934 <xPortStartScheduler+0x134>)
 800687e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d0ef      	beq.n	8006876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006896:	4b27      	ldr	r3, [pc, #156]	; (8006934 <xPortStartScheduler+0x134>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1c3 0307 	rsb	r3, r3, #7
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00a      	beq.n	80068b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60bb      	str	r3, [r7, #8]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <xPortStartScheduler+0x134>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <xPortStartScheduler+0x134>)
 80068c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <xPortStartScheduler+0x134>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <xPortStartScheduler+0x134>)
 80068cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <xPortStartScheduler+0x138>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <xPortStartScheduler+0x138>)
 80068dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <xPortStartScheduler+0x138>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <xPortStartScheduler+0x138>)
 80068e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ee:	f000 f8dd 	bl	8006aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <xPortStartScheduler+0x13c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068f8:	f000 f8fc 	bl	8006af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <xPortStartScheduler+0x140>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <xPortStartScheduler+0x140>)
 8006902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006908:	f7ff ff66 	bl	80067d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800690c:	f7ff fd4a 	bl	80063a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006910:	f7ff ff1e 	bl	8006750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	e000ed00 	.word	0xe000ed00
 8006924:	410fc271 	.word	0x410fc271
 8006928:	410fc270 	.word	0x410fc270
 800692c:	e000e400 	.word	0xe000e400
 8006930:	200005e4 	.word	0x200005e4
 8006934:	200005e8 	.word	0x200005e8
 8006938:	e000ed20 	.word	0xe000ed20
 800693c:	2000000c 	.word	0x2000000c
 8006940:	e000ef34 	.word	0xe000ef34

08006944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
}
 800695c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <vPortEnterCritical+0x58>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <vPortEnterCritical+0x58>)
 8006966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <vPortEnterCritical+0x58>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10f      	bne.n	8006990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortEnterCritical+0x5c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <vPortEnterCritical+0x4c>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	603b      	str	r3, [r7, #0]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vPortEnterCritical+0x4a>
	}
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <vPortExitCritical+0x50>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <vPortExitCritical+0x24>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <vPortExitCritical+0x50>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <vPortExitCritical+0x50>)
 80069d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069d2:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <vPortExitCritical+0x42>
 80069da:	2300      	movs	r3, #0
 80069dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
	...

08006a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a00:	f3ef 8009 	mrs	r0, PSP
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <pxCurrentTCBConst>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f01e 0f10 	tst.w	lr, #16
 8006a10:	bf08      	it	eq
 8006a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a24:	f380 8811 	msr	BASEPRI, r0
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f7ff fcb8 	bl	80063a4 <vTaskSwitchContext>
 8006a34:	f04f 0000 	mov.w	r0, #0
 8006a38:	f380 8811 	msr	BASEPRI, r0
 8006a3c:	bc09      	pop	{r0, r3}
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	6808      	ldr	r0, [r1, #0]
 8006a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a46:	f01e 0f10 	tst.w	lr, #16
 8006a4a:	bf08      	it	eq
 8006a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a50:	f380 8809 	msr	PSP, r0
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst>:
 8006a60:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
}
 8006a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f7ff fbd7 	bl	8006234 <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <SysTick_Handler+0x40>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
}
 8006a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortSetupTimerInterrupt+0x38>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <vPortSetupTimerInterrupt+0x3c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <vPortSetupTimerInterrupt+0x40>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <vPortSetupTimerInterrupt+0x44>)
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ad0:	2207      	movs	r2, #7
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	e000e010 	.word	0xe000e010
 8006ae4:	e000e018 	.word	0xe000e018
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	10624dd3 	.word	0x10624dd3
 8006af0:	e000e014 	.word	0xe000e014

08006af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b04 <vPortEnableVFP+0x10>
 8006af8:	6801      	ldr	r1, [r0, #0]
 8006afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006afe:	6001      	str	r1, [r0, #0]
 8006b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b02:	bf00      	nop
 8006b04:	e000ed88 	.word	0xe000ed88

08006b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b14:	f7ff fae4 	bl	80060e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b18:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <pvPortMalloc+0x180>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b20:	f000 f920 	bl	8006d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b24:	4b59      	ldr	r3, [pc, #356]	; (8006c8c <pvPortMalloc+0x184>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 8093 	bne.w	8006c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01d      	beq.n	8006b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b38:	2208      	movs	r2, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d014      	beq.n	8006b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f023 0307 	bic.w	r3, r3, #7
 8006b50:	3308      	adds	r3, #8
 8006b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <pvPortMalloc+0x6c>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	617b      	str	r3, [r7, #20]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d06e      	beq.n	8006c58 <pvPortMalloc+0x150>
 8006b7a:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <pvPortMalloc+0x188>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d869      	bhi.n	8006c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b84:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <pvPortMalloc+0x18c>)
 8006b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b88:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <pvPortMalloc+0x18c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8e:	e004      	b.n	8006b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <pvPortMalloc+0xa4>
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f1      	bne.n	8006b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bac:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <pvPortMalloc+0x180>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d050      	beq.n	8006c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d91f      	bls.n	8006c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <pvPortMalloc+0xf8>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	613b      	str	r3, [r7, #16]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c12:	69b8      	ldr	r0, [r7, #24]
 8006c14:	f000 f908 	bl	8006e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <pvPortMalloc+0x188>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <pvPortMalloc+0x188>)
 8006c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <pvPortMalloc+0x188>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <pvPortMalloc+0x190>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d203      	bcs.n	8006c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c32:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <pvPortMalloc+0x188>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <pvPortMalloc+0x190>)
 8006c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x184>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <pvPortMalloc+0x194>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <pvPortMalloc+0x194>)
 8006c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c58:	f7ff fa50 	bl	80060fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <pvPortMalloc+0x174>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <pvPortMalloc+0x172>
	return pvReturn;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200011ac 	.word	0x200011ac
 8006c8c:	200011c0 	.word	0x200011c0
 8006c90:	200011b0 	.word	0x200011b0
 8006c94:	200011a4 	.word	0x200011a4
 8006c98:	200011b4 	.word	0x200011b4
 8006c9c:	200011b8 	.word	0x200011b8

08006ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d04d      	beq.n	8006d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <vPortFree+0xb8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <vPortFree+0x44>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <vPortFree+0x62>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60bb      	str	r3, [r7, #8]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <vPortFree+0xb8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01e      	beq.n	8006d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11a      	bne.n	8006d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <vPortFree+0xb8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d28:	f7ff f9da 	bl	80060e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <vPortFree+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <vPortFree+0xbc>)
 8006d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f000 f874 	bl	8006e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <vPortFree+0xc0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <vPortFree+0xc0>)
 8006d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d4a:	f7ff f9d7 	bl	80060fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200011c0 	.word	0x200011c0
 8006d5c:	200011b0 	.word	0x200011b0
 8006d60:	200011bc 	.word	0x200011bc

08006d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <prvHeapInit+0xac>)
 8006d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3307      	adds	r3, #7
 8006d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <prvHeapInit+0xac>)
 8006d94:	4413      	add	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <prvHeapInit+0xb0>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006da2:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <prvHeapInit+0xb0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006db0:	2208      	movs	r2, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <prvHeapInit+0xb4>)
 8006dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <prvHeapInit+0xb4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <prvHeapInit+0xb4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvHeapInit+0xb4>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <prvHeapInit+0xb8>)
 8006df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <prvHeapInit+0xbc>)
 8006dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <prvHeapInit+0xc0>)
 8006dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	200005ec 	.word	0x200005ec
 8006e14:	200011a4 	.word	0x200011a4
 8006e18:	200011ac 	.word	0x200011ac
 8006e1c:	200011b4 	.word	0x200011b4
 8006e20:	200011b0 	.word	0x200011b0
 8006e24:	200011c0 	.word	0x200011c0

08006e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e30:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <prvInsertBlockIntoFreeList+0xac>)
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e002      	b.n	8006e3c <prvInsertBlockIntoFreeList+0x14>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d8f7      	bhi.n	8006e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4413      	add	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d108      	bne.n	8006e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	441a      	add	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d118      	bne.n	8006eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d00d      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e008      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e003      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d002      	beq.n	8006ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200011a4 	.word	0x200011a4
 8006ed8:	200011ac 	.word	0x200011ac

08006edc <memset>:
 8006edc:	4402      	add	r2, r0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d100      	bne.n	8006ee6 <memset+0xa>
 8006ee4:	4770      	bx	lr
 8006ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eea:	e7f9      	b.n	8006ee0 <memset+0x4>

08006eec <_reclaim_reent>:
 8006eec:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <_reclaim_reent+0xa8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4283      	cmp	r3, r0
 8006ef2:	b570      	push	{r4, r5, r6, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	d04b      	beq.n	8006f90 <_reclaim_reent+0xa4>
 8006ef8:	69c3      	ldr	r3, [r0, #28]
 8006efa:	b143      	cbz	r3, 8006f0e <_reclaim_reent+0x22>
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d144      	bne.n	8006f8c <_reclaim_reent+0xa0>
 8006f02:	69e3      	ldr	r3, [r4, #28]
 8006f04:	6819      	ldr	r1, [r3, #0]
 8006f06:	b111      	cbz	r1, 8006f0e <_reclaim_reent+0x22>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 f86b 	bl	8006fe4 <_free_r>
 8006f0e:	6961      	ldr	r1, [r4, #20]
 8006f10:	b111      	cbz	r1, 8006f18 <_reclaim_reent+0x2c>
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f866 	bl	8006fe4 <_free_r>
 8006f18:	69e1      	ldr	r1, [r4, #28]
 8006f1a:	b111      	cbz	r1, 8006f22 <_reclaim_reent+0x36>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f861 	bl	8006fe4 <_free_r>
 8006f22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f24:	b111      	cbz	r1, 8006f2c <_reclaim_reent+0x40>
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f85c 	bl	8006fe4 <_free_r>
 8006f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f2e:	b111      	cbz	r1, 8006f36 <_reclaim_reent+0x4a>
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 f857 	bl	8006fe4 <_free_r>
 8006f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f38:	b111      	cbz	r1, 8006f40 <_reclaim_reent+0x54>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f852 	bl	8006fe4 <_free_r>
 8006f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f42:	b111      	cbz	r1, 8006f4a <_reclaim_reent+0x5e>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f84d 	bl	8006fe4 <_free_r>
 8006f4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f4c:	b111      	cbz	r1, 8006f54 <_reclaim_reent+0x68>
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 f848 	bl	8006fe4 <_free_r>
 8006f54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f56:	b111      	cbz	r1, 8006f5e <_reclaim_reent+0x72>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 f843 	bl	8006fe4 <_free_r>
 8006f5e:	6a23      	ldr	r3, [r4, #32]
 8006f60:	b1b3      	cbz	r3, 8006f90 <_reclaim_reent+0xa4>
 8006f62:	4620      	mov	r0, r4
 8006f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f68:	4718      	bx	r3
 8006f6a:	5949      	ldr	r1, [r1, r5]
 8006f6c:	b941      	cbnz	r1, 8006f80 <_reclaim_reent+0x94>
 8006f6e:	3504      	adds	r5, #4
 8006f70:	69e3      	ldr	r3, [r4, #28]
 8006f72:	2d80      	cmp	r5, #128	; 0x80
 8006f74:	68d9      	ldr	r1, [r3, #12]
 8006f76:	d1f8      	bne.n	8006f6a <_reclaim_reent+0x7e>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f833 	bl	8006fe4 <_free_r>
 8006f7e:	e7c0      	b.n	8006f02 <_reclaim_reent+0x16>
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f82e 	bl	8006fe4 <_free_r>
 8006f88:	4631      	mov	r1, r6
 8006f8a:	e7ef      	b.n	8006f6c <_reclaim_reent+0x80>
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	e7ef      	b.n	8006f70 <_reclaim_reent+0x84>
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	bf00      	nop
 8006f94:	2000005c 	.word	0x2000005c

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4d0d      	ldr	r5, [pc, #52]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1b64      	subs	r4, r4, r5
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4d0b      	ldr	r5, [pc, #44]	; (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	; (8006fdc <__libc_init_array+0x44>)
 8006fac:	f000 f872 	bl	8007094 <_init>
 8006fb0:	1b64      	subs	r4, r4, r5
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	42a6      	cmp	r6, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc0:	4798      	blx	r3
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fca:	4798      	blx	r3
 8006fcc:	3601      	adds	r6, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	08007188 	.word	0x08007188
 8006fd4:	08007188 	.word	0x08007188
 8006fd8:	08007188 	.word	0x08007188
 8006fdc:	0800718c 	.word	0x0800718c

08006fe0 <__retarget_lock_acquire_recursive>:
 8006fe0:	4770      	bx	lr

08006fe2 <__retarget_lock_release_recursive>:
 8006fe2:	4770      	bx	lr

08006fe4 <_free_r>:
 8006fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d044      	beq.n	8007074 <_free_r+0x90>
 8006fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fee:	9001      	str	r0, [sp, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ff6:	bfb8      	it	lt
 8006ff8:	18e4      	addlt	r4, r4, r3
 8006ffa:	f000 f83f 	bl	800707c <__malloc_lock>
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <_free_r+0x94>)
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x30>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	b003      	add	sp, #12
 800700c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007010:	f000 b83a 	b.w	8007088 <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x46>
 8007018:	6825      	ldr	r5, [r4, #0]
 800701a:	1961      	adds	r1, r4, r5
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x22>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x50>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x46>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1855      	adds	r5, r2, r1
 8007038:	42a5      	cmp	r5, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x70>
 800703c:	6824      	ldr	r4, [r4, #0]
 800703e:	4421      	add	r1, r4
 8007040:	1854      	adds	r4, r2, r1
 8007042:	42a3      	cmp	r3, r4
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x26>
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	440c      	add	r4, r1
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x26>
 8007054:	d902      	bls.n	800705c <_free_r+0x78>
 8007056:	230c      	movs	r3, #12
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x26>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	1961      	adds	r1, r4, r5
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1949      	addeq	r1, r1, r5
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x26>
 8007074:	b003      	add	sp, #12
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	20001300 	.word	0x20001300

0800707c <__malloc_lock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_lock+0x8>)
 800707e:	f7ff bfaf 	b.w	8006fe0 <__retarget_lock_acquire_recursive>
 8007082:	bf00      	nop
 8007084:	200012fc 	.word	0x200012fc

08007088 <__malloc_unlock>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__malloc_unlock+0x8>)
 800708a:	f7ff bfaa 	b.w	8006fe2 <__retarget_lock_release_recursive>
 800708e:	bf00      	nop
 8007090:	200012fc 	.word	0x200012fc

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
