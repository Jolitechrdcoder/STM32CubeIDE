
proyectoFinal_escarlina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  00020498  2**0
                  CONTENTS
  4 .ARM          00000000  080067e0  080067e0  00020498  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e0  080067e0  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  080067e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000498  08006c80  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  08006c80  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001052d  00000000  00000000  0002050b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d5  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab3  00000000  00000000  00033fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1e5  00000000  00000000  00034a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131bd  00000000  00000000  00051c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5bac  00000000  00000000  00064e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004410  00000000  00000000  0010a9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0010edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000498 	.word	0x20000498
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006660 	.word	0x08006660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000049c 	.word	0x2000049c
 80001cc:	08006660 	.word	0x08006660

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b0:	f107 0208 	add.w	r2, r7, #8
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	214e      	movs	r1, #78	; 0x4e
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <lcd_send_cmd+0x5c>)
 80002be:	f002 fc73 	bl	8002ba8 <HAL_I2C_Master_Transmit>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000548 	.word	0x20000548

080002d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 030d 	orr.w	r3, r3, #13
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0309 	orr.w	r3, r3, #9
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	f043 030d 	orr.w	r3, r3, #13
 8000302:	b2db      	uxtb	r3, r3
 8000304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f043 0309 	orr.w	r3, r3, #9
 800030c:	b2db      	uxtb	r3, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	f107 0208 	add.w	r2, r7, #8
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <lcd_send_data+0x5c>)
 800031e:	f002 fc43 	bl	8002ba8 <HAL_I2C_Master_Transmit>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000548 	.word	0x20000548

08000330 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	68b8      	ldr	r0, [r7, #8]
 8000340:	f000 f83b 	bl	80003ba <lcd_put_cur>
	lcd_send_string(string);
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f894 	bl	8000472 <lcd_send_string>
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <lcd_enviar_int+0x34>)
 8000368:	4618      	mov	r0, r3
 800036a:	f005 f887 	bl	800547c <siprintf>
    lcd_put_cur(row, col);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	68b8      	ldr	r0, [r7, #8]
 8000372:	f000 f822 	bl	80003ba <lcd_put_cur>
    lcd_send_string(buffer);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f879 	bl	8000472 <lcd_send_string>
}
 8000380:	bf00      	nop
 8000382:	3720      	adds	r7, #32
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	08006678 	.word	0x08006678

0800038c <lcd_clear>:

void lcd_clear (void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000392:	2080      	movs	r0, #128	; 0x80
 8000394:	f7ff ff6c 	bl	8000270 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e005      	b.n	80003aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800039e:	2020      	movs	r0, #32
 80003a0:	f7ff ff96 	bl	80002d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b45      	cmp	r3, #69	; 0x45
 80003ae:	ddf6      	ble.n	800039e <lcd_clear+0x12>
	}
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d003      	beq.n	80003d2 <lcd_put_cur+0x18>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d005      	beq.n	80003dc <lcd_put_cur+0x22>
 80003d0:	e009      	b.n	80003e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	603b      	str	r3, [r7, #0]
            break;
 80003da:	e004      	b.n	80003e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003e2:	603b      	str	r3, [r7, #0]
            break;
 80003e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff40 	bl	8000270 <lcd_send_cmd>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <lcd_init>:


void lcd_init (void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003fc:	2032      	movs	r0, #50	; 0x32
 80003fe:	f001 f8b3 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000402:	2030      	movs	r0, #48	; 0x30
 8000404:	f7ff ff34 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000408:	2005      	movs	r0, #5
 800040a:	f001 f8ad 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x30);
 800040e:	2030      	movs	r0, #48	; 0x30
 8000410:	f7ff ff2e 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000414:	2001      	movs	r0, #1
 8000416:	f001 f8a7 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x30);
 800041a:	2030      	movs	r0, #48	; 0x30
 800041c:	f7ff ff28 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f001 f8a1 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000426:	2020      	movs	r0, #32
 8000428:	f7ff ff22 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f001 f89b 	bl	8001568 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f7ff ff1c 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f001 f895 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff16 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f001 f88f 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800044a:	2001      	movs	r0, #1
 800044c:	f7ff ff10 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f001 f889 	bl	8001568 <HAL_Delay>
	HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f001 f886 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800045c:	2006      	movs	r0, #6
 800045e:	f7ff ff07 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f001 f880 	bl	8001568 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000468:	200c      	movs	r0, #12
 800046a:	f7ff ff01 	bl	8000270 <lcd_send_cmd>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800047a:	e006      	b.n	800048a <lcd_send_string+0x18>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	607a      	str	r2, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff23 	bl	80002d0 <lcd_send_data>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1f4      	bne.n	800047c <lcd_send_string+0xa>
}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <mostrar_pieza>:

// Variables globales
int movimiento_piezas = 0;
int score = 0;
// Función para mostrar la pieza en la matriz de juego
void mostrar_pieza(uint8_t piezas[8], int fila_inicial, int columna_inicial) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e014      	b.n	80004d8 <mostrar_pieza+0x3c>
        setrow(fila_inicial - i, piezas[i] << columna_inicial);
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	f000 fcb3 	bl	8000e38 <setrow>
    for (int i = 0; i < 8; i++) {
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	2b07      	cmp	r3, #7
 80004dc:	dde7      	ble.n	80004ae <mostrar_pieza+0x12>
    }
}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <mover_pieza_abajo>:

// Función para mover la pieza hacia abajo en la matriz de juego
void mover_pieza_abajo(const uint8_t *pieza, int fila, int columna) {
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e021      	b.n	800053e <mover_pieza_abajo+0x56>
        matriz_tablero[fila][columna] |= pieza[i] << columna;
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <mover_pieza_abajo+0x6c>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	441a      	add	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b25a      	sxtb	r2, r3
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	68f9      	ldr	r1, [r7, #12]
 800050e:	440b      	add	r3, r1
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	b25b      	sxtb	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2d9      	uxtb	r1, r3
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <mover_pieza_abajo+0x6c>)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	441a      	add	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	460a      	mov	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
        fila--;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3b01      	subs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 8; i++) {
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b07      	cmp	r3, #7
 8000542:	ddda      	ble.n	80004fa <mover_pieza_abajo+0x12>
    }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000624 	.word	0x20000624

08000558 <verificar_filas_llenas>:
int puntos =0;
int fila_llena = 0;
int filas_completas = 0;
//aqui verifico si hay bvasrias piezas juntas para aumentar puntuacion
void verificar_filas_llenas() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0


    for (int i = 0; i < 8; i++) {
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e03a      	b.n	80005da <verificar_filas_llenas+0x82>
        fila_llena = 1;
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <verificar_filas_llenas+0x9c>)
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 8; j++) {
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	e014      	b.n	800059a <verificar_filas_llenas+0x42>
            if (matriz_tablero[i][j] == 0) {
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <verificar_filas_llenas+0xa0>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	441a      	add	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d108      	bne.n	8000594 <verificar_filas_llenas+0x3c>
                fila_llena = 0;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <verificar_filas_llenas+0x9c>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
                puntos++;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <verificar_filas_llenas+0xa4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <verificar_filas_llenas+0xa4>)
 8000590:	6013      	str	r3, [r2, #0]
                break;
 8000592:	e005      	b.n	80005a0 <verificar_filas_llenas+0x48>
        for (int j = 0; j < 8; j++) {
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	3301      	adds	r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2b07      	cmp	r3, #7
 800059e:	dde7      	ble.n	8000570 <verificar_filas_llenas+0x18>
            }
        }
        if (fila_llena) {
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <verificar_filas_llenas+0x9c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d015      	beq.n	80005d4 <verificar_filas_llenas+0x7c>
            filas_completas++;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <verificar_filas_llenas+0xa8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <verificar_filas_llenas+0xa8>)
 80005b0:	6013      	str	r3, [r2, #0]
            for (int j = 0; j < 8; j++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	e00a      	b.n	80005ce <verificar_filas_llenas+0x76>
                matriz_tablero[i][j] = 0;
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <verificar_filas_llenas+0xa0>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	441a      	add	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 8; j++) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	ddf1      	ble.n	80005b8 <verificar_filas_llenas+0x60>
    for (int i = 0; i < 8; i++) {
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	ddc1      	ble.n	8000564 <verificar_filas_llenas+0xc>
            }
        }
    }

    if (filas_completas > 0) {
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <verificar_filas_llenas+0xa8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dd01      	ble.n	80005ec <verificar_filas_llenas+0x94>

        reiniciar_juego(); //reinicio el juego si se lleno cualquiera de las filas
 80005e8:	f000 f80c 	bl	8000604 <reiniciar_juego>
    }
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000066c 	.word	0x2000066c
 80005f8:	20000624 	.word	0x20000624
 80005fc:	20000668 	.word	0x20000668
 8000600:	20000670 	.word	0x20000670

08000604 <reiniciar_juego>:


// funcion de reinicio del juego
void reiniciar_juego() {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
    // muestro el game over del juego

    lcd_enviar("Game Over         ", 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	482f      	ldr	r0, [pc, #188]	; (80006cc <reiniciar_juego+0xc8>)
 8000610:	f7ff fe8e 	bl	8000330 <lcd_enviar>
    max_clear();
 8000614:	f000 fc9a 	bl	8000f4c <max_clear>
    write_char('X', 1);
 8000618:	2101      	movs	r1, #1
 800061a:	2058      	movs	r0, #88	; 0x58
 800061c:	f000 fc5c 	bl	8000ed8 <write_char>
    HAL_Delay(500);
 8000620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000624:	f000 ffa0 	bl	8001568 <HAL_Delay>

    write_char(' ', 1);
 8000628:	2101      	movs	r1, #1
 800062a:	2020      	movs	r0, #32
 800062c:	f000 fc54 	bl	8000ed8 <write_char>
    HAL_Delay(500);
 8000630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000634:	f000 ff98 	bl	8001568 <HAL_Delay>

    write_char('X', 1);
 8000638:	2101      	movs	r1, #1
 800063a:	2058      	movs	r0, #88	; 0x58
 800063c:	f000 fc4c 	bl	8000ed8 <write_char>
    HAL_Delay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f000 ff90 	bl	8001568 <HAL_Delay>

    write_char(' ', 1);
 8000648:	2101      	movs	r1, #1
 800064a:	2020      	movs	r0, #32
 800064c:	f000 fc44 	bl	8000ed8 <write_char>
   HAL_Delay(500);
 8000650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000654:	f000 ff88 	bl	8001568 <HAL_Delay>
    max_clear();
 8000658:	f000 fc78 	bl	8000f4c <max_clear>
    HAL_Delay(2000);
 800065c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000660:	f000 ff82 	bl	8001568 <HAL_Delay>
    lcd_clear();
 8000664:	f7ff fe92 	bl	800038c <lcd_clear>

    //rteinicio la matriz
    for (int k = 0; k < 8; k++) {
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	e013      	b.n	8000696 <reiniciar_juego+0x92>
        for (int l = 0; l < 8; l++) {
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	e00a      	b.n	800068a <reiniciar_juego+0x86>
            matriz_tablero[k][l] = 0;
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <reiniciar_juego+0xcc>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	441a      	add	r2, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	4413      	add	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
        for (int l = 0; l < 8; l++) {
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b07      	cmp	r3, #7
 800068e:	ddf1      	ble.n	8000674 <reiniciar_juego+0x70>
    for (int k = 0; k < 8; k++) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b07      	cmp	r3, #7
 800069a:	dde8      	ble.n	800066e <reiniciar_juego+0x6a>
        }
    }
    // Reinicia la puntuación
    puntos = 0;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <reiniciar_juego+0xd0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
    // m,uestro la puntuacion en l alcd
    lcd_enviar("Tetris Escarlina", 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <reiniciar_juego+0xd4>)
 80006a8:	f7ff fe42 	bl	8000330 <lcd_enviar>
    lcd_enviar("Score:", 1, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <reiniciar_juego+0xd8>)
 80006b2:	f7ff fe3d 	bl	8000330 <lcd_enviar>
    lcd_enviar_int(puntos, 1, 7);
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <reiniciar_juego+0xd0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2207      	movs	r2, #7
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe48 	bl	8000354 <lcd_enviar_int>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	0800667c 	.word	0x0800667c
 80006d0:	20000624 	.word	0x20000624
 80006d4:	20000668 	.word	0x20000668
 80006d8:	08006690 	.word	0x08006690
 80006dc:	080066a4 	.word	0x080066a4

080006e0 <programa_principal>:
uint32_t joystick;
void programa_principal(void){
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
	 if(joystick == 0){
 80006e6:	4b4a      	ldr	r3, [pc, #296]	; (8000810 <programa_principal+0x130>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d103      	bne.n	80006f6 <programa_principal+0x16>
				movimiento_piezas = 1;
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <programa_principal+0x134>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e00e      	b.n	8000714 <programa_principal+0x34>
		  }
		  else if(joystick <= 3000 && joystick>=4000){
 80006f6:	4b46      	ldr	r3, [pc, #280]	; (8000810 <programa_principal+0x130>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006fe:	4293      	cmp	r3, r2
 8000700:	d808      	bhi.n	8000714 <programa_principal+0x34>
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <programa_principal+0x130>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800070a:	d303      	bcc.n	8000714 <programa_principal+0x34>
			  movimiento_piezas = -1;
 800070c:	4b41      	ldr	r3, [pc, #260]	; (8000814 <programa_principal+0x134>)
 800070e:	f04f 32ff 	mov.w	r2, #4294967295
 8000712:	601a      	str	r2, [r3, #0]
		  }
	       //aqui se generan laas piezas de forma aleatorio o se llaman
	        int piezas_ramdom = rand() % 7;
 8000714:	f004 fdb2 	bl	800527c <rand>
 8000718:	4602      	mov	r2, r0
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <programa_principal+0x138>)
 800071c:	fb83 1302 	smull	r1, r3, r3, r2
 8000720:	4413      	add	r3, r2
 8000722:	1099      	asrs	r1, r3, #2
 8000724:	17d3      	asrs	r3, r2, #31
 8000726:	1ac9      	subs	r1, r1, r3
 8000728:	460b      	mov	r3, r1
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
	        const uint8_t *piezas[] = { pieza_1, pieza_2, pieza_3, pieza_4, pieza_5, pieza_6, pieza_7 };
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <programa_principal+0x13c>)
 8000734:	1d3c      	adds	r4, r7, #4
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        const uint8_t *sel_piezas = piezas[piezas_ramdom];
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	3330      	adds	r3, #48	; 0x30
 800074a:	443b      	add	r3, r7
 800074c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000750:	623b      	str	r3, [r7, #32]
	        int fila_inicial = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
	        int columna_inicial = rand() % 6;
 8000756:	f004 fd91 	bl	800527c <rand>
 800075a:	4602      	mov	r2, r0
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <programa_principal+0x140>)
 800075e:	fb83 3102 	smull	r3, r1, r3, r2
 8000762:	17d3      	asrs	r3, r2, #31
 8000764:	1ac9      	subs	r1, r1, r3
 8000766:	460b      	mov	r3, r1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	440b      	add	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28

	        while (fila_inicial < 8) {
 8000772:	e044      	b.n	80007fe <programa_principal+0x11e>
	            // Muestra la pieza en la posición actual del tablero
	            mostrar_pieza(sel_piezas, fila_inicial, columna_inicial);
 8000774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000778:	6a38      	ldr	r0, [r7, #32]
 800077a:	f7ff fe8f 	bl	800049c <mostrar_pieza>
	            HAL_Delay(800);
 800077e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000782:	f000 fef1 	bl	8001568 <HAL_Delay>

	            // Verifica si la pieza ha alcanzado el fondo o una posición ocupada en la matriz
	            if (fila_inicial == 7 || matriz_tablero[fila_inicial + 1][columna_inicial] != 0) {
 8000786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000788:	2b07      	cmp	r3, #7
 800078a:	d009      	beq.n	80007a0 <programa_principal+0xc0>
 800078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078e:	3301      	adds	r3, #1
 8000790:	4a24      	ldr	r2, [pc, #144]	; (8000824 <programa_principal+0x144>)
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	441a      	add	r2, r3
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d016      	beq.n	80007ce <programa_principal+0xee>
	                // Agrega la pieza al tablero en la fila actual
	                mover_pieza_abajo(sel_piezas, fila_inicial, columna_inicial);
 80007a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007a4:	6a38      	ldr	r0, [r7, #32]
 80007a6:	f7ff fe9f 	bl	80004e8 <mover_pieza_abajo>

	                // Verifica si alguna fila está completa y aumenta la puntuacion del juego
	                verificar_filas_llenas();
 80007aa:	f7ff fed5 	bl	8000558 <verificar_filas_llenas>

	                //mostramos la puntuacion
	                lcd_enviar_int(puntos, 1, 7);
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <programa_principal+0x148>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2207      	movs	r2, #7
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fdcc 	bl	8000354 <lcd_enviar_int>

	               //verificamos si el juego debe reiniciarse.
	                if (matriz_tablero[0][columna_inicial] != 0) {
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <programa_principal+0x144>)
 80007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d01e      	beq.n	8000806 <programa_principal+0x126>
	                    reiniciar_juego();
 80007c8:	f7ff ff1c 	bl	8000604 <reiniciar_juego>
	                }

	                break; // Salgo de mi  bucle
 80007cc:	e01b      	b.n	8000806 <programa_principal+0x126>
	            } else {
	                fila_inicial++; //muevo mi piexa hacia abajo
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	3301      	adds	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	            }

	            // verifico si el joystick cambio su valor analogo
	            if (movimiento_piezas > 0) {
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <programa_principal+0x134>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd06      	ble.n	80007ea <programa_principal+0x10a>
	                columna_inicial++;
 80007dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007de:	3301      	adds	r3, #1
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
	                movimiento_piezas = 0; // reinicio el movimiento
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <programa_principal+0x134>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e009      	b.n	80007fe <programa_principal+0x11e>
	            }
	            // verificoi de igual formas el joystick
	            else if (movimiento_piezas < 0) {
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <programa_principal+0x134>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da05      	bge.n	80007fe <programa_principal+0x11e>
	                columna_inicial--;
 80007f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f4:	3b01      	subs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
	                movimiento_piezas = 0; // reinicio el movimiento
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <programa_principal+0x134>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
	        while (fila_inicial < 8) {
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddb7      	ble.n	8000774 <programa_principal+0x94>
	            }
	        }

}
 8000804:	e000      	b.n	8000808 <programa_principal+0x128>
	                break; // Salgo de mi  bucle
 8000806:	bf00      	nop
}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bdb0      	pop	{r4, r5, r7, pc}
 8000810:	20000674 	.word	0x20000674
 8000814:	20000664 	.word	0x20000664
 8000818:	92492493 	.word	0x92492493
 800081c:	080066ac 	.word	0x080066ac
 8000820:	2aaaaaab 	.word	0x2aaaaaab
 8000824:	20000624 	.word	0x20000624
 8000828:	20000668 	.word	0x20000668

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand((unsigned int)time(NULL));
 8000830:	2000      	movs	r0, #0
 8000832:	f004 fe8f 	bl	8005554 <time>
 8000836:	4602      	mov	r2, r0
 8000838:	460b      	mov	r3, r1
 800083a:	4613      	mov	r3, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fcef 	bl	8005220 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fe2b 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f82d 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f975 	bl	8000b38 <MX_GPIO_Init>
  MX_DMA_Init();
 800084e:	f000 f955 	bl	8000afc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000852:	f000 f923 	bl	8000a9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000856:	f000 f8e1 	bl	8000a1c <MX_I2C1_Init>
  MX_ADC1_Init();
 800085a:	f000 f883 	bl	8000964 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &joystick, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <main+0x68>)
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <main+0x6c>)
 8000864:	f001 f848 	bl	80018f8 <HAL_ADC_Start_DMA>
   max_init(0x02);
 8000868:	2002      	movs	r0, #2
 800086a:	f000 fb9d 	bl	8000fa8 <max_init>

  lcd_init();
 800086e:	f7ff fdc3 	bl	80003f8 <lcd_init>
  lcd_enviar("Tetris Escarlina", 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <main+0x70>)
 8000878:	f7ff fd5a 	bl	8000330 <lcd_enviar>
  lcd_enviar("Score:", 1, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <main+0x74>)
 8000882:	f7ff fd55 	bl	8000330 <lcd_enviar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	    programa_principal();
 8000886:	f7ff ff2b 	bl	80006e0 <programa_principal>
        HAL_Delay(500); // delay entre cada pieza
 800088a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088e:	f000 fe6b 	bl	8001568 <HAL_Delay>
	    programa_principal();
 8000892:	e7f8      	b.n	8000886 <main+0x5a>
 8000894:	20000674 	.word	0x20000674
 8000898:	200004b4 	.word	0x200004b4
 800089c:	08006690 	.word	0x08006690
 80008a0:	080066a4 	.word	0x080066a4

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fe45 	bl	8005542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2234      	movs	r2, #52	; 0x34
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f004 fe37 	bl	8005542 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008d4:	2303      	movs	r3, #3
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fcee 	bl	80032e0 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800090a:	f000 f9cb 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fd16 	bl	800435c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000936:	f000 f9b5 	bl	8000ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000946:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4618      	mov	r0, r3
 800094c:	f003 ff3c 	bl	80047c8 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000956:	f000 f9a5 	bl	8000ca4 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3770      	adds	r7, #112	; 0x70
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_ADC1_Init+0xb4>)
 800097c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_ADC1_Init+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_ADC1_Init+0xb4>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_ADC1_Init+0xb4>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_ADC1_Init+0xb4>)
 8000996:	2201      	movs	r2, #1
 8000998:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_ADC1_Init+0xb4>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <MX_ADC1_Init+0xb4>)
 80009d6:	f000 fe09 	bl	80015ec <HAL_ADC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80009e0:	f000 f960 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80009f0:	2307      	movs	r3, #7
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_ADC1_Init+0xb4>)
 8000a02:	f001 f815 	bl	8001a30 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a0c:	f000 f94a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200004b4 	.word	0x200004b4

08000a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_I2C1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x7c>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a58:	f002 f816 	bl	8002a88 <HAL_I2C_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a62:	f000 f91f 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a6a:	f002 fba1 	bl	80031b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f916 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a7c:	f002 fbe3 	bl	8003246 <HAL_I2CEx_ConfigDigitalFilter>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f90d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000548 	.word	0x20000548
 8000a94:	40005400 	.word	0x40005400
 8000a98:	2000090e 	.word	0x2000090e

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART2_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ae0:	f004 f804 	bl	8004aec <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f8db 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000059c 	.word	0x2000059c
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f001 fc43 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b24:	200b      	movs	r0, #11
 8000b26:	f001 fc5c 	bl	80023e2 <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a38      	ldr	r2, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_GPIO_Init+0x12c>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000bb4:	482c      	ldr	r0, [pc, #176]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000bb6:	f001 ff37 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc0:	482a      	ldr	r0, [pc, #168]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bc2:	f001 ff31 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000bde:	f001 fdb1 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn1_Pin btn2_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn2_Pin;
 8000be2:	2360      	movs	r3, #96	; 0x60
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f001 fda3 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000bfe:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_GPIO_Init+0x130>)
 8000c18:	f001 fd94 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000c36:	f001 fd85 	bl	8002744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f001 fbb3 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f001 fbcc 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f001 fbab 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f001 fbc4 	bl	80023e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000800 	.word	0x48000800
 8000c6c:	48000400 	.word	0x48000400

08000c70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn1_Pin){
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d102      	bne.n	8000c86 <HAL_GPIO_EXTI_Callback+0x16>
		movimiento_piezas = 1;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

	}
	if (GPIO_Pin == btn2_Pin){
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	2b40      	cmp	r3, #64	; 0x40
 8000c8a:	d103      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x24>
		movimiento_piezas = -1;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c92:	601a      	str	r2, [r3, #0]

		}
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000664 	.word	0x20000664

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <write_byte>:




void write_byte (uint8_t byte)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e019      	b.n	8000cf4 <write_byte+0x44>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <write_byte+0x54>)
 8000cc6:	f001 feaf 	bl	8002a28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <write_byte+0x54>)
 8000cda:	f001 fea5 	bl	8002a28 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <write_byte+0x54>)
 8000cea:	f001 fe9d 	bl	8002a28 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	dde2      	ble.n	8000cc0 <write_byte+0x10>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	48000800 	.word	0x48000800

08000d08 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460a      	mov	r2, r1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	4810      	ldr	r0, [pc, #64]	; (8000d60 <write_max_cmd+0x58>)
 8000d1e:	f001 fe83 	bl	8002a28 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e00a      	b.n	8000d3e <write_max_cmd+0x36>
	{
		write_byte (address);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ffc0 	bl	8000cb0 <write_byte>
		write_byte (cmd); 
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffbc 	bl	8000cb0 <write_byte>
	for (int i=0;i<num; i++)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	ddf1      	ble.n	8000d28 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <write_max_cmd+0x58>)
 8000d4a:	f001 fe6d 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <write_max_cmd+0x58>)
 8000d54:	f001 fe68 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	48000800 	.word	0x48000800

08000d64 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	71bb      	strb	r3, [r7, #6]
 8000d72:	4613      	mov	r3, r2
 8000d74:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00d      	beq.n	8000d98 <setled+0x34>
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <setled+0xcc>)
 8000d80:	5cd1      	ldrb	r1, [r2, r3]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2201      	movs	r2, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	b2d1      	uxtb	r1, r2
 8000d92:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <setled+0xcc>)
 8000d94:	54d1      	strb	r1, [r2, r3]
 8000d96:	e00e      	b.n	8000db6 <setled+0x52>
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <setled+0xcc>)
 8000d9c:	5cd1      	ldrb	r1, [r2, r3]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2201      	movs	r2, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	400a      	ands	r2, r1
 8000db0:	b2d1      	uxtb	r1, r2
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <setled+0xcc>)
 8000db4:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2140      	movs	r1, #64	; 0x40
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <setled+0xd0>)
 8000dcc:	f001 fe2c 	bl	8002a28 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e01b      	b.n	8000e0e <setled+0xaa>
	{
		if (i == (num-(n+1)))
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	425b      	negs	r3, r3
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d10d      	bne.n	8000dfc <setled+0x98>
		{
			write_byte (((c+1)));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff61 	bl	8000cb0 <write_byte>
			write_byte (buffer[col]);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <setled+0xcc>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5b 	bl	8000cb0 <write_byte>
 8000dfa:	e005      	b.n	8000e08 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff57 	bl	8000cb0 <write_byte>
			write_byte (0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff54 	bl	8000cb0 <write_byte>
	for (int i=0; i<num; i++) 
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dde0      	ble.n	8000dd6 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <setled+0xd0>)
 8000e1a:	f001 fe05 	bl	8002a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <setled+0xd0>)
 8000e24:	f001 fe00 	bl	8002a28 <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000678 	.word	0x20000678
 8000e34:	48000800 	.word	0x48000800

08000e38 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	e02d      	b.n	8000ebe <setrow+0x86>
	{
		if (i == ((n)))
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d120      	bne.n	8000eac <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	3307      	adds	r3, #7
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	e015      	b.n	8000ea0 <setrow+0x68>
			{
				bool b = value&0x80;
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	b2d1      	uxtb	r1, r2
 8000e8c:	7bba      	ldrb	r2, [r7, #14]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff68 	bl	8000d64 <setled>
				value<<=1;
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dae4      	bge.n	8000e74 <setrow+0x3c>
 8000eaa:	e005      	b.n	8000eb8 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff feff 	bl	8000cb0 <write_byte>
			write_byte (0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fefc 	bl	8000cb0 <write_byte>
	for (int i=0; i<num; i++) 
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	ddce      	ble.n	8000e62 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4903      	ldr	r1, [pc, #12]	; (8000ed4 <setrow+0x9c>)
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	54ca      	strb	r2, [r1, r3]
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200006c8 	.word	0x200006c8

08000ed8 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <write_char+0x70>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
	int row =6;
 8000efa:	2306      	movs	r3, #6
 8000efc:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e016      	b.n	8000f32 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	490c      	ldr	r1, [pc, #48]	; (8000f48 <write_char+0x70>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	440b      	add	r3, r1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f7ff ff89 	bl	8000e38 <setrow>
		row--;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbe2      	blt.n	8000f04 <write_char+0x2c>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000038 	.word	0x20000038

08000f4c <max_clear>:
}



void max_clear(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e008      	b.n	8000f6a <max_clear+0x1e>
		setrow(i,0);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff6a 	bl	8000e38 <setrow>
	for (int i=0; i<num*8; i++) 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddf3      	ble.n	8000f58 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	e00c      	b.n	8000f90 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <max_clear+0x54>)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <max_clear+0x58>)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b4f      	cmp	r3, #79	; 0x4f
 8000f94:	ddef      	ble.n	8000f76 <max_clear+0x2a>
	}
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000678 	.word	0x20000678
 8000fa4:	200006c8 	.word	0x200006c8

08000fa8 <max_init>:
}



void max_init (uint8_t brightness)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2009      	movs	r0, #9
 8000fb6:	f7ff fea7 	bl	8000d08 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000fba:	2107      	movs	r1, #7
 8000fbc:	200b      	movs	r0, #11
 8000fbe:	f7ff fea3 	bl	8000d08 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	200c      	movs	r0, #12
 8000fc6:	f7ff fe9f 	bl	8000d08 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000fca:	2100      	movs	r1, #0
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f7ff fe9b 	bl	8000d08 <write_max_cmd>
	
	max_clear ();
 8000fd2:	f7ff ffbb 	bl	8000f4c <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f7ff fe94 	bl	8000d08 <write_max_cmd>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_MspInit+0x44>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_MspInit+0x44>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_MspInit+0x44>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x44>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x44>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x44>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101e:	2007      	movs	r0, #7
 8001020:	f001 f9b8 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001050:	d14c      	bne.n	80010ec <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_ADC_MspInit+0xc4>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f001 fb54 	bl	8002744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010c6:	2220      	movs	r2, #32
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010d2:	f001 f9a0 	bl	8002416 <HAL_DMA_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80010dc:	f7ff fde2 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	20000504 	.word	0x20000504
 80010fc:	40020008 	.word	0x40020008

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_I2C_MspInit+0x7c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114c:	2304      	movs	r3, #4
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_I2C_MspInit+0x84>)
 8001158:	f001 faf4 	bl	8002744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x80>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001166:	61d3      	str	r3, [r2, #28]
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_I2C_MspInit+0x80>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d128      	bne.n	80011fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011da:	230c      	movs	r3, #12
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ea:	2307      	movs	r3, #7
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 faa4 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40004400 	.word	0x40004400
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f966 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA1_Channel1_IRQHandler+0x10>)
 8001266:	f001 f97c 	bl	8002562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000504 	.word	0x20000504

08001274 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn1_Pin);
 8001278:	2020      	movs	r0, #32
 800127a:	f001 fbed 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(btn2_Pin);
 800127e:	2040      	movs	r0, #64	; 0x40
 8001280:	f001 fbea 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800128c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001290:	f001 fbe2 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_kill>:

int _kill(int pid, int sig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012b2:	f004 f9c1 	bl	8005638 <__errno>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2216      	movs	r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
  return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffe7 	bl	80012a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012da:	e7fe      	b.n	80012da <_exit+0x12>

080012dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
  }

  return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e009      	b.n	800133c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <_write+0x12>
  }
  return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f004 f926 	bl	8005638 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20004000 	.word	0x20004000
 8001418:	00000400 	.word	0x00000400
 800141c:	20000718 	.word	0x20000718
 8001420:	20000870 	.word	0x20000870

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001480 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f004 f8e5 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff f9d7 	bl	800082c <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001480:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 800148c:	080067e8 	.word	0x080067e8
  ldr r2, =_sbss
 8001490:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8001494:	2000086c 	.word	0x2000086c

08001498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_IRQHandler>
	...

0800149c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x28>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x28>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 ff71 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fd96 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 ff89 	bl	80023fe <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 ff51 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000430 	.word	0x20000430
 8001520:	20000438 	.word	0x20000438
 8001524:	20000434 	.word	0x20000434

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000438 	.word	0x20000438
 800154c:	2000071c 	.word	0x2000071c

08001550 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;  
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2000071c 	.word	0x2000071c

08001568 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000438 	.word	0x20000438

080015b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e169      	b.n	80018e0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d176      	bne.n	800170c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d152      	bne.n	80016cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fcf5 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d13b      	bne.n	80016cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fd67 	bl	8002128 <ADC_Disable>
 800165a:	4603      	mov	r3, r0
 800165c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d12f      	bne.n	80016cc <HAL_ADC_Init+0xe0>
 800166c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001670:	2b00      	cmp	r3, #0
 8001672:	d12b      	bne.n	80016cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800167c:	f023 0302 	bic.w	r3, r3, #2
 8001680:	f043 0202 	orr.w	r2, r3, #2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001696:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a8:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <HAL_ADC_Init+0x2fc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a8f      	ldr	r2, [pc, #572]	; (80018ec <HAL_ADC_Init+0x300>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9a      	lsrs	r2, r3, #18
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016be:	e002      	b.n	80016c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f9      	bne.n	80016c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016e8:	d110      	bne.n	800170c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 0312 	bic.w	r3, r3, #18
 80016f2:	f043 0210 	orr.w	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 80d6 	bne.w	80018c6 <HAL_ADC_Init+0x2da>
 800171a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80d1 	bne.w	80018c6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80c9 	bne.w	80018c6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_ADC_Init+0x304>)
 8001746:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_ADC_Init+0x180>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_Init+0x180>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0x182>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11c      	bne.n	80017ac <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001772:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_ADC_Init+0x1a8>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADC_Init+0x1a8>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_ADC_Init+0x1aa>
 8001794:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e5b      	ldrb	r3, [r3, #25]
 80017b0:	035b      	lsls	r3, r3, #13
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017b6:	2a01      	cmp	r2, #1
 80017b8:	d002      	beq.n	80017c0 <HAL_ADC_Init+0x1d4>
 80017ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017be:	e000      	b.n	80017c2 <HAL_ADC_Init+0x1d6>
 80017c0:	2200      	movs	r2, #0
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017d2:	4313      	orrs	r3, r2
 80017d4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d11b      	bne.n	8001818 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7e5b      	ldrb	r3, [r3, #25]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	3b01      	subs	r3, #1
 80017ee:	045a      	lsls	r2, r3, #17
 80017f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
 80017fa:	e00d      	b.n	8001818 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	2b01      	cmp	r3, #1
 800181e:	d007      	beq.n	8001830 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	4313      	orrs	r3, r2
 800182a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800182c:	4313      	orrs	r3, r2
 800182e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d114      	bne.n	8001868 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184c:	f023 0302 	bic.w	r3, r3, #2
 8001850:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7e1b      	ldrb	r3, [r3, #24]
 8001856:	039a      	lsls	r2, r3, #14
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4313      	orrs	r3, r2
 8001862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001864:	4313      	orrs	r3, r2
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_ADC_Init+0x308>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001878:	430b      	orrs	r3, r1
 800187a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10c      	bne.n	800189e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f023 010f 	bic.w	r1, r3, #15
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	1e5a      	subs	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
 800189c:	e007      	b.n	80018ae <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 020f 	bic.w	r2, r2, #15
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f023 0303 	bic.w	r3, r3, #3
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
 80018c4:	e00a      	b.n	80018dc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f023 0312 	bic.w	r3, r3, #18
 80018ce:	f043 0210 	orr.w	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3768      	adds	r7, #104	; 0x68
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000430 	.word	0x20000430
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	50000300 	.word	0x50000300
 80018f4:	fff0c007 	.word	0xfff0c007

080018f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d17e      	bne.n	8001a14 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_Start_DMA+0x2c>
 8001920:	2302      	movs	r3, #2
 8001922:	e07a      	b.n	8001a1a <HAL_ADC_Start_DMA+0x122>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fb97 	bl	8002060 <ADC_Enable>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d166      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001972:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001986:	d106      	bne.n	8001996 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f023 0206 	bic.w	r2, r3, #6
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
 8001994:	e002      	b.n	800199c <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_ADC_Start_DMA+0x12c>)
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_ADC_Start_DMA+0x130>)
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_ADC_Start_DMA+0x134>)
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	221c      	movs	r2, #28
 80019c2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0210 	orr.w	r2, r2, #16
 80019d2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3340      	adds	r3, #64	; 0x40
 80019ee:	4619      	mov	r1, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f000 fd56 	bl	80024a4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0204 	orr.w	r2, r2, #4
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e006      	b.n	8001a18 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a12:	e001      	b.n	8001a18 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
 8001a16:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	08001f95 	.word	0x08001f95
 8001a28:	0800200f 	.word	0x0800200f
 8001a2c:	0800202b 	.word	0x0800202b

08001a30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b09b      	sub	sp, #108	; 0x6c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x22>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e295      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x54e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8279 	bne.w	8001f5c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d81c      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	461a      	mov	r2, r3
 8001a86:	231f      	movs	r3, #31
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4019      	ands	r1, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aaa:	e063      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d81e      	bhi.n	8001af2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	3b1e      	subs	r3, #30
 8001ac8:	221f      	movs	r2, #31
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4019      	ands	r1, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	3b1e      	subs	r3, #30
 8001ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
 8001af0:	e040      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b0e      	cmp	r3, #14
 8001af8:	d81e      	bhi.n	8001b38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	3b3c      	subs	r3, #60	; 0x3c
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	3b3c      	subs	r3, #60	; 0x3c
 8001b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
 8001b36:	e01d      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	3b5a      	subs	r3, #90	; 0x5a
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4019      	ands	r1, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	3b5a      	subs	r3, #90	; 0x5a
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80e5 	bne.w	8001d4e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6999      	ldr	r1, [r3, #24]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1e      	subs	r3, #30
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	e019      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6959      	ldr	r1, [r3, #20]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d84f      	bhi.n	8001cbc <HAL_ADC_ConfigChannel+0x28c>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c57 	.word	0x08001c57
 8001c2c:	08001c79 	.word	0x08001c79
 8001c30:	08001c9b 	.word	0x08001c9b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_ADC_ConfigChannel+0x468>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	0691      	lsls	r1, r2, #26
 8001c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c46:	430a      	orrs	r2, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c52:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c54:	e07b      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5c:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <HAL_ADC_ConfigChannel+0x468>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	0691      	lsls	r1, r2, #26
 8001c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c74:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c76:	e06a      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c7e:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <HAL_ADC_ConfigChannel+0x468>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	0691      	lsls	r1, r2, #26
 8001c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c96:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c98:	e059      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ca0:	4b7d      	ldr	r3, [pc, #500]	; (8001e98 <HAL_ADC_ConfigChannel+0x468>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	0691      	lsls	r1, r2, #26
 8001caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cac:	430a      	orrs	r2, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cb8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cba:	e048      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cde:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	069b      	lsls	r3, r3, #26
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d02:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d26:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d4c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x33e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x33e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x340>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 80fe 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d00f      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d9c:	e049      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d91c      	bls.n	8001dfa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6999      	ldr	r1, [r3, #24]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1b      	subs	r3, #27
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	3b1b      	subs	r3, #27
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	e01b      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6959      	ldr	r1, [r3, #20]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4019      	ands	r1, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6898      	ldr	r0, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_ADC_ConfigChannel+0x46c>)
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	f040 8085 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d17e      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10c      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x470>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x470>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e004      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x472>
 8001e98:	83fff000 	.word	0x83fff000
 8001e9c:	50000300 	.word	0x50000300
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d150      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x498>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x498>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_ADC_ConfigChannel+0x49a>
 8001ec8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13c      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d11d      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x4e2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_ADC_ConfigChannel+0x55c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_ADC_ConfigChannel+0x560>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0c9a      	lsrs	r2, r3, #18
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f02:	e002      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f9      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f10:	e02e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d10b      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x502>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f30:	e01e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d11a      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f46:	e013      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f5a:	e00a      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f70:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	376c      	adds	r7, #108	; 0x6c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000430 	.word	0x20000430
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d126      	bne.n	8001ffc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d115      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d111      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f7ff fadb 	bl	80015b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ffa:	e004      	b.n	8002006 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fad1 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f043 0204 	orr.w	r2, r3, #4
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fac1 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <ADC_Enable+0x2c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <ADC_Enable+0x2c>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <ADC_Enable+0x2e>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d143      	bne.n	800211a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <ADC_Enable+0xc4>)
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e02f      	b.n	800211c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020cc:	f7ff fa40 	bl	8001550 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020d2:	e01b      	b.n	800210c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020d4:	f7ff fa3c 	bl	8001550 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d914      	bls.n	800210c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d00d      	beq.n	800210c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d1dc      	bne.n	80020d4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	8000003f 	.word	0x8000003f

08002128 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <ADC_Disable+0x2c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <ADC_Disable+0x2c>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <ADC_Disable+0x2e>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d047      	beq.n	80021ea <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030d 	and.w	r3, r3, #13
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10f      	bne.n	8002188 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0202 	orr.w	r2, r2, #2
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2203      	movs	r2, #3
 800217e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002180:	f7ff f9e6 	bl	8001550 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002186:	e029      	b.n	80021dc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e023      	b.n	80021ec <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021a4:	f7ff f9d4 	bl	8001550 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d914      	bls.n	80021dc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10d      	bne.n	80021dc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d0dc      	beq.n	80021a4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff29 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff3e 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff8e 	bl	80022e8 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff31 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e037      	b.n	800249c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002442:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f940 	bl	8002704 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}  
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Start_IT+0x20>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e04a      	b.n	800255a <HAL_DMA_Start_IT+0xb6>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d13a      	bne.n	800254c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8d4 	bl	80026a8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 020e 	orr.w	r2, r2, #14
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e00f      	b.n	800253a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 020a 	orr.w	r2, r2, #10
 8002528:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0204 	bic.w	r2, r2, #4
 8002538:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e005      	b.n	8002558 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002554:	2302      	movs	r3, #2
 8002556:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002558:	7dfb      	ldrb	r3, [r7, #23]
} 
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2204      	movs	r2, #4
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d024      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x72>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01f      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0204 	bic.w	r2, r2, #4
 80025b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2104      	movs	r1, #4
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06a      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80025d2:	e065      	b.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2202      	movs	r2, #2
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02c      	beq.n	800263e <HAL_DMA_IRQHandler+0xdc>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d027      	beq.n	800263e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020a 	bic.w	r2, r2, #10
 800260a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2102      	movs	r1, #2
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d035      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800263c:	e030      	b.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2208      	movs	r2, #8
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d028      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020e 	bic.w	r2, r2, #14
 8002666:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
    }
  }
}  
 800269e:	e7ff      	b.n	80026a0 <HAL_DMA_IRQHandler+0x13e>
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <DMA_CalcBaseAndBitshift+0x34>)
 8002714:	4413      	add	r3, r2
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <DMA_CalcBaseAndBitshift+0x38>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	009a      	lsls	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <DMA_CalcBaseAndBitshift+0x3c>)
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	bffdfff8 	.word	0xbffdfff8
 800273c:	cccccccd 	.word	0xcccccccd
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002752:	e14e      	b.n	80029f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8140 	beq.w	80029ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d005      	beq.n	8002784 <HAL_GPIO_Init+0x40>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d130      	bne.n	80027e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ba:	2201      	movs	r2, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0201 	and.w	r2, r3, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d017      	beq.n	8002822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d123      	bne.n	8002876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	6939      	ldr	r1, [r7, #16]
 8002872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0203 	and.w	r2, r3, #3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 809a 	beq.w	80029ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <HAL_GPIO_Init+0x2cc>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a54      	ldr	r2, [pc, #336]	; (8002a10 <HAL_GPIO_Init+0x2cc>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x2cc>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028d0:	4a50      	ldr	r2, [pc, #320]	; (8002a14 <HAL_GPIO_Init+0x2d0>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x1e0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <HAL_GPIO_Init+0x2d4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1dc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a45      	ldr	r2, [pc, #276]	; (8002a1c <HAL_GPIO_Init+0x2d8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1d8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a44      	ldr	r2, [pc, #272]	; (8002a20 <HAL_GPIO_Init+0x2dc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1d4>
 8002914:	2303      	movs	r3, #3
 8002916:	e006      	b.n	8002926 <HAL_GPIO_Init+0x1e2>
 8002918:	2305      	movs	r3, #5
 800291a:	e004      	b.n	8002926 <HAL_GPIO_Init+0x1e2>
 800291c:	2302      	movs	r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x1e2>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_GPIO_Init+0x1e2>
 8002924:	2300      	movs	r3, #0
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002936:	4937      	ldr	r1, [pc, #220]	; (8002a14 <HAL_GPIO_Init+0x2d0>)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002968:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002992:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029e6:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_GPIO_Init+0x2e0>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f aea9 	bne.w	8002754 <HAL_GPIO_Init+0x10>
  }
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	48000c00 	.word	0x48000c00
 8002a24:	40010400 	.word	0x40010400

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f8fa 	bl	8000c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e081      	b.n	8002b9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe fb26 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	; 0x24
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e006      	b.n	8002b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d104      	bne.n	8002b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	f040 80da 	bne.w	8002d7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x30>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0d3      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe fcb6 	bl	8001550 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f8f0 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0be      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2221      	movs	r2, #33	; 0x21
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	893a      	ldrh	r2, [r7, #8]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2bff      	cmp	r3, #255	; 0xff
 8002c32:	d90e      	bls.n	8002c52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa7e 	bl	800314c <I2C_TransferConfig>
 8002c50:	e06c      	b.n	8002d2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa6d 	bl	800314c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c72:	e05b      	b.n	8002d2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	6a39      	ldr	r1, [r7, #32]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f8fc 	bl	8002e76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e07b      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d034      	beq.n	8002d2c <HAL_I2C_Master_Transmit+0x184>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d130      	bne.n	8002d2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f87f 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e04d      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	d90e      	bls.n	8002d0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa21 	bl	800314c <I2C_TransferConfig>
 8002d0a:	e00f      	b.n	8002d2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa10 	bl	800314c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d19e      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8e2 	bl	8002f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e01a      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_I2C_Master_Transmit+0x1e4>)
 8002d5e:	400b      	ands	r3, r1
 8002d60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	80002000 	.word	0x80002000
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d007      	beq.n	8002dcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	619a      	str	r2, [r3, #24]
  }
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	e031      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d02d      	beq.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fbad 	bl	8001550 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d122      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d113      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d0be      	beq.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e82:	e033      	b.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f87f 	bl	8002f8c <I2C_IsErrorOccurred>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e031      	b.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d025      	beq.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fe fb56 	bl	8001550 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11a      	bne.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d013      	beq.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d1c4      	bne.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f10:	e02f      	b.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f838 	bl	8002f8c <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02d      	b.n	8002f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7fe fb13 	bl	8001550 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11a      	bne.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d013      	beq.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e007      	b.n	8002f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d1c8      	bne.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d068      	beq.n	800308a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fc0:	e049      	b.n	8003056 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d045      	beq.n	8003056 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fca:	f7fe fac1 	bl	8001550 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <I2C_IsErrorOccurred+0x54>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d13a      	bne.n	8003056 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003002:	d121      	bne.n	8003048 <I2C_IsErrorOccurred+0xbc>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300a:	d01d      	beq.n	8003048 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d01a      	beq.n	8003048 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003022:	f7fe fa95 	bl	8001550 <HAL_GetTick>
 8003026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003028:	e00e      	b.n	8003048 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800302a:	f7fe fa91 	bl	8001550 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b19      	cmp	r3, #25
 8003036:	d907      	bls.n	8003048 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f043 0320 	orr.w	r3, r3, #32
 800303e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003046:	e006      	b.n	8003056 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b20      	cmp	r3, #32
 8003054:	d1e9      	bne.n	800302a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b20      	cmp	r3, #32
 8003062:	d003      	beq.n	800306c <I2C_IsErrorOccurred+0xe0>
 8003064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0aa      	beq.n	8002fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800306c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2220      	movs	r2, #32
 800307a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fe45 	bl	8002d90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <I2C_IsErrorOccurred+0x1bc>)
 8003112:	400b      	ands	r3, r1
 8003114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800313a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800313e:	4618      	mov	r0, r3
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	4613      	mov	r3, r2
 800315c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003164:	7a7b      	ldrb	r3, [r7, #9]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800316c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	4313      	orrs	r3, r2
 8003176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800317a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	0d5b      	lsrs	r3, r3, #21
 8003186:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <I2C_TransferConfig+0x60>)
 800318c:	430b      	orrs	r3, r1
 800318e:	43db      	mvns	r3, r3
 8003190:	ea02 0103 	and.w	r1, r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	03ff63ff 	.word	0x03ff63ff

080031b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d138      	bne.n	8003238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e032      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	; 0x24
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	d139      	bne.n	80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003266:	2302      	movs	r3, #2
 8003268:	e033      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	; 0x24
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f001 b823 	b.w	800434c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 817d 	beq.w	8003616 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800331c:	4bbc      	ldr	r3, [pc, #752]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00c      	beq.n	8003342 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003328:	4bb9      	ldr	r3, [pc, #740]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d15c      	bne.n	80033ee <HAL_RCC_OscConfig+0x10e>
 8003334:	4bb6      	ldr	r3, [pc, #728]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d155      	bne.n	80033ee <HAL_RCC_OscConfig+0x10e>
 8003342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003346:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003356:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_RCC_OscConfig+0x94>
 800336e:	4ba8      	ldr	r3, [pc, #672]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e015      	b.n	80033a0 <HAL_RCC_OscConfig+0xc0>
 8003374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003378:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003390:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800339c:	4b9c      	ldr	r3, [pc, #624]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80033a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033ac:	fa92 f2a2 	rbit	r2, r2
 80033b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80033b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0220 	orr.w	r2, r2, #32
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 811f 	beq.w	8003614 <HAL_RCC_OscConfig+0x334>
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8116 	bne.w	8003614 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f000 bfaf 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x12e>
 8003400:	4b83      	ldr	r3, [pc, #524]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a82      	ldr	r2, [pc, #520]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e036      	b.n	800347c <HAL_RCC_OscConfig+0x19c>
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x158>
 800341e:	4b7c      	ldr	r3, [pc, #496]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7b      	ldr	r2, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b79      	ldr	r3, [pc, #484]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a78      	ldr	r2, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e021      	b.n	800347c <HAL_RCC_OscConfig+0x19c>
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x184>
 800344a:	4b71      	ldr	r3, [pc, #452]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a70      	ldr	r2, [pc, #448]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b6e      	ldr	r3, [pc, #440]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6d      	ldr	r2, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x19c>
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a69      	ldr	r2, [pc, #420]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b67      	ldr	r3, [pc, #412]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a66      	ldr	r2, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800347c:	4b64      	ldr	r3, [pc, #400]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	f023 020f 	bic.w	r2, r3, #15
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	495f      	ldr	r1, [pc, #380]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003492:	4313      	orrs	r3, r2
 8003494:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d059      	beq.n	800355a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe f853 	bl	8001550 <HAL_GetTick>
 80034aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe f84e 	bl	8001550 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	; 0x64
 80034be:	d902      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	f000 bf43 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 80034c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80034da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0x218>
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e015      	b.n	8003524 <HAL_RCC_OscConfig+0x244>
 80034f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800350c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003510:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003514:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003528:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800352c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003538:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ab      	beq.n	80034b0 <HAL_RCC_OscConfig+0x1d0>
 8003558:	e05d      	b.n	8003616 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd fff9 	bl	8001550 <HAL_GetTick>
 800355e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd fff4 	bl	8001550 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	; 0x64
 8003572:	d902      	bls.n	800357a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	f000 bee9 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 800357a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800358e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_RCC_OscConfig+0x2cc>
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	e015      	b.n	80035d8 <HAL_RCC_OscConfig+0x2f8>
 80035ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80035e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035e4:	fa92 f2a2 	rbit	r2, r2
 80035e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80035ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ab      	bne.n	8003564 <HAL_RCC_OscConfig+0x284>
 800360c:	e003      	b.n	8003616 <HAL_RCC_OscConfig+0x336>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 817d 	beq.w	8003926 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800362c:	4ba6      	ldr	r3, [pc, #664]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003638:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d172      	bne.n	800372a <HAL_RCC_OscConfig+0x44a>
 8003644:	4ba0      	ldr	r3, [pc, #640]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d16c      	bne.n	800372a <HAL_RCC_OscConfig+0x44a>
 8003650:	2302      	movs	r3, #2
 8003652:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003662:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x3a0>
 800367a:	4b93      	ldr	r3, [pc, #588]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	e013      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c8>
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003698:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036a4:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2202      	movs	r2, #2
 80036aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80036ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036b2:	fa92 f2a2 	rbit	r2, r2
 80036b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80036ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f042 0220 	orr.w	r2, r2, #32
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f002 021f 	and.w	r2, r2, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCC_OscConfig+0x410>
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f000 be2e 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	21f8      	movs	r1, #248	; 0xf8
 8003706:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800370e:	fa91 f1a1 	rbit	r1, r1
 8003712:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003716:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800371a:	fab1 f181 	clz	r1, r1
 800371e:	b2c9      	uxtb	r1, r1
 8003720:	408b      	lsls	r3, r1
 8003722:	4969      	ldr	r1, [pc, #420]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003728:	e0fd      	b.n	8003926 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8088 	beq.w	800384c <HAL_RCC_OscConfig+0x56c>
 800373c:	2301      	movs	r3, #1
 800373e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800374e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800375c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	461a      	mov	r2, r3
 8003764:	2301      	movs	r3, #1
 8003766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fef2 	bl	8001550 <HAL_GetTick>
 800376c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003772:	f7fd feed 	bl	8001550 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f000 bde2 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 8003788:	2302      	movs	r3, #2
 800378a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800379a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4d8>
 80037b2:	4b45      	ldr	r3, [pc, #276]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	e013      	b.n	80037e0 <HAL_RCC_OscConfig+0x500>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037ca:	2302      	movs	r3, #2
 80037cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2202      	movs	r2, #2
 80037e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80037e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80037f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80037f6:	fab2 f282 	clz	r2, r2
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f042 0220 	orr.w	r2, r2, #32
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f002 021f 	and.w	r2, r2, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0af      	beq.n	8003772 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	21f8      	movs	r1, #248	; 0xf8
 8003828:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003830:	fa91 f1a1 	rbit	r1, r1
 8003834:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003838:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800383c:	fab1 f181 	clz	r1, r1
 8003840:	b2c9      	uxtb	r1, r1
 8003842:	408b      	lsls	r3, r1
 8003844:	4920      	ldr	r1, [pc, #128]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
 800384a:	e06c      	b.n	8003926 <HAL_RCC_OscConfig+0x646>
 800384c:	2301      	movs	r3, #1
 800384e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800385e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800386c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	461a      	mov	r2, r3
 8003874:	2300      	movs	r3, #0
 8003876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fe6a 	bl	8001550 <HAL_GetTick>
 800387c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd fe65 	bl	8001550 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	f000 bd5a 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 8003898:	2302      	movs	r3, #2
 800389a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d104      	bne.n	80038cc <HAL_RCC_OscConfig+0x5ec>
 80038c2:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <HAL_RCC_OscConfig+0x5e8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e015      	b.n	80038f4 <HAL_RCC_OscConfig+0x614>
 80038c8:	40021000 	.word	0x40021000
 80038cc:	2302      	movs	r3, #2
 80038ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038de:	2302      	movs	r3, #2
 80038e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80038f0:	4bc8      	ldr	r3, [pc, #800]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2202      	movs	r2, #2
 80038f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80038fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038fe:	fa92 f2a2 	rbit	r2, r2
 8003902:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003906:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ad      	bne.n	8003882 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8110 	beq.w	8003b5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d079      	beq.n	8003a40 <HAL_RCC_OscConfig+0x760>
 800394c:	2301      	movs	r3, #1
 800394e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800395e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4bab      	ldr	r3, [pc, #684]	; (8003c18 <HAL_RCC_OscConfig+0x938>)
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	461a      	mov	r2, r3
 8003972:	2301      	movs	r3, #1
 8003974:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd fdeb 	bl	8001550 <HAL_GetTick>
 800397a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fd fde6 	bl	8001550 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	f000 bcdb 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 8003996:	2302      	movs	r3, #2
 8003998:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039b0:	2202      	movs	r2, #2
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d4:	2202      	movs	r2, #2
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fa93 f2a3 	rbit	r2, r3
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f0:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039fc:	2102      	movs	r1, #2
 80039fe:	6019      	str	r1, [r3, #0]
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f1a3 	rbit	r1, r3
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a16:	6019      	str	r1, [r3, #0]
  return result;
 8003a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0a0      	beq.n	8003980 <HAL_RCC_OscConfig+0x6a0>
 8003a3e:	e08d      	b.n	8003b5c <HAL_RCC_OscConfig+0x87c>
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a62:	601a      	str	r2, [r3, #0]
  return result;
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a6c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x938>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a82:	f7fd fd65 	bl	8001550 <HAL_GetTick>
 8003a86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fd60 	bl	8001550 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d902      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	f000 bc55 	b.w	800434c <HAL_RCC_OscConfig+0x106c>
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003aaa:	2202      	movs	r2, #2
 8003aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	fa93 f2a3 	rbit	r2, r3
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ace:	2202      	movs	r2, #2
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003af2:	2202      	movs	r2, #2
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	fa93 f2a3 	rbit	r2, r3
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	6019      	str	r1, [r3, #0]
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fa93 f1a3 	rbit	r1, r3
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b34:	6019      	str	r1, [r3, #0]
  return result;
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d197      	bne.n	8003a8c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 81a1 	beq.w	8003eb4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	61d3      	str	r3, [r2, #28]
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003baa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_OscConfig+0x93c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <HAL_RCC_OscConfig+0x93c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_RCC_OscConfig+0x93c>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd fcc1 	bl	8001550 <HAL_GetTick>
 8003bce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	e009      	b.n	8003be8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd fcbc 	bl	8001550 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b64      	cmp	r3, #100	; 0x64
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e3b1      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x93c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCC_OscConfig+0x940>
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a02      	ldr	r2, [pc, #8]	; (8003c14 <HAL_RCC_OscConfig+0x934>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e03c      	b.n	8003c8c <HAL_RCC_OscConfig+0x9ac>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	10908120 	.word	0x10908120
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x96a>
 8003c30:	4bc1      	ldr	r3, [pc, #772]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4ac0      	ldr	r2, [pc, #768]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	4bbe      	ldr	r3, [pc, #760]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4abd      	ldr	r2, [pc, #756]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c42:	f023 0304 	bic.w	r3, r3, #4
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e020      	b.n	8003c8c <HAL_RCC_OscConfig+0x9ac>
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x994>
 8003c5a:	4bb7      	ldr	r3, [pc, #732]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4ab6      	ldr	r2, [pc, #728]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6213      	str	r3, [r2, #32]
 8003c66:	4bb4      	ldr	r3, [pc, #720]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4ab3      	ldr	r2, [pc, #716]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6213      	str	r3, [r2, #32]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0x9ac>
 8003c74:	4bb0      	ldr	r3, [pc, #704]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4aaf      	ldr	r2, [pc, #700]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	4bad      	ldr	r3, [pc, #692]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4aac      	ldr	r2, [pc, #688]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8081 	beq.w	8003da0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd fc57 	bl	8001550 <HAL_GetTick>
 8003ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fc52 	bl	8001550 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e345      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003cc8:	2202      	movs	r2, #2
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cec:	2202      	movs	r2, #2
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d06:	601a      	str	r2, [r3, #0]
  return result;
 8003d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_OscConfig+0xa4c>
 8003d26:	4b84      	ldr	r3, [pc, #528]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	e013      	b.n	8003d54 <HAL_RCC_OscConfig+0xa74>
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d34:	2202      	movs	r2, #2
 8003d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	fa93 f2a3 	rbit	r2, r3
 8003d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	6011      	str	r1, [r2, #0]
 8003d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	fa92 f1a2 	rbit	r1, r2
 8003d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d76:	6011      	str	r1, [r2, #0]
  return result;
 8003d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f002 021f 	and.w	r2, r2, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f202 	lsl.w	r2, r1, r2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d084      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x9c8>
 8003d9e:	e07f      	b.n	8003ea0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da0:	f7fd fbd6 	bl	8001550 <HAL_GetTick>
 8003da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fbd1 	bl	8001550 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e2c4      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003dca:	2202      	movs	r2, #2
 8003dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fa93 f2a3 	rbit	r2, r3
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dee:	2202      	movs	r2, #2
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e08:	601a      	str	r2, [r3, #0]
  return result;
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d102      	bne.n	8003e2e <HAL_RCC_OscConfig+0xb4e>
 8003e28:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	e013      	b.n	8003e56 <HAL_RCC_OscConfig+0xb76>
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e36:	2202      	movs	r2, #2
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e5e:	2102      	movs	r1, #2
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fa92 f1a2 	rbit	r1, r2
 8003e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e78:	6011      	str	r1, [r2, #0]
  return result;
 8003e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f002 021f 	and.w	r2, r2, #31
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d184      	bne.n	8003daa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ea0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8242 	beq.w	800434a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <HAL_RCC_OscConfig+0xc58>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	f000 8213 	beq.w	80042fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f040 8162 	bne.w	80041aa <HAL_RCC_OscConfig+0xeca>
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f0a:	601a      	str	r2, [r3, #0]
  return result;
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	461a      	mov	r2, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fb10 	bl	8001550 <HAL_GetTick>
 8003f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f34:	e00c      	b.n	8003f50 <HAL_RCC_OscConfig+0xc70>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd fb08 	bl	8001550 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1fd      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f74:	601a      	str	r2, [r3, #0]
  return result;
 8003f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d102      	bne.n	8003f9a <HAL_RCC_OscConfig+0xcba>
 8003f94:	4bb0      	ldr	r3, [pc, #704]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	e027      	b.n	8003fea <HAL_RCC_OscConfig+0xd0a>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	4b9c      	ldr	r3, [pc, #624]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ff2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ff6:	6011      	str	r1, [r2, #0]
 8003ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ffc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	fa92 f1a2 	rbit	r1, r2
 8004006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800400e:	6011      	str	r1, [r2, #0]
  return result;
 8004010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004014:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	fab2 f282 	clz	r2, r2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f002 021f 	and.w	r2, r2, #31
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f202 	lsl.w	r2, r1, r2
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d182      	bne.n	8003f3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	430b      	orrs	r3, r1
 8004058:	497f      	ldr	r1, [pc, #508]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004066:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004082:	601a      	str	r2, [r3, #0]
  return result;
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800408c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004098:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	461a      	mov	r2, r3
 80040a0:	2301      	movs	r3, #1
 80040a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fd fa54 	bl	8001550 <HAL_GetTick>
 80040a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ac:	e009      	b.n	80040c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd fa4f 	bl	8001550 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e144      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	fa93 f2a3 	rbit	r2, r3
 80040de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040e6:	601a      	str	r2, [r3, #0]
  return result;
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0xe2c>
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e027      	b.n	800415c <HAL_RCC_OscConfig+0xe7c>
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800413a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004160:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004164:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800416e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	fa92 f1a2 	rbit	r1, r2
 8004178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800417c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004180:	6011      	str	r1, [r2, #0]
  return result;
 8004182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004186:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f042 0220 	orr.w	r2, r2, #32
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f002 021f 	and.w	r2, r2, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d082      	beq.n	80040ae <HAL_RCC_OscConfig+0xdce>
 80041a8:	e0cf      	b.n	800434a <HAL_RCC_OscConfig+0x106a>
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80041b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	fa93 f2a3 	rbit	r2, r3
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041ce:	601a      	str	r2, [r3, #0]
  return result;
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd f9ae 	bl	8001550 <HAL_GetTick>
 80041f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f8:	e009      	b.n	800420e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fd f9a9 	bl	8001550 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e09e      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004232:	601a      	str	r2, [r3, #0]
  return result;
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800423c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d104      	bne.n	800425c <HAL_RCC_OscConfig+0xf7c>
 8004252:	4b01      	ldr	r3, [pc, #4]	; (8004258 <HAL_RCC_OscConfig+0xf78>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e029      	b.n	80042ac <HAL_RCC_OscConfig+0xfcc>
 8004258:	40021000 	.word	0x40021000
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f2a3 	rbit	r2, r3
 8004278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x1078>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80042b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	fa92 f1a2 	rbit	r1, r2
 80042c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042d0:	6011      	str	r1, [r2, #0]
  return result;
 80042d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f002 021f 	and.w	r2, r2, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d180      	bne.n	80041fa <HAL_RCC_OscConfig+0xf1a>
 80042f8:	e027      	b.n	800434a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e01e      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_RCC_OscConfig+0x1078>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004316:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800431a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800431e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	429a      	cmp	r2, r3
 800432c:	d10b      	bne.n	8004346 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800432e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b09e      	sub	sp, #120	; 0x78
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e162      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b90      	ldr	r3, [pc, #576]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d910      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b8d      	ldr	r3, [pc, #564]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 0207 	bic.w	r2, r3, #7
 800438a:	498b      	ldr	r1, [pc, #556]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b89      	ldr	r3, [pc, #548]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e14a      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b82      	ldr	r3, [pc, #520]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	497f      	ldr	r1, [pc, #508]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80dc 	beq.w	8004588 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d13c      	bne.n	8004452 <HAL_RCC_ClockConfig+0xf6>
 80043d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_ClockConfig+0xa6>
 80043fc:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	e00f      	b.n	8004422 <HAL_RCC_ClockConfig+0xc6>
 8004402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004406:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	667b      	str	r3, [r7, #100]	; 0x64
 8004410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004414:	663b      	str	r3, [r7, #96]	; 0x60
 8004416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800441e:	4b67      	ldr	r3, [pc, #412]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004426:	65ba      	str	r2, [r7, #88]	; 0x58
 8004428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442a:	fa92 f2a2 	rbit	r2, r2
 800442e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004432:	fab2 f282 	clz	r2, r2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f042 0220 	orr.w	r2, r2, #32
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f002 021f 	and.w	r2, r2, #31
 8004442:	2101      	movs	r1, #1
 8004444:	fa01 f202 	lsl.w	r2, r1, r2
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d17b      	bne.n	8004546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0f3      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d13c      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x178>
 800445a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800445e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d102      	bne.n	8004484 <HAL_RCC_ClockConfig+0x128>
 800447e:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_ClockConfig+0x148>
 8004484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	643b      	str	r3, [r7, #64]	; 0x40
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	4b46      	ldr	r3, [pc, #280]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80044aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ac:	fa92 f2a2 	rbit	r2, r2
 80044b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	f042 0220 	orr.w	r2, r2, #32
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	f002 021f 	and.w	r2, r2, #31
 80044c4:	2101      	movs	r1, #1
 80044c6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d13a      	bne.n	8004546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b2      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
 80044d4:	2302      	movs	r3, #2
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d102      	bne.n	80044fc <HAL_RCC_ClockConfig+0x1a0>
 80044f6:	4b31      	ldr	r3, [pc, #196]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e00d      	b.n	8004518 <HAL_RCC_ClockConfig+0x1bc>
 80044fc:	2302      	movs	r3, #2
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	2302      	movs	r3, #2
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	2202      	movs	r2, #2
 800451a:	61ba      	str	r2, [r7, #24]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	fa92 f2a2 	rbit	r2, r2
 8004522:	617a      	str	r2, [r7, #20]
  return result;
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	fab2 f282 	clz	r2, r2
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f042 0220 	orr.w	r2, r2, #32
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	f002 021f 	and.w	r2, r2, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e079      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	491a      	ldr	r1, [pc, #104]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fc fffa 	bl	8001550 <HAL_GetTick>
 800455c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fc fff6 	bl	8001550 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e061      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_ClockConfig+0x260>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d214      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	4906      	ldr	r1, [pc, #24]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCC_ClockConfig+0x25c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e040      	b.n	800463a <HAL_RCC_ClockConfig+0x2de>
 80045b8:	40022000 	.word	0x40022000
 80045bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_RCC_ClockConfig+0x2e8>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	491a      	ldr	r1, [pc, #104]	; (8004644 <HAL_RCC_ClockConfig+0x2e8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_RCC_ClockConfig+0x2e8>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4912      	ldr	r1, [pc, #72]	; (8004644 <HAL_RCC_ClockConfig+0x2e8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045fe:	f000 f829 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004602:	4601      	mov	r1, r0
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <HAL_RCC_ClockConfig+0x2e8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460c:	22f0      	movs	r2, #240	; 0xf0
 800460e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	fa92 f2a2 	rbit	r2, r2
 8004616:	60fa      	str	r2, [r7, #12]
  return result;
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	fab2 f282 	clz	r2, r2
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	40d3      	lsrs	r3, r2
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x2ec>)
 8004624:	5cd3      	ldrb	r3, [r2, r3]
 8004626:	fa21 f303 	lsr.w	r3, r1, r3
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <HAL_RCC_ClockConfig+0x2f0>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_ClockConfig+0x2f4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc ff48 	bl	80014c8 <HAL_InitTick>
  
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3778      	adds	r7, #120	; 0x78
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	080066c8 	.word	0x080066c8
 800464c:	20000430 	.word	0x20000430
 8004650:	20000434 	.word	0x20000434

08004654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	b08b      	sub	sp, #44	; 0x2c
 8004658:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800466e:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b04      	cmp	r3, #4
 800467c:	d002      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x30>
 800467e:	2b08      	cmp	r3, #8
 8004680:	d003      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x36>
 8004682:	e03c      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004684:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004686:	623b      	str	r3, [r7, #32]
      break;
 8004688:	e03c      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004690:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004694:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	fa92 f2a2 	rbit	r2, r2
 800469c:	607a      	str	r2, [r7, #4]
  return result;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	40d3      	lsrs	r3, r2
 80046a8:	4a1c      	ldr	r2, [pc, #112]	; (800471c <HAL_RCC_GetSysClockFreq+0xc8>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	220f      	movs	r2, #15
 80046b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	fa92 f2a2 	rbit	r2, r2
 80046c0:	60fa      	str	r2, [r7, #12]
  return result;
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	fab2 f282 	clz	r2, r2
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	40d3      	lsrs	r3, r2
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046ce:	5cd3      	ldrb	r3, [r2, r3]
 80046d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	e004      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	623b      	str	r3, [r7, #32]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004700:	623b      	str	r3, [r7, #32]
      break;
 8004702:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004704:	6a3b      	ldr	r3, [r7, #32]
}
 8004706:	4618      	mov	r0, r3
 8004708:	372c      	adds	r7, #44	; 0x2c
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	007a1200 	.word	0x007a1200
 800471c:	080066e0 	.word	0x080066e0
 8004720:	080066f0 	.word	0x080066f0
 8004724:	003d0900 	.word	0x003d0900

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000430 	.word	0x20000430

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004746:	f7ff ffef 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800474a:	4601      	mov	r1, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004754:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004758:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	fa92 f2a2 	rbit	r2, r2
 8004760:	603a      	str	r2, [r7, #0]
  return result;
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	40d3      	lsrs	r3, r2
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x40>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	080066d8 	.word	0x080066d8

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800478a:	f7ff ffcd 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800478e:	4601      	mov	r1, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004798:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800479c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	fa92 f2a2 	rbit	r2, r2
 80047a4:	603a      	str	r2, [r7, #0]
  return result;
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	40d3      	lsrs	r3, r2
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	080066d8 	.word	0x080066d8

080047c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b092      	sub	sp, #72	; 0x48
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80d4 	beq.w	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ec:	4b4e      	ldr	r3, [pc, #312]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10e      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004802:	61d3      	str	r3, [r2, #28]
 8004804:	4b48      	ldr	r3, [pc, #288]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b45      	ldr	r3, [pc, #276]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004822:	4b42      	ldr	r3, [pc, #264]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a41      	ldr	r2, [pc, #260]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fc fe8f 	bl	8001550 <HAL_GetTick>
 8004832:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fc fe8b 	bl	8001550 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	; 0x64
 8004842:	d901      	bls.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e14b      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b38      	ldr	r3, [pc, #224]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004854:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8084 	beq.w	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004870:	429a      	cmp	r2, r3
 8004872:	d07c      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004874:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	4b26      	ldr	r3, [pc, #152]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	461a      	mov	r2, r3
 800489e:	2301      	movs	r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	461a      	mov	r2, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04b      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fc fe3b 	bl	8001550 <HAL_GetTick>
 80048da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fc fe37 	bl	8001550 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0f5      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80048f4:	2302      	movs	r3, #2
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	2302      	movs	r3, #2
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	61fb      	str	r3, [r7, #28]
  return result;
 800490c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d108      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004922:	4b01      	ldr	r3, [pc, #4]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	e00d      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
 8004930:	10908100 	.word	0x10908100
 8004934:	2302      	movs	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2202      	movs	r2, #2
 8004946:	613a      	str	r2, [r7, #16]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	fa92 f2a2 	rbit	r2, r2
 800494e:	60fa      	str	r2, [r7, #12]
  return result;
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	fab2 f282 	clz	r2, r2
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	f002 021f 	and.w	r2, r2, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f202 	lsl.w	r2, r1, r2
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0b7      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800496e:	4b5e      	ldr	r3, [pc, #376]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	495b      	ldr	r1, [pc, #364]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800497c:	4313      	orrs	r3, r2
 800497e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004988:	4b57      	ldr	r3, [pc, #348]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049a0:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f023 0203 	bic.w	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	494e      	ldr	r1, [pc, #312]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f023 0210 	bic.w	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4947      	ldr	r1, [pc, #284]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f023 0220 	bic.w	r2, r3, #32
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	4938      	ldr	r1, [pc, #224]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a18:	4b33      	ldr	r3, [pc, #204]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	4930      	ldr	r1, [pc, #192]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4929      	ldr	r1, [pc, #164]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4921      	ldr	r1, [pc, #132]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	491a      	ldr	r1, [pc, #104]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	4912      	ldr	r1, [pc, #72]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	490b      	ldr	r1, [pc, #44]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3748      	adds	r7, #72	; 0x48
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000

08004aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e040      	b.n	8004b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fb3a 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f82c 	bl	8004b88 <UART_SetConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e022      	b.n	8004b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f956 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9dd 	bl	8004f38 <UART_CheckIdleState>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b8a      	ldr	r3, [pc, #552]	; (8004ddc <UART_SetConfig+0x254>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a78      	ldr	r2, [pc, #480]	; (8004de0 <UART_SetConfig+0x258>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d120      	bne.n	8004c46 <UART_SetConfig+0xbe>
 8004c04:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <UART_SetConfig+0x25c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d817      	bhi.n	8004c40 <UART_SetConfig+0xb8>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x90>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c35 	.word	0x08004c35
 8004c20:	08004c3b 	.word	0x08004c3b
 8004c24:	08004c2f 	.word	0x08004c2f
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e01d      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e01a      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e017      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e014      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e011      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a67      	ldr	r2, [pc, #412]	; (8004de8 <UART_SetConfig+0x260>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d102      	bne.n	8004c56 <UART_SetConfig+0xce>
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e009      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a64      	ldr	r2, [pc, #400]	; (8004dec <UART_SetConfig+0x264>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d102      	bne.n	8004c66 <UART_SetConfig+0xde>
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e001      	b.n	8004c6a <UART_SetConfig+0xe2>
 8004c66:	2310      	movs	r3, #16
 8004c68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d15a      	bne.n	8004d2a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d827      	bhi.n	8004cca <UART_SetConfig+0x142>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0xf8>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7ff fd4c 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8004ca8:	61b8      	str	r0, [r7, #24]
        break;
 8004caa:	e013      	b.n	8004cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7ff fd6a 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	61b8      	str	r0, [r7, #24]
        break;
 8004cb2:	e00f      	b.n	8004cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <UART_SetConfig+0x268>)
 8004cb6:	61bb      	str	r3, [r7, #24]
        break;
 8004cb8:	e00c      	b.n	8004cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7ff fccb 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004cbe:	61b8      	str	r0, [r7, #24]
        break;
 8004cc0:	e008      	b.n	8004cd4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	61bb      	str	r3, [r7, #24]
        break;
 8004cc8:	e004      	b.n	8004cd4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d074      	beq.n	8004dc4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	005a      	lsls	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	441a      	add	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d916      	bls.n	8004d24 <UART_SetConfig+0x19c>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d212      	bcs.n	8004d24 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f023 030f 	bic.w	r3, r3, #15
 8004d06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	89fb      	ldrh	r3, [r7, #14]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	89fa      	ldrh	r2, [r7, #14]
 8004d20:	60da      	str	r2, [r3, #12]
 8004d22:	e04f      	b.n	8004dc4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	77bb      	strb	r3, [r7, #30]
 8004d28:	e04c      	b.n	8004dc4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d2a:	7ffb      	ldrb	r3, [r7, #31]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d828      	bhi.n	8004d82 <UART_SetConfig+0x1fa>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x1b0>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d83 	.word	0x08004d83
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004d7b 	.word	0x08004d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7ff fcf0 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61b8      	str	r0, [r7, #24]
        break;
 8004d62:	e013      	b.n	8004d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7ff fd0e 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8004d68:	61b8      	str	r0, [r7, #24]
        break;
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6c:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <UART_SetConfig+0x268>)
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e00c      	b.n	8004d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7ff fc6f 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004d76:	61b8      	str	r0, [r7, #24]
        break;
 8004d78:	e008      	b.n	8004d8c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e004      	b.n	8004d8c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	085a      	lsrs	r2, r3, #1
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d909      	bls.n	8004dc0 <UART_SetConfig+0x238>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	d205      	bcs.n	8004dc0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	e001      	b.n	8004dc4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	efff69f3 	.word	0xefff69f3
 8004de0:	40013800 	.word	0x40013800
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40004400 	.word	0x40004400
 8004dec:	40004800 	.word	0x40004800
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	d10a      	bne.n	8004f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b098      	sub	sp, #96	; 0x60
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f48:	f7fc fb02 	bl	8001550 <HAL_GetTick>
 8004f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d12e      	bne.n	8004fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f88c 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d021      	beq.n	8004fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e062      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d149      	bne.n	800505c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f856 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	60fb      	str	r3, [r7, #12]
   return(result);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	61fa      	str	r2, [r7, #28]
 8005036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	617b      	str	r3, [r7, #20]
   return(result);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e011      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3758      	adds	r7, #88	; 0x58
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e049      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d045      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fc fa55 	bl	8001550 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e048      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d031      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f838 	bl	8005156 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2208      	movs	r2, #8
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e029      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d111      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f81e 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a6      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b095      	sub	sp, #84	; 0x54
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
 800517e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005212:	bf00      	nop
 8005214:	3754      	adds	r7, #84	; 0x54
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
	...

08005220 <srand>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <srand+0x44>)
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005228:	4604      	mov	r4, r0
 800522a:	b9b3      	cbnz	r3, 800525a <srand+0x3a>
 800522c:	2018      	movs	r0, #24
 800522e:	f000 fa9b 	bl	8005768 <malloc>
 8005232:	4602      	mov	r2, r0
 8005234:	6328      	str	r0, [r5, #48]	; 0x30
 8005236:	b920      	cbnz	r0, 8005242 <srand+0x22>
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <srand+0x48>)
 800523a:	480c      	ldr	r0, [pc, #48]	; (800526c <srand+0x4c>)
 800523c:	2146      	movs	r1, #70	; 0x46
 800523e:	f000 fa29 	bl	8005694 <__assert_func>
 8005242:	490b      	ldr	r1, [pc, #44]	; (8005270 <srand+0x50>)
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <srand+0x54>)
 8005246:	e9c0 1300 	strd	r1, r3, [r0]
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <srand+0x58>)
 800524c:	6083      	str	r3, [r0, #8]
 800524e:	230b      	movs	r3, #11
 8005250:	8183      	strh	r3, [r0, #12]
 8005252:	2100      	movs	r1, #0
 8005254:	2001      	movs	r0, #1
 8005256:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800525a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800525c:	2200      	movs	r2, #0
 800525e:	611c      	str	r4, [r3, #16]
 8005260:	615a      	str	r2, [r3, #20]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000494 	.word	0x20000494
 8005268:	08006700 	.word	0x08006700
 800526c:	08006717 	.word	0x08006717
 8005270:	abcd330e 	.word	0xabcd330e
 8005274:	e66d1234 	.word	0xe66d1234
 8005278:	0005deec 	.word	0x0005deec

0800527c <rand>:
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <rand+0x5c>)
 800527e:	b510      	push	{r4, lr}
 8005280:	681c      	ldr	r4, [r3, #0]
 8005282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005284:	b9b3      	cbnz	r3, 80052b4 <rand+0x38>
 8005286:	2018      	movs	r0, #24
 8005288:	f000 fa6e 	bl	8005768 <malloc>
 800528c:	4602      	mov	r2, r0
 800528e:	6320      	str	r0, [r4, #48]	; 0x30
 8005290:	b920      	cbnz	r0, 800529c <rand+0x20>
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <rand+0x60>)
 8005294:	4812      	ldr	r0, [pc, #72]	; (80052e0 <rand+0x64>)
 8005296:	2152      	movs	r1, #82	; 0x52
 8005298:	f000 f9fc 	bl	8005694 <__assert_func>
 800529c:	4911      	ldr	r1, [pc, #68]	; (80052e4 <rand+0x68>)
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <rand+0x6c>)
 80052a0:	e9c0 1300 	strd	r1, r3, [r0]
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <rand+0x70>)
 80052a6:	6083      	str	r3, [r0, #8]
 80052a8:	230b      	movs	r3, #11
 80052aa:	8183      	strh	r3, [r0, #12]
 80052ac:	2100      	movs	r1, #0
 80052ae:	2001      	movs	r0, #1
 80052b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80052b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052b6:	480e      	ldr	r0, [pc, #56]	; (80052f0 <rand+0x74>)
 80052b8:	690b      	ldr	r3, [r1, #16]
 80052ba:	694c      	ldr	r4, [r1, #20]
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <rand+0x78>)
 80052be:	4358      	muls	r0, r3
 80052c0:	fb02 0004 	mla	r0, r2, r4, r0
 80052c4:	fba3 3202 	umull	r3, r2, r3, r2
 80052c8:	3301      	adds	r3, #1
 80052ca:	eb40 0002 	adc.w	r0, r0, r2
 80052ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80052d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80052d6:	bd10      	pop	{r4, pc}
 80052d8:	20000494 	.word	0x20000494
 80052dc:	08006700 	.word	0x08006700
 80052e0:	08006717 	.word	0x08006717
 80052e4:	abcd330e 	.word	0xabcd330e
 80052e8:	e66d1234 	.word	0xe66d1234
 80052ec:	0005deec 	.word	0x0005deec
 80052f0:	5851f42d 	.word	0x5851f42d
 80052f4:	4c957f2d 	.word	0x4c957f2d

080052f8 <std>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005306:	6083      	str	r3, [r0, #8]
 8005308:	8181      	strh	r1, [r0, #12]
 800530a:	6643      	str	r3, [r0, #100]	; 0x64
 800530c:	81c2      	strh	r2, [r0, #14]
 800530e:	6183      	str	r3, [r0, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	2208      	movs	r2, #8
 8005314:	305c      	adds	r0, #92	; 0x5c
 8005316:	f000 f914 	bl	8005542 <memset>
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <std+0x58>)
 800531c:	6263      	str	r3, [r4, #36]	; 0x24
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <std+0x5c>)
 8005320:	62a3      	str	r3, [r4, #40]	; 0x28
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <std+0x60>)
 8005324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <std+0x64>)
 8005328:	6323      	str	r3, [r4, #48]	; 0x30
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <std+0x68>)
 800532c:	6224      	str	r4, [r4, #32]
 800532e:	429c      	cmp	r4, r3
 8005330:	d006      	beq.n	8005340 <std+0x48>
 8005332:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005336:	4294      	cmp	r4, r2
 8005338:	d002      	beq.n	8005340 <std+0x48>
 800533a:	33d0      	adds	r3, #208	; 0xd0
 800533c:	429c      	cmp	r4, r3
 800533e:	d105      	bne.n	800534c <std+0x54>
 8005340:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	f000 b9a0 	b.w	800568c <__retarget_lock_init_recursive>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	080054bd 	.word	0x080054bd
 8005354:	080054df 	.word	0x080054df
 8005358:	08005517 	.word	0x08005517
 800535c:	0800553b 	.word	0x0800553b
 8005360:	20000720 	.word	0x20000720

08005364 <stdio_exit_handler>:
 8005364:	4a02      	ldr	r2, [pc, #8]	; (8005370 <stdio_exit_handler+0xc>)
 8005366:	4903      	ldr	r1, [pc, #12]	; (8005374 <stdio_exit_handler+0x10>)
 8005368:	4803      	ldr	r0, [pc, #12]	; (8005378 <stdio_exit_handler+0x14>)
 800536a:	f000 b869 	b.w	8005440 <_fwalk_sglue>
 800536e:	bf00      	nop
 8005370:	2000043c 	.word	0x2000043c
 8005374:	08005fad 	.word	0x08005fad
 8005378:	20000448 	.word	0x20000448

0800537c <cleanup_stdio>:
 800537c:	6841      	ldr	r1, [r0, #4]
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <cleanup_stdio+0x34>)
 8005380:	4299      	cmp	r1, r3
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	d001      	beq.n	800538c <cleanup_stdio+0x10>
 8005388:	f000 fe10 	bl	8005fac <_fflush_r>
 800538c:	68a1      	ldr	r1, [r4, #8]
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <cleanup_stdio+0x38>)
 8005390:	4299      	cmp	r1, r3
 8005392:	d002      	beq.n	800539a <cleanup_stdio+0x1e>
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fe09 	bl	8005fac <_fflush_r>
 800539a:	68e1      	ldr	r1, [r4, #12]
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <cleanup_stdio+0x3c>)
 800539e:	4299      	cmp	r1, r3
 80053a0:	d004      	beq.n	80053ac <cleanup_stdio+0x30>
 80053a2:	4620      	mov	r0, r4
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	f000 be00 	b.w	8005fac <_fflush_r>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	20000720 	.word	0x20000720
 80053b4:	20000788 	.word	0x20000788
 80053b8:	200007f0 	.word	0x200007f0

080053bc <global_stdio_init.part.0>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <global_stdio_init.part.0+0x30>)
 80053c0:	4c0b      	ldr	r4, [pc, #44]	; (80053f0 <global_stdio_init.part.0+0x34>)
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <global_stdio_init.part.0+0x38>)
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	4620      	mov	r0, r4
 80053c8:	2200      	movs	r2, #0
 80053ca:	2104      	movs	r1, #4
 80053cc:	f7ff ff94 	bl	80052f8 <std>
 80053d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053d4:	2201      	movs	r2, #1
 80053d6:	2109      	movs	r1, #9
 80053d8:	f7ff ff8e 	bl	80052f8 <std>
 80053dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053e0:	2202      	movs	r2, #2
 80053e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e6:	2112      	movs	r1, #18
 80053e8:	f7ff bf86 	b.w	80052f8 <std>
 80053ec:	20000858 	.word	0x20000858
 80053f0:	20000720 	.word	0x20000720
 80053f4:	08005365 	.word	0x08005365

080053f8 <__sfp_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sfp_lock_acquire+0x8>)
 80053fa:	f000 b948 	b.w	800568e <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20000861 	.word	0x20000861

08005404 <__sfp_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sfp_lock_release+0x8>)
 8005406:	f000 b943 	b.w	8005690 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20000861 	.word	0x20000861

08005410 <__sinit>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7ff fff0 	bl	80053f8 <__sfp_lock_acquire>
 8005418:	6a23      	ldr	r3, [r4, #32]
 800541a:	b11b      	cbz	r3, 8005424 <__sinit+0x14>
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f7ff bff0 	b.w	8005404 <__sfp_lock_release>
 8005424:	4b04      	ldr	r3, [pc, #16]	; (8005438 <__sinit+0x28>)
 8005426:	6223      	str	r3, [r4, #32]
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <__sinit+0x2c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f5      	bne.n	800541c <__sinit+0xc>
 8005430:	f7ff ffc4 	bl	80053bc <global_stdio_init.part.0>
 8005434:	e7f2      	b.n	800541c <__sinit+0xc>
 8005436:	bf00      	nop
 8005438:	0800537d 	.word	0x0800537d
 800543c:	20000858 	.word	0x20000858

08005440 <_fwalk_sglue>:
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4688      	mov	r8, r1
 8005448:	4614      	mov	r4, r2
 800544a:	2600      	movs	r6, #0
 800544c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005450:	f1b9 0901 	subs.w	r9, r9, #1
 8005454:	d505      	bpl.n	8005462 <_fwalk_sglue+0x22>
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	2c00      	cmp	r4, #0
 800545a:	d1f7      	bne.n	800544c <_fwalk_sglue+0xc>
 800545c:	4630      	mov	r0, r6
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <_fwalk_sglue+0x38>
 8005468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800546c:	3301      	adds	r3, #1
 800546e:	d003      	beq.n	8005478 <_fwalk_sglue+0x38>
 8005470:	4629      	mov	r1, r5
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	; 0x68
 800547a:	e7e9      	b.n	8005450 <_fwalk_sglue+0x10>

0800547c <siprintf>:
 800547c:	b40e      	push	{r1, r2, r3}
 800547e:	b500      	push	{lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	ab1d      	add	r3, sp, #116	; 0x74
 8005484:	9002      	str	r0, [sp, #8]
 8005486:	9006      	str	r0, [sp, #24]
 8005488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800548c:	4809      	ldr	r0, [pc, #36]	; (80054b4 <siprintf+0x38>)
 800548e:	9107      	str	r1, [sp, #28]
 8005490:	9104      	str	r1, [sp, #16]
 8005492:	4909      	ldr	r1, [pc, #36]	; (80054b8 <siprintf+0x3c>)
 8005494:	f853 2b04 	ldr.w	r2, [r3], #4
 8005498:	9105      	str	r1, [sp, #20]
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	a902      	add	r1, sp, #8
 80054a0:	f000 fa70 	bl	8005984 <_svfiprintf_r>
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	b01c      	add	sp, #112	; 0x70
 80054ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b0:	b003      	add	sp, #12
 80054b2:	4770      	bx	lr
 80054b4:	20000494 	.word	0x20000494
 80054b8:	ffff0208 	.word	0xffff0208

080054bc <__sread>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	460c      	mov	r4, r1
 80054c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c4:	f000 f894 	bl	80055f0 <_read_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	bfab      	itete	ge
 80054cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ce:	89a3      	ldrhlt	r3, [r4, #12]
 80054d0:	181b      	addge	r3, r3, r0
 80054d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054d6:	bfac      	ite	ge
 80054d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054da:	81a3      	strhlt	r3, [r4, #12]
 80054dc:	bd10      	pop	{r4, pc}

080054de <__swrite>:
 80054de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	461f      	mov	r7, r3
 80054e4:	898b      	ldrh	r3, [r1, #12]
 80054e6:	05db      	lsls	r3, r3, #23
 80054e8:	4605      	mov	r5, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4616      	mov	r6, r2
 80054ee:	d505      	bpl.n	80054fc <__swrite+0x1e>
 80054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f4:	2302      	movs	r3, #2
 80054f6:	2200      	movs	r2, #0
 80054f8:	f000 f868 	bl	80055cc <_lseek_r>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	4628      	mov	r0, r5
 800550e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	f000 b87f 	b.w	8005614 <_write_r>

08005516 <__sseek>:
 8005516:	b510      	push	{r4, lr}
 8005518:	460c      	mov	r4, r1
 800551a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551e:	f000 f855 	bl	80055cc <_lseek_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	bf15      	itete	ne
 8005528:	6560      	strne	r0, [r4, #84]	; 0x54
 800552a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800552e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005532:	81a3      	strheq	r3, [r4, #12]
 8005534:	bf18      	it	ne
 8005536:	81a3      	strhne	r3, [r4, #12]
 8005538:	bd10      	pop	{r4, pc}

0800553a <__sclose>:
 800553a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553e:	f000 b823 	b.w	8005588 <_close_r>

08005542 <memset>:
 8005542:	4402      	add	r2, r0
 8005544:	4603      	mov	r3, r0
 8005546:	4293      	cmp	r3, r2
 8005548:	d100      	bne.n	800554c <memset+0xa>
 800554a:	4770      	bx	lr
 800554c:	f803 1b01 	strb.w	r1, [r3], #1
 8005550:	e7f9      	b.n	8005546 <memset+0x4>
	...

08005554 <time>:
 8005554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <time+0x30>)
 8005558:	2200      	movs	r2, #0
 800555a:	4669      	mov	r1, sp
 800555c:	4604      	mov	r4, r0
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	f000 f822 	bl	80055a8 <_gettimeofday_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	bfbe      	ittt	lt
 8005568:	f04f 32ff 	movlt.w	r2, #4294967295
 800556c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005570:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005578:	b10c      	cbz	r4, 800557e <time+0x2a>
 800557a:	e9c4 0100 	strd	r0, r1, [r4]
 800557e:	b004      	add	sp, #16
 8005580:	bd10      	pop	{r4, pc}
 8005582:	bf00      	nop
 8005584:	20000494 	.word	0x20000494

08005588 <_close_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d06      	ldr	r5, [pc, #24]	; (80055a4 <_close_r+0x1c>)
 800558c:	2300      	movs	r3, #0
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fb fedb 	bl	800134e <_close>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_close_r+0x1a>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_close_r+0x1a>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	2000085c 	.word	0x2000085c

080055a8 <_gettimeofday_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d07      	ldr	r5, [pc, #28]	; (80055c8 <_gettimeofday_r+0x20>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	f001 f84b 	bl	8006650 <_gettimeofday>
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	d102      	bne.n	80055c4 <_gettimeofday_r+0x1c>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	b103      	cbz	r3, 80055c4 <_gettimeofday_r+0x1c>
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	bd38      	pop	{r3, r4, r5, pc}
 80055c6:	bf00      	nop
 80055c8:	2000085c 	.word	0x2000085c

080055cc <_lseek_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d07      	ldr	r5, [pc, #28]	; (80055ec <_lseek_r+0x20>)
 80055d0:	4604      	mov	r4, r0
 80055d2:	4608      	mov	r0, r1
 80055d4:	4611      	mov	r1, r2
 80055d6:	2200      	movs	r2, #0
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	f7fb fede 	bl	800139c <_lseek>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_lseek_r+0x1e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_lseek_r+0x1e>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	2000085c 	.word	0x2000085c

080055f0 <_read_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	; (8005610 <_read_r+0x20>)
 80055f4:	4604      	mov	r4, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	4611      	mov	r1, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fb fe6c 	bl	80012dc <_read>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_read_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_read_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	2000085c 	.word	0x2000085c

08005614 <_write_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	; (8005634 <_write_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fb fe77 	bl	8001316 <_write>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_write_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_write_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	2000085c 	.word	0x2000085c

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	; (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000494 	.word	0x20000494

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	4d0d      	ldr	r5, [pc, #52]	; (800567c <__libc_init_array+0x38>)
 8005648:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <__libc_init_array+0x3c>)
 800564a:	1b64      	subs	r4, r4, r5
 800564c:	10a4      	asrs	r4, r4, #2
 800564e:	2600      	movs	r6, #0
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	4d0b      	ldr	r5, [pc, #44]	; (8005684 <__libc_init_array+0x40>)
 8005656:	4c0c      	ldr	r4, [pc, #48]	; (8005688 <__libc_init_array+0x44>)
 8005658:	f001 f802 	bl	8006660 <_init>
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	2600      	movs	r6, #0
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	080067e0 	.word	0x080067e0
 8005680:	080067e0 	.word	0x080067e0
 8005684:	080067e0 	.word	0x080067e0
 8005688:	080067e4 	.word	0x080067e4

0800568c <__retarget_lock_init_recursive>:
 800568c:	4770      	bx	lr

0800568e <__retarget_lock_acquire_recursive>:
 800568e:	4770      	bx	lr

08005690 <__retarget_lock_release_recursive>:
 8005690:	4770      	bx	lr
	...

08005694 <__assert_func>:
 8005694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005696:	4614      	mov	r4, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <__assert_func+0x2c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4605      	mov	r5, r0
 80056a0:	68d8      	ldr	r0, [r3, #12]
 80056a2:	b14c      	cbz	r4, 80056b8 <__assert_func+0x24>
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <__assert_func+0x30>)
 80056a6:	9100      	str	r1, [sp, #0]
 80056a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056ac:	4906      	ldr	r1, [pc, #24]	; (80056c8 <__assert_func+0x34>)
 80056ae:	462b      	mov	r3, r5
 80056b0:	f000 fca4 	bl	8005ffc <fiprintf>
 80056b4:	f000 fcec 	bl	8006090 <abort>
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <__assert_func+0x38>)
 80056ba:	461c      	mov	r4, r3
 80056bc:	e7f3      	b.n	80056a6 <__assert_func+0x12>
 80056be:	bf00      	nop
 80056c0:	20000494 	.word	0x20000494
 80056c4:	0800676f 	.word	0x0800676f
 80056c8:	0800677c 	.word	0x0800677c
 80056cc:	080067aa 	.word	0x080067aa

080056d0 <_free_r>:
 80056d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d044      	beq.n	8005760 <_free_r+0x90>
 80056d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056da:	9001      	str	r0, [sp, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f1a1 0404 	sub.w	r4, r1, #4
 80056e2:	bfb8      	it	lt
 80056e4:	18e4      	addlt	r4, r4, r3
 80056e6:	f000 f8e7 	bl	80058b8 <__malloc_lock>
 80056ea:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <_free_r+0x94>)
 80056ec:	9801      	ldr	r0, [sp, #4]
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	b933      	cbnz	r3, 8005700 <_free_r+0x30>
 80056f2:	6063      	str	r3, [r4, #4]
 80056f4:	6014      	str	r4, [r2, #0]
 80056f6:	b003      	add	sp, #12
 80056f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056fc:	f000 b8e2 	b.w	80058c4 <__malloc_unlock>
 8005700:	42a3      	cmp	r3, r4
 8005702:	d908      	bls.n	8005716 <_free_r+0x46>
 8005704:	6825      	ldr	r5, [r4, #0]
 8005706:	1961      	adds	r1, r4, r5
 8005708:	428b      	cmp	r3, r1
 800570a:	bf01      	itttt	eq
 800570c:	6819      	ldreq	r1, [r3, #0]
 800570e:	685b      	ldreq	r3, [r3, #4]
 8005710:	1949      	addeq	r1, r1, r5
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	e7ed      	b.n	80056f2 <_free_r+0x22>
 8005716:	461a      	mov	r2, r3
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b10b      	cbz	r3, 8005720 <_free_r+0x50>
 800571c:	42a3      	cmp	r3, r4
 800571e:	d9fa      	bls.n	8005716 <_free_r+0x46>
 8005720:	6811      	ldr	r1, [r2, #0]
 8005722:	1855      	adds	r5, r2, r1
 8005724:	42a5      	cmp	r5, r4
 8005726:	d10b      	bne.n	8005740 <_free_r+0x70>
 8005728:	6824      	ldr	r4, [r4, #0]
 800572a:	4421      	add	r1, r4
 800572c:	1854      	adds	r4, r2, r1
 800572e:	42a3      	cmp	r3, r4
 8005730:	6011      	str	r1, [r2, #0]
 8005732:	d1e0      	bne.n	80056f6 <_free_r+0x26>
 8005734:	681c      	ldr	r4, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	6053      	str	r3, [r2, #4]
 800573a:	440c      	add	r4, r1
 800573c:	6014      	str	r4, [r2, #0]
 800573e:	e7da      	b.n	80056f6 <_free_r+0x26>
 8005740:	d902      	bls.n	8005748 <_free_r+0x78>
 8005742:	230c      	movs	r3, #12
 8005744:	6003      	str	r3, [r0, #0]
 8005746:	e7d6      	b.n	80056f6 <_free_r+0x26>
 8005748:	6825      	ldr	r5, [r4, #0]
 800574a:	1961      	adds	r1, r4, r5
 800574c:	428b      	cmp	r3, r1
 800574e:	bf04      	itt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	6063      	str	r3, [r4, #4]
 8005756:	bf04      	itt	eq
 8005758:	1949      	addeq	r1, r1, r5
 800575a:	6021      	streq	r1, [r4, #0]
 800575c:	6054      	str	r4, [r2, #4]
 800575e:	e7ca      	b.n	80056f6 <_free_r+0x26>
 8005760:	b003      	add	sp, #12
 8005762:	bd30      	pop	{r4, r5, pc}
 8005764:	20000864 	.word	0x20000864

08005768 <malloc>:
 8005768:	4b02      	ldr	r3, [pc, #8]	; (8005774 <malloc+0xc>)
 800576a:	4601      	mov	r1, r0
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	f000 b823 	b.w	80057b8 <_malloc_r>
 8005772:	bf00      	nop
 8005774:	20000494 	.word	0x20000494

08005778 <sbrk_aligned>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4e0e      	ldr	r6, [pc, #56]	; (80057b4 <sbrk_aligned+0x3c>)
 800577c:	460c      	mov	r4, r1
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	4605      	mov	r5, r0
 8005782:	b911      	cbnz	r1, 800578a <sbrk_aligned+0x12>
 8005784:	f000 fc66 	bl	8006054 <_sbrk_r>
 8005788:	6030      	str	r0, [r6, #0]
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 fc61 	bl	8006054 <_sbrk_r>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d00a      	beq.n	80057ac <sbrk_aligned+0x34>
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d007      	beq.n	80057b0 <sbrk_aligned+0x38>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fc56 	bl	8006054 <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d101      	bne.n	80057b0 <sbrk_aligned+0x38>
 80057ac:	f04f 34ff 	mov.w	r4, #4294967295
 80057b0:	4620      	mov	r0, r4
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	20000868 	.word	0x20000868

080057b8 <_malloc_r>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	1ccd      	adds	r5, r1, #3
 80057be:	f025 0503 	bic.w	r5, r5, #3
 80057c2:	3508      	adds	r5, #8
 80057c4:	2d0c      	cmp	r5, #12
 80057c6:	bf38      	it	cc
 80057c8:	250c      	movcc	r5, #12
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	4607      	mov	r7, r0
 80057ce:	db01      	blt.n	80057d4 <_malloc_r+0x1c>
 80057d0:	42a9      	cmp	r1, r5
 80057d2:	d905      	bls.n	80057e0 <_malloc_r+0x28>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	2600      	movs	r6, #0
 80057da:	4630      	mov	r0, r6
 80057dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058b4 <_malloc_r+0xfc>
 80057e4:	f000 f868 	bl	80058b8 <__malloc_lock>
 80057e8:	f8d8 3000 	ldr.w	r3, [r8]
 80057ec:	461c      	mov	r4, r3
 80057ee:	bb5c      	cbnz	r4, 8005848 <_malloc_r+0x90>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4638      	mov	r0, r7
 80057f4:	f7ff ffc0 	bl	8005778 <sbrk_aligned>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	4604      	mov	r4, r0
 80057fc:	d155      	bne.n	80058aa <_malloc_r+0xf2>
 80057fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005802:	4626      	mov	r6, r4
 8005804:	2e00      	cmp	r6, #0
 8005806:	d145      	bne.n	8005894 <_malloc_r+0xdc>
 8005808:	2c00      	cmp	r4, #0
 800580a:	d048      	beq.n	800589e <_malloc_r+0xe6>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	4631      	mov	r1, r6
 8005810:	4638      	mov	r0, r7
 8005812:	eb04 0903 	add.w	r9, r4, r3
 8005816:	f000 fc1d 	bl	8006054 <_sbrk_r>
 800581a:	4581      	cmp	r9, r0
 800581c:	d13f      	bne.n	800589e <_malloc_r+0xe6>
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	1a6d      	subs	r5, r5, r1
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ffa7 	bl	8005778 <sbrk_aligned>
 800582a:	3001      	adds	r0, #1
 800582c:	d037      	beq.n	800589e <_malloc_r+0xe6>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	442b      	add	r3, r5
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	f8d8 3000 	ldr.w	r3, [r8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d038      	beq.n	80058ae <_malloc_r+0xf6>
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	42a2      	cmp	r2, r4
 8005840:	d12b      	bne.n	800589a <_malloc_r+0xe2>
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	e00f      	b.n	8005868 <_malloc_r+0xb0>
 8005848:	6822      	ldr	r2, [r4, #0]
 800584a:	1b52      	subs	r2, r2, r5
 800584c:	d41f      	bmi.n	800588e <_malloc_r+0xd6>
 800584e:	2a0b      	cmp	r2, #11
 8005850:	d917      	bls.n	8005882 <_malloc_r+0xca>
 8005852:	1961      	adds	r1, r4, r5
 8005854:	42a3      	cmp	r3, r4
 8005856:	6025      	str	r5, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	6059      	strne	r1, [r3, #4]
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	bf08      	it	eq
 8005860:	f8c8 1000 	streq.w	r1, [r8]
 8005864:	5162      	str	r2, [r4, r5]
 8005866:	604b      	str	r3, [r1, #4]
 8005868:	4638      	mov	r0, r7
 800586a:	f104 060b 	add.w	r6, r4, #11
 800586e:	f000 f829 	bl	80058c4 <__malloc_unlock>
 8005872:	f026 0607 	bic.w	r6, r6, #7
 8005876:	1d23      	adds	r3, r4, #4
 8005878:	1af2      	subs	r2, r6, r3
 800587a:	d0ae      	beq.n	80057da <_malloc_r+0x22>
 800587c:	1b9b      	subs	r3, r3, r6
 800587e:	50a3      	str	r3, [r4, r2]
 8005880:	e7ab      	b.n	80057da <_malloc_r+0x22>
 8005882:	42a3      	cmp	r3, r4
 8005884:	6862      	ldr	r2, [r4, #4]
 8005886:	d1dd      	bne.n	8005844 <_malloc_r+0x8c>
 8005888:	f8c8 2000 	str.w	r2, [r8]
 800588c:	e7ec      	b.n	8005868 <_malloc_r+0xb0>
 800588e:	4623      	mov	r3, r4
 8005890:	6864      	ldr	r4, [r4, #4]
 8005892:	e7ac      	b.n	80057ee <_malloc_r+0x36>
 8005894:	4634      	mov	r4, r6
 8005896:	6876      	ldr	r6, [r6, #4]
 8005898:	e7b4      	b.n	8005804 <_malloc_r+0x4c>
 800589a:	4613      	mov	r3, r2
 800589c:	e7cc      	b.n	8005838 <_malloc_r+0x80>
 800589e:	230c      	movs	r3, #12
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	4638      	mov	r0, r7
 80058a4:	f000 f80e 	bl	80058c4 <__malloc_unlock>
 80058a8:	e797      	b.n	80057da <_malloc_r+0x22>
 80058aa:	6025      	str	r5, [r4, #0]
 80058ac:	e7dc      	b.n	8005868 <_malloc_r+0xb0>
 80058ae:	605b      	str	r3, [r3, #4]
 80058b0:	deff      	udf	#255	; 0xff
 80058b2:	bf00      	nop
 80058b4:	20000864 	.word	0x20000864

080058b8 <__malloc_lock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_lock+0x8>)
 80058ba:	f7ff bee8 	b.w	800568e <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20000860 	.word	0x20000860

080058c4 <__malloc_unlock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <__malloc_unlock+0x8>)
 80058c6:	f7ff bee3 	b.w	8005690 <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000860 	.word	0x20000860

080058d0 <__ssputs_r>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	688e      	ldr	r6, [r1, #8]
 80058d6:	461f      	mov	r7, r3
 80058d8:	42be      	cmp	r6, r7
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	4682      	mov	sl, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	4690      	mov	r8, r2
 80058e2:	d82c      	bhi.n	800593e <__ssputs_r+0x6e>
 80058e4:	898a      	ldrh	r2, [r1, #12]
 80058e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058ea:	d026      	beq.n	800593a <__ssputs_r+0x6a>
 80058ec:	6965      	ldr	r5, [r4, #20]
 80058ee:	6909      	ldr	r1, [r1, #16]
 80058f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f4:	eba3 0901 	sub.w	r9, r3, r1
 80058f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058fc:	1c7b      	adds	r3, r7, #1
 80058fe:	444b      	add	r3, r9
 8005900:	106d      	asrs	r5, r5, #1
 8005902:	429d      	cmp	r5, r3
 8005904:	bf38      	it	cc
 8005906:	461d      	movcc	r5, r3
 8005908:	0553      	lsls	r3, r2, #21
 800590a:	d527      	bpl.n	800595c <__ssputs_r+0x8c>
 800590c:	4629      	mov	r1, r5
 800590e:	f7ff ff53 	bl	80057b8 <_malloc_r>
 8005912:	4606      	mov	r6, r0
 8005914:	b360      	cbz	r0, 8005970 <__ssputs_r+0xa0>
 8005916:	6921      	ldr	r1, [r4, #16]
 8005918:	464a      	mov	r2, r9
 800591a:	f000 fbab 	bl	8006074 <memcpy>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	6126      	str	r6, [r4, #16]
 800592c:	6165      	str	r5, [r4, #20]
 800592e:	444e      	add	r6, r9
 8005930:	eba5 0509 	sub.w	r5, r5, r9
 8005934:	6026      	str	r6, [r4, #0]
 8005936:	60a5      	str	r5, [r4, #8]
 8005938:	463e      	mov	r6, r7
 800593a:	42be      	cmp	r6, r7
 800593c:	d900      	bls.n	8005940 <__ssputs_r+0x70>
 800593e:	463e      	mov	r6, r7
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	4632      	mov	r2, r6
 8005944:	4641      	mov	r1, r8
 8005946:	f000 fb6b 	bl	8006020 <memmove>
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	60a3      	str	r3, [r4, #8]
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	4433      	add	r3, r6
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	2000      	movs	r0, #0
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	462a      	mov	r2, r5
 800595e:	f000 fb9e 	bl	800609e <_realloc_r>
 8005962:	4606      	mov	r6, r0
 8005964:	2800      	cmp	r0, #0
 8005966:	d1e0      	bne.n	800592a <__ssputs_r+0x5a>
 8005968:	6921      	ldr	r1, [r4, #16]
 800596a:	4650      	mov	r0, sl
 800596c:	f7ff feb0 	bl	80056d0 <_free_r>
 8005970:	230c      	movs	r3, #12
 8005972:	f8ca 3000 	str.w	r3, [sl]
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	e7e9      	b.n	8005958 <__ssputs_r+0x88>

08005984 <_svfiprintf_r>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	4698      	mov	r8, r3
 800598a:	898b      	ldrh	r3, [r1, #12]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	b09d      	sub	sp, #116	; 0x74
 8005990:	4607      	mov	r7, r0
 8005992:	460d      	mov	r5, r1
 8005994:	4614      	mov	r4, r2
 8005996:	d50e      	bpl.n	80059b6 <_svfiprintf_r+0x32>
 8005998:	690b      	ldr	r3, [r1, #16]
 800599a:	b963      	cbnz	r3, 80059b6 <_svfiprintf_r+0x32>
 800599c:	2140      	movs	r1, #64	; 0x40
 800599e:	f7ff ff0b 	bl	80057b8 <_malloc_r>
 80059a2:	6028      	str	r0, [r5, #0]
 80059a4:	6128      	str	r0, [r5, #16]
 80059a6:	b920      	cbnz	r0, 80059b2 <_svfiprintf_r+0x2e>
 80059a8:	230c      	movs	r3, #12
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e0d0      	b.n	8005b54 <_svfiprintf_r+0x1d0>
 80059b2:	2340      	movs	r3, #64	; 0x40
 80059b4:	616b      	str	r3, [r5, #20]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ba:	2320      	movs	r3, #32
 80059bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c4:	2330      	movs	r3, #48	; 0x30
 80059c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b6c <_svfiprintf_r+0x1e8>
 80059ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ce:	f04f 0901 	mov.w	r9, #1
 80059d2:	4623      	mov	r3, r4
 80059d4:	469a      	mov	sl, r3
 80059d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059da:	b10a      	cbz	r2, 80059e0 <_svfiprintf_r+0x5c>
 80059dc:	2a25      	cmp	r2, #37	; 0x25
 80059de:	d1f9      	bne.n	80059d4 <_svfiprintf_r+0x50>
 80059e0:	ebba 0b04 	subs.w	fp, sl, r4
 80059e4:	d00b      	beq.n	80059fe <_svfiprintf_r+0x7a>
 80059e6:	465b      	mov	r3, fp
 80059e8:	4622      	mov	r2, r4
 80059ea:	4629      	mov	r1, r5
 80059ec:	4638      	mov	r0, r7
 80059ee:	f7ff ff6f 	bl	80058d0 <__ssputs_r>
 80059f2:	3001      	adds	r0, #1
 80059f4:	f000 80a9 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 80059f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fa:	445a      	add	r2, fp
 80059fc:	9209      	str	r2, [sp, #36]	; 0x24
 80059fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80a1 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a12:	f10a 0a01 	add.w	sl, sl, #1
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a20:	4654      	mov	r4, sl
 8005a22:	2205      	movs	r2, #5
 8005a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a28:	4850      	ldr	r0, [pc, #320]	; (8005b6c <_svfiprintf_r+0x1e8>)
 8005a2a:	f7fa fbd1 	bl	80001d0 <memchr>
 8005a2e:	9a04      	ldr	r2, [sp, #16]
 8005a30:	b9d8      	cbnz	r0, 8005a6a <_svfiprintf_r+0xe6>
 8005a32:	06d0      	lsls	r0, r2, #27
 8005a34:	bf44      	itt	mi
 8005a36:	2320      	movmi	r3, #32
 8005a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a3c:	0711      	lsls	r1, r2, #28
 8005a3e:	bf44      	itt	mi
 8005a40:	232b      	movmi	r3, #43	; 0x2b
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a46:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4c:	d015      	beq.n	8005a7a <_svfiprintf_r+0xf6>
 8005a4e:	9a07      	ldr	r2, [sp, #28]
 8005a50:	4654      	mov	r4, sl
 8005a52:	2000      	movs	r0, #0
 8005a54:	f04f 0c0a 	mov.w	ip, #10
 8005a58:	4621      	mov	r1, r4
 8005a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5e:	3b30      	subs	r3, #48	; 0x30
 8005a60:	2b09      	cmp	r3, #9
 8005a62:	d94d      	bls.n	8005b00 <_svfiprintf_r+0x17c>
 8005a64:	b1b0      	cbz	r0, 8005a94 <_svfiprintf_r+0x110>
 8005a66:	9207      	str	r2, [sp, #28]
 8005a68:	e014      	b.n	8005a94 <_svfiprintf_r+0x110>
 8005a6a:	eba0 0308 	sub.w	r3, r0, r8
 8005a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	46a2      	mov	sl, r4
 8005a78:	e7d2      	b.n	8005a20 <_svfiprintf_r+0x9c>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	1d19      	adds	r1, r3, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfbb      	ittet	lt
 8005a86:	425b      	neglt	r3, r3
 8005a88:	f042 0202 	orrlt.w	r2, r2, #2
 8005a8c:	9307      	strge	r3, [sp, #28]
 8005a8e:	9307      	strlt	r3, [sp, #28]
 8005a90:	bfb8      	it	lt
 8005a92:	9204      	strlt	r2, [sp, #16]
 8005a94:	7823      	ldrb	r3, [r4, #0]
 8005a96:	2b2e      	cmp	r3, #46	; 0x2e
 8005a98:	d10c      	bne.n	8005ab4 <_svfiprintf_r+0x130>
 8005a9a:	7863      	ldrb	r3, [r4, #1]
 8005a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9e:	d134      	bne.n	8005b0a <_svfiprintf_r+0x186>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfb8      	it	lt
 8005aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ab0:	3402      	adds	r4, #2
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b7c <_svfiprintf_r+0x1f8>
 8005ab8:	7821      	ldrb	r1, [r4, #0]
 8005aba:	2203      	movs	r2, #3
 8005abc:	4650      	mov	r0, sl
 8005abe:	f7fa fb87 	bl	80001d0 <memchr>
 8005ac2:	b138      	cbz	r0, 8005ad4 <_svfiprintf_r+0x150>
 8005ac4:	9b04      	ldr	r3, [sp, #16]
 8005ac6:	eba0 000a 	sub.w	r0, r0, sl
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	4082      	lsls	r2, r0
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad8:	4825      	ldr	r0, [pc, #148]	; (8005b70 <_svfiprintf_r+0x1ec>)
 8005ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ade:	2206      	movs	r2, #6
 8005ae0:	f7fa fb76 	bl	80001d0 <memchr>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d038      	beq.n	8005b5a <_svfiprintf_r+0x1d6>
 8005ae8:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <_svfiprintf_r+0x1f0>)
 8005aea:	bb1b      	cbnz	r3, 8005b34 <_svfiprintf_r+0x1b0>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	3307      	adds	r3, #7
 8005af0:	f023 0307 	bic.w	r3, r3, #7
 8005af4:	3308      	adds	r3, #8
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afa:	4433      	add	r3, r6
 8005afc:	9309      	str	r3, [sp, #36]	; 0x24
 8005afe:	e768      	b.n	80059d2 <_svfiprintf_r+0x4e>
 8005b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b04:	460c      	mov	r4, r1
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7a6      	b.n	8005a58 <_svfiprintf_r+0xd4>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	3401      	adds	r4, #1
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 0c0a 	mov.w	ip, #10
 8005b16:	4620      	mov	r0, r4
 8005b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b1c:	3a30      	subs	r2, #48	; 0x30
 8005b1e:	2a09      	cmp	r2, #9
 8005b20:	d903      	bls.n	8005b2a <_svfiprintf_r+0x1a6>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c6      	beq.n	8005ab4 <_svfiprintf_r+0x130>
 8005b26:	9105      	str	r1, [sp, #20]
 8005b28:	e7c4      	b.n	8005ab4 <_svfiprintf_r+0x130>
 8005b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2e:	4604      	mov	r4, r0
 8005b30:	2301      	movs	r3, #1
 8005b32:	e7f0      	b.n	8005b16 <_svfiprintf_r+0x192>
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <_svfiprintf_r+0x1f4>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f3af 8000 	nop.w
 8005b44:	1c42      	adds	r2, r0, #1
 8005b46:	4606      	mov	r6, r0
 8005b48:	d1d6      	bne.n	8005af8 <_svfiprintf_r+0x174>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	065b      	lsls	r3, r3, #25
 8005b4e:	f53f af2d 	bmi.w	80059ac <_svfiprintf_r+0x28>
 8005b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b54:	b01d      	add	sp, #116	; 0x74
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	462a      	mov	r2, r5
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_svfiprintf_r+0x1f4>)
 8005b62:	a904      	add	r1, sp, #16
 8005b64:	4638      	mov	r0, r7
 8005b66:	f000 f879 	bl	8005c5c <_printf_i>
 8005b6a:	e7eb      	b.n	8005b44 <_svfiprintf_r+0x1c0>
 8005b6c:	080067ab 	.word	0x080067ab
 8005b70:	080067b5 	.word	0x080067b5
 8005b74:	00000000 	.word	0x00000000
 8005b78:	080058d1 	.word	0x080058d1
 8005b7c:	080067b1 	.word	0x080067b1

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4616      	mov	r6, r2
 8005b86:	4699      	mov	r9, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfb8      	it	lt
 8005b94:	4613      	movlt	r3, r2
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b10a      	cbz	r2, 8005ba6 <_printf_common+0x26>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	0699      	lsls	r1, r3, #26
 8005baa:	bf42      	ittt	mi
 8005bac:	6833      	ldrmi	r3, [r6, #0]
 8005bae:	3302      	addmi	r3, #2
 8005bb0:	6033      	strmi	r3, [r6, #0]
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	f015 0506 	ands.w	r5, r5, #6
 8005bb8:	d106      	bne.n	8005bc8 <_printf_common+0x48>
 8005bba:	f104 0a19 	add.w	sl, r4, #25
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	6832      	ldr	r2, [r6, #0]
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dc26      	bgt.n	8005c16 <_printf_common+0x96>
 8005bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bcc:	1e13      	subs	r3, r2, #0
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	0692      	lsls	r2, r2, #26
 8005bd6:	d42b      	bmi.n	8005c30 <_printf_common+0xb0>
 8005bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	3001      	adds	r0, #1
 8005be4:	d01e      	beq.n	8005c24 <_printf_common+0xa4>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	f003 0306 	and.w	r3, r3, #6
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	bf02      	ittt	eq
 8005bf2:	68e5      	ldreq	r5, [r4, #12]
 8005bf4:	6833      	ldreq	r3, [r6, #0]
 8005bf6:	1aed      	subeq	r5, r5, r3
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	bf0c      	ite	eq
 8005bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c00:	2500      	movne	r5, #0
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bfc4      	itt	gt
 8005c06:	1a9b      	subgt	r3, r3, r2
 8005c08:	18ed      	addgt	r5, r5, r3
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	341a      	adds	r4, #26
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d11a      	bne.n	8005c48 <_printf_common+0xc8>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e008      	b.n	8005c28 <_printf_common+0xa8>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d103      	bne.n	8005c2c <_printf_common+0xac>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7c6      	b.n	8005bbe <_printf_common+0x3e>
 8005c30:	18e1      	adds	r1, r4, r3
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	2030      	movs	r0, #48	; 0x30
 8005c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c3a:	4422      	add	r2, r4
 8005c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c44:	3302      	adds	r3, #2
 8005c46:	e7c7      	b.n	8005bd8 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d0e6      	beq.n	8005c24 <_printf_common+0xa4>
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7d9      	b.n	8005c0e <_printf_common+0x8e>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	7e0f      	ldrb	r7, [r1, #24]
 8005c62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4691      	mov	r9, r2
 8005c68:	4680      	mov	r8, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c72:	d807      	bhi.n	8005c84 <_printf_i+0x28>
 8005c74:	2f62      	cmp	r7, #98	; 0x62
 8005c76:	d80a      	bhi.n	8005c8e <_printf_i+0x32>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f000 80d4 	beq.w	8005e26 <_printf_i+0x1ca>
 8005c7e:	2f58      	cmp	r7, #88	; 0x58
 8005c80:	f000 80c0 	beq.w	8005e04 <_printf_i+0x1a8>
 8005c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c8c:	e03a      	b.n	8005d04 <_printf_i+0xa8>
 8005c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c92:	2b15      	cmp	r3, #21
 8005c94:	d8f6      	bhi.n	8005c84 <_printf_i+0x28>
 8005c96:	a101      	add	r1, pc, #4	; (adr r1, 8005c9c <_printf_i+0x40>)
 8005c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005c85 	.word	0x08005c85
 8005ca8:	08005c85 	.word	0x08005c85
 8005cac:	08005c85 	.word	0x08005c85
 8005cb0:	08005c85 	.word	0x08005c85
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c85 	.word	0x08005c85
 8005cbc:	08005c85 	.word	0x08005c85
 8005cc0:	08005c85 	.word	0x08005c85
 8005cc4:	08005c85 	.word	0x08005c85
 8005cc8:	08005e0d 	.word	0x08005e0d
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005dc7 	.word	0x08005dc7
 8005cd4:	08005c85 	.word	0x08005c85
 8005cd8:	08005c85 	.word	0x08005c85
 8005cdc:	08005e2f 	.word	0x08005e2f
 8005ce0:	08005c85 	.word	0x08005c85
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005c85 	.word	0x08005c85
 8005cec:	08005c85 	.word	0x08005c85
 8005cf0:	08005dcf 	.word	0x08005dcf
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d04:	2301      	movs	r3, #1
 8005d06:	e09f      	b.n	8005e48 <_printf_i+0x1ec>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	0607      	lsls	r7, r0, #24
 8005d0e:	f103 0104 	add.w	r1, r3, #4
 8005d12:	6029      	str	r1, [r5, #0]
 8005d14:	d501      	bpl.n	8005d1a <_printf_i+0xbe>
 8005d16:	681e      	ldr	r6, [r3, #0]
 8005d18:	e003      	b.n	8005d22 <_printf_i+0xc6>
 8005d1a:	0646      	lsls	r6, r0, #25
 8005d1c:	d5fb      	bpl.n	8005d16 <_printf_i+0xba>
 8005d1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	da03      	bge.n	8005d2e <_printf_i+0xd2>
 8005d26:	232d      	movs	r3, #45	; 0x2d
 8005d28:	4276      	negs	r6, r6
 8005d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2e:	485a      	ldr	r0, [pc, #360]	; (8005e98 <_printf_i+0x23c>)
 8005d30:	230a      	movs	r3, #10
 8005d32:	e012      	b.n	8005d5a <_printf_i+0xfe>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	1d19      	adds	r1, r3, #4
 8005d3a:	6029      	str	r1, [r5, #0]
 8005d3c:	0605      	lsls	r5, r0, #24
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0xe8>
 8005d40:	681e      	ldr	r6, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0xee>
 8005d44:	0641      	lsls	r1, r0, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0xe4>
 8005d48:	881e      	ldrh	r6, [r3, #0]
 8005d4a:	4853      	ldr	r0, [pc, #332]	; (8005e98 <_printf_i+0x23c>)
 8005d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d4e:	bf0c      	ite	eq
 8005d50:	2308      	moveq	r3, #8
 8005d52:	230a      	movne	r3, #10
 8005d54:	2100      	movs	r1, #0
 8005d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5a:	6865      	ldr	r5, [r4, #4]
 8005d5c:	60a5      	str	r5, [r4, #8]
 8005d5e:	2d00      	cmp	r5, #0
 8005d60:	bfa2      	ittt	ge
 8005d62:	6821      	ldrge	r1, [r4, #0]
 8005d64:	f021 0104 	bicge.w	r1, r1, #4
 8005d68:	6021      	strge	r1, [r4, #0]
 8005d6a:	b90e      	cbnz	r6, 8005d70 <_printf_i+0x114>
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d04b      	beq.n	8005e08 <_printf_i+0x1ac>
 8005d70:	4615      	mov	r5, r2
 8005d72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d76:	fb03 6711 	mls	r7, r3, r1, r6
 8005d7a:	5dc7      	ldrb	r7, [r0, r7]
 8005d7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d80:	4637      	mov	r7, r6
 8005d82:	42bb      	cmp	r3, r7
 8005d84:	460e      	mov	r6, r1
 8005d86:	d9f4      	bls.n	8005d72 <_printf_i+0x116>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d10b      	bne.n	8005da4 <_printf_i+0x148>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07de      	lsls	r6, r3, #31
 8005d90:	d508      	bpl.n	8005da4 <_printf_i+0x148>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4299      	cmp	r1, r3
 8005d98:	bfde      	ittt	le
 8005d9a:	2330      	movle	r3, #48	; 0x30
 8005d9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005da4:	1b52      	subs	r2, r2, r5
 8005da6:	6122      	str	r2, [r4, #16]
 8005da8:	f8cd a000 	str.w	sl, [sp]
 8005dac:	464b      	mov	r3, r9
 8005dae:	aa03      	add	r2, sp, #12
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f7ff fee4 	bl	8005b80 <_printf_common>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d14a      	bne.n	8005e52 <_printf_i+0x1f6>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	b004      	add	sp, #16
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	4833      	ldr	r0, [pc, #204]	; (8005e9c <_printf_i+0x240>)
 8005dd0:	2778      	movs	r7, #120	; 0x78
 8005dd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	6829      	ldr	r1, [r5, #0]
 8005dda:	061f      	lsls	r7, r3, #24
 8005ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005de0:	d402      	bmi.n	8005de8 <_printf_i+0x18c>
 8005de2:	065f      	lsls	r7, r3, #25
 8005de4:	bf48      	it	mi
 8005de6:	b2b6      	uxthmi	r6, r6
 8005de8:	07df      	lsls	r7, r3, #31
 8005dea:	bf48      	it	mi
 8005dec:	f043 0320 	orrmi.w	r3, r3, #32
 8005df0:	6029      	str	r1, [r5, #0]
 8005df2:	bf48      	it	mi
 8005df4:	6023      	strmi	r3, [r4, #0]
 8005df6:	b91e      	cbnz	r6, 8005e00 <_printf_i+0x1a4>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f023 0320 	bic.w	r3, r3, #32
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	2310      	movs	r3, #16
 8005e02:	e7a7      	b.n	8005d54 <_printf_i+0xf8>
 8005e04:	4824      	ldr	r0, [pc, #144]	; (8005e98 <_printf_i+0x23c>)
 8005e06:	e7e4      	b.n	8005dd2 <_printf_i+0x176>
 8005e08:	4615      	mov	r5, r2
 8005e0a:	e7bd      	b.n	8005d88 <_printf_i+0x12c>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	6826      	ldr	r6, [r4, #0]
 8005e10:	6961      	ldr	r1, [r4, #20]
 8005e12:	1d18      	adds	r0, r3, #4
 8005e14:	6028      	str	r0, [r5, #0]
 8005e16:	0635      	lsls	r5, r6, #24
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	d501      	bpl.n	8005e20 <_printf_i+0x1c4>
 8005e1c:	6019      	str	r1, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <_printf_i+0x1ca>
 8005e20:	0670      	lsls	r0, r6, #25
 8005e22:	d5fb      	bpl.n	8005e1c <_printf_i+0x1c0>
 8005e24:	8019      	strh	r1, [r3, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	4615      	mov	r5, r2
 8005e2c:	e7bc      	b.n	8005da8 <_printf_i+0x14c>
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	1d1a      	adds	r2, r3, #4
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7fa f9c8 	bl	80001d0 <memchr>
 8005e40:	b108      	cbz	r0, 8005e46 <_printf_i+0x1ea>
 8005e42:	1b40      	subs	r0, r0, r5
 8005e44:	6060      	str	r0, [r4, #4]
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e50:	e7aa      	b.n	8005da8 <_printf_i+0x14c>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	462a      	mov	r2, r5
 8005e56:	4649      	mov	r1, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	47d0      	blx	sl
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d0ad      	beq.n	8005dbc <_printf_i+0x160>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	079b      	lsls	r3, r3, #30
 8005e64:	d413      	bmi.n	8005e8e <_printf_i+0x232>
 8005e66:	68e0      	ldr	r0, [r4, #12]
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	bfb8      	it	lt
 8005e6e:	4618      	movlt	r0, r3
 8005e70:	e7a6      	b.n	8005dc0 <_printf_i+0x164>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4632      	mov	r2, r6
 8005e76:	4649      	mov	r1, r9
 8005e78:	4640      	mov	r0, r8
 8005e7a:	47d0      	blx	sl
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d09d      	beq.n	8005dbc <_printf_i+0x160>
 8005e80:	3501      	adds	r5, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	9903      	ldr	r1, [sp, #12]
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dcf2      	bgt.n	8005e72 <_printf_i+0x216>
 8005e8c:	e7eb      	b.n	8005e66 <_printf_i+0x20a>
 8005e8e:	2500      	movs	r5, #0
 8005e90:	f104 0619 	add.w	r6, r4, #25
 8005e94:	e7f5      	b.n	8005e82 <_printf_i+0x226>
 8005e96:	bf00      	nop
 8005e98:	080067bc 	.word	0x080067bc
 8005e9c:	080067cd 	.word	0x080067cd

08005ea0 <__sflush_r>:
 8005ea0:	898a      	ldrh	r2, [r1, #12]
 8005ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	0710      	lsls	r0, r2, #28
 8005eaa:	460c      	mov	r4, r1
 8005eac:	d458      	bmi.n	8005f60 <__sflush_r+0xc0>
 8005eae:	684b      	ldr	r3, [r1, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dc05      	bgt.n	8005ec0 <__sflush_r+0x20>
 8005eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dc02      	bgt.n	8005ec0 <__sflush_r+0x20>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d0f9      	beq.n	8005eba <__sflush_r+0x1a>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ecc:	682f      	ldr	r7, [r5, #0]
 8005ece:	6a21      	ldr	r1, [r4, #32]
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	d032      	beq.n	8005f3a <__sflush_r+0x9a>
 8005ed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	075a      	lsls	r2, r3, #29
 8005eda:	d505      	bpl.n	8005ee8 <__sflush_r+0x48>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	1ac0      	subs	r0, r0, r3
 8005ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee2:	b10b      	cbz	r3, 8005ee8 <__sflush_r+0x48>
 8005ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee6:	1ac0      	subs	r0, r0, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4602      	mov	r2, r0
 8005eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eee:	6a21      	ldr	r1, [r4, #32]
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b0      	blx	r6
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	d106      	bne.n	8005f08 <__sflush_r+0x68>
 8005efa:	6829      	ldr	r1, [r5, #0]
 8005efc:	291d      	cmp	r1, #29
 8005efe:	d82b      	bhi.n	8005f58 <__sflush_r+0xb8>
 8005f00:	4a29      	ldr	r2, [pc, #164]	; (8005fa8 <__sflush_r+0x108>)
 8005f02:	410a      	asrs	r2, r1
 8005f04:	07d6      	lsls	r6, r2, #31
 8005f06:	d427      	bmi.n	8005f58 <__sflush_r+0xb8>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	6062      	str	r2, [r4, #4]
 8005f0c:	04d9      	lsls	r1, r3, #19
 8005f0e:	6922      	ldr	r2, [r4, #16]
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	d504      	bpl.n	8005f1e <__sflush_r+0x7e>
 8005f14:	1c42      	adds	r2, r0, #1
 8005f16:	d101      	bne.n	8005f1c <__sflush_r+0x7c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b903      	cbnz	r3, 8005f1e <__sflush_r+0x7e>
 8005f1c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f20:	602f      	str	r7, [r5, #0]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	d0c9      	beq.n	8005eba <__sflush_r+0x1a>
 8005f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	d002      	beq.n	8005f34 <__sflush_r+0x94>
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff fbce 	bl	80056d0 <_free_r>
 8005f34:	2000      	movs	r0, #0
 8005f36:	6360      	str	r0, [r4, #52]	; 0x34
 8005f38:	e7c0      	b.n	8005ebc <__sflush_r+0x1c>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b0      	blx	r6
 8005f40:	1c41      	adds	r1, r0, #1
 8005f42:	d1c8      	bne.n	8005ed6 <__sflush_r+0x36>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c5      	beq.n	8005ed6 <__sflush_r+0x36>
 8005f4a:	2b1d      	cmp	r3, #29
 8005f4c:	d001      	beq.n	8005f52 <__sflush_r+0xb2>
 8005f4e:	2b16      	cmp	r3, #22
 8005f50:	d101      	bne.n	8005f56 <__sflush_r+0xb6>
 8005f52:	602f      	str	r7, [r5, #0]
 8005f54:	e7b1      	b.n	8005eba <__sflush_r+0x1a>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7ad      	b.n	8005ebc <__sflush_r+0x1c>
 8005f60:	690f      	ldr	r7, [r1, #16]
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d0a9      	beq.n	8005eba <__sflush_r+0x1a>
 8005f66:	0793      	lsls	r3, r2, #30
 8005f68:	680e      	ldr	r6, [r1, #0]
 8005f6a:	bf08      	it	eq
 8005f6c:	694b      	ldreq	r3, [r1, #20]
 8005f6e:	600f      	str	r7, [r1, #0]
 8005f70:	bf18      	it	ne
 8005f72:	2300      	movne	r3, #0
 8005f74:	eba6 0807 	sub.w	r8, r6, r7
 8005f78:	608b      	str	r3, [r1, #8]
 8005f7a:	f1b8 0f00 	cmp.w	r8, #0
 8005f7e:	dd9c      	ble.n	8005eba <__sflush_r+0x1a>
 8005f80:	6a21      	ldr	r1, [r4, #32]
 8005f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f84:	4643      	mov	r3, r8
 8005f86:	463a      	mov	r2, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b0      	blx	r6
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	dc06      	bgt.n	8005f9e <__sflush_r+0xfe>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e78e      	b.n	8005ebc <__sflush_r+0x1c>
 8005f9e:	4407      	add	r7, r0
 8005fa0:	eba8 0800 	sub.w	r8, r8, r0
 8005fa4:	e7e9      	b.n	8005f7a <__sflush_r+0xda>
 8005fa6:	bf00      	nop
 8005fa8:	dfbffffe 	.word	0xdfbffffe

08005fac <_fflush_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b913      	cbnz	r3, 8005fbc <_fflush_r+0x10>
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	4628      	mov	r0, r5
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	b118      	cbz	r0, 8005fc6 <_fflush_r+0x1a>
 8005fbe:	6a03      	ldr	r3, [r0, #32]
 8005fc0:	b90b      	cbnz	r3, 8005fc6 <_fflush_r+0x1a>
 8005fc2:	f7ff fa25 	bl	8005410 <__sinit>
 8005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f3      	beq.n	8005fb6 <_fflush_r+0xa>
 8005fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fd0:	07d0      	lsls	r0, r2, #31
 8005fd2:	d404      	bmi.n	8005fde <_fflush_r+0x32>
 8005fd4:	0599      	lsls	r1, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_fflush_r+0x32>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fda:	f7ff fb58 	bl	800568e <__retarget_lock_acquire_recursive>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7ff ff5d 	bl	8005ea0 <__sflush_r>
 8005fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe8:	07da      	lsls	r2, r3, #31
 8005fea:	4605      	mov	r5, r0
 8005fec:	d4e4      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d4e1      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f7ff fb4b 	bl	8005690 <__retarget_lock_release_recursive>
 8005ffa:	e7dd      	b.n	8005fb8 <_fflush_r+0xc>

08005ffc <fiprintf>:
 8005ffc:	b40e      	push	{r1, r2, r3}
 8005ffe:	b503      	push	{r0, r1, lr}
 8006000:	4601      	mov	r1, r0
 8006002:	ab03      	add	r3, sp, #12
 8006004:	4805      	ldr	r0, [pc, #20]	; (800601c <fiprintf+0x20>)
 8006006:	f853 2b04 	ldr.w	r2, [r3], #4
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	f000 f89f 	bl	8006150 <_vfiprintf_r>
 8006012:	b002      	add	sp, #8
 8006014:	f85d eb04 	ldr.w	lr, [sp], #4
 8006018:	b003      	add	sp, #12
 800601a:	4770      	bx	lr
 800601c:	20000494 	.word	0x20000494

08006020 <memmove>:
 8006020:	4288      	cmp	r0, r1
 8006022:	b510      	push	{r4, lr}
 8006024:	eb01 0402 	add.w	r4, r1, r2
 8006028:	d902      	bls.n	8006030 <memmove+0x10>
 800602a:	4284      	cmp	r4, r0
 800602c:	4623      	mov	r3, r4
 800602e:	d807      	bhi.n	8006040 <memmove+0x20>
 8006030:	1e43      	subs	r3, r0, #1
 8006032:	42a1      	cmp	r1, r4
 8006034:	d008      	beq.n	8006048 <memmove+0x28>
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800603e:	e7f8      	b.n	8006032 <memmove+0x12>
 8006040:	4402      	add	r2, r0
 8006042:	4601      	mov	r1, r0
 8006044:	428a      	cmp	r2, r1
 8006046:	d100      	bne.n	800604a <memmove+0x2a>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800604e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006052:	e7f7      	b.n	8006044 <memmove+0x24>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	; (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb f9aa 	bl	80013b8 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	2000085c 	.word	0x2000085c

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608a:	4291      	cmp	r1, r2
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <abort>:
 8006090:	b508      	push	{r3, lr}
 8006092:	2006      	movs	r0, #6
 8006094:	f000 fa34 	bl	8006500 <raise>
 8006098:	2001      	movs	r0, #1
 800609a:	f7fb f915 	bl	80012c8 <_exit>

0800609e <_realloc_r>:
 800609e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	4680      	mov	r8, r0
 80060a4:	4614      	mov	r4, r2
 80060a6:	460e      	mov	r6, r1
 80060a8:	b921      	cbnz	r1, 80060b4 <_realloc_r+0x16>
 80060aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	4611      	mov	r1, r2
 80060b0:	f7ff bb82 	b.w	80057b8 <_malloc_r>
 80060b4:	b92a      	cbnz	r2, 80060c2 <_realloc_r+0x24>
 80060b6:	f7ff fb0b 	bl	80056d0 <_free_r>
 80060ba:	4625      	mov	r5, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c2:	f000 fa39 	bl	8006538 <_malloc_usable_size_r>
 80060c6:	4284      	cmp	r4, r0
 80060c8:	4607      	mov	r7, r0
 80060ca:	d802      	bhi.n	80060d2 <_realloc_r+0x34>
 80060cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060d0:	d812      	bhi.n	80060f8 <_realloc_r+0x5a>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4640      	mov	r0, r8
 80060d6:	f7ff fb6f 	bl	80057b8 <_malloc_r>
 80060da:	4605      	mov	r5, r0
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0ed      	beq.n	80060bc <_realloc_r+0x1e>
 80060e0:	42bc      	cmp	r4, r7
 80060e2:	4622      	mov	r2, r4
 80060e4:	4631      	mov	r1, r6
 80060e6:	bf28      	it	cs
 80060e8:	463a      	movcs	r2, r7
 80060ea:	f7ff ffc3 	bl	8006074 <memcpy>
 80060ee:	4631      	mov	r1, r6
 80060f0:	4640      	mov	r0, r8
 80060f2:	f7ff faed 	bl	80056d0 <_free_r>
 80060f6:	e7e1      	b.n	80060bc <_realloc_r+0x1e>
 80060f8:	4635      	mov	r5, r6
 80060fa:	e7df      	b.n	80060bc <_realloc_r+0x1e>

080060fc <__sfputc_r>:
 80060fc:	6893      	ldr	r3, [r2, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	b410      	push	{r4}
 8006104:	6093      	str	r3, [r2, #8]
 8006106:	da08      	bge.n	800611a <__sfputc_r+0x1e>
 8006108:	6994      	ldr	r4, [r2, #24]
 800610a:	42a3      	cmp	r3, r4
 800610c:	db01      	blt.n	8006112 <__sfputc_r+0x16>
 800610e:	290a      	cmp	r1, #10
 8006110:	d103      	bne.n	800611a <__sfputc_r+0x1e>
 8006112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006116:	f000 b935 	b.w	8006384 <__swbuf_r>
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	1c58      	adds	r0, r3, #1
 800611e:	6010      	str	r0, [r2, #0]
 8006120:	7019      	strb	r1, [r3, #0]
 8006122:	4608      	mov	r0, r1
 8006124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006128:	4770      	bx	lr

0800612a <__sfputs_r>:
 800612a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	4614      	mov	r4, r2
 8006132:	18d5      	adds	r5, r2, r3
 8006134:	42ac      	cmp	r4, r5
 8006136:	d101      	bne.n	800613c <__sfputs_r+0x12>
 8006138:	2000      	movs	r0, #0
 800613a:	e007      	b.n	800614c <__sfputs_r+0x22>
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	463a      	mov	r2, r7
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffda 	bl	80060fc <__sfputc_r>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d1f3      	bne.n	8006134 <__sfputs_r+0xa>
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006150 <_vfiprintf_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	460d      	mov	r5, r1
 8006156:	b09d      	sub	sp, #116	; 0x74
 8006158:	4614      	mov	r4, r2
 800615a:	4698      	mov	r8, r3
 800615c:	4606      	mov	r6, r0
 800615e:	b118      	cbz	r0, 8006168 <_vfiprintf_r+0x18>
 8006160:	6a03      	ldr	r3, [r0, #32]
 8006162:	b90b      	cbnz	r3, 8006168 <_vfiprintf_r+0x18>
 8006164:	f7ff f954 	bl	8005410 <__sinit>
 8006168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800616a:	07d9      	lsls	r1, r3, #31
 800616c:	d405      	bmi.n	800617a <_vfiprintf_r+0x2a>
 800616e:	89ab      	ldrh	r3, [r5, #12]
 8006170:	059a      	lsls	r2, r3, #22
 8006172:	d402      	bmi.n	800617a <_vfiprintf_r+0x2a>
 8006174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006176:	f7ff fa8a 	bl	800568e <__retarget_lock_acquire_recursive>
 800617a:	89ab      	ldrh	r3, [r5, #12]
 800617c:	071b      	lsls	r3, r3, #28
 800617e:	d501      	bpl.n	8006184 <_vfiprintf_r+0x34>
 8006180:	692b      	ldr	r3, [r5, #16]
 8006182:	b99b      	cbnz	r3, 80061ac <_vfiprintf_r+0x5c>
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f93a 	bl	8006400 <__swsetup_r>
 800618c:	b170      	cbz	r0, 80061ac <_vfiprintf_r+0x5c>
 800618e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006190:	07dc      	lsls	r4, r3, #31
 8006192:	d504      	bpl.n	800619e <_vfiprintf_r+0x4e>
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	b01d      	add	sp, #116	; 0x74
 800619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	0598      	lsls	r0, r3, #22
 80061a2:	d4f7      	bmi.n	8006194 <_vfiprintf_r+0x44>
 80061a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061a6:	f7ff fa73 	bl	8005690 <__retarget_lock_release_recursive>
 80061aa:	e7f3      	b.n	8006194 <_vfiprintf_r+0x44>
 80061ac:	2300      	movs	r3, #0
 80061ae:	9309      	str	r3, [sp, #36]	; 0x24
 80061b0:	2320      	movs	r3, #32
 80061b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ba:	2330      	movs	r3, #48	; 0x30
 80061bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006370 <_vfiprintf_r+0x220>
 80061c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c4:	f04f 0901 	mov.w	r9, #1
 80061c8:	4623      	mov	r3, r4
 80061ca:	469a      	mov	sl, r3
 80061cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d0:	b10a      	cbz	r2, 80061d6 <_vfiprintf_r+0x86>
 80061d2:	2a25      	cmp	r2, #37	; 0x25
 80061d4:	d1f9      	bne.n	80061ca <_vfiprintf_r+0x7a>
 80061d6:	ebba 0b04 	subs.w	fp, sl, r4
 80061da:	d00b      	beq.n	80061f4 <_vfiprintf_r+0xa4>
 80061dc:	465b      	mov	r3, fp
 80061de:	4622      	mov	r2, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f7ff ffa1 	bl	800612a <__sfputs_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	f000 80a9 	beq.w	8006340 <_vfiprintf_r+0x1f0>
 80061ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f0:	445a      	add	r2, fp
 80061f2:	9209      	str	r2, [sp, #36]	; 0x24
 80061f4:	f89a 3000 	ldrb.w	r3, [sl]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a1 	beq.w	8006340 <_vfiprintf_r+0x1f0>
 80061fe:	2300      	movs	r3, #0
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006208:	f10a 0a01 	add.w	sl, sl, #1
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	9307      	str	r3, [sp, #28]
 8006210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006214:	931a      	str	r3, [sp, #104]	; 0x68
 8006216:	4654      	mov	r4, sl
 8006218:	2205      	movs	r2, #5
 800621a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621e:	4854      	ldr	r0, [pc, #336]	; (8006370 <_vfiprintf_r+0x220>)
 8006220:	f7f9 ffd6 	bl	80001d0 <memchr>
 8006224:	9a04      	ldr	r2, [sp, #16]
 8006226:	b9d8      	cbnz	r0, 8006260 <_vfiprintf_r+0x110>
 8006228:	06d1      	lsls	r1, r2, #27
 800622a:	bf44      	itt	mi
 800622c:	2320      	movmi	r3, #32
 800622e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006232:	0713      	lsls	r3, r2, #28
 8006234:	bf44      	itt	mi
 8006236:	232b      	movmi	r3, #43	; 0x2b
 8006238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623c:	f89a 3000 	ldrb.w	r3, [sl]
 8006240:	2b2a      	cmp	r3, #42	; 0x2a
 8006242:	d015      	beq.n	8006270 <_vfiprintf_r+0x120>
 8006244:	9a07      	ldr	r2, [sp, #28]
 8006246:	4654      	mov	r4, sl
 8006248:	2000      	movs	r0, #0
 800624a:	f04f 0c0a 	mov.w	ip, #10
 800624e:	4621      	mov	r1, r4
 8006250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006254:	3b30      	subs	r3, #48	; 0x30
 8006256:	2b09      	cmp	r3, #9
 8006258:	d94d      	bls.n	80062f6 <_vfiprintf_r+0x1a6>
 800625a:	b1b0      	cbz	r0, 800628a <_vfiprintf_r+0x13a>
 800625c:	9207      	str	r2, [sp, #28]
 800625e:	e014      	b.n	800628a <_vfiprintf_r+0x13a>
 8006260:	eba0 0308 	sub.w	r3, r0, r8
 8006264:	fa09 f303 	lsl.w	r3, r9, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	9304      	str	r3, [sp, #16]
 800626c:	46a2      	mov	sl, r4
 800626e:	e7d2      	b.n	8006216 <_vfiprintf_r+0xc6>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	1d19      	adds	r1, r3, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	9103      	str	r1, [sp, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfbb      	ittet	lt
 800627c:	425b      	neglt	r3, r3
 800627e:	f042 0202 	orrlt.w	r2, r2, #2
 8006282:	9307      	strge	r3, [sp, #28]
 8006284:	9307      	strlt	r3, [sp, #28]
 8006286:	bfb8      	it	lt
 8006288:	9204      	strlt	r2, [sp, #16]
 800628a:	7823      	ldrb	r3, [r4, #0]
 800628c:	2b2e      	cmp	r3, #46	; 0x2e
 800628e:	d10c      	bne.n	80062aa <_vfiprintf_r+0x15a>
 8006290:	7863      	ldrb	r3, [r4, #1]
 8006292:	2b2a      	cmp	r3, #42	; 0x2a
 8006294:	d134      	bne.n	8006300 <_vfiprintf_r+0x1b0>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	9203      	str	r2, [sp, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bfb8      	it	lt
 80062a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a6:	3402      	adds	r4, #2
 80062a8:	9305      	str	r3, [sp, #20]
 80062aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006380 <_vfiprintf_r+0x230>
 80062ae:	7821      	ldrb	r1, [r4, #0]
 80062b0:	2203      	movs	r2, #3
 80062b2:	4650      	mov	r0, sl
 80062b4:	f7f9 ff8c 	bl	80001d0 <memchr>
 80062b8:	b138      	cbz	r0, 80062ca <_vfiprintf_r+0x17a>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	eba0 000a 	sub.w	r0, r0, sl
 80062c0:	2240      	movs	r2, #64	; 0x40
 80062c2:	4082      	lsls	r2, r0
 80062c4:	4313      	orrs	r3, r2
 80062c6:	3401      	adds	r4, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ce:	4829      	ldr	r0, [pc, #164]	; (8006374 <_vfiprintf_r+0x224>)
 80062d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d4:	2206      	movs	r2, #6
 80062d6:	f7f9 ff7b 	bl	80001d0 <memchr>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d03f      	beq.n	800635e <_vfiprintf_r+0x20e>
 80062de:	4b26      	ldr	r3, [pc, #152]	; (8006378 <_vfiprintf_r+0x228>)
 80062e0:	bb1b      	cbnz	r3, 800632a <_vfiprintf_r+0x1da>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	3307      	adds	r3, #7
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	3308      	adds	r3, #8
 80062ec:	9303      	str	r3, [sp, #12]
 80062ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f0:	443b      	add	r3, r7
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	e768      	b.n	80061c8 <_vfiprintf_r+0x78>
 80062f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062fa:	460c      	mov	r4, r1
 80062fc:	2001      	movs	r0, #1
 80062fe:	e7a6      	b.n	800624e <_vfiprintf_r+0xfe>
 8006300:	2300      	movs	r3, #0
 8006302:	3401      	adds	r4, #1
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	4619      	mov	r1, r3
 8006308:	f04f 0c0a 	mov.w	ip, #10
 800630c:	4620      	mov	r0, r4
 800630e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006312:	3a30      	subs	r2, #48	; 0x30
 8006314:	2a09      	cmp	r2, #9
 8006316:	d903      	bls.n	8006320 <_vfiprintf_r+0x1d0>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0c6      	beq.n	80062aa <_vfiprintf_r+0x15a>
 800631c:	9105      	str	r1, [sp, #20]
 800631e:	e7c4      	b.n	80062aa <_vfiprintf_r+0x15a>
 8006320:	fb0c 2101 	mla	r1, ip, r1, r2
 8006324:	4604      	mov	r4, r0
 8006326:	2301      	movs	r3, #1
 8006328:	e7f0      	b.n	800630c <_vfiprintf_r+0x1bc>
 800632a:	ab03      	add	r3, sp, #12
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	462a      	mov	r2, r5
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <_vfiprintf_r+0x22c>)
 8006332:	a904      	add	r1, sp, #16
 8006334:	4630      	mov	r0, r6
 8006336:	f3af 8000 	nop.w
 800633a:	4607      	mov	r7, r0
 800633c:	1c78      	adds	r0, r7, #1
 800633e:	d1d6      	bne.n	80062ee <_vfiprintf_r+0x19e>
 8006340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006342:	07d9      	lsls	r1, r3, #31
 8006344:	d405      	bmi.n	8006352 <_vfiprintf_r+0x202>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	059a      	lsls	r2, r3, #22
 800634a:	d402      	bmi.n	8006352 <_vfiprintf_r+0x202>
 800634c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634e:	f7ff f99f 	bl	8005690 <__retarget_lock_release_recursive>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	065b      	lsls	r3, r3, #25
 8006356:	f53f af1d 	bmi.w	8006194 <_vfiprintf_r+0x44>
 800635a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800635c:	e71c      	b.n	8006198 <_vfiprintf_r+0x48>
 800635e:	ab03      	add	r3, sp, #12
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	462a      	mov	r2, r5
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <_vfiprintf_r+0x22c>)
 8006366:	a904      	add	r1, sp, #16
 8006368:	4630      	mov	r0, r6
 800636a:	f7ff fc77 	bl	8005c5c <_printf_i>
 800636e:	e7e4      	b.n	800633a <_vfiprintf_r+0x1ea>
 8006370:	080067ab 	.word	0x080067ab
 8006374:	080067b5 	.word	0x080067b5
 8006378:	00000000 	.word	0x00000000
 800637c:	0800612b 	.word	0x0800612b
 8006380:	080067b1 	.word	0x080067b1

08006384 <__swbuf_r>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	460e      	mov	r6, r1
 8006388:	4614      	mov	r4, r2
 800638a:	4605      	mov	r5, r0
 800638c:	b118      	cbz	r0, 8006396 <__swbuf_r+0x12>
 800638e:	6a03      	ldr	r3, [r0, #32]
 8006390:	b90b      	cbnz	r3, 8006396 <__swbuf_r+0x12>
 8006392:	f7ff f83d 	bl	8005410 <__sinit>
 8006396:	69a3      	ldr	r3, [r4, #24]
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	071a      	lsls	r2, r3, #28
 800639e:	d525      	bpl.n	80063ec <__swbuf_r+0x68>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	b31b      	cbz	r3, 80063ec <__swbuf_r+0x68>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	6922      	ldr	r2, [r4, #16]
 80063a8:	1a98      	subs	r0, r3, r2
 80063aa:	6963      	ldr	r3, [r4, #20]
 80063ac:	b2f6      	uxtb	r6, r6
 80063ae:	4283      	cmp	r3, r0
 80063b0:	4637      	mov	r7, r6
 80063b2:	dc04      	bgt.n	80063be <__swbuf_r+0x3a>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f7ff fdf8 	bl	8005fac <_fflush_r>
 80063bc:	b9e0      	cbnz	r0, 80063f8 <__swbuf_r+0x74>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	60a3      	str	r3, [r4, #8]
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	6022      	str	r2, [r4, #0]
 80063ca:	701e      	strb	r6, [r3, #0]
 80063cc:	6962      	ldr	r2, [r4, #20]
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d004      	beq.n	80063de <__swbuf_r+0x5a>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d506      	bpl.n	80063e8 <__swbuf_r+0x64>
 80063da:	2e0a      	cmp	r6, #10
 80063dc:	d104      	bne.n	80063e8 <__swbuf_r+0x64>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7ff fde3 	bl	8005fac <_fflush_r>
 80063e6:	b938      	cbnz	r0, 80063f8 <__swbuf_r+0x74>
 80063e8:	4638      	mov	r0, r7
 80063ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ec:	4621      	mov	r1, r4
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 f806 	bl	8006400 <__swsetup_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d0d5      	beq.n	80063a4 <__swbuf_r+0x20>
 80063f8:	f04f 37ff 	mov.w	r7, #4294967295
 80063fc:	e7f4      	b.n	80063e8 <__swbuf_r+0x64>
	...

08006400 <__swsetup_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <__swsetup_r+0xac>)
 8006404:	4605      	mov	r5, r0
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	460c      	mov	r4, r1
 800640a:	b118      	cbz	r0, 8006414 <__swsetup_r+0x14>
 800640c:	6a03      	ldr	r3, [r0, #32]
 800640e:	b90b      	cbnz	r3, 8006414 <__swsetup_r+0x14>
 8006410:	f7fe fffe 	bl	8005410 <__sinit>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800641a:	0718      	lsls	r0, r3, #28
 800641c:	d422      	bmi.n	8006464 <__swsetup_r+0x64>
 800641e:	06d9      	lsls	r1, r3, #27
 8006420:	d407      	bmi.n	8006432 <__swsetup_r+0x32>
 8006422:	2309      	movs	r3, #9
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	e034      	b.n	800649c <__swsetup_r+0x9c>
 8006432:	0758      	lsls	r0, r3, #29
 8006434:	d512      	bpl.n	800645c <__swsetup_r+0x5c>
 8006436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006438:	b141      	cbz	r1, 800644c <__swsetup_r+0x4c>
 800643a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643e:	4299      	cmp	r1, r3
 8006440:	d002      	beq.n	8006448 <__swsetup_r+0x48>
 8006442:	4628      	mov	r0, r5
 8006444:	f7ff f944 	bl	80056d0 <_free_r>
 8006448:	2300      	movs	r3, #0
 800644a:	6363      	str	r3, [r4, #52]	; 0x34
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	2300      	movs	r3, #0
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	b94b      	cbnz	r3, 800647c <__swsetup_r+0x7c>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800646e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006472:	d003      	beq.n	800647c <__swsetup_r+0x7c>
 8006474:	4621      	mov	r1, r4
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f88c 	bl	8006594 <__smakebuf_r>
 800647c:	89a0      	ldrh	r0, [r4, #12]
 800647e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006482:	f010 0301 	ands.w	r3, r0, #1
 8006486:	d00a      	beq.n	800649e <__swsetup_r+0x9e>
 8006488:	2300      	movs	r3, #0
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	6963      	ldr	r3, [r4, #20]
 800648e:	425b      	negs	r3, r3
 8006490:	61a3      	str	r3, [r4, #24]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	b943      	cbnz	r3, 80064a8 <__swsetup_r+0xa8>
 8006496:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800649a:	d1c4      	bne.n	8006426 <__swsetup_r+0x26>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	0781      	lsls	r1, r0, #30
 80064a0:	bf58      	it	pl
 80064a2:	6963      	ldrpl	r3, [r4, #20]
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	e7f4      	b.n	8006492 <__swsetup_r+0x92>
 80064a8:	2000      	movs	r0, #0
 80064aa:	e7f7      	b.n	800649c <__swsetup_r+0x9c>
 80064ac:	20000494 	.word	0x20000494

080064b0 <_raise_r>:
 80064b0:	291f      	cmp	r1, #31
 80064b2:	b538      	push	{r3, r4, r5, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	460d      	mov	r5, r1
 80064b8:	d904      	bls.n	80064c4 <_raise_r+0x14>
 80064ba:	2316      	movs	r3, #22
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	f04f 30ff 	mov.w	r0, #4294967295
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80064c6:	b112      	cbz	r2, 80064ce <_raise_r+0x1e>
 80064c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064cc:	b94b      	cbnz	r3, 80064e2 <_raise_r+0x32>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f830 	bl	8006534 <_getpid_r>
 80064d4:	462a      	mov	r2, r5
 80064d6:	4601      	mov	r1, r0
 80064d8:	4620      	mov	r0, r4
 80064da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064de:	f000 b817 	b.w	8006510 <_kill_r>
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d00a      	beq.n	80064fc <_raise_r+0x4c>
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	d103      	bne.n	80064f2 <_raise_r+0x42>
 80064ea:	2316      	movs	r3, #22
 80064ec:	6003      	str	r3, [r0, #0]
 80064ee:	2001      	movs	r0, #1
 80064f0:	e7e7      	b.n	80064c2 <_raise_r+0x12>
 80064f2:	2400      	movs	r4, #0
 80064f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064f8:	4628      	mov	r0, r5
 80064fa:	4798      	blx	r3
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7e0      	b.n	80064c2 <_raise_r+0x12>

08006500 <raise>:
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <raise+0xc>)
 8006502:	4601      	mov	r1, r0
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f7ff bfd3 	b.w	80064b0 <_raise_r>
 800650a:	bf00      	nop
 800650c:	20000494 	.word	0x20000494

08006510 <_kill_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	; (8006530 <_kill_r+0x20>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f7fa fec3 	bl	80012a8 <_kill>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d102      	bne.n	800652c <_kill_r+0x1c>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b103      	cbz	r3, 800652c <_kill_r+0x1c>
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	bd38      	pop	{r3, r4, r5, pc}
 800652e:	bf00      	nop
 8006530:	2000085c 	.word	0x2000085c

08006534 <_getpid_r>:
 8006534:	f7fa beb0 	b.w	8001298 <_getpid>

08006538 <_malloc_usable_size_r>:
 8006538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653c:	1f18      	subs	r0, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	bfbc      	itt	lt
 8006542:	580b      	ldrlt	r3, [r1, r0]
 8006544:	18c0      	addlt	r0, r0, r3
 8006546:	4770      	bx	lr

08006548 <__swhatbuf_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	2900      	cmp	r1, #0
 8006552:	b096      	sub	sp, #88	; 0x58
 8006554:	4615      	mov	r5, r2
 8006556:	461e      	mov	r6, r3
 8006558:	da0d      	bge.n	8006576 <__swhatbuf_r+0x2e>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	bf0c      	ite	eq
 8006566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800656a:	2340      	movne	r3, #64	; 0x40
 800656c:	2000      	movs	r0, #0
 800656e:	6031      	str	r1, [r6, #0]
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	b016      	add	sp, #88	; 0x58
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	466a      	mov	r2, sp
 8006578:	f000 f848 	bl	800660c <_fstat_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	dbec      	blt.n	800655a <__swhatbuf_r+0x12>
 8006580:	9901      	ldr	r1, [sp, #4]
 8006582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800658a:	4259      	negs	r1, r3
 800658c:	4159      	adcs	r1, r3
 800658e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006592:	e7eb      	b.n	800656c <__swhatbuf_r+0x24>

08006594 <__smakebuf_r>:
 8006594:	898b      	ldrh	r3, [r1, #12]
 8006596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006598:	079d      	lsls	r5, r3, #30
 800659a:	4606      	mov	r6, r0
 800659c:	460c      	mov	r4, r1
 800659e:	d507      	bpl.n	80065b0 <__smakebuf_r+0x1c>
 80065a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	2301      	movs	r3, #1
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	b002      	add	sp, #8
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	ab01      	add	r3, sp, #4
 80065b2:	466a      	mov	r2, sp
 80065b4:	f7ff ffc8 	bl	8006548 <__swhatbuf_r>
 80065b8:	9900      	ldr	r1, [sp, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff f8fb 	bl	80057b8 <_malloc_r>
 80065c2:	b948      	cbnz	r0, 80065d8 <__smakebuf_r+0x44>
 80065c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d4ef      	bmi.n	80065ac <__smakebuf_r+0x18>
 80065cc:	f023 0303 	bic.w	r3, r3, #3
 80065d0:	f043 0302 	orr.w	r3, r3, #2
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	e7e3      	b.n	80065a0 <__smakebuf_r+0xc>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	6020      	str	r0, [r4, #0]
 80065dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	9b00      	ldr	r3, [sp, #0]
 80065e4:	6163      	str	r3, [r4, #20]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	6120      	str	r0, [r4, #16]
 80065ea:	b15b      	cbz	r3, 8006604 <__smakebuf_r+0x70>
 80065ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f81d 	bl	8006630 <_isatty_r>
 80065f6:	b128      	cbz	r0, 8006604 <__smakebuf_r+0x70>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	431d      	orrs	r5, r3
 8006608:	81a5      	strh	r5, [r4, #12]
 800660a:	e7cf      	b.n	80065ac <__smakebuf_r+0x18>

0800660c <_fstat_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	; (800662c <_fstat_r+0x20>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	f7fa fea4 	bl	8001366 <_fstat>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d102      	bne.n	8006628 <_fstat_r+0x1c>
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	b103      	cbz	r3, 8006628 <_fstat_r+0x1c>
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	2000085c 	.word	0x2000085c

08006630 <_isatty_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	; (800664c <_isatty_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fa fea3 	bl	8001386 <_isatty>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_isatty_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_isatty_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	2000085c 	.word	0x2000085c

08006650 <_gettimeofday>:
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <_gettimeofday+0xc>)
 8006652:	2258      	movs	r2, #88	; 0x58
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	4770      	bx	lr
 800665c:	2000085c 	.word	0x2000085c

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
