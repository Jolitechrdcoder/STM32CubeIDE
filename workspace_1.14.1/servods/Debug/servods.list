
servods.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003e1c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d18b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e3  00000000  00000000  0002d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  0002f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad62  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb76  00000000  00000000  0004ae44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2056  00000000  00000000  000599ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000315c  00000000  00000000  000fba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000feb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003db8 	.word	0x08003db8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003db8 	.word	0x08003db8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb00 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f832 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f96a 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f938 	bl	800044c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001dc:	f000 f888 	bl	80002f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4814      	ldr	r0, [pc, #80]	; (8000234 <main+0x6c>)
 80001e4:	f002 faac 	bl	8002740 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim1.Instance -> CCR1 = 500; // 0 grados del servomoto
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0x6c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f0:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f6:	f000 fb51 	bl	800089c <HAL_Delay>
	    htim1.Instance -> CCR1 = 2500; // 90 grados del servomoto
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <main+0x6c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000202:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f000 fb48 	bl	800089c <HAL_Delay>
	    htim1.Instance -> CCR1 = 500; // 0 grados del servomoto
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x6c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000214:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(500);
 8000216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021a:	f000 fb3f 	bl	800089c <HAL_Delay>
	    htim1.Instance -> CCR1 = 2500; // 90 grados del servomoto
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <main+0x6c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000226:	635a      	str	r2, [r3, #52]	; 0x34
	    HAL_Delay(500);
 8000228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022c:	f000 fb36 	bl	800089c <HAL_Delay>
	  htim1.Instance -> CCR1 = 500; // 0 grados del servomoto
 8000230:	e7da      	b.n	80001e8 <main+0x20>
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b09c      	sub	sp, #112	; 0x70
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fd89 	bl	8003d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2234      	movs	r2, #52	; 0x34
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fd7b 	bl	8003d5e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800026c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fd98 	bl	8000dc4 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f96f 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fdc0 	bl	8001e40 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 f959 	bl	800057c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 ffe8 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e2:	f000 f94b 	bl	800057c <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3770      	adds	r7, #112	; 0x70
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09a      	sub	sp, #104	; 0x68
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
 8000320:	615a      	str	r2, [r3, #20]
 8000322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	222c      	movs	r2, #44	; 0x2c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fd17 	bl	8003d5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000330:	4b44      	ldr	r3, [pc, #272]	; (8000444 <MX_TIM1_Init+0x154>)
 8000332:	4a45      	ldr	r2, [pc, #276]	; (8000448 <MX_TIM1_Init+0x158>)
 8000334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <MX_TIM1_Init+0x154>)
 8000338:	2247      	movs	r2, #71	; 0x47
 800033a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b41      	ldr	r3, [pc, #260]	; (8000444 <MX_TIM1_Init+0x154>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000342:	4b40      	ldr	r3, [pc, #256]	; (8000444 <MX_TIM1_Init+0x154>)
 8000344:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b3e      	ldr	r3, [pc, #248]	; (8000444 <MX_TIM1_Init+0x154>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000350:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <MX_TIM1_Init+0x154>)
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b3b      	ldr	r3, [pc, #236]	; (8000444 <MX_TIM1_Init+0x154>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800035c:	4839      	ldr	r0, [pc, #228]	; (8000444 <MX_TIM1_Init+0x154>)
 800035e:	f002 f937 	bl	80025d0 <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000368:	f000 f908 	bl	800057c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000376:	4619      	mov	r1, r3
 8000378:	4832      	ldr	r0, [pc, #200]	; (8000444 <MX_TIM1_Init+0x154>)
 800037a:	f002 fbdb 	bl	8002b34 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000384:	f000 f8fa 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000388:	482e      	ldr	r0, [pc, #184]	; (8000444 <MX_TIM1_Init+0x154>)
 800038a:	f002 f978 	bl	800267e <HAL_TIM_PWM_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000394:	f000 f8f2 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003a8:	4619      	mov	r1, r3
 80003aa:	4826      	ldr	r0, [pc, #152]	; (8000444 <MX_TIM1_Init+0x154>)
 80003ac:	f003 f860 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003b6:	f000 f8e1 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ba:	2360      	movs	r3, #96	; 0x60
 80003bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80003be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c4:	2300      	movs	r3, #0
 80003c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003c8:	2300      	movs	r3, #0
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003d0:	2300      	movs	r3, #0
 80003d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	4818      	ldr	r0, [pc, #96]	; (8000444 <MX_TIM1_Init+0x154>)
 80003e2:	f002 fa93 	bl	800290c <HAL_TIM_PWM_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80003ec:	f000 f8c6 	bl	800057c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <MX_TIM1_Init+0x154>)
 8000426:	f003 f889 	bl	800353c <HAL_TIMEx_ConfigBreakDeadTime>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000430:	f000 f8a4 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <MX_TIM1_Init+0x154>)
 8000436:	f000 f8eb 	bl	8000610 <HAL_TIM_MspPostInit>

}
 800043a:	bf00      	nop
 800043c:	3768      	adds	r7, #104	; 0x68
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000028 	.word	0x20000028
 8000448:	40012c00 	.word	0x40012c00

0800044c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_USART2_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000458:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000490:	f003 f8cc 	bl	800362c <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f86f 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000074 	.word	0x20000074
 80004a8:	40004400 	.word	0x40004400

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a2a      	ldr	r2, [pc, #168]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b28      	ldr	r3, [pc, #160]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a24      	ldr	r2, [pc, #144]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <MX_GPIO_Init+0xc4>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_GPIO_Init+0xc4>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_GPIO_Init+0xc4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_GPIO_Init+0xc4>)
 8000510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_GPIO_Init+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <MX_GPIO_Init+0xc8>)
 800052a:	f000 fc33 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000534:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_GPIO_Init+0xcc>)
 8000546:	f000 fab3 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4619      	mov	r1, r3
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0xc8>)
 8000564:	f000 faa4 	bl	8000ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	; 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400
 8000578:	48000800 	.word	0x48000800

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_MspInit+0x44>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005be:	2007      	movs	r0, #7
 80005c0:	f000 fa42 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <HAL_TIM_Base_MspInit+0x38>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d10b      	bne.n	80005fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40012c00 	.word	0x40012c00
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <HAL_TIM_MspPostInit+0x64>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d11b      	bne.n	800066a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_TIM_MspPostInit+0x68>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <HAL_TIM_MspPostInit+0x68>)
 8000638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_TIM_MspPostInit+0x68>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800064a:	2301      	movs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <HAL_TIM_MspPostInit+0x6c>)
 8000666:	f000 fa23 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40012c00 	.word	0x40012c00
 8000678:	40021000 	.word	0x40021000
 800067c:	48000800 	.word	0x48000800

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_UART_MspInit+0x7c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d128      	bne.n	80006f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006d2:	230c      	movs	r3, #12
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e2:	2307      	movs	r3, #7
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 f9de 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40004400 	.word	0x40004400
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f884 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000780:	f7ff ffea 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f003 fae1 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ae:	f7ff fd0b 	bl	80001c8 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	20000100 	.word	0x20000100

080007cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f931 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f808 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fecc 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x54>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x58>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f93b 	bl	8000a96 <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e00e      	b.n	8000848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d80a      	bhi.n	8000846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f000 f911 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_InitTick+0x5c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x20>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x24>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_IncTick+0x24>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008
 8000880:	200000fc 	.word	0x200000fc

08000884 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;  
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200000fc 	.word	0x200000fc

0800089c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff ffee 	bl	8000884 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_Delay+0x44>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008c2:	bf00      	nop
 80008c4:	f7ff ffde 	bl	8000884 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff47 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff5c 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff8e 	bl	800099c <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffb0 	bl	8000a04 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e14e      	b.n	8000d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8140 	beq.w	8000d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d005      	beq.n	8000af0 <HAL_GPIO_Init+0x40>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	f003 0201 	and.w	r2, r3, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d017      	beq.n	8000b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0203 	and.w	r2, r3, #3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 809a 	beq.w	8000d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a50      	ldr	r2, [pc, #320]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1e0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a46      	ldr	r2, [pc, #280]	; (8000d84 <HAL_GPIO_Init+0x2d4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1dc>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1d8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a44      	ldr	r2, [pc, #272]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1d4>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c84:	2305      	movs	r3, #5
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c90:	2300      	movs	r3, #0
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	f002 0203 	and.w	r2, r2, #3
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca2:	4937      	ldr	r1, [pc, #220]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f47f aea9 	bne.w	8000ac0 <HAL_GPIO_Init+0x10>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	48000400 	.word	0x48000400
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000c00 	.word	0x48000c00
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da4:	787b      	ldrb	r3, [r7, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f001 b823 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 817d 	beq.w	80010fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e00:	4bbc      	ldr	r3, [pc, #752]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d00c      	beq.n	8000e26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0c:	4bb9      	ldr	r3, [pc, #740]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d15c      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x10e>
 8000e18:	4bb6      	ldr	r3, [pc, #728]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d155      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x10e>
 8000e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3e:	fab3 f383 	clz	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	095b      	lsrs	r3, r3, #5
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <HAL_RCC_OscConfig+0x94>
 8000e52:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	e015      	b.n	8000e84 <HAL_RCC_OscConfig+0xc0>
 8000e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e78:	fa93 f3a3 	rbit	r3, r3
 8000e7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e80:	4b9c      	ldr	r3, [pc, #624]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e90:	fa92 f2a2 	rbit	r2, r2
 8000e94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e9c:	fab2 f282 	clz	r2, r2
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	f002 021f 	and.w	r2, r2, #31
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 811f 	beq.w	80010f8 <HAL_RCC_OscConfig+0x334>
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 8116 	bne.w	80010f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f000 bfaf 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12e>
 8000ee4:	4b83      	ldr	r3, [pc, #524]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e036      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x158>
 8000f02:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7b      	ldr	r2, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a78      	ldr	r2, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e021      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x184>
 8000f2e:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a70      	ldr	r2, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6d      	ldr	r2, [pc, #436]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
 8000f48:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f60:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f023 020f 	bic.w	r2, r3, #15
 8000f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	495f      	ldr	r1, [pc, #380]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d059      	beq.n	800103e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc7b 	bl	8000884 <HAL_GetTick>
 8000f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc76 	bl	8000884 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d902      	bls.n	8000faa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f000 bf43 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 8000faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	095b      	lsrs	r3, r3, #5
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_RCC_OscConfig+0x218>
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x244>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ff8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001004:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001010:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800101c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0ab      	beq.n	8000f94 <HAL_RCC_OscConfig+0x1d0>
 800103c:	e05d      	b.n	80010fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc21 	bl	8000884 <HAL_GetTick>
 8001042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e00a      	b.n	800105e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc1c 	bl	8000884 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d902      	bls.n	800105e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	f000 bee9 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800105e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001062:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x2cc>
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	e015      	b.n	80010bc <HAL_RCC_OscConfig+0x2f8>
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_RCC_OscConfig+0x330>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f002 021f 	and.w	r2, r2, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1ab      	bne.n	8001048 <HAL_RCC_OscConfig+0x284>
 80010f0:	e003      	b.n	80010fa <HAL_RCC_OscConfig+0x336>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 817d 	beq.w	800140a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001110:	4ba6      	ldr	r3, [pc, #664]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800111c:	4ba3      	ldr	r3, [pc, #652]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d172      	bne.n	800120e <HAL_RCC_OscConfig+0x44a>
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d16c      	bne.n	800120e <HAL_RCC_OscConfig+0x44a>
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001146:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d102      	bne.n	8001164 <HAL_RCC_OscConfig+0x3a0>
 800115e:	4b93      	ldr	r3, [pc, #588]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	e013      	b.n	800118c <HAL_RCC_OscConfig+0x3c8>
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800117c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001188:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2202      	movs	r2, #2
 800118e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001192:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001196:	fa92 f2a2 	rbit	r2, r2
 800119a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800119e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_RCC_OscConfig+0x410>
 80011be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d002      	beq.n	80011d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f000 be2e 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b75      	ldr	r3, [pc, #468]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	21f8      	movs	r1, #248	; 0xf8
 80011ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011f2:	fa91 f1a1 	rbit	r1, r1
 80011f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011fe:	fab1 f181 	clz	r1, r1
 8001202:	b2c9      	uxtb	r1, r1
 8001204:	408b      	lsls	r3, r1
 8001206:	4969      	ldr	r1, [pc, #420]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120c:	e0fd      	b.n	800140a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8088 	beq.w	8001330 <HAL_RCC_OscConfig+0x56c>
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001232:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	2301      	movs	r3, #1
 800124a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fb1a 	bl	8000884 <HAL_GetTick>
 8001250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fb15 	bl	8000884 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d902      	bls.n	800126c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	f000 bde2 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800127e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	095b      	lsrs	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d102      	bne.n	800129c <HAL_RCC_OscConfig+0x4d8>
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	e013      	b.n	80012c4 <HAL_RCC_OscConfig+0x500>
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2202      	movs	r2, #2
 80012c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0af      	beq.n	8001256 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	21f8      	movs	r1, #248	; 0xf8
 800130c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001314:	fa91 f1a1 	rbit	r1, r1
 8001318:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800131c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001320:	fab1 f181 	clz	r1, r1
 8001324:	b2c9      	uxtb	r1, r1
 8001326:	408b      	lsls	r3, r1
 8001328:	4920      	ldr	r1, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
 800132e:	e06c      	b.n	800140a <HAL_RCC_OscConfig+0x646>
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	2300      	movs	r3, #0
 800135a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fa92 	bl	8000884 <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fa8d 	bl	8000884 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d902      	bls.n	800137c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f000 bd5a 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800138e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d104      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5ec>
 80013a6:	4b01      	ldr	r3, [pc, #4]	; (80013ac <HAL_RCC_OscConfig+0x5e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e015      	b.n	80013d8 <HAL_RCC_OscConfig+0x614>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013cc:	fa93 f3a3 	rbit	r3, r3
 80013d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013d4:	4bc8      	ldr	r3, [pc, #800]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2202      	movs	r2, #2
 80013da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013e2:	fa92 f2a2 	rbit	r2, r2
 80013e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013ee:	fab2 f282 	clz	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f002 021f 	and.w	r2, r2, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ad      	bne.n	8001366 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8110 	beq.w	8001640 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d079      	beq.n	8001524 <HAL_RCC_OscConfig+0x760>
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4bab      	ldr	r3, [pc, #684]	; (80016fc <HAL_RCC_OscConfig+0x938>)
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	2301      	movs	r3, #1
 8001458:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fa13 	bl	8000884 <HAL_GetTick>
 800145e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fa0e 	bl	8000884 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d902      	bls.n	800147a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	f000 bcdb 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001494:	2202      	movs	r2, #2
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fa93 f2a3 	rbit	r2, r3
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014b8:	2202      	movs	r2, #2
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80014d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014e0:	2102      	movs	r1, #2
 80014e2:	6019      	str	r1, [r3, #0]
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f1a3 	rbit	r1, r3
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014fa:	6019      	str	r1, [r3, #0]
  return result;
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0a0      	beq.n	8001464 <HAL_RCC_OscConfig+0x6a0>
 8001522:	e08d      	b.n	8001640 <HAL_RCC_OscConfig+0x87c>
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001546:	601a      	str	r2, [r3, #0]
  return result;
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001550:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x938>)
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	461a      	mov	r2, r3
 8001562:	2300      	movs	r3, #0
 8001564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff f98d 	bl	8000884 <HAL_GetTick>
 800156a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff f988 	bl	8000884 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d902      	bls.n	8001586 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	f000 bc55 	b.w	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80015f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015fe:	2102      	movs	r1, #2
 8001600:	6019      	str	r1, [r3, #0]
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f1a3 	rbit	r1, r3
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001618:	6019      	str	r1, [r3, #0]
  return result;
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d197      	bne.n	8001570 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 81a1 	beq.w	8001998 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d116      	bne.n	8001696 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800168e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f8e9 	bl	8000884 <HAL_GetTick>
 80016b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	e009      	b.n	80016cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff f8e4 	bl	8000884 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e3b1      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_RCC_OscConfig+0x93c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_OscConfig+0x940>
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <HAL_RCC_OscConfig+0x934>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e03c      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	10908120 	.word	0x10908120
 8001700:	40007000 	.word	0x40007000
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x96a>
 8001714:	4bc1      	ldr	r3, [pc, #772]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4ac0      	ldr	r2, [pc, #768]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	4bbe      	ldr	r3, [pc, #760]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4abd      	ldr	r2, [pc, #756]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x994>
 800173e:	4bb7      	ldr	r3, [pc, #732]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4ab6      	ldr	r2, [pc, #728]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4bb4      	ldr	r3, [pc, #720]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4ab3      	ldr	r2, [pc, #716]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x9ac>
 8001758:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4aaf      	ldr	r2, [pc, #700]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	4bad      	ldr	r3, [pc, #692]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4aac      	ldr	r2, [pc, #688]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8081 	beq.w	8001884 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff f87f 	bl	8000884 <HAL_GetTick>
 8001786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f87a 	bl	8000884 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e345      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ea:	601a      	str	r2, [r3, #0]
  return result;
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0xa4c>
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	e013      	b.n	8001838 <HAL_RCC_OscConfig+0xa74>
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001818:	2202      	movs	r2, #2
 800181a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001840:	2102      	movs	r1, #2
 8001842:	6011      	str	r1, [r2, #0]
 8001844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001848:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	fa92 f1a2 	rbit	r1, r2
 8001852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001856:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800185a:	6011      	str	r1, [r2, #0]
  return result;
 800185c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001860:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f002 021f 	and.w	r2, r2, #31
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d084      	beq.n	800178c <HAL_RCC_OscConfig+0x9c8>
 8001882:	e07f      	b.n	8001984 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7fe fffe 	bl	8000884 <HAL_GetTick>
 8001888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7fe fff9 	bl	8000884 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e2c4      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018ec:	601a      	str	r2, [r3, #0]
  return result;
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0xb4e>
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	e013      	b.n	800193a <HAL_RCC_OscConfig+0xb76>
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001942:	2102      	movs	r1, #2
 8001944:	6011      	str	r1, [r2, #0]
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	fa92 f1a2 	rbit	r1, r2
 8001954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001958:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800195c:	6011      	str	r1, [r2, #0]
  return result;
 800195e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001962:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fab2 f282 	clz	r2, r2
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f002 021f 	and.w	r2, r2, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d184      	bne.n	800188e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001984:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001996:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8242 	beq.w	8001e2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0xc58>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	f000 8213 	beq.w	8001dde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f040 8162 	bne.w	8001c8e <HAL_RCC_OscConfig+0xeca>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe ff38 	bl	8000884 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e00c      	b.n	8001a34 <HAL_RCC_OscConfig+0xc70>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7fe ff30 	bl	8000884 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1fd      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0xcba>
 8001a78:	4bb0      	ldr	r3, [pc, #704]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e027      	b.n	8001ace <HAL_RCC_OscConfig+0xd0a>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ad6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ada:	6011      	str	r1, [r2, #0]
 8001adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fa92 f1a2 	rbit	r1, r2
 8001aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001af2:	6011      	str	r1, [r2, #0]
  return result;
 8001af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	fab2 f282 	clz	r2, r2
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f042 0220 	orr.w	r2, r2, #32
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f002 021f 	and.w	r2, r2, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d182      	bne.n	8001a20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1a:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	497f      	ldr	r1, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2301      	movs	r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fe7c 	bl	8000884 <HAL_GetTick>
 8001b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fe77 	bl	8000884 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e144      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bca:	601a      	str	r2, [r3, #0]
  return result;
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xe2c>
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e027      	b.n	8001c40 <HAL_RCC_OscConfig+0xe7c>
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fa92 f1a2 	rbit	r1, r2
 8001c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c64:	6011      	str	r1, [r2, #0]
  return result;
 8001c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d082      	beq.n	8001b92 <HAL_RCC_OscConfig+0xdce>
 8001c8c:	e0cf      	b.n	8001e2e <HAL_RCC_OscConfig+0x106a>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fdd6 	bl	8000884 <HAL_GetTick>
 8001cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	e009      	b.n	8001cf2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7fe fdd1 	bl	8000884 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09e      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d104      	bne.n	8001d40 <HAL_RCC_OscConfig+0xf7c>
 8001d36:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <HAL_RCC_OscConfig+0xf78>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	e029      	b.n	8001d90 <HAL_RCC_OscConfig+0xfcc>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x1078>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d9c:	6011      	str	r1, [r2, #0]
 8001d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	fa92 f1a2 	rbit	r1, r2
 8001dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001db4:	6011      	str	r1, [r2, #0]
  return result;
 8001db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d180      	bne.n	8001cde <HAL_RCC_OscConfig+0xf1a>
 8001ddc:	e027      	b.n	8001e2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01e      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_OscConfig+0x1078>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d10b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09e      	sub	sp, #120	; 0x78
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e162      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	498b      	ldr	r1, [pc, #556]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e14a      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	497f      	ldr	r1, [pc, #508]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80dc 	beq.w	800206c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d13c      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xf6>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xa6>
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_RCC_ClockConfig+0xc6>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8001efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d17b      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0f3      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d13c      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x178>
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x128>
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_ClockConfig+0x148>
 8001f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
 8001f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d13a      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b2      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x1a0>
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e00d      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1bc>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	61ba      	str	r2, [r7, #24]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	617a      	str	r2, [r7, #20]
  return result;
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e079      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	491a      	ldr	r1, [pc, #104]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe fc22 	bl	8000884 <HAL_GetTick>
 8002040:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fc1e 	bl	8000884 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e061      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_ClockConfig+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d214      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4906      	ldr	r1, [pc, #24]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_RCC_ClockConfig+0x25c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e040      	b.n	800211e <HAL_RCC_ClockConfig+0x2de>
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	491a      	ldr	r1, [pc, #104]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4912      	ldr	r1, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020e2:	f000 f829 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020e6:	4601      	mov	r1, r0
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_ClockConfig+0x2e8>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	22f0      	movs	r2, #240	; 0xf0
 80020f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	60fa      	str	r2, [r7, #12]
  return result;
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	40d3      	lsrs	r3, r2
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x2ec>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	fa21 f303 	lsr.w	r3, r1, r3
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x2f0>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x2f4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb70 	bl	80007fc <HAL_InitTick>
  
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3778      	adds	r7, #120	; 0x78
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	08003dd0 	.word	0x08003dd0
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	; 0x2c
 800213c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x30>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x36>
 8002166:	e03c      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	e03c      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002174:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002178:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	607a      	str	r2, [r7, #4]
  return result;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc8>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	220f      	movs	r2, #15
 800219c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	60fa      	str	r2, [r7, #12]
  return result;
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e004      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e4:	623b      	str	r3, [r7, #32]
      break;
 80021e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	372c      	adds	r7, #44	; 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	08003de8 	.word	0x08003de8
 8002204:	08003df8 	.word	0x08003df8
 8002208:	003d0900 	.word	0x003d0900

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800222a:	f7ff ffef 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002238:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800223c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	fa92 f2a2 	rbit	r2, r2
 8002244:	603a      	str	r2, [r7, #0]
  return result;
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	fab2 f282 	clz	r2, r2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	40d3      	lsrs	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08003de0 	.word	0x08003de0

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800226e:	f7ff ffcd 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800227c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002280:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	603a      	str	r2, [r7, #0]
  return result;
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	40d3      	lsrs	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08003de0 	.word	0x08003de0

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b092      	sub	sp, #72	; 0x48
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80d4 	beq.w	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d0:	4b4e      	ldr	r3, [pc, #312]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10e      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	61d3      	str	r3, [r2, #28]
 80022e8:	4b48      	ldr	r3, [pc, #288]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a41      	ldr	r2, [pc, #260]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7fe fab7 	bl	8000884 <HAL_GetTick>
 8002316:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7fe fab3 	bl	8000884 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e14b      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8084 	beq.w	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002354:	429a      	cmp	r2, r3
 8002356:	d07c      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	461a      	mov	r2, r3
 80023a6:	2300      	movs	r3, #0
 80023a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023aa:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04b      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7fe fa63 	bl	8000884 <HAL_GetTick>
 80023be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fa5f 	bl	8000884 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0f5      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80023d8:	2302      	movs	r3, #2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	61fb      	str	r3, [r7, #28]
  return result;
 80023f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d108      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002406:	4b01      	ldr	r3, [pc, #4]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	e00d      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	10908100 	.word	0x10908100
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	4b69      	ldr	r3, [pc, #420]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2202      	movs	r2, #2
 800242a:	613a      	str	r2, [r7, #16]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	fa92 f2a2 	rbit	r2, r2
 8002432:	60fa      	str	r2, [r7, #12]
  return result;
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0b7      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002452:	4b5e      	ldr	r3, [pc, #376]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	495b      	ldr	r1, [pc, #364]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002460:	4313      	orrs	r3, r2
 8002462:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002464:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a56      	ldr	r2, [pc, #344]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002484:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f023 0203 	bic.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494e      	ldr	r1, [pc, #312]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002492:	4313      	orrs	r3, r2
 8002494:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f023 0210 	bic.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4947      	ldr	r1, [pc, #284]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024c0:	4b42      	ldr	r3, [pc, #264]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	493f      	ldr	r1, [pc, #252]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f023 0220 	bic.w	r2, r3, #32
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	4938      	ldr	r1, [pc, #224]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024fc:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	4930      	ldr	r1, [pc, #192]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800250a:	4313      	orrs	r3, r2
 800250c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4929      	ldr	r1, [pc, #164]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4921      	ldr	r1, [pc, #132]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002546:	4313      	orrs	r3, r2
 8002548:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	491a      	ldr	r1, [pc, #104]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002564:	4313      	orrs	r3, r2
 8002566:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	4912      	ldr	r1, [pc, #72]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002582:	4313      	orrs	r3, r2
 8002584:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	490b      	ldr	r1, [pc, #44]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	4903      	ldr	r1, [pc, #12]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3748      	adds	r7, #72	; 0x48
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e049      	b.n	8002676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fd ffea 	bl	80005d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 fb5a 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e049      	b.n	8002724 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f841 	bl	800272c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 fb03 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start+0x24>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e03c      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d109      	bne.n	800277e <HAL_TIM_PWM_Start+0x3e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e02f      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e022      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d109      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x72>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e015      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start+0x8c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e008      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e083      	b.n	80028ee <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0xb6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	e023      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_PWM_Start+0xc6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	e01b      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d104      	bne.n	8002816 <HAL_TIM_PWM_Start+0xd6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002814:	e013      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d104      	bne.n	8002826 <HAL_TIM_PWM_Start+0xe6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002824:	e00b      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d104      	bne.n	8002836 <HAL_TIM_PWM_Start+0xf6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002834:	e003      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fdec 	bl	8003424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_TIM_PWM_Start+0x1b8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_PWM_Start+0x134>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_TIM_PWM_Start+0x1bc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_TIM_PWM_Start+0x134>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <HAL_TIM_PWM_Start+0x1c0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_PWM_Start+0x134>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_TIM_PWM_Start+0x1c4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_TIM_PWM_Start+0x138>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_TIM_PWM_Start+0x13a>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_TIM_PWM_Start+0x1b8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_TIM_PWM_Start+0x16c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_PWM_Start+0x16c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_TIM_PWM_Start+0x1bc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d115      	bne.n	80028d8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_TIM_PWM_Start+0x1c8>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d015      	beq.n	80028ea <HAL_TIM_PWM_Start+0x1aa>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d011      	beq.n	80028ea <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	e008      	b.n	80028ea <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e000      	b.n	80028ec <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400
 8002904:	40014800 	.word	0x40014800
 8002908:	00010007 	.word	0x00010007

0800290c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002926:	2302      	movs	r3, #2
 8002928:	e0ff      	b.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b14      	cmp	r3, #20
 8002936:	f200 80f0 	bhi.w	8002b1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002995 	.word	0x08002995
 8002944:	08002b1b 	.word	0x08002b1b
 8002948:	08002b1b 	.word	0x08002b1b
 800294c:	08002b1b 	.word	0x08002b1b
 8002950:	080029d5 	.word	0x080029d5
 8002954:	08002b1b 	.word	0x08002b1b
 8002958:	08002b1b 	.word	0x08002b1b
 800295c:	08002b1b 	.word	0x08002b1b
 8002960:	08002a17 	.word	0x08002a17
 8002964:	08002b1b 	.word	0x08002b1b
 8002968:	08002b1b 	.word	0x08002b1b
 800296c:	08002b1b 	.word	0x08002b1b
 8002970:	08002a57 	.word	0x08002a57
 8002974:	08002b1b 	.word	0x08002b1b
 8002978:	08002b1b 	.word	0x08002b1b
 800297c:	08002b1b 	.word	0x08002b1b
 8002980:	08002a99 	.word	0x08002a99
 8002984:	08002b1b 	.word	0x08002b1b
 8002988:	08002b1b 	.word	0x08002b1b
 800298c:	08002b1b 	.word	0x08002b1b
 8002990:	08002ad9 	.word	0x08002ad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa02 	bl	8002da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
      break;
 80029d2:	e0a5      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fa68 	bl	8002eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6999      	ldr	r1, [r3, #24]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
      break;
 8002a14:	e084      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fac7 	bl	8002fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0208 	orr.w	r2, r2, #8
 8002a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0204 	bic.w	r2, r2, #4
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69d9      	ldr	r1, [r3, #28]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	61da      	str	r2, [r3, #28]
      break;
 8002a54:	e064      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fb25 	bl	80030ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	021a      	lsls	r2, r3, #8
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	61da      	str	r2, [r3, #28]
      break;
 8002a96:	e043      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fb68 	bl	8003174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ad6:	e023      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fba6 	bl	8003230 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x1c>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0b6      	b.n	8002cbe <HAL_TIM_ConfigClockSource+0x18a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d03e      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0xd8>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	f200 8087 	bhi.w	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	f000 8086 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x176>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	d87f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d01a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xaa>
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d87b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d050      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x11e>
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
 8002bb2:	d877      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bb4:	2b50      	cmp	r3, #80	; 0x50
 8002bb6:	d03c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xfe>
 8002bb8:	2b50      	cmp	r3, #80	; 0x50
 8002bba:	d873      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d058      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x13e>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d86f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d064      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15e>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d86b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d060      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15e>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d867      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15e>
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d05a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15e>
 8002bdc:	e062      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bee:	f000 fbf9 	bl	80033e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	609a      	str	r2, [r3, #8]
      break;
 8002c0a:	e04f      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c1c:	f000 fbe2 	bl	80033e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2e:	609a      	str	r2, [r3, #8]
      break;
 8002c30:	e03c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 fb56 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2150      	movs	r1, #80	; 0x50
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fbaf 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002c50:	e02c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 fb75 	bl	800334e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2160      	movs	r1, #96	; 0x60
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fb9f 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002c70:	e01c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 fb36 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fb8f 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f000 fb86 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <TIM_Base_SetConfig+0xcc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x20>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <TIM_Base_SetConfig+0xcc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x5a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x5a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <TIM_Base_SetConfig+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x5a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <TIM_Base_SetConfig+0xd4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x5a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <TIM_Base_SetConfig+0xd8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <TIM_Base_SetConfig+0xcc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <TIM_Base_SetConfig+0xd0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <TIM_Base_SetConfig+0xd4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <TIM_Base_SetConfig+0xd8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800

08002da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0201 	bic.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0302 	bic.w	r3, r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_OC1_SetConfig+0xfc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_OC1_SetConfig+0x78>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <TIM_OC1_SetConfig+0x100>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_OC1_SetConfig+0x78>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_OC1_SetConfig+0x104>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_OC1_SetConfig+0x78>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_OC1_SetConfig+0x108>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10c      	bne.n	8002e36 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0308 	bic.w	r3, r3, #8
 8002e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <TIM_OC1_SetConfig+0xfc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_OC1_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <TIM_OC1_SetConfig+0x100>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <TIM_OC1_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <TIM_OC1_SetConfig+0x104>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_OC1_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <TIM_OC1_SetConfig+0x108>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800

08002eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0320 	bic.w	r3, r3, #32
 8002efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <TIM_OC2_SetConfig+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <TIM_OC2_SetConfig+0xf0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_OC2_SetConfig+0xa0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <TIM_OC2_SetConfig+0xf4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_OC2_SetConfig+0xa0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <TIM_OC2_SetConfig+0xf8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_OC2_SetConfig+0xa0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <TIM_OC2_SetConfig+0xfc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d113      	bne.n	8002f78 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f56:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f5e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800

08002fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a23      	ldr	r2, [pc, #140]	; (800309c <TIM_OC3_SetConfig+0xec>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10d      	bne.n	800302e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <TIM_OC3_SetConfig+0xec>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00b      	beq.n	800304e <TIM_OC3_SetConfig+0x9e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <TIM_OC3_SetConfig+0xf0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <TIM_OC3_SetConfig+0x9e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <TIM_OC3_SetConfig+0xf4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_OC3_SetConfig+0x9e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <TIM_OC3_SetConfig+0xf8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d113      	bne.n	8003076 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	621a      	str	r2, [r3, #32]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40014400 	.word	0x40014400
 80030a8:	40014800 	.word	0x40014800

080030ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	031b      	lsls	r3, r3, #12
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <TIM_OC4_SetConfig+0xb8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_OC4_SetConfig+0x7c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC4_SetConfig+0xbc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_OC4_SetConfig+0x7c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <TIM_OC4_SetConfig+0xc0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_OC4_SetConfig+0x7c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <TIM_OC4_SetConfig+0xc4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d109      	bne.n	800313c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <TIM_OC5_SetConfig+0xac>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_OC5_SetConfig+0x72>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <TIM_OC5_SetConfig+0xb0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_OC5_SetConfig+0x72>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <TIM_OC5_SetConfig+0xb4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_OC5_SetConfig+0x72>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a12      	ldr	r2, [pc, #72]	; (800322c <TIM_OC5_SetConfig+0xb8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d109      	bne.n	80031fa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40014000 	.word	0x40014000
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800

08003230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <TIM_OC6_SetConfig+0xb0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_OC6_SetConfig+0x74>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <TIM_OC6_SetConfig+0xb4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_OC6_SetConfig+0x74>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <TIM_OC6_SetConfig+0xb8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_OC6_SetConfig+0x74>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <TIM_OC6_SetConfig+0xbc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d109      	bne.n	80032b8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	40014800 	.word	0x40014800

080032f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 030a 	bic.w	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0210 	bic.w	r2, r3, #16
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800338a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f043 0307 	orr.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	431a      	orrs	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e04f      	b.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a21      	ldr	r2, [pc, #132]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a14      	ldr	r2, [pc, #80]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d004      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003554:	2302      	movs	r3, #2
 8003556:	e060      	b.n	800361a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d115      	bne.n	8003608 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	051b      	lsls	r3, r3, #20
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e040      	b.n	80036c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd f816 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f82c 	bl	80036c8 <UART_SetConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e022      	b.n	80036c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f956 	bl	8003934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f9dd 	bl	8003a78 <UART_CheckIdleState>
 80036be:	4603      	mov	r3, r0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b8a      	ldr	r3, [pc, #552]	; (800391c <UART_SetConfig+0x254>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a78      	ldr	r2, [pc, #480]	; (8003920 <UART_SetConfig+0x258>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d120      	bne.n	8003786 <UART_SetConfig+0xbe>
 8003744:	4b77      	ldr	r3, [pc, #476]	; (8003924 <UART_SetConfig+0x25c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d817      	bhi.n	8003780 <UART_SetConfig+0xb8>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0x90>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003769 	.word	0x08003769
 800375c:	08003775 	.word	0x08003775
 8003760:	0800377b 	.word	0x0800377b
 8003764:	0800376f 	.word	0x0800376f
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e01d      	b.n	80037aa <UART_SetConfig+0xe2>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e01a      	b.n	80037aa <UART_SetConfig+0xe2>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e017      	b.n	80037aa <UART_SetConfig+0xe2>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e014      	b.n	80037aa <UART_SetConfig+0xe2>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e011      	b.n	80037aa <UART_SetConfig+0xe2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a67      	ldr	r2, [pc, #412]	; (8003928 <UART_SetConfig+0x260>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d102      	bne.n	8003796 <UART_SetConfig+0xce>
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e009      	b.n	80037aa <UART_SetConfig+0xe2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a64      	ldr	r2, [pc, #400]	; (800392c <UART_SetConfig+0x264>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d102      	bne.n	80037a6 <UART_SetConfig+0xde>
 80037a0:	2300      	movs	r3, #0
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e001      	b.n	80037aa <UART_SetConfig+0xe2>
 80037a6:	2310      	movs	r3, #16
 80037a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	d15a      	bne.n	800386a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d827      	bhi.n	800380a <UART_SetConfig+0x142>
 80037ba:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <UART_SetConfig+0xf8>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037f5 	.word	0x080037f5
 80037cc:	0800380b 	.word	0x0800380b
 80037d0:	080037fb 	.word	0x080037fb
 80037d4:	0800380b 	.word	0x0800380b
 80037d8:	0800380b 	.word	0x0800380b
 80037dc:	0800380b 	.word	0x0800380b
 80037e0:	08003803 	.word	0x08003803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e4:	f7fe fd1e 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80037e8:	61b8      	str	r0, [r7, #24]
        break;
 80037ea:	e013      	b.n	8003814 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ec:	f7fe fd3c 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80037f0:	61b8      	str	r0, [r7, #24]
        break;
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <UART_SetConfig+0x268>)
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e00c      	b.n	8003814 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7fe fc9d 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80037fe:	61b8      	str	r0, [r7, #24]
        break;
 8003800:	e008      	b.n	8003814 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e004      	b.n	8003814 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	77bb      	strb	r3, [r7, #30]
        break;
 8003812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d074      	beq.n	8003904 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	005a      	lsls	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d916      	bls.n	8003864 <UART_SetConfig+0x19c>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d212      	bcs.n	8003864 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f023 030f 	bic.w	r3, r3, #15
 8003846:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	b29a      	uxth	r2, r3
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	4313      	orrs	r3, r2
 8003858:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	89fa      	ldrh	r2, [r7, #14]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e04f      	b.n	8003904 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	77bb      	strb	r3, [r7, #30]
 8003868:	e04c      	b.n	8003904 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d828      	bhi.n	80038c2 <UART_SetConfig+0x1fa>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x1b0>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fcc2 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80038a0:	61b8      	str	r0, [r7, #24]
        break;
 80038a2:	e013      	b.n	80038cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fce0 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80038a8:	61b8      	str	r0, [r7, #24]
        break;
 80038aa:	e00f      	b.n	80038cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b20      	ldr	r3, [pc, #128]	; (8003930 <UART_SetConfig+0x268>)
 80038ae:	61bb      	str	r3, [r7, #24]
        break;
 80038b0:	e00c      	b.n	80038cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fc41 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80038b6:	61b8      	str	r0, [r7, #24]
        break;
 80038b8:	e008      	b.n	80038cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	61bb      	str	r3, [r7, #24]
        break;
 80038c0:	e004      	b.n	80038cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	77bb      	strb	r3, [r7, #30]
        break;
 80038ca:	bf00      	nop
    }

    if (pclk != 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085a      	lsrs	r2, r3, #1
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d909      	bls.n	8003900 <UART_SetConfig+0x238>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d205      	bcs.n	8003900 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e001      	b.n	8003904 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003910:	7fbb      	ldrb	r3, [r7, #30]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	efff69f3 	.word	0xefff69f3
 8003920:	40013800 	.word	0x40013800
 8003924:	40021000 	.word	0x40021000
 8003928:	40004400 	.word	0x40004400
 800392c:	40004800 	.word	0x40004800
 8003930:	007a1200 	.word	0x007a1200

08003934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a32:	d10a      	bne.n	8003a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b098      	sub	sp, #96	; 0x60
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a88:	f7fc fefc 	bl	8000884 <HAL_GetTick>
 8003a8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d12e      	bne.n	8003afa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f88c 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d021      	beq.n	8003afa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e6      	bne.n	8003ab6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e062      	b.n	8003bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d149      	bne.n	8003b9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f856 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03c      	beq.n	8003b9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e6      	bne.n	8003b22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b74:	61fa      	str	r2, [r7, #28]
 8003b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	617b      	str	r3, [r7, #20]
   return(result);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e011      	b.n	8003bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3758      	adds	r7, #88	; 0x58
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd8:	e049      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d045      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fc fe4f 	bl	8000884 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e048      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d031      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d110      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f838 	bl	8003c96 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e029      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c48:	d111      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f81e 	bl	8003c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e00f      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d0a6      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b095      	sub	sp, #84	; 0x54
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d118      	bne.n	8003d3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f023 0310 	bic.w	r3, r3, #16
 8003d20:	647b      	str	r3, [r7, #68]	; 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	613b      	str	r3, [r7, #16]
   return(result);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e6      	bne.n	8003d0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d52:	bf00      	nop
 8003d54:	3754      	adds	r7, #84	; 0x54
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <memset>:
 8003d5e:	4402      	add	r2, r0
 8003d60:	4603      	mov	r3, r0
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d100      	bne.n	8003d68 <memset+0xa>
 8003d66:	4770      	bx	lr
 8003d68:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6c:	e7f9      	b.n	8003d62 <memset+0x4>
	...

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	; (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	; (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x44>)
 8003d84:	f000 f818 	bl	8003db8 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08003e08 	.word	0x08003e08
 8003dac:	08003e08 	.word	0x08003e08
 8003db0:	08003e08 	.word	0x08003e08
 8003db4:	08003e0c 	.word	0x08003e0c

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
