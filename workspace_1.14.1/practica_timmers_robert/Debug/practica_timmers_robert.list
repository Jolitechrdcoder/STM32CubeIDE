
practica_timmers_robert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  00020454  2**0
                  CONTENTS
  4 .ARM          00000000  08005f38  08005f38  00020454  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f38  08005f38  00020454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  08005f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000454  08006394  00020454  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  08006394  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013515  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002765  00000000  00000000  000339dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d80  00000000  00000000  00037260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cefe  00000000  00000000  00037fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001692c  00000000  00000000  00054ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad220  00000000  00000000  0006b80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d88  00000000  00000000  00118a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0011d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000454 	.word	0x20000454
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eb0 	.word	0x08005eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000458 	.word	0x20000458
 80001cc:	08005eb0 	.word	0x08005eb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b0:	f107 0208 	add.w	r2, r7, #8
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	214e      	movs	r1, #78	; 0x4e
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <lcd_send_cmd+0x5c>)
 80002be:	f002 f9cf 	bl	8002660 <HAL_I2C_Master_Transmit>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200004c0 	.word	0x200004c0

080002d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 030d 	orr.w	r3, r3, #13
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0309 	orr.w	r3, r3, #9
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	f043 030d 	orr.w	r3, r3, #13
 8000302:	b2db      	uxtb	r3, r3
 8000304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f043 0309 	orr.w	r3, r3, #9
 800030c:	b2db      	uxtb	r3, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	f107 0208 	add.w	r2, r7, #8
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <lcd_send_data+0x5c>)
 800031e:	f002 f99f 	bl	8002660 <HAL_I2C_Master_Transmit>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200004c0 	.word	0x200004c0

08000330 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <lcd_enviar_int+0x34>)
 8000344:	4618      	mov	r0, r3
 8000346:	f005 f90f 	bl	8005568 <siprintf>
    lcd_put_cur(row, col);
 800034a:	6879      	ldr	r1, [r7, #4]
 800034c:	68b8      	ldr	r0, [r7, #8]
 800034e:	f000 f80b 	bl	8000368 <lcd_put_cur>
    lcd_send_string(buffer);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f862 	bl	8000420 <lcd_send_string>
}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08005ec8 	.word	0x08005ec8

08000368 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
    switch (row)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d003      	beq.n	8000380 <lcd_put_cur+0x18>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d005      	beq.n	800038a <lcd_put_cur+0x22>
 800037e:	e009      	b.n	8000394 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000386:	603b      	str	r3, [r7, #0]
            break;
 8000388:	e004      	b.n	8000394 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000390:	603b      	str	r3, [r7, #0]
            break;
 8000392:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff69 	bl	8000270 <lcd_send_cmd>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <lcd_init>:


void lcd_init (void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003aa:	2032      	movs	r0, #50	; 0x32
 80003ac:	f000 fee2 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b0:	2030      	movs	r0, #48	; 0x30
 80003b2:	f7ff ff5d 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003b6:	2005      	movs	r0, #5
 80003b8:	f000 fedc 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003bc:	2030      	movs	r0, #48	; 0x30
 80003be:	f7ff ff57 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fed6 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003c8:	2030      	movs	r0, #48	; 0x30
 80003ca:	f7ff ff51 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003ce:	200a      	movs	r0, #10
 80003d0:	f000 fed0 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003d4:	2020      	movs	r0, #32
 80003d6:	f7ff ff4b 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f000 feca 	bl	8001174 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003e0:	2028      	movs	r0, #40	; 0x28
 80003e2:	f7ff ff45 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fec4 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003ec:	2008      	movs	r0, #8
 80003ee:	f7ff ff3f 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003f2:	2001      	movs	r0, #1
 80003f4:	f000 febe 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff39 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 feb8 	bl	8001174 <HAL_Delay>
	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 feb5 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800040a:	2006      	movs	r0, #6
 800040c:	f7ff ff30 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 feaf 	bl	8001174 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000416:	200c      	movs	r0, #12
 8000418:	f7ff ff2a 	bl	8000270 <lcd_send_cmd>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000428:	e006      	b.n	8000438 <lcd_send_string+0x18>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff4c 	bl	80002d0 <lcd_send_data>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f4      	bne.n	800042a <lcd_send_string+0xa>
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <Medir_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Medir_ADC()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 8000450:	4808      	ldr	r0, [pc, #32]	; (8000474 <Medir_ADC+0x28>)
 8000452:	f001 f839 	bl	80014c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000456:	2164      	movs	r1, #100	; 0x64
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <Medir_ADC+0x28>)
 800045a:	f001 f8d7 	bl	800160c <HAL_ADC_PollForConversion>

	Medida_ADC = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <Medir_ADC+0x28>)
 8000460:	f001 f992 	bl	8001788 <HAL_ADC_GetValue>
 8000464:	4603      	mov	r3, r0
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <Medir_ADC+0x2c>)
 8000468:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 800046a:	4802      	ldr	r0, [pc, #8]	; (8000474 <Medir_ADC+0x28>)
 800046c:	f001 f899 	bl	80015a2 <HAL_ADC_Stop>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000470 	.word	0x20000470
 8000478:	200005ec 	.word	0x200005ec

0800047c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	static unsigned int Count_LCD=0,Count_KEY=0,Count_ADC=0,Count_MATRIZ=0,Count_SONIC=0;

	if(htim->Instance==htim2.Instance)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	d159      	bne.n	8000544 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

	//LDC
	if(Count_LCD<(Time_LCD/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000490:	4b30      	ldr	r3, [pc, #192]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b31      	cmp	r3, #49	; 0x31
 8000496:	d805      	bhi.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Count_LCD++;
 8000498:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a2d      	ldr	r2, [pc, #180]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e007      	b.n	80004b4 <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else
	{
		Count_LCD=0;
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
		FLAG.LCD2=1;
 80004aa:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004ac:	7813      	ldrb	r3, [r2, #0]
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	7013      	strb	r3, [r2, #0]
	}

	//KEYPAD
	if(Count_KEY<(Time_keypad/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 80004b4:	4b29      	ldr	r3, [pc, #164]	; (800055c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b18      	cmp	r3, #24
 80004ba:	d805      	bhi.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			Count_KEY++;
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	4a26      	ldr	r2, [pc, #152]	; (800055c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80004c4:	6013      	str	r3, [r2, #0]
 80004c6:	e007      	b.n	80004d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else
		{
			Count_KEY=0;
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
			FLAG.KEYPAD=1;
 80004ce:	4a22      	ldr	r2, [pc, #136]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004d0:	7813      	ldrb	r3, [r2, #0]
 80004d2:	f043 0302 	orr.w	r3, r3, #2
 80004d6:	7013      	strb	r3, [r2, #0]
		}



	//ADC
	if(Count_ADC<(Time_ADC/Timer))
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b09      	cmp	r3, #9
 80004de:	d805      	bhi.n	80004ec <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		Count_ADC++;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	e007      	b.n	80004fc <HAL_TIM_PeriodElapsedCallback+0x80>
	}
	else
	{
		Count_ADC=0;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		FLAG.ADC=1;
 80004f2:	4a19      	ldr	r2, [pc, #100]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004f4:	7813      	ldrb	r3, [r2, #0]
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	7013      	strb	r3, [r2, #0]
	}


	//MATRIZ
	if(Count_MATRIZ<(Time_matriz/Timer))
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2bcc      	cmp	r3, #204	; 0xcc
 8000502:	d805      	bhi.n	8000510 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Count_MATRIZ++;
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800050c:	6013      	str	r3, [r2, #0]
 800050e:	e007      	b.n	8000520 <HAL_TIM_PeriodElapsedCallback+0xa4>
	}
	else
	{
		Count_MATRIZ=0;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
		FLAG.MATRIZ=1;
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000518:	7813      	ldrb	r3, [r2, #0]
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	7013      	strb	r3, [r2, #0]
	}

	//ULTRASONICO
	if(Count_SONIC<(Time_sonic/Timer))
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b63      	cmp	r3, #99	; 0x63
 8000526:	d805      	bhi.n	8000534 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		Count_SONIC++;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000530:	6013      	str	r3, [r2, #0]

	}



}
 8000532:	e007      	b.n	8000544 <HAL_TIM_PeriodElapsedCallback+0xc8>
		Count_SONIC=0;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
		FLAG.SONIC=1;
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800053c:	7813      	ldrb	r3, [r2, #0]
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	7013      	strb	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	20000514 	.word	0x20000514
 8000554:	200005f0 	.word	0x200005f0
 8000558:	200005e8 	.word	0x200005e8
 800055c:	200005f4 	.word	0x200005f4
 8000560:	200005f8 	.word	0x200005f8
 8000564:	200005fc 	.word	0x200005fc
 8000568:	20000600 	.word	0x20000600

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fd9a 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f84c 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f9c4 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f992 	bl	80008a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000580:	f000 f8a6 	bl	80006d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000584:	f000 f900 	bl	8000788 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000588:	f000 f93e 	bl	8000808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  max_init(0x03);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 fbbb 	bl	8000d08 <max_init>
  lcd_init();
 8000592:	f7ff ff08 	bl	80003a6 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000596:	481b      	ldr	r0, [pc, #108]	; (8000604 <main+0x98>)
 8000598:	f004 f85c 	bl	8004654 <HAL_TIM_Base_Start_IT>
  while (1)
  {

	  //tareas de cada periferico del  micro
	  //task adc
	  if(FLAG.ADC)
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <main+0x9c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <main+0x4c>
	  		  {
	  			  FLAG.ADC=0;
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <main+0x9c>)
 80005ac:	7813      	ldrb	r3, [r2, #0]
 80005ae:	f36f 0382 	bfc	r3, #2, #1
 80005b2:	7013      	strb	r3, [r2, #0]
	  			  Medir_ADC();
 80005b4:	f7ff ff4a 	bl	800044c <Medir_ADC>
	  		  }
     // task lcd
	  if(FLAG.LCD2)
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <main+0x9c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00b      	beq.n	80005de <main+0x72>
	  	{
	      lcd_enviar_int(Medida_ADC,0,0);
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <main+0xa0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff feae 	bl	8000330 <lcd_enviar_int>
	  	  FLAG.LCD2=0;
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <main+0x9c>)
 80005d6:	7813      	ldrb	r3, [r2, #0]
 80005d8:	f36f 0300 	bfc	r3, #0, #1
 80005dc:	7013      	strb	r3, [r2, #0]
	  	}
	  //task matriz
	  if(FLAG.MATRIZ)
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x9c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0d7      	beq.n	800059c <main+0x30>
	  	{
	      write_char('R', 1);
 80005ec:	2101      	movs	r1, #1
 80005ee:	2052      	movs	r0, #82	; 0x52
 80005f0:	f000 fb22 	bl	8000c38 <write_char>
	      max_clear();
 80005f4:	f000 fb5a 	bl	8000cac <max_clear>
	  	  FLAG.MATRIZ=0;
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <main+0x9c>)
 80005fa:	7813      	ldrb	r3, [r2, #0]
 80005fc:	f36f 03c3 	bfc	r3, #3, #1
 8000600:	7013      	strb	r3, [r2, #0]
	  if(FLAG.ADC)
 8000602:	e7cb      	b.n	800059c <main+0x30>
 8000604:	20000514 	.word	0x20000514
 8000608:	200005e8 	.word	0x200005e8
 800060c:	200005ec 	.word	0x200005ec

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b09c      	sub	sp, #112	; 0x70
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800061a:	2228      	movs	r2, #40	; 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 ffc2 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 ffb4 	bl	80055a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000640:	2303      	movs	r3, #3
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000660:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000664:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fb94 	bl	8002d98 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000676:	f000 f9c3 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fbbc 	bl	8003e14 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f9ad 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80006ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fde2 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c2:	f000 f99d 	bl	8000a00 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3770      	adds	r7, #112	; 0x70
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_ADC1_Init+0xb4>)
 80006e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC1_Init+0xb4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC1_Init+0xb4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC1_Init+0xb4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000702:	2200      	movs	r2, #0
 8000704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000716:	2201      	movs	r2, #1
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0xb4>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000722:	2201      	movs	r2, #1
 8000724:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000730:	2204      	movs	r2, #4
 8000732:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ADC1_Init+0xb4>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <MX_ADC1_Init+0xb4>)
 8000742:	f000 fd3b 	bl	80011bc <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800074c:	f000 f958 	bl	8000a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000750:	2301      	movs	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800075c:	2307      	movs	r3, #7
 800075e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC1_Init+0xb4>)
 800076e:	f001 f819 	bl	80017a4 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000778:	f000 f942 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000470 	.word	0x20000470

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C1_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	f001 febc 	bl	8002540 <HAL_I2C_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f917 	bl	8000a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d6:	f002 fa47 	bl	8002c68 <HAL_I2CEx_ConfigAnalogFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f90e 	bl	8000a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e8:	f002 fa89 	bl	8002cfe <HAL_I2CEx_ConfigDigitalFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f905 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200004c0 	.word	0x200004c0
 8000800:	40005400 	.word	0x40005400
 8000804:	2000090e 	.word	0x2000090e

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000830:	2247      	movs	r2, #71	; 0x47
 8000832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_TIM2_Init+0x98>)
 800083c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM2_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000850:	f003 fea8 	bl	80045a4 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800085a:	f000 f8d1 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_TIM2_Init+0x98>)
 800086c:	f004 f865 	bl	800493a <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000876:	f000 f8c3 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_TIM2_Init+0x98>)
 8000888:	f004 fa50 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000892:	f000 f8b5 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000514 	.word	0x20000514

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART2_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x58>)
 80008e8:	f004 faa4 	bl	8004e34 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f885 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000560 	.word	0x20000560
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_GPIO_Init+0xf0>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_GPIO_Init+0xf0>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a29      	ldr	r2, [pc, #164]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000980:	481d      	ldr	r0, [pc, #116]	; (80009f8 <MX_GPIO_Init+0xf4>)
 8000982:	f001 fdc5 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_GPIO_Init+0xf8>)
 800098e:	f001 fdbf 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0xf4>)
 80009aa:	f001 fc3f 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80009ae:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_GPIO_Init+0xf4>)
 80009c8:	f001 fc30 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_GPIO_Init+0xf8>)
 80009e6:	f001 fc21 	bl	800222c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e01a      	b.n	8000a52 <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a22:	4810      	ldr	r0, [pc, #64]	; (8000a64 <write_byte+0x58>)
 8000a24:	f001 fd74 	bl	8002510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	2120      	movs	r1, #32
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <write_byte+0x58>)
 8000a36:	f001 fd6b 	bl	8002510 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <write_byte+0x58>)
 8000a48:	f001 fd62 	bl	8002510 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	dde1      	ble.n	8000a1c <write_byte+0x10>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	48000800 	.word	0x48000800

08000a68 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	4613      	mov	r3, r2
 8000a76:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <write_max_cmd+0x58>)
 8000a7e:	f001 fd47 	bl	8002510 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e00a      	b.n	8000a9e <write_max_cmd+0x36>
	{
		write_byte (address);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffbe 	bl	8000a0c <write_byte>
		write_byte (cmd); 
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffba 	bl	8000a0c <write_byte>
	for (int i=0;i<num; i++)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	ddf1      	ble.n	8000a88 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <write_max_cmd+0x58>)
 8000aaa:	f001 fd31 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <write_max_cmd+0x58>)
 8000ab4:	f001 fd2c 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	71bb      	strb	r3, [r7, #6]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000ad6:	797b      	ldrb	r3, [r7, #5]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00d      	beq.n	8000af8 <setled+0x34>
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <setled+0xcc>)
 8000ae0:	5cd1      	ldrb	r1, [r2, r3]
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	b2d1      	uxtb	r1, r2
 8000af2:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <setled+0xcc>)
 8000af4:	54d1      	strb	r1, [r2, r3]
 8000af6:	e00e      	b.n	8000b16 <setled+0x52>
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <setled+0xcc>)
 8000afc:	5cd1      	ldrb	r1, [r2, r3]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2201      	movs	r2, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	400a      	ands	r2, r1
 8000b10:	b2d1      	uxtb	r1, r2
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <setled+0xcc>)
 8000b14:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <setled+0xd0>)
 8000b2c:	f001 fcf0 	bl	8002510 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e01b      	b.n	8000b6e <setled+0xaa>
	{
		if (i == (num-(n+1)))
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	425b      	negs	r3, r3
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d10d      	bne.n	8000b5c <setled+0x98>
		{
			write_byte (((c+1)));
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5f 	bl	8000a0c <write_byte>
			write_byte (buffer[col]);
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <setled+0xcc>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff59 	bl	8000a0c <write_byte>
 8000b5a:	e005      	b.n	8000b68 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff55 	bl	8000a0c <write_byte>
			write_byte (0);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ff52 	bl	8000a0c <write_byte>
	for (int i=0; i<num; i++) 
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dde0      	ble.n	8000b36 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <setled+0xd0>)
 8000b7a:	f001 fcc9 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <setled+0xd0>)
 8000b84:	f001 fcc4 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000604 	.word	0x20000604
 8000b94:	48000800 	.word	0x48000800

08000b98 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	e02d      	b.n	8000c1e <setrow+0x86>
	{
		if (i == ((n)))
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d120      	bne.n	8000c0c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	3307      	adds	r3, #7
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	e015      	b.n	8000c00 <setrow+0x68>
			{
				bool b = value&0x80;
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	b2d1      	uxtb	r1, r2
 8000bec:	7bba      	ldrb	r2, [r7, #14]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff68 	bl	8000ac4 <setled>
				value<<=1;
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dae4      	bge.n	8000bd4 <setrow+0x3c>
 8000c0a:	e005      	b.n	8000c18 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fefd 	bl	8000a0c <write_byte>
			write_byte (0);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fefa 	bl	8000a0c <write_byte>
	for (int i=0; i<num; i++) 
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	ddce      	ble.n	8000bc2 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4903      	ldr	r1, [pc, #12]	; (8000c34 <setrow+0x9c>)
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	54ca      	strb	r2, [r1, r3]
}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000654 	.word	0x20000654

08000c38 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <write_char+0x70>)
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	3301      	adds	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
	int row =6;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e016      	b.n	8000c92 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <write_char+0x70>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4610      	mov	r0, r2
 8000c82:	f7ff ff89 	bl	8000b98 <setrow>
		row--;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe2      	blt.n	8000c64 <write_char+0x2c>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000

08000cac <max_clear>:
}



void max_clear(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	e008      	b.n	8000cca <max_clear+0x1e>
		setrow(i,0);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff6a 	bl	8000b98 <setrow>
	for (int i=0; i<num*8; i++) 
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	ddf3      	ble.n	8000cb8 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	e00c      	b.n	8000cf0 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <max_clear+0x54>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <max_clear+0x58>)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b4f      	cmp	r3, #79	; 0x4f
 8000cf4:	ddef      	ble.n	8000cd6 <max_clear+0x2a>
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000604 	.word	0x20000604
 8000d04:	20000654 	.word	0x20000654

08000d08 <max_init>:
}



void max_init (uint8_t brightness)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000d12:	2100      	movs	r1, #0
 8000d14:	2009      	movs	r0, #9
 8000d16:	f7ff fea7 	bl	8000a68 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000d1a:	2107      	movs	r1, #7
 8000d1c:	200b      	movs	r0, #11
 8000d1e:	f7ff fea3 	bl	8000a68 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000d22:	2101      	movs	r1, #1
 8000d24:	200c      	movs	r0, #12
 8000d26:	f7ff fe9f 	bl	8000a68 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	f7ff fe9b 	bl	8000a68 <write_max_cmd>
	
	max_clear ();
 8000d32:	f7ff ffbb 	bl	8000cac <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f7ff fe94 	bl	8000a68 <write_max_cmd>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f001 fa12 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db0:	d124      	bne.n	8000dfc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de2:	2301      	movs	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f001 fa18 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_I2C_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d128      	bne.n	8000e7c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e60:	f001 f9e4 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6e:	61d3      	str	r3, [r2, #28]
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea0:	d113      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f001 f97d 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f001 f996 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x7c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d128      	bne.n	8000f4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_MspInit+0x80>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f001 f970 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40021000 	.word	0x40021000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8c4 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM2_IRQHandler+0x10>)
 8000fb6:	f003 fba1 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000514 	.word	0x20000514

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f004 fae0 	bl	80055b8 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20004000 	.word	0x20004000
 8001024:	00000400 	.word	0x00000400
 8001028:	200006a4 	.word	0x200006a4
 800102c:	200007f8 	.word	0x200007f8

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001058:	f7ff ffea 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 fa9f 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fa71 	bl	800056c <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800108c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 8001098:	08005f40 	.word	0x08005f40
  ldr r2, =_sbss
 800109c:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 80010a0:	200007f4 	.word	0x200007f4

080010a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f001 f875 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe40 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f88d 	bl	8002212 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f001 f855 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200003f8 	.word	0x200003f8
 800112c:	20000400 	.word	0x20000400
 8001130:	200003fc 	.word	0x200003fc

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000400 	.word	0x20000400
 8001158:	200006a8 	.word	0x200006a8

0800115c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200006a8 	.word	0x200006a8

08001174 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000400 	.word	0x20000400

080011bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09a      	sub	sp, #104	; 0x68
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e169      	b.n	80014b0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d176      	bne.n	80012dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d152      	bne.n	800129c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fdbd 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d13b      	bne.n	800129c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fdd3 	bl	8001dd0 <ADC_Disable>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d12f      	bne.n	800129c <HAL_ADC_Init+0xe0>
 800123c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001240:	2b00      	cmp	r3, #0
 8001242:	d12b      	bne.n	800129c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800124c:	f023 0302 	bic.w	r3, r3, #2
 8001250:	f043 0202 	orr.w	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001266:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001276:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001278:	4b8f      	ldr	r3, [pc, #572]	; (80014b8 <HAL_ADC_Init+0x2fc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a8f      	ldr	r2, [pc, #572]	; (80014bc <HAL_ADC_Init+0x300>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9a      	lsrs	r2, r3, #18
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128e:	e002      	b.n	8001296 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3b01      	subs	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f9      	bne.n	8001290 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b8:	d110      	bne.n	80012dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f023 0312 	bic.w	r3, r3, #18
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f040 80d6 	bne.w	8001496 <HAL_ADC_Init+0x2da>
 80012ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80d1 	bne.w	8001496 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 80c9 	bne.w	8001496 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800130c:	f043 0202 	orr.w	r2, r3, #2
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b6a      	ldr	r3, [pc, #424]	; (80014c0 <HAL_ADC_Init+0x304>)
 8001316:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d108      	bne.n	800133c <HAL_ADC_Init+0x180>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_Init+0x180>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_ADC_Init+0x182>
 800133c:	2300      	movs	r3, #0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d11c      	bne.n	800137c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001342:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d010      	beq.n	800136a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <HAL_ADC_Init+0x1a8>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Init+0x1a8>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_ADC_Init+0x1aa>
 8001364:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001366:	2b00      	cmp	r3, #0
 8001368:	d108      	bne.n	800137c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800136a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	431a      	orrs	r2, r3
 8001378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7e5b      	ldrb	r3, [r3, #25]
 8001380:	035b      	lsls	r3, r3, #13
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001386:	2a01      	cmp	r2, #1
 8001388:	d002      	beq.n	8001390 <HAL_ADC_Init+0x1d4>
 800138a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138e:	e000      	b.n	8001392 <HAL_ADC_Init+0x1d6>
 8001390:	2200      	movs	r2, #0
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4313      	orrs	r3, r2
 80013a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013a2:	4313      	orrs	r3, r2
 80013a4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d11b      	bne.n	80013e8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e5b      	ldrb	r3, [r3, #25]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	3b01      	subs	r3, #1
 80013be:	045a      	lsls	r2, r3, #17
 80013c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
 80013ca:	e00d      	b.n	80013e8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013d4:	f043 0220 	orr.w	r2, r3, #32
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	4313      	orrs	r3, r2
 80013fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013fc:	4313      	orrs	r3, r2
 80013fe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d114      	bne.n	8001438 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800141c:	f023 0302 	bic.w	r3, r3, #2
 8001420:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e1b      	ldrb	r3, [r3, #24]
 8001426:	039a      	lsls	r2, r3, #14
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_ADC_Init+0x308>)
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001448:	430b      	orrs	r3, r1
 800144a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10c      	bne.n	800146e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f023 010f 	bic.w	r1, r3, #15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 020f 	bic.w	r2, r2, #15
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	e00a      	b.n	80014ac <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f023 0312 	bic.w	r3, r3, #18
 800149e:	f043 0210 	orr.w	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3768      	adds	r7, #104	; 0x68
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200003f8 	.word	0x200003f8
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	50000300 	.word	0x50000300
 80014c4:	fff0c007 	.word	0xfff0c007

080014c8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d158      	bne.n	8001594 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_ADC_Start+0x28>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e054      	b.n	800159a <HAL_ADC_Start+0xd2>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fc05 	bl	8001d08 <ADC_Enable>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d140      	bne.n	800158a <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800153e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f023 0206 	bic.w	r2, r3, #6
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
 8001560:	e002      	b.n	8001568 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	221c      	movs	r2, #28
 8001576:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0204 	orr.w	r2, r2, #4
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e006      	b.n	8001598 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001592:	e001      	b.n	8001598 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_Stop+0x1a>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e023      	b.n	8001604 <HAL_ADC_Stop+0x62>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80015c4:	216c      	movs	r1, #108	; 0x6c
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fc68 	bl	8001e9c <ADC_ConversionStop>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d111      	bne.n	80015fa <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fbfa 	bl	8001dd0 <ADC_Disable>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d102      	bne.n	8001628 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001622:	2308      	movs	r3, #8
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e02e      	b.n	8001686 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001628:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_ADC_PollForConversion+0x178>)
 800162a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2b00      	cmp	r3, #0
 8001636:	d112      	bne.n	800165e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11d      	bne.n	8001682 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e08d      	b.n	800177a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0220 	orr.w	r2, r3, #32
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07b      	b.n	800177a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001682:	230c      	movs	r3, #12
 8001684:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800168e:	f7ff fd65 	bl	800115c <HAL_GetTick>
 8001692:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001694:	e021      	b.n	80016da <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d01d      	beq.n	80016da <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d007      	beq.n	80016b4 <HAL_ADC_PollForConversion+0xa8>
 80016a4:	f7ff fd5a 	bl	800115c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d212      	bcs.n	80016da <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e04f      	b.n	800177a <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0d6      	beq.n	8001696 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d131      	bne.n	8001766 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12c      	bne.n	8001766 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b08      	cmp	r3, #8
 8001718:	d125      	bne.n	8001766 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d112      	bne.n	800174e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d112      	bne.n	8001766 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
 800174c:	e00b      	b.n	8001766 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f043 0220 	orr.w	r2, r3, #32
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	50000300 	.word	0x50000300

08001788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b09b      	sub	sp, #108	; 0x6c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x22>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e295      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x54e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8279 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d81c      	bhi.n	8001820 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	461a      	mov	r2, r3
 80017fa:	231f      	movs	r3, #31
 80017fc:	4093      	lsls	r3, r2
 80017fe:	43db      	mvns	r3, r3
 8001800:	4019      	ands	r1, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
 800181e:	e063      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d81e      	bhi.n	8001866 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	3b1e      	subs	r3, #30
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	4019      	ands	r1, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	3b1e      	subs	r3, #30
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
 8001864:	e040      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b0e      	cmp	r3, #14
 800186c:	d81e      	bhi.n	80018ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3b3c      	subs	r3, #60	; 0x3c
 8001882:	221f      	movs	r2, #31
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	3b3c      	subs	r3, #60	; 0x3c
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
 80018aa:	e01d      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	3b5a      	subs	r3, #90	; 0x5a
 80018c0:	221f      	movs	r2, #31
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4019      	ands	r1, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3b5a      	subs	r3, #90	; 0x5a
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80e5 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	d91c      	bls.n	800193a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6999      	ldr	r1, [r3, #24]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	3b1e      	subs	r3, #30
 8001912:	2207      	movs	r2, #7
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4019      	ands	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6898      	ldr	r0, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3b1e      	subs	r3, #30
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	e019      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	3b01      	subs	r3, #1
 800198c:	2b03      	cmp	r3, #3
 800198e:	d84f      	bhi.n	8001a30 <HAL_ADC_ConfigChannel+0x28c>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_ADC_ConfigChannel+0x1f4>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019cb 	.word	0x080019cb
 80019a0:	080019ed 	.word	0x080019ed
 80019a4:	08001a0f 	.word	0x08001a0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <HAL_ADC_ConfigChannel+0x468>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0691      	lsls	r1, r2, #26
 80019b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ba:	430a      	orrs	r2, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019c8:	e07b      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019d0:	4b8e      	ldr	r3, [pc, #568]	; (8001c0c <HAL_ADC_ConfigChannel+0x468>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	0691      	lsls	r1, r2, #26
 80019da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019dc:	430a      	orrs	r2, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ea:	e06a      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019f2:	4b86      	ldr	r3, [pc, #536]	; (8001c0c <HAL_ADC_ConfigChannel+0x468>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	0691      	lsls	r1, r2, #26
 80019fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019fe:	430a      	orrs	r2, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a0c:	e059      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a14:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <HAL_ADC_ConfigChannel+0x468>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	0691      	lsls	r1, r2, #26
 8001a1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a20:	430a      	orrs	r2, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a2e:	e048      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	069b      	lsls	r3, r3, #26
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	069b      	lsls	r3, r3, #26
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	069b      	lsls	r3, r3, #26
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001abe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ac0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x33e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x33e>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x340>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 80fe 	bne.w	8001ce6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d00f      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b10:	e049      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d91c      	bls.n	8001b6e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6999      	ldr	r1, [r3, #24]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3b1b      	subs	r3, #27
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4019      	ands	r1, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6898      	ldr	r0, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b1b      	subs	r3, #27
 8001b60:	fa00 f203 	lsl.w	r2, r0, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	e01b      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6959      	ldr	r1, [r3, #20]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	2207      	movs	r2, #7
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6898      	ldr	r0, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_ADC_ConfigChannel+0x46c>)
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bc2:	2b11      	cmp	r3, #17
 8001bc4:	d105      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	f040 8085 	bne.w	8001ce6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d17e      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10c      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x470>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x470>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e004      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x472>
 8001c0c:	83fff000 	.word	0x83fff000
 8001c10:	50000300 	.word	0x50000300
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d150      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x498>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x498>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x49a>
 8001c3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d13c      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d11d      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x4e2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c52:	d118      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_ADC_ConfigChannel+0x55c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_ADC_ConfigChannel+0x560>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c84:	e02e      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b11      	cmp	r3, #17
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x502>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ca4:	e01e      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d11a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cba:	e013      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cce:	e00a      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ce4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	376c      	adds	r7, #108	; 0x6c
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200003f8 	.word	0x200003f8
 8001d04:	431bde83 	.word	0x431bde83

08001d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <ADC_Enable+0x2c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <ADC_Enable+0x2c>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <ADC_Enable+0x2e>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d143      	bne.n	8001dc2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <ADC_Enable+0xc4>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e02f      	b.n	8001dc4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d74:	f7ff f9f2 	bl	800115c <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d7a:	e01b      	b.n	8001db4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d7c:	f7ff f9ee 	bl	800115c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d914      	bls.n	8001db4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d00d      	beq.n	8001db4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d1dc      	bne.n	8001d7c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	8000003f 	.word	0x8000003f

08001dd0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d108      	bne.n	8001dfc <ADC_Disable+0x2c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <ADC_Disable+0x2c>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <ADC_Disable+0x2e>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d047      	beq.n	8001e92 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030d 	and.w	r3, r3, #13
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10f      	bne.n	8001e30 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0202 	orr.w	r2, r2, #2
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2203      	movs	r2, #3
 8001e26:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f998 	bl	800115c <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e2e:	e029      	b.n	8001e84 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e023      	b.n	8001e94 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e4c:	f7ff f986 	bl	800115c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d914      	bls.n	8001e84 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10d      	bne.n	8001e84 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f043 0210 	orr.w	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e007      	b.n	8001e94 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d0dc      	beq.n	8001e4c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 809b 	beq.w	8001ff8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed0:	d12a      	bne.n	8001f28 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d126      	bne.n	8001f28 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d122      	bne.n	8001f28 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ee6:	e014      	b.n	8001f12 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4a46      	ldr	r2, [pc, #280]	; (8002004 <ADC_ConversionStop+0x168>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d90d      	bls.n	8001f0c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e076      	b.n	8001ffa <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d1e3      	bne.n	8001ee8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b60      	cmp	r3, #96	; 0x60
 8001f2c:	d015      	beq.n	8001f5a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d10e      	bne.n	8001f5a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0210 	orr.w	r2, r2, #16
 8001f58:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d015      	beq.n	8001f8c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d10e      	bne.n	8001f8c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b60      	cmp	r3, #96	; 0x60
 8001f90:	d005      	beq.n	8001f9e <ADC_ConversionStop+0x102>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b6c      	cmp	r3, #108	; 0x6c
 8001f96:	d105      	bne.n	8001fa4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001f98:	230c      	movs	r3, #12
 8001f9a:	617b      	str	r3, [r7, #20]
        break;
 8001f9c:	e005      	b.n	8001faa <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	617b      	str	r3, [r7, #20]
        break;
 8001fa2:	e002      	b.n	8001faa <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
        break;
 8001fa8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001faa:	f7ff f8d7 	bl	800115c <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001fb0:	e01b      	b.n	8001fea <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001fb2:	f7ff f8d3 	bl	800115c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b0b      	cmp	r3, #11
 8001fbe:	d914      	bls.n	8001fea <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e007      	b.n	8001ffa <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1dc      	bne.n	8001fb2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	000993ff 	.word	0x000993ff

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e14e      	b.n	80024da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8140 	beq.w	80024d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d017      	beq.n	800230a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d123      	bne.n	800235e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 809a 	beq.w	80024d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_GPIO_Init+0x2cc>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_GPIO_Init+0x2d0>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023e2:	d013      	beq.n	800240c <HAL_GPIO_Init+0x1e0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a46      	ldr	r2, [pc, #280]	; (8002500 <HAL_GPIO_Init+0x2d4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00d      	beq.n	8002408 <HAL_GPIO_Init+0x1dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a45      	ldr	r2, [pc, #276]	; (8002504 <HAL_GPIO_Init+0x2d8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0x1d8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a44      	ldr	r2, [pc, #272]	; (8002508 <HAL_GPIO_Init+0x2dc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_GPIO_Init+0x1d4>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002400:	2305      	movs	r3, #5
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1e2>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2d0>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_GPIO_Init+0x2e0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_GPIO_Init+0x2e0>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2e0>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f aea9 	bne.w	800223c <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e002      	b.n	8002534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e081      	b.n	8002656 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fc4e 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e006      	b.n	80025c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d104      	bne.n	80025da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	461a      	mov	r2, r3
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
 8002670:	4613      	mov	r3, r2
 8002672:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b20      	cmp	r3, #32
 800267e:	f040 80da 	bne.w	8002836 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_I2C_Master_Transmit+0x30>
 800268c:	2302      	movs	r3, #2
 800268e:	e0d3      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fd60 	bl	800115c <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2319      	movs	r3, #25
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8f0 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0be      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2210      	movs	r2, #16
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2bff      	cmp	r3, #255	; 0xff
 80026ea:	d90e      	bls.n	800270a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	22ff      	movs	r2, #255	; 0xff
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	8979      	ldrh	r1, [r7, #10]
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_I2C_Master_Transmit+0x1e0>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fa7e 	bl	8002c04 <I2C_TransferConfig>
 8002708:	e06c      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b48      	ldr	r3, [pc, #288]	; (8002840 <HAL_I2C_Master_Transmit+0x1e0>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa6d 	bl	8002c04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800272a:	e05b      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8fc 	bl	800292e <I2C_WaitOnTXISFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e07b      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d034      	beq.n	80027e4 <HAL_I2C_Master_Transmit+0x184>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d130      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f87f 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04d      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2bff      	cmp	r3, #255	; 0xff
 80027a4:	d90e      	bls.n	80027c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fa21 	bl	8002c04 <I2C_TransferConfig>
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fa10 	bl	8002c04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d19e      	bne.n	800272c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6a39      	ldr	r1, [r7, #32]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f8e2 	bl	80029bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e01a      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_I2C_Master_Transmit+0x1e4>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	80002000 	.word	0x80002000
 8002844:	fe00e800 	.word	0xfe00e800

08002848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d103      	bne.n	8002866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d007      	beq.n	8002884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	619a      	str	r2, [r3, #24]
  }
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a0:	e031      	b.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d02d      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fe fc57 	bl	800115c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d122      	bne.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d113      	bne.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	429a      	cmp	r2, r3
 8002922:	d0be      	beq.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800293a:	e033      	b.n	80029a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f87f 	bl	8002a44 <I2C_IsErrorOccurred>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e031      	b.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d025      	beq.n	80029a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002958:	f7fe fc00 	bl	800115c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	d302      	bcc.n	800296e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11a      	bne.n	80029a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d013      	beq.n	80029a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e007      	b.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d1c4      	bne.n	800293c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c8:	e02f      	b.n	8002a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f838 	bl	8002a44 <I2C_IsErrorOccurred>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02d      	b.n	8002a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe fbbd 	bl	800115c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11a      	bne.n	8002a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d013      	beq.n	8002a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e007      	b.n	8002a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d1c8      	bne.n	80029ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d068      	beq.n	8002b42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2210      	movs	r2, #16
 8002a76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a78:	e049      	b.n	8002b0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d045      	beq.n	8002b0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fb6b 	bl	800115c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_IsErrorOccurred+0x54>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d13a      	bne.n	8002b0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aaa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aba:	d121      	bne.n	8002b00 <I2C_IsErrorOccurred+0xbc>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac2:	d01d      	beq.n	8002b00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d01a      	beq.n	8002b00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ada:	f7fe fb3f 	bl	800115c <HAL_GetTick>
 8002ade:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae0:	e00e      	b.n	8002b00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ae2:	f7fe fb3b 	bl	800115c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b19      	cmp	r3, #25
 8002aee:	d907      	bls.n	8002b00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f043 0320 	orr.w	r3, r3, #32
 8002af6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002afe:	e006      	b.n	8002b0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d1e9      	bne.n	8002ae2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d003      	beq.n	8002b24 <I2C_IsErrorOccurred+0xe0>
 8002b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0aa      	beq.n	8002a7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2220      	movs	r2, #32
 8002b32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01c      	beq.n	8002bf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff fe45 	bl	8002848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <I2C_IsErrorOccurred+0x1bc>)
 8002bca:	400b      	ands	r3, r1
 8002bcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	fe00e800 	.word	0xfe00e800

08002c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	4613      	mov	r3, r2
 8002c14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c1c:	7a7b      	ldrb	r3, [r7, #9]
 8002c1e:	041b      	lsls	r3, r3, #16
 8002c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	0d5b      	lsrs	r3, r3, #21
 8002c3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <I2C_TransferConfig+0x60>)
 8002c44:	430b      	orrs	r3, r1
 8002c46:	43db      	mvns	r3, r3
 8002c48:	ea02 0103 	and.w	r1, r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	03ff63ff 	.word	0x03ff63ff

08002c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d138      	bne.n	8002cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e032      	b.n	8002cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d139      	bne.n	8002d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e033      	b.n	8002d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2224      	movs	r2, #36	; 0x24
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f001 b823 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 817d 	beq.w	80030ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dd4:	4bbc      	ldr	r3, [pc, #752]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d00c      	beq.n	8002dfa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de0:	4bb9      	ldr	r3, [pc, #740]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d15c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x10e>
 8002dec:	4bb6      	ldr	r3, [pc, #728]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d155      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x10e>
 8002dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x94>
 8002e26:	4ba8      	ldr	r3, [pc, #672]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e015      	b.n	8002e58 <HAL_RCC_OscConfig+0xc0>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e54:	4b9c      	ldr	r3, [pc, #624]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e64:	fa92 f2a2 	rbit	r2, r2
 8002e68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002e6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002e70:	fab2 f282 	clz	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f042 0220 	orr.w	r2, r2, #32
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f002 021f 	and.w	r2, r2, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 811f 	beq.w	80030cc <HAL_RCC_OscConfig+0x334>
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8116 	bne.w	80030cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f000 bfaf 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12e>
 8002eb8:	4b83      	ldr	r3, [pc, #524]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a82      	ldr	r2, [pc, #520]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e036      	b.n	8002f34 <HAL_RCC_OscConfig+0x19c>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x158>
 8002ed6:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e021      	b.n	8002f34 <HAL_RCC_OscConfig+0x19c>
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x184>
 8002f02:	4b71      	ldr	r3, [pc, #452]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a70      	ldr	r2, [pc, #448]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6e      	ldr	r3, [pc, #440]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6d      	ldr	r2, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x19c>
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a66      	ldr	r2, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f34:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f023 020f 	bic.w	r2, r3, #15
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	495f      	ldr	r1, [pc, #380]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d059      	beq.n	8003012 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f8fd 	bl	800115c <HAL_GetTick>
 8002f62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe f8f8 	bl	800115c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d902      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	f000 bf43 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 8002f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x218>
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x244>
 8002fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fcc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002fe4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ff0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ff4:	fab2 f282 	clz	r2, r2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f002 021f 	and.w	r2, r2, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ab      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1d0>
 8003010:	e05d      	b.n	80030ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe f8a3 	bl	800115c <HAL_GetTick>
 8003016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe f89e 	bl	800115c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d902      	bls.n	8003032 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	f000 bee9 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003036:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003046:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_OscConfig+0x2cc>
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e015      	b.n	8003090 <HAL_RCC_OscConfig+0x2f8>
 8003064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003068:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800307c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003080:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_RCC_OscConfig+0x330>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003094:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003098:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ab      	bne.n	800301c <HAL_RCC_OscConfig+0x284>
 80030c4:	e003      	b.n	80030ce <HAL_RCC_OscConfig+0x336>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 817d 	beq.w	80033de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030e4:	4ba6      	ldr	r3, [pc, #664]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030f0:	4ba3      	ldr	r3, [pc, #652]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d172      	bne.n	80031e2 <HAL_RCC_OscConfig+0x44a>
 80030fc:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d16c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x44a>
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800311a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0x3a0>
 8003132:	4b93      	ldr	r3, [pc, #588]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e013      	b.n	8003160 <HAL_RCC_OscConfig+0x3c8>
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003150:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800315c:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2202      	movs	r2, #2
 8003162:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003166:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800316a:	fa92 f2a2 	rbit	r2, r2
 800316e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003172:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003176:	fab2 f282 	clz	r2, r2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	f042 0220 	orr.w	r2, r2, #32
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f002 021f 	and.w	r2, r2, #31
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f202 	lsl.w	r2, r1, r2
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x410>
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 be2e 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	21f8      	movs	r1, #248	; 0xf8
 80031be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031c6:	fa91 f1a1 	rbit	r1, r1
 80031ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031d2:	fab1 f181 	clz	r1, r1
 80031d6:	b2c9      	uxtb	r1, r1
 80031d8:	408b      	lsls	r3, r1
 80031da:	4969      	ldr	r1, [pc, #420]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e0:	e0fd      	b.n	80033de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8088 	beq.w	8003304 <HAL_RCC_OscConfig+0x56c>
 80031f4:	2301      	movs	r3, #1
 80031f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003206:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003214:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	461a      	mov	r2, r3
 800321c:	2301      	movs	r3, #1
 800321e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd ff9c 	bl	800115c <HAL_GetTick>
 8003224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322a:	f7fd ff97 	bl	800115c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	f000 bde2 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003240:	2302      	movs	r3, #2
 8003242:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003252:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_RCC_OscConfig+0x4d8>
 800326a:	4b45      	ldr	r3, [pc, #276]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e013      	b.n	8003298 <HAL_RCC_OscConfig+0x500>
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003282:	2302      	movs	r3, #2
 8003284:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003288:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800329e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0af      	beq.n	800322a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	21f8      	movs	r1, #248	; 0xf8
 80032e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032e8:	fa91 f1a1 	rbit	r1, r1
 80032ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032f4:	fab1 f181 	clz	r1, r1
 80032f8:	b2c9      	uxtb	r1, r1
 80032fa:	408b      	lsls	r3, r1
 80032fc:	4920      	ldr	r1, [pc, #128]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
 8003302:	e06c      	b.n	80033de <HAL_RCC_OscConfig+0x646>
 8003304:	2301      	movs	r3, #1
 8003306:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003316:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003324:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	2300      	movs	r3, #0
 800332e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fd ff14 	bl	800115c <HAL_GetTick>
 8003334:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fd ff0f 	bl	800115c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d902      	bls.n	8003350 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	f000 bd5a 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003350:	2302      	movs	r3, #2
 8003352:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d104      	bne.n	8003384 <HAL_RCC_OscConfig+0x5ec>
 800337a:	4b01      	ldr	r3, [pc, #4]	; (8003380 <HAL_RCC_OscConfig+0x5e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e015      	b.n	80033ac <HAL_RCC_OscConfig+0x614>
 8003380:	40021000 	.word	0x40021000
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003396:	2302      	movs	r3, #2
 8003398:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800339c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033a8:	4bc8      	ldr	r3, [pc, #800]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2202      	movs	r2, #2
 80033ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033b6:	fa92 f2a2 	rbit	r2, r2
 80033ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0220 	orr.w	r2, r2, #32
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ad      	bne.n	800333a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8110 	beq.w	8003614 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d079      	beq.n	80034f8 <HAL_RCC_OscConfig+0x760>
 8003404:	2301      	movs	r3, #1
 8003406:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	4bab      	ldr	r3, [pc, #684]	; (80036d0 <HAL_RCC_OscConfig+0x938>)
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	461a      	mov	r2, r3
 800342a:	2301      	movs	r3, #1
 800342c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fd fe95 	bl	800115c <HAL_GetTick>
 8003432:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003438:	f7fd fe90 	bl	800115c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d902      	bls.n	800344e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f000 bcdb 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003468:	2202      	movs	r2, #2
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800348c:	2202      	movs	r2, #2
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034b4:	2102      	movs	r1, #2
 80034b6:	6019      	str	r1, [r3, #0]
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f1a3 	rbit	r1, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034ce:	6019      	str	r1, [r3, #0]
  return result;
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0a0      	beq.n	8003438 <HAL_RCC_OscConfig+0x6a0>
 80034f6:	e08d      	b.n	8003614 <HAL_RCC_OscConfig+0x87c>
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800351a:	601a      	str	r2, [r3, #0]
  return result;
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003524:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_OscConfig+0x938>)
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	461a      	mov	r2, r3
 8003536:	2300      	movs	r3, #0
 8003538:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fd fe0f 	bl	800115c <HAL_GetTick>
 800353e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fd fe0a 	bl	800115c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d902      	bls.n	800355a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	f000 bc55 	b.w	8003e04 <HAL_RCC_OscConfig+0x106c>
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003562:	2202      	movs	r2, #2
 8003564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035aa:	2202      	movs	r2, #2
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fa93 f2a3 	rbit	r2, r3
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 80035c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035d2:	2102      	movs	r1, #2
 80035d4:	6019      	str	r1, [r3, #0]
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f1a3 	rbit	r1, r3
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035ec:	6019      	str	r1, [r3, #0]
  return result;
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d197      	bne.n	8003544 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 81a1 	beq.w	800396c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	61d3      	str	r3, [r2, #28]
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003662:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x93c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11a      	bne.n	80036ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <HAL_RCC_OscConfig+0x93c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <HAL_RCC_OscConfig+0x93c>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fd fd6b 	bl	800115c <HAL_GetTick>
 8003686:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	e009      	b.n	80036a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fd fd66 	bl	800115c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	; 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e3b1      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x93c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ef      	beq.n	800368c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_OscConfig+0x940>
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a02      	ldr	r2, [pc, #8]	; (80036cc <HAL_RCC_OscConfig+0x934>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e03c      	b.n	8003744 <HAL_RCC_OscConfig+0x9ac>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	10908120 	.word	0x10908120
 80036d4:	40007000 	.word	0x40007000
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x96a>
 80036e8:	4bc1      	ldr	r3, [pc, #772]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4ac0      	ldr	r2, [pc, #768]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	4bbe      	ldr	r3, [pc, #760]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4abd      	ldr	r2, [pc, #756]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e020      	b.n	8003744 <HAL_RCC_OscConfig+0x9ac>
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b05      	cmp	r3, #5
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x994>
 8003712:	4bb7      	ldr	r3, [pc, #732]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4ab6      	ldr	r2, [pc, #728]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	6213      	str	r3, [r2, #32]
 800371e:	4bb4      	ldr	r3, [pc, #720]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4ab3      	ldr	r2, [pc, #716]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6213      	str	r3, [r2, #32]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0x9ac>
 800372c:	4bb0      	ldr	r3, [pc, #704]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4aaf      	ldr	r2, [pc, #700]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	4bad      	ldr	r3, [pc, #692]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4aac      	ldr	r2, [pc, #688]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 800373e:	f023 0304 	bic.w	r3, r3, #4
 8003742:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8081 	beq.w	8003858 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fd fd01 	bl	800115c <HAL_GetTick>
 800375a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fd fcfc 	bl	800115c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e345      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003780:	2202      	movs	r2, #2
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037a4:	2202      	movs	r2, #2
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037be:	601a      	str	r2, [r3, #0]
  return result;
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d102      	bne.n	80037e4 <HAL_RCC_OscConfig+0xa4c>
 80037de:	4b84      	ldr	r3, [pc, #528]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	e013      	b.n	800380c <HAL_RCC_OscConfig+0xa74>
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003810:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003814:	2102      	movs	r1, #2
 8003816:	6011      	str	r1, [r2, #0]
 8003818:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	fa92 f1a2 	rbit	r1, r2
 8003826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800382a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800382e:	6011      	str	r1, [r2, #0]
  return result;
 8003830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003834:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d084      	beq.n	8003760 <HAL_RCC_OscConfig+0x9c8>
 8003856:	e07f      	b.n	8003958 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fd fc80 	bl	800115c <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	e00b      	b.n	800387a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fc7b 	bl	800115c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e2c4      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003882:	2202      	movs	r2, #2
 8003884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038a6:	2202      	movs	r2, #2
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038c0:	601a      	str	r2, [r3, #0]
  return result;
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_OscConfig+0xb4e>
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	e013      	b.n	800390e <HAL_RCC_OscConfig+0xb76>
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003912:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003916:	2102      	movs	r1, #2
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	fa92 f1a2 	rbit	r1, r2
 8003928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003930:	6011      	str	r1, [r2, #0]
  return result;
 8003932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003936:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d184      	bne.n	8003862 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003958:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8242 	beq.w	8003e02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_RCC_OscConfig+0xc58>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	f000 8213 	beq.w	8003db2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b02      	cmp	r3, #2
 800399a:	f040 8162 	bne.w	8003c62 <HAL_RCC_OscConfig+0xeca>
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	fa93 f2a3 	rbit	r2, r3
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039c2:	601a      	str	r2, [r3, #0]
  return result;
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd fbba 	bl	800115c <HAL_GetTick>
 80039e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ec:	e00c      	b.n	8003a08 <HAL_RCC_OscConfig+0xc70>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fd fbb2 	bl	800115c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1fd      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a2c:	601a      	str	r2, [r3, #0]
  return result;
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_OscConfig+0xcba>
 8003a4c:	4bb0      	ldr	r3, [pc, #704]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	e027      	b.n	8003aa2 <HAL_RCC_OscConfig+0xd0a>
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	4b9c      	ldr	r3, [pc, #624]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003aaa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aae:	6011      	str	r1, [r2, #0]
 8003ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	fa92 f1a2 	rbit	r1, r2
 8003abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ac6:	6011      	str	r1, [r2, #0]
  return result;
 8003ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003acc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	fab2 f282 	clz	r2, r2
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f042 0220 	orr.w	r2, r2, #32
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f002 021f 	and.w	r2, r2, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d182      	bne.n	80039f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	497f      	ldr	r1, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b3a:	601a      	str	r2, [r3, #0]
  return result;
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	2301      	movs	r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fafe 	bl	800115c <HAL_GetTick>
 8003b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b64:	e009      	b.n	8003b7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fd faf9 	bl	800115c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e144      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	fa93 f2a3 	rbit	r2, r3
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b9e:	601a      	str	r2, [r3, #0]
  return result;
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xe2c>
 8003bbe:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	e027      	b.n	8003c14 <HAL_RCC_OscConfig+0xe7c>
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	fa93 f2a3 	rbit	r2, r3
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	fa92 f1a2 	rbit	r1, r2
 8003c30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c38:	6011      	str	r1, [r2, #0]
  return result;
 8003c3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f002 021f 	and.w	r2, r2, #31
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d082      	beq.n	8003b66 <HAL_RCC_OscConfig+0xdce>
 8003c60:	e0cf      	b.n	8003e02 <HAL_RCC_OscConfig+0x106a>
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	fa93 f2a3 	rbit	r2, r3
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c86:	601a      	str	r2, [r3, #0]
  return result;
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fa58 	bl	800115c <HAL_GetTick>
 8003cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb0:	e009      	b.n	8003cc6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fa53 	bl	800115c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e09e      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cea:	601a      	str	r2, [r3, #0]
  return result;
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d104      	bne.n	8003d14 <HAL_RCC_OscConfig+0xf7c>
 8003d0a:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <HAL_RCC_OscConfig+0xf78>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	e029      	b.n	8003d64 <HAL_RCC_OscConfig+0xfcc>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x1078>)
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	fa92 f1a2 	rbit	r1, r2
 8003d80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d88:	6011      	str	r1, [r2, #0]
  return result;
 8003d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f042 0220 	orr.w	r2, r2, #32
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f002 021f 	and.w	r2, r2, #31
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f202 	lsl.w	r2, r1, r2
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d180      	bne.n	8003cb2 <HAL_RCC_OscConfig+0xf1a>
 8003db0:	e027      	b.n	8003e02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01e      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_OscConfig+0x1078>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003de6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b09e      	sub	sp, #120	; 0x78
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e162      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b90      	ldr	r3, [pc, #576]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	498b      	ldr	r1, [pc, #556]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e14a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b82      	ldr	r3, [pc, #520]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	497f      	ldr	r1, [pc, #508]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80dc 	beq.w	8004040 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d13c      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xf6>
 8003e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_ClockConfig+0xa6>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	e00f      	b.n	8003eda <HAL_RCC_ClockConfig+0xc6>
 8003eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ede:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee2:	fa92 f2a2 	rbit	r2, r2
 8003ee6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eea:	fab2 f282 	clz	r2, r2
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f042 0220 	orr.w	r2, r2, #32
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f002 021f 	and.w	r2, r2, #31
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f202 	lsl.w	r2, r1, r2
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d17b      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0f3      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d13c      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x178>
 8003f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x128>
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e00f      	b.n	8003f5c <HAL_RCC_ClockConfig+0x148>
 8003f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f60:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f64:	fa92 f2a2 	rbit	r2, r2
 8003f68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6c:	fab2 f282 	clz	r2, r2
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f042 0220 	orr.w	r2, r2, #32
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	f002 021f 	and.w	r2, r2, #31
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b2      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
 8003fae:	4b31      	ldr	r3, [pc, #196]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	e00d      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1bc>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	61ba      	str	r2, [r7, #24]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	fa92 f2a2 	rbit	r2, r2
 8003fda:	617a      	str	r2, [r7, #20]
  return result;
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	fab2 f282 	clz	r2, r2
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f042 0220 	orr.w	r2, r2, #32
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	f002 021f 	and.w	r2, r2, #31
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e079      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	491a      	ldr	r1, [pc, #104]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004010:	f7fd f8a4 	bl	800115c <HAL_GetTick>
 8004014:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	e00a      	b.n	800402e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7fd f8a0 	bl	800115c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e061      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 020c 	and.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	429a      	cmp	r2, r3
 800403e:	d1eb      	bne.n	8004018 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d214      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 0207 	bic.w	r2, r3, #7
 8004056:	4906      	ldr	r1, [pc, #24]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e040      	b.n	80040f2 <HAL_RCC_ClockConfig+0x2de>
 8004070:	40022000 	.word	0x40022000
 8004074:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_ClockConfig+0x2e8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	491a      	ldr	r1, [pc, #104]	; (80040fc <HAL_RCC_ClockConfig+0x2e8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_RCC_ClockConfig+0x2e8>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4912      	ldr	r1, [pc, #72]	; (80040fc <HAL_RCC_ClockConfig+0x2e8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040b6:	f000 f829 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040ba:	4601      	mov	r1, r0
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_ClockConfig+0x2e8>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c4:	22f0      	movs	r2, #240	; 0xf0
 80040c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	fa92 f2a2 	rbit	r2, r2
 80040ce:	60fa      	str	r2, [r7, #12]
  return result;
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	fab2 f282 	clz	r2, r2
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	40d3      	lsrs	r3, r2
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x2ec>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	fa21 f303 	lsr.w	r3, r1, r3
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <HAL_RCC_ClockConfig+0x2f0>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_RCC_ClockConfig+0x2f4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fff2 	bl	80010d4 <HAL_InitTick>
  
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3778      	adds	r7, #120	; 0x78
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	08005ecc 	.word	0x08005ecc
 8004104:	200003f8 	.word	0x200003f8
 8004108:	200003fc 	.word	0x200003fc

0800410c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	b08b      	sub	sp, #44	; 0x2c
 8004110:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b04      	cmp	r3, #4
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x30>
 8004136:	2b08      	cmp	r3, #8
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x36>
 800413a:	e03c      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800413e:	623b      	str	r3, [r7, #32]
      break;
 8004140:	e03c      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004148:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800414c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	fa92 f2a2 	rbit	r2, r2
 8004154:	607a      	str	r2, [r7, #4]
  return result;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	fab2 f282 	clz	r2, r2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	40d3      	lsrs	r3, r2
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	220f      	movs	r2, #15
 8004170:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	fa92 f2a2 	rbit	r2, r2
 8004178:	60fa      	str	r2, [r7, #12]
  return result;
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	40d3      	lsrs	r3, r2
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	fbb2 f2f3 	udiv	r2, r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	e004      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a0c      	ldr	r2, [pc, #48]	; (80041dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	623b      	str	r3, [r7, #32]
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b8:	623b      	str	r3, [r7, #32]
      break;
 80041ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041bc:	6a3b      	ldr	r3, [r7, #32]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	372c      	adds	r7, #44	; 0x2c
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	08005ee4 	.word	0x08005ee4
 80041d8:	08005ef4 	.word	0x08005ef4
 80041dc:	003d0900 	.word	0x003d0900

080041e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200003f8 	.word	0x200003f8

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041fe:	f7ff ffef 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004202:	4601      	mov	r1, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004210:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	fa92 f2a2 	rbit	r2, r2
 8004218:	603a      	str	r2, [r7, #0]
  return result;
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	40d3      	lsrs	r3, r2
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004226:	5cd3      	ldrb	r3, [r2, r3]
 8004228:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	08005edc 	.word	0x08005edc

0800423c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004242:	f7ff ffcd 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004246:	4601      	mov	r1, r0
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004250:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004254:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	fa92 f2a2 	rbit	r2, r2
 800425c:	603a      	str	r2, [r7, #0]
  return result;
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	40d3      	lsrs	r3, r2
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_RCC_GetPCLK2Freq+0x40>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	08005edc 	.word	0x08005edc

08004280 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b092      	sub	sp, #72	; 0x48
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80d4 	beq.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a4:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10e      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	61d3      	str	r3, [r2, #28]
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b45      	ldr	r3, [pc, #276]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fc ff39 	bl	800115c <HAL_GetTick>
 80042ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fc ff35 	bl	800115c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b64      	cmp	r3, #100	; 0x64
 80042fa:	d901      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e14b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004314:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8084 	beq.w	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004328:	429a      	cmp	r2, r3
 800432a:	d07c      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	2301      	movs	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800435e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04b      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fc fee5 	bl	800115c <HAL_GetTick>
 8004392:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fc fee1 	bl	800115c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0f5      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80043ac:	2302      	movs	r3, #2
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	61fb      	str	r3, [r7, #28]
  return result;
 80043c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d108      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043da:	4b01      	ldr	r3, [pc, #4]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	e00d      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
 80043e8:	10908100 	.word	0x10908100
 80043ec:	2302      	movs	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	613a      	str	r2, [r7, #16]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	60fa      	str	r2, [r7, #12]
  return result;
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0b7      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004426:	4b5e      	ldr	r3, [pc, #376]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	495b      	ldr	r1, [pc, #364]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004434:	4313      	orrs	r3, r2
 8004436:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004438:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b57      	ldr	r3, [pc, #348]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4a56      	ldr	r2, [pc, #344]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004458:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	f023 0203 	bic.w	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	494e      	ldr	r1, [pc, #312]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004466:	4313      	orrs	r3, r2
 8004468:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f023 0210 	bic.w	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	4947      	ldr	r1, [pc, #284]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004484:	4313      	orrs	r3, r2
 8004486:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004494:	4b42      	ldr	r3, [pc, #264]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	493f      	ldr	r1, [pc, #252]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f023 0220 	bic.w	r2, r3, #32
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4938      	ldr	r1, [pc, #224]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	4930      	ldr	r1, [pc, #192]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044ee:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4929      	ldr	r1, [pc, #164]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4921      	ldr	r1, [pc, #132]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800451a:	4313      	orrs	r3, r2
 800451c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	491a      	ldr	r1, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004538:	4313      	orrs	r3, r2
 800453a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	4912      	ldr	r1, [pc, #72]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004556:	4313      	orrs	r3, r2
 8004558:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	490b      	ldr	r1, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004574:	4313      	orrs	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004592:	4313      	orrs	r3, r2
 8004594:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3748      	adds	r7, #72	; 0x48
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e049      	b.n	800464a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fc60 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fa9a 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e03b      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0x4e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d004      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0x4e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_TIM_Base_Start_IT+0xa0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d115      	bne.n	80046ce <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_TIM_Base_Start_IT+0xa4>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d015      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d011      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046cc:	e008      	b.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e000      	b.n	80046e2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	00010007 	.word	0x00010007

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0202 	mvn.w	r2, #2
 8004728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9ce 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9c0 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9d1 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0204 	mvn.w	r2, #4
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9a4 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f996 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9a7 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0208 	mvn.w	r2, #8
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2204      	movs	r2, #4
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f97a 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f96c 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f97d 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f950 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f942 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f953 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0201 	mvn.w	r2, #1
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fb fdfe 	bl	800047c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fab0 	bl	8004e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d10e      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d107      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 faa3 	bl	8004e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10e      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d107      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f901 	bl	8004b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b20      	cmp	r3, #32
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0220 	mvn.w	r2, #32
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa63 	bl	8004df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_TIM_ConfigClockSource+0x1c>
 8004952:	2302      	movs	r3, #2
 8004954:	e0b6      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x18a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004974:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004978:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004980:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004992:	d03e      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0xd8>
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	f200 8087 	bhi.w	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	f000 8086 	beq.w	8004ab0 <HAL_TIM_ConfigClockSource+0x176>
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d87f      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049aa:	2b70      	cmp	r3, #112	; 0x70
 80049ac:	d01a      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0xaa>
 80049ae:	2b70      	cmp	r3, #112	; 0x70
 80049b0:	d87b      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049b2:	2b60      	cmp	r3, #96	; 0x60
 80049b4:	d050      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x11e>
 80049b6:	2b60      	cmp	r3, #96	; 0x60
 80049b8:	d877      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049ba:	2b50      	cmp	r3, #80	; 0x50
 80049bc:	d03c      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0xfe>
 80049be:	2b50      	cmp	r3, #80	; 0x50
 80049c0:	d873      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d058      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x13e>
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d86f      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049ca:	2b30      	cmp	r3, #48	; 0x30
 80049cc:	d064      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x15e>
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	d86b      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d060      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x15e>
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d867      	bhi.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d05c      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x15e>
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d05a      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x15e>
 80049e2:	e062      	b.n	8004aaa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	f000 f97a 	bl	8004cec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
      break;
 8004a10:	e04f      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	f000 f963 	bl	8004cec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a34:	609a      	str	r2, [r3, #8]
      break;
 8004a36:	e03c      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a44:	461a      	mov	r2, r3
 8004a46:	f000 f8d7 	bl	8004bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2150      	movs	r1, #80	; 0x50
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f930 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 8004a56:	e02c      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a64:	461a      	mov	r2, r3
 8004a66:	f000 f8f6 	bl	8004c56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2160      	movs	r1, #96	; 0x60
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f920 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 8004a76:	e01c      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a84:	461a      	mov	r2, r3
 8004a86:	f000 f8b7 	bl	8004bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2140      	movs	r1, #64	; 0x40
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f910 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 8004a96:	e00c      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 f907 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e003      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ab0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <TIM_Base_SetConfig+0xcc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x20>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a25      	ldr	r2, [pc, #148]	; (8004be8 <TIM_Base_SetConfig+0xcc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <TIM_Base_SetConfig+0x5a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d00b      	beq.n	8004b76 <TIM_Base_SetConfig+0x5a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <TIM_Base_SetConfig+0xd0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_Base_SetConfig+0x5a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <TIM_Base_SetConfig+0xd4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_Base_SetConfig+0x5a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <TIM_Base_SetConfig+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <TIM_Base_SetConfig+0xcc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0xb0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <TIM_Base_SetConfig+0xd0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <TIM_Base_SetConfig+0xd4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <TIM_Base_SetConfig+0xd8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d103      	bne.n	8004bd4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	615a      	str	r2, [r3, #20]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f023 030a 	bic.w	r3, r3, #10
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0210 	bic.w	r2, r3, #16
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	031b      	lsls	r3, r3, #12
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f043 0307 	orr.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e04f      	b.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d004      	beq.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10c      	bne.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40014000 	.word	0x40014000

08004df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e040      	b.n	8004ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc f83e 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f82c 	bl	8004ed0 <UART_SetConfig>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e022      	b.n	8004ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f956 	bl	800513c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9dd 	bl	8005280 <UART_CheckIdleState>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b8a      	ldr	r3, [pc, #552]	; (8005124 <UART_SetConfig+0x254>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a78      	ldr	r2, [pc, #480]	; (8005128 <UART_SetConfig+0x258>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d120      	bne.n	8004f8e <UART_SetConfig+0xbe>
 8004f4c:	4b77      	ldr	r3, [pc, #476]	; (800512c <UART_SetConfig+0x25c>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d817      	bhi.n	8004f88 <UART_SetConfig+0xb8>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x90>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f83 	.word	0x08004f83
 8004f6c:	08004f77 	.word	0x08004f77
 8004f70:	2300      	movs	r3, #0
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e01d      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f76:	2302      	movs	r3, #2
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e01a      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e017      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f82:	2308      	movs	r3, #8
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e014      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e011      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a67      	ldr	r2, [pc, #412]	; (8005130 <UART_SetConfig+0x260>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <UART_SetConfig+0xce>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e009      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a64      	ldr	r2, [pc, #400]	; (8005134 <UART_SetConfig+0x264>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d102      	bne.n	8004fae <UART_SetConfig+0xde>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e001      	b.n	8004fb2 <UART_SetConfig+0xe2>
 8004fae:	2310      	movs	r3, #16
 8004fb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d15a      	bne.n	8005072 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d827      	bhi.n	8005012 <UART_SetConfig+0x142>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0xf8>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7ff f904 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	61b8      	str	r0, [r7, #24]
        break;
 8004ff2:	e013      	b.n	800501c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7ff f922 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 8004ff8:	61b8      	str	r0, [r7, #24]
        break;
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <UART_SetConfig+0x268>)
 8004ffe:	61bb      	str	r3, [r7, #24]
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7ff f883 	bl	800410c <HAL_RCC_GetSysClockFreq>
 8005006:	61b8      	str	r0, [r7, #24]
        break;
 8005008:	e008      	b.n	800501c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	61bb      	str	r3, [r7, #24]
        break;
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	77bb      	strb	r3, [r7, #30]
        break;
 800501a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d074      	beq.n	800510c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	005a      	lsls	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	d916      	bls.n	800506c <UART_SetConfig+0x19c>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d212      	bcs.n	800506c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f023 030f 	bic.w	r3, r3, #15
 800504e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	b29a      	uxth	r2, r3
 800505c:	89fb      	ldrh	r3, [r7, #14]
 800505e:	4313      	orrs	r3, r2
 8005060:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	89fa      	ldrh	r2, [r7, #14]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	e04f      	b.n	800510c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	77bb      	strb	r3, [r7, #30]
 8005070:	e04c      	b.n	800510c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d828      	bhi.n	80050ca <UART_SetConfig+0x1fa>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x1b0>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	080050cb 	.word	0x080050cb
 8005090:	080050bb 	.word	0x080050bb
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050cb 	.word	0x080050cb
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	080050c3 	.word	0x080050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a4:	f7ff f8a8 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 80050a8:	61b8      	str	r0, [r7, #24]
        break;
 80050aa:	e013      	b.n	80050d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7ff f8c6 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 80050b0:	61b8      	str	r0, [r7, #24]
        break;
 80050b2:	e00f      	b.n	80050d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b4:	4b20      	ldr	r3, [pc, #128]	; (8005138 <UART_SetConfig+0x268>)
 80050b6:	61bb      	str	r3, [r7, #24]
        break;
 80050b8:	e00c      	b.n	80050d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ba:	f7ff f827 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80050be:	61b8      	str	r0, [r7, #24]
        break;
 80050c0:	e008      	b.n	80050d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c6:	61bb      	str	r3, [r7, #24]
        break;
 80050c8:	e004      	b.n	80050d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	77bb      	strb	r3, [r7, #30]
        break;
 80050d2:	bf00      	nop
    }

    if (pclk != 0U)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	085a      	lsrs	r2, r3, #1
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	441a      	add	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	d909      	bls.n	8005108 <UART_SetConfig+0x238>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fa:	d205      	bcs.n	8005108 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e001      	b.n	800510c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005118:	7fbb      	ldrb	r3, [r7, #30]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	efff69f3 	.word	0xefff69f3
 8005128:	40013800 	.word	0x40013800
 800512c:	40021000 	.word	0x40021000
 8005130:	40004400 	.word	0x40004400
 8005134:	40004800 	.word	0x40004800
 8005138:	007a1200 	.word	0x007a1200

0800513c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d10a      	bne.n	8005252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b098      	sub	sp, #96	; 0x60
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005290:	f7fb ff64 	bl	800115c <HAL_GetTick>
 8005294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d12e      	bne.n	8005302 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ac:	2200      	movs	r2, #0
 80052ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f88c 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d021      	beq.n	8005302 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d2:	653b      	str	r3, [r7, #80]	; 0x50
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
 80052de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e062      	b.n	80053c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d149      	bne.n	80053a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f856 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03c      	beq.n	80053a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	623b      	str	r3, [r7, #32]
   return(result);
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
 800534a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800534e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	60fb      	str	r3, [r7, #12]
   return(result);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	64bb      	str	r3, [r7, #72]	; 0x48
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800537c:	61fa      	str	r2, [r7, #28]
 800537e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	617b      	str	r3, [r7, #20]
   return(result);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e011      	b.n	80053c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3758      	adds	r7, #88	; 0x58
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	e049      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d045      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fb feb7 	bl	800115c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <UART_WaitOnFlagUntilTimeout+0x30>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e048      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d031      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d110      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f838 	bl	800549e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2208      	movs	r2, #8
 8005432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e029      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005450:	d111      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f81e 	bl	800549e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d0a6      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800549e:	b480      	push	{r7}
 80054a0:	b095      	sub	sp, #84	; 0x54
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
 80054c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	2b01      	cmp	r3, #1
 8005512:	d118      	bne.n	8005546 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60bb      	str	r3, [r7, #8]
   return(result);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0310 	bic.w	r3, r3, #16
 8005528:	647b      	str	r3, [r7, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	669a      	str	r2, [r3, #104]	; 0x68
}
 800555a:	bf00      	nop
 800555c:	3754      	adds	r7, #84	; 0x54
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <siprintf>:
 8005568:	b40e      	push	{r1, r2, r3}
 800556a:	b500      	push	{lr}
 800556c:	b09c      	sub	sp, #112	; 0x70
 800556e:	ab1d      	add	r3, sp, #116	; 0x74
 8005570:	9002      	str	r0, [sp, #8]
 8005572:	9006      	str	r0, [sp, #24]
 8005574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <siprintf+0x38>)
 800557a:	9107      	str	r1, [sp, #28]
 800557c:	9104      	str	r1, [sp, #16]
 800557e:	4909      	ldr	r1, [pc, #36]	; (80055a4 <siprintf+0x3c>)
 8005580:	f853 2b04 	ldr.w	r2, [r3], #4
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	a902      	add	r1, sp, #8
 800558c:	f000 f992 	bl	80058b4 <_svfiprintf_r>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	b01c      	add	sp, #112	; 0x70
 8005598:	f85d eb04 	ldr.w	lr, [sp], #4
 800559c:	b003      	add	sp, #12
 800559e:	4770      	bx	lr
 80055a0:	20000450 	.word	0x20000450
 80055a4:	ffff0208 	.word	0xffff0208

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000450 	.word	0x20000450

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 fc6a 	bl	8005eb0 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08005f38 	.word	0x08005f38
 8005600:	08005f38 	.word	0x08005f38
 8005604:	08005f38 	.word	0x08005f38
 8005608:	08005f3c 	.word	0x08005f3c

0800560c <__retarget_lock_acquire_recursive>:
 800560c:	4770      	bx	lr

0800560e <__retarget_lock_release_recursive>:
 800560e:	4770      	bx	lr

08005610 <_free_r>:
 8005610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005612:	2900      	cmp	r1, #0
 8005614:	d044      	beq.n	80056a0 <_free_r+0x90>
 8005616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561a:	9001      	str	r0, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f1a1 0404 	sub.w	r4, r1, #4
 8005622:	bfb8      	it	lt
 8005624:	18e4      	addlt	r4, r4, r3
 8005626:	f000 f8df 	bl	80057e8 <__malloc_lock>
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <_free_r+0x94>)
 800562c:	9801      	ldr	r0, [sp, #4]
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	b933      	cbnz	r3, 8005640 <_free_r+0x30>
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	b003      	add	sp, #12
 8005638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800563c:	f000 b8da 	b.w	80057f4 <__malloc_unlock>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d908      	bls.n	8005656 <_free_r+0x46>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	1961      	adds	r1, r4, r5
 8005648:	428b      	cmp	r3, r1
 800564a:	bf01      	itttt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	e7ed      	b.n	8005632 <_free_r+0x22>
 8005656:	461a      	mov	r2, r3
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	b10b      	cbz	r3, 8005660 <_free_r+0x50>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d9fa      	bls.n	8005656 <_free_r+0x46>
 8005660:	6811      	ldr	r1, [r2, #0]
 8005662:	1855      	adds	r5, r2, r1
 8005664:	42a5      	cmp	r5, r4
 8005666:	d10b      	bne.n	8005680 <_free_r+0x70>
 8005668:	6824      	ldr	r4, [r4, #0]
 800566a:	4421      	add	r1, r4
 800566c:	1854      	adds	r4, r2, r1
 800566e:	42a3      	cmp	r3, r4
 8005670:	6011      	str	r1, [r2, #0]
 8005672:	d1e0      	bne.n	8005636 <_free_r+0x26>
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	6053      	str	r3, [r2, #4]
 800567a:	440c      	add	r4, r1
 800567c:	6014      	str	r4, [r2, #0]
 800567e:	e7da      	b.n	8005636 <_free_r+0x26>
 8005680:	d902      	bls.n	8005688 <_free_r+0x78>
 8005682:	230c      	movs	r3, #12
 8005684:	6003      	str	r3, [r0, #0]
 8005686:	e7d6      	b.n	8005636 <_free_r+0x26>
 8005688:	6825      	ldr	r5, [r4, #0]
 800568a:	1961      	adds	r1, r4, r5
 800568c:	428b      	cmp	r3, r1
 800568e:	bf04      	itt	eq
 8005690:	6819      	ldreq	r1, [r3, #0]
 8005692:	685b      	ldreq	r3, [r3, #4]
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	bf04      	itt	eq
 8005698:	1949      	addeq	r1, r1, r5
 800569a:	6021      	streq	r1, [r4, #0]
 800569c:	6054      	str	r4, [r2, #4]
 800569e:	e7ca      	b.n	8005636 <_free_r+0x26>
 80056a0:	b003      	add	sp, #12
 80056a2:	bd30      	pop	{r4, r5, pc}
 80056a4:	200007ec 	.word	0x200007ec

080056a8 <sbrk_aligned>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4e0e      	ldr	r6, [pc, #56]	; (80056e4 <sbrk_aligned+0x3c>)
 80056ac:	460c      	mov	r4, r1
 80056ae:	6831      	ldr	r1, [r6, #0]
 80056b0:	4605      	mov	r5, r0
 80056b2:	b911      	cbnz	r1, 80056ba <sbrk_aligned+0x12>
 80056b4:	f000 fba6 	bl	8005e04 <_sbrk_r>
 80056b8:	6030      	str	r0, [r6, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 fba1 	bl	8005e04 <_sbrk_r>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d00a      	beq.n	80056dc <sbrk_aligned+0x34>
 80056c6:	1cc4      	adds	r4, r0, #3
 80056c8:	f024 0403 	bic.w	r4, r4, #3
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d007      	beq.n	80056e0 <sbrk_aligned+0x38>
 80056d0:	1a21      	subs	r1, r4, r0
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 fb96 	bl	8005e04 <_sbrk_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	d101      	bne.n	80056e0 <sbrk_aligned+0x38>
 80056dc:	f04f 34ff 	mov.w	r4, #4294967295
 80056e0:	4620      	mov	r0, r4
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	200007f0 	.word	0x200007f0

080056e8 <_malloc_r>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	1ccd      	adds	r5, r1, #3
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	4607      	mov	r7, r0
 80056fe:	db01      	blt.n	8005704 <_malloc_r+0x1c>
 8005700:	42a9      	cmp	r1, r5
 8005702:	d905      	bls.n	8005710 <_malloc_r+0x28>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	2600      	movs	r6, #0
 800570a:	4630      	mov	r0, r6
 800570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057e4 <_malloc_r+0xfc>
 8005714:	f000 f868 	bl	80057e8 <__malloc_lock>
 8005718:	f8d8 3000 	ldr.w	r3, [r8]
 800571c:	461c      	mov	r4, r3
 800571e:	bb5c      	cbnz	r4, 8005778 <_malloc_r+0x90>
 8005720:	4629      	mov	r1, r5
 8005722:	4638      	mov	r0, r7
 8005724:	f7ff ffc0 	bl	80056a8 <sbrk_aligned>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	4604      	mov	r4, r0
 800572c:	d155      	bne.n	80057da <_malloc_r+0xf2>
 800572e:	f8d8 4000 	ldr.w	r4, [r8]
 8005732:	4626      	mov	r6, r4
 8005734:	2e00      	cmp	r6, #0
 8005736:	d145      	bne.n	80057c4 <_malloc_r+0xdc>
 8005738:	2c00      	cmp	r4, #0
 800573a:	d048      	beq.n	80057ce <_malloc_r+0xe6>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	4631      	mov	r1, r6
 8005740:	4638      	mov	r0, r7
 8005742:	eb04 0903 	add.w	r9, r4, r3
 8005746:	f000 fb5d 	bl	8005e04 <_sbrk_r>
 800574a:	4581      	cmp	r9, r0
 800574c:	d13f      	bne.n	80057ce <_malloc_r+0xe6>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	1a6d      	subs	r5, r5, r1
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ffa7 	bl	80056a8 <sbrk_aligned>
 800575a:	3001      	adds	r0, #1
 800575c:	d037      	beq.n	80057ce <_malloc_r+0xe6>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	442b      	add	r3, r5
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	f8d8 3000 	ldr.w	r3, [r8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d038      	beq.n	80057de <_malloc_r+0xf6>
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	42a2      	cmp	r2, r4
 8005770:	d12b      	bne.n	80057ca <_malloc_r+0xe2>
 8005772:	2200      	movs	r2, #0
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	e00f      	b.n	8005798 <_malloc_r+0xb0>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	1b52      	subs	r2, r2, r5
 800577c:	d41f      	bmi.n	80057be <_malloc_r+0xd6>
 800577e:	2a0b      	cmp	r2, #11
 8005780:	d917      	bls.n	80057b2 <_malloc_r+0xca>
 8005782:	1961      	adds	r1, r4, r5
 8005784:	42a3      	cmp	r3, r4
 8005786:	6025      	str	r5, [r4, #0]
 8005788:	bf18      	it	ne
 800578a:	6059      	strne	r1, [r3, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	bf08      	it	eq
 8005790:	f8c8 1000 	streq.w	r1, [r8]
 8005794:	5162      	str	r2, [r4, r5]
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	4638      	mov	r0, r7
 800579a:	f104 060b 	add.w	r6, r4, #11
 800579e:	f000 f829 	bl	80057f4 <__malloc_unlock>
 80057a2:	f026 0607 	bic.w	r6, r6, #7
 80057a6:	1d23      	adds	r3, r4, #4
 80057a8:	1af2      	subs	r2, r6, r3
 80057aa:	d0ae      	beq.n	800570a <_malloc_r+0x22>
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	50a3      	str	r3, [r4, r2]
 80057b0:	e7ab      	b.n	800570a <_malloc_r+0x22>
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	6862      	ldr	r2, [r4, #4]
 80057b6:	d1dd      	bne.n	8005774 <_malloc_r+0x8c>
 80057b8:	f8c8 2000 	str.w	r2, [r8]
 80057bc:	e7ec      	b.n	8005798 <_malloc_r+0xb0>
 80057be:	4623      	mov	r3, r4
 80057c0:	6864      	ldr	r4, [r4, #4]
 80057c2:	e7ac      	b.n	800571e <_malloc_r+0x36>
 80057c4:	4634      	mov	r4, r6
 80057c6:	6876      	ldr	r6, [r6, #4]
 80057c8:	e7b4      	b.n	8005734 <_malloc_r+0x4c>
 80057ca:	4613      	mov	r3, r2
 80057cc:	e7cc      	b.n	8005768 <_malloc_r+0x80>
 80057ce:	230c      	movs	r3, #12
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4638      	mov	r0, r7
 80057d4:	f000 f80e 	bl	80057f4 <__malloc_unlock>
 80057d8:	e797      	b.n	800570a <_malloc_r+0x22>
 80057da:	6025      	str	r5, [r4, #0]
 80057dc:	e7dc      	b.n	8005798 <_malloc_r+0xb0>
 80057de:	605b      	str	r3, [r3, #4]
 80057e0:	deff      	udf	#255	; 0xff
 80057e2:	bf00      	nop
 80057e4:	200007ec 	.word	0x200007ec

080057e8 <__malloc_lock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_lock+0x8>)
 80057ea:	f7ff bf0f 	b.w	800560c <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	200007e8 	.word	0x200007e8

080057f4 <__malloc_unlock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_unlock+0x8>)
 80057f6:	f7ff bf0a 	b.w	800560e <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	200007e8 	.word	0x200007e8

08005800 <__ssputs_r>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	688e      	ldr	r6, [r1, #8]
 8005806:	461f      	mov	r7, r3
 8005808:	42be      	cmp	r6, r7
 800580a:	680b      	ldr	r3, [r1, #0]
 800580c:	4682      	mov	sl, r0
 800580e:	460c      	mov	r4, r1
 8005810:	4690      	mov	r8, r2
 8005812:	d82c      	bhi.n	800586e <__ssputs_r+0x6e>
 8005814:	898a      	ldrh	r2, [r1, #12]
 8005816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800581a:	d026      	beq.n	800586a <__ssputs_r+0x6a>
 800581c:	6965      	ldr	r5, [r4, #20]
 800581e:	6909      	ldr	r1, [r1, #16]
 8005820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005824:	eba3 0901 	sub.w	r9, r3, r1
 8005828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800582c:	1c7b      	adds	r3, r7, #1
 800582e:	444b      	add	r3, r9
 8005830:	106d      	asrs	r5, r5, #1
 8005832:	429d      	cmp	r5, r3
 8005834:	bf38      	it	cc
 8005836:	461d      	movcc	r5, r3
 8005838:	0553      	lsls	r3, r2, #21
 800583a:	d527      	bpl.n	800588c <__ssputs_r+0x8c>
 800583c:	4629      	mov	r1, r5
 800583e:	f7ff ff53 	bl	80056e8 <_malloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	b360      	cbz	r0, 80058a0 <__ssputs_r+0xa0>
 8005846:	6921      	ldr	r1, [r4, #16]
 8005848:	464a      	mov	r2, r9
 800584a:	f000 faeb 	bl	8005e24 <memcpy>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	6126      	str	r6, [r4, #16]
 800585c:	6165      	str	r5, [r4, #20]
 800585e:	444e      	add	r6, r9
 8005860:	eba5 0509 	sub.w	r5, r5, r9
 8005864:	6026      	str	r6, [r4, #0]
 8005866:	60a5      	str	r5, [r4, #8]
 8005868:	463e      	mov	r6, r7
 800586a:	42be      	cmp	r6, r7
 800586c:	d900      	bls.n	8005870 <__ssputs_r+0x70>
 800586e:	463e      	mov	r6, r7
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	4632      	mov	r2, r6
 8005874:	4641      	mov	r1, r8
 8005876:	f000 faab 	bl	8005dd0 <memmove>
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	1b9b      	subs	r3, r3, r6
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	4433      	add	r3, r6
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	2000      	movs	r0, #0
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	462a      	mov	r2, r5
 800588e:	f000 fad7 	bl	8005e40 <_realloc_r>
 8005892:	4606      	mov	r6, r0
 8005894:	2800      	cmp	r0, #0
 8005896:	d1e0      	bne.n	800585a <__ssputs_r+0x5a>
 8005898:	6921      	ldr	r1, [r4, #16]
 800589a:	4650      	mov	r0, sl
 800589c:	f7ff feb8 	bl	8005610 <_free_r>
 80058a0:	230c      	movs	r3, #12
 80058a2:	f8ca 3000 	str.w	r3, [sl]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	e7e9      	b.n	8005888 <__ssputs_r+0x88>

080058b4 <_svfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	4698      	mov	r8, r3
 80058ba:	898b      	ldrh	r3, [r1, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4607      	mov	r7, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	d50e      	bpl.n	80058e6 <_svfiprintf_r+0x32>
 80058c8:	690b      	ldr	r3, [r1, #16]
 80058ca:	b963      	cbnz	r3, 80058e6 <_svfiprintf_r+0x32>
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	f7ff ff0b 	bl	80056e8 <_malloc_r>
 80058d2:	6028      	str	r0, [r5, #0]
 80058d4:	6128      	str	r0, [r5, #16]
 80058d6:	b920      	cbnz	r0, 80058e2 <_svfiprintf_r+0x2e>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e0d0      	b.n	8005a84 <_svfiprintf_r+0x1d0>
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2320      	movs	r3, #32
 80058ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a9c <_svfiprintf_r+0x1e8>
 80058fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fe:	f04f 0901 	mov.w	r9, #1
 8005902:	4623      	mov	r3, r4
 8005904:	469a      	mov	sl, r3
 8005906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590a:	b10a      	cbz	r2, 8005910 <_svfiprintf_r+0x5c>
 800590c:	2a25      	cmp	r2, #37	; 0x25
 800590e:	d1f9      	bne.n	8005904 <_svfiprintf_r+0x50>
 8005910:	ebba 0b04 	subs.w	fp, sl, r4
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x7a>
 8005916:	465b      	mov	r3, fp
 8005918:	4622      	mov	r2, r4
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff6f 	bl	8005800 <__ssputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80a9 	beq.w	8005a7a <_svfiprintf_r+0x1c6>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	445a      	add	r2, fp
 800592c:	9209      	str	r2, [sp, #36]	; 0x24
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a1 	beq.w	8005a7a <_svfiprintf_r+0x1c6>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	f10a 0a01 	add.w	sl, sl, #1
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594e:	931a      	str	r3, [sp, #104]	; 0x68
 8005950:	4654      	mov	r4, sl
 8005952:	2205      	movs	r2, #5
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	4850      	ldr	r0, [pc, #320]	; (8005a9c <_svfiprintf_r+0x1e8>)
 800595a:	f7fa fc39 	bl	80001d0 <memchr>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	b9d8      	cbnz	r0, 800599a <_svfiprintf_r+0xe6>
 8005962:	06d0      	lsls	r0, r2, #27
 8005964:	bf44      	itt	mi
 8005966:	2320      	movmi	r3, #32
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596c:	0711      	lsls	r1, r2, #28
 800596e:	bf44      	itt	mi
 8005970:	232b      	movmi	r3, #43	; 0x2b
 8005972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d015      	beq.n	80059aa <_svfiprintf_r+0xf6>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	4654      	mov	r4, sl
 8005982:	2000      	movs	r0, #0
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4621      	mov	r1, r4
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d94d      	bls.n	8005a30 <_svfiprintf_r+0x17c>
 8005994:	b1b0      	cbz	r0, 80059c4 <_svfiprintf_r+0x110>
 8005996:	9207      	str	r2, [sp, #28]
 8005998:	e014      	b.n	80059c4 <_svfiprintf_r+0x110>
 800599a:	eba0 0308 	sub.w	r3, r0, r8
 800599e:	fa09 f303 	lsl.w	r3, r9, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	46a2      	mov	sl, r4
 80059a8:	e7d2      	b.n	8005950 <_svfiprintf_r+0x9c>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9103      	str	r1, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbb      	ittet	lt
 80059b6:	425b      	neglt	r3, r3
 80059b8:	f042 0202 	orrlt.w	r2, r2, #2
 80059bc:	9307      	strge	r3, [sp, #28]
 80059be:	9307      	strlt	r3, [sp, #28]
 80059c0:	bfb8      	it	lt
 80059c2:	9204      	strlt	r2, [sp, #16]
 80059c4:	7823      	ldrb	r3, [r4, #0]
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d10c      	bne.n	80059e4 <_svfiprintf_r+0x130>
 80059ca:	7863      	ldrb	r3, [r4, #1]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d134      	bne.n	8005a3a <_svfiprintf_r+0x186>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9203      	str	r2, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e0:	3402      	adds	r4, #2
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005aac <_svfiprintf_r+0x1f8>
 80059e8:	7821      	ldrb	r1, [r4, #0]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4650      	mov	r0, sl
 80059ee:	f7fa fbef 	bl	80001d0 <memchr>
 80059f2:	b138      	cbz	r0, 8005a04 <_svfiprintf_r+0x150>
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	eba0 000a 	sub.w	r0, r0, sl
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	4082      	lsls	r2, r0
 80059fe:	4313      	orrs	r3, r2
 8005a00:	3401      	adds	r4, #1
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	4825      	ldr	r0, [pc, #148]	; (8005aa0 <_svfiprintf_r+0x1ec>)
 8005a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0e:	2206      	movs	r2, #6
 8005a10:	f7fa fbde 	bl	80001d0 <memchr>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d038      	beq.n	8005a8a <_svfiprintf_r+0x1d6>
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <_svfiprintf_r+0x1f0>)
 8005a1a:	bb1b      	cbnz	r3, 8005a64 <_svfiprintf_r+0x1b0>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	3307      	adds	r3, #7
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	3308      	adds	r3, #8
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	4433      	add	r3, r6
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	e768      	b.n	8005902 <_svfiprintf_r+0x4e>
 8005a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a34:	460c      	mov	r4, r1
 8005a36:	2001      	movs	r0, #1
 8005a38:	e7a6      	b.n	8005988 <_svfiprintf_r+0xd4>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 0c0a 	mov.w	ip, #10
 8005a46:	4620      	mov	r0, r4
 8005a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4c:	3a30      	subs	r2, #48	; 0x30
 8005a4e:	2a09      	cmp	r2, #9
 8005a50:	d903      	bls.n	8005a5a <_svfiprintf_r+0x1a6>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c6      	beq.n	80059e4 <_svfiprintf_r+0x130>
 8005a56:	9105      	str	r1, [sp, #20]
 8005a58:	e7c4      	b.n	80059e4 <_svfiprintf_r+0x130>
 8005a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5e:	4604      	mov	r4, r0
 8005a60:	2301      	movs	r3, #1
 8005a62:	e7f0      	b.n	8005a46 <_svfiprintf_r+0x192>
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f3af 8000 	nop.w
 8005a74:	1c42      	adds	r2, r0, #1
 8005a76:	4606      	mov	r6, r0
 8005a78:	d1d6      	bne.n	8005a28 <_svfiprintf_r+0x174>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	065b      	lsls	r3, r3, #25
 8005a7e:	f53f af2d 	bmi.w	80058dc <_svfiprintf_r+0x28>
 8005a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a84:	b01d      	add	sp, #116	; 0x74
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	ab03      	add	r3, sp, #12
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a92:	a904      	add	r1, sp, #16
 8005a94:	4638      	mov	r0, r7
 8005a96:	f000 f879 	bl	8005b8c <_printf_i>
 8005a9a:	e7eb      	b.n	8005a74 <_svfiprintf_r+0x1c0>
 8005a9c:	08005f04 	.word	0x08005f04
 8005aa0:	08005f0e 	.word	0x08005f0e
 8005aa4:	00000000 	.word	0x00000000
 8005aa8:	08005801 	.word	0x08005801
 8005aac:	08005f0a 	.word	0x08005f0a

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	4699      	mov	r9, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfb8      	it	lt
 8005ac4:	4613      	movlt	r3, r2
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005acc:	4607      	mov	r7, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_printf_common+0x26>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	0699      	lsls	r1, r3, #26
 8005ada:	bf42      	ittt	mi
 8005adc:	6833      	ldrmi	r3, [r6, #0]
 8005ade:	3302      	addmi	r3, #2
 8005ae0:	6033      	strmi	r3, [r6, #0]
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	f015 0506 	ands.w	r5, r5, #6
 8005ae8:	d106      	bne.n	8005af8 <_printf_common+0x48>
 8005aea:	f104 0a19 	add.w	sl, r4, #25
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	6832      	ldr	r2, [r6, #0]
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dc26      	bgt.n	8005b46 <_printf_common+0x96>
 8005af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005afc:	1e13      	subs	r3, r2, #0
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d42b      	bmi.n	8005b60 <_printf_common+0xb0>
 8005b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d01e      	beq.n	8005b54 <_printf_common+0xa4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6922      	ldr	r2, [r4, #16]
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf02      	ittt	eq
 8005b22:	68e5      	ldreq	r5, [r4, #12]
 8005b24:	6833      	ldreq	r3, [r6, #0]
 8005b26:	1aed      	subeq	r5, r5, r3
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b30:	2500      	movne	r5, #0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfc4      	itt	gt
 8005b36:	1a9b      	subgt	r3, r3, r2
 8005b38:	18ed      	addgt	r5, r5, r3
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	341a      	adds	r4, #26
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d11a      	bne.n	8005b78 <_printf_common+0xc8>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e008      	b.n	8005b58 <_printf_common+0xa8>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d103      	bne.n	8005b5c <_printf_common+0xac>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7c6      	b.n	8005aee <_printf_common+0x3e>
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	2030      	movs	r0, #48	; 0x30
 8005b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6a:	4422      	add	r2, r4
 8005b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b74:	3302      	adds	r3, #2
 8005b76:	e7c7      	b.n	8005b08 <_printf_common+0x58>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0e6      	beq.n	8005b54 <_printf_common+0xa4>
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7d9      	b.n	8005b3e <_printf_common+0x8e>
	...

08005b8c <_printf_i>:
 8005b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	7e0f      	ldrb	r7, [r1, #24]
 8005b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b94:	2f78      	cmp	r7, #120	; 0x78
 8005b96:	4691      	mov	r9, r2
 8005b98:	4680      	mov	r8, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	469a      	mov	sl, r3
 8005b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ba2:	d807      	bhi.n	8005bb4 <_printf_i+0x28>
 8005ba4:	2f62      	cmp	r7, #98	; 0x62
 8005ba6:	d80a      	bhi.n	8005bbe <_printf_i+0x32>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f000 80d4 	beq.w	8005d56 <_printf_i+0x1ca>
 8005bae:	2f58      	cmp	r7, #88	; 0x58
 8005bb0:	f000 80c0 	beq.w	8005d34 <_printf_i+0x1a8>
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bbc:	e03a      	b.n	8005c34 <_printf_i+0xa8>
 8005bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc2:	2b15      	cmp	r3, #21
 8005bc4:	d8f6      	bhi.n	8005bb4 <_printf_i+0x28>
 8005bc6:	a101      	add	r1, pc, #4	; (adr r1, 8005bcc <_printf_i+0x40>)
 8005bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005bb5 	.word	0x08005bb5
 8005bd8:	08005bb5 	.word	0x08005bb5
 8005bdc:	08005bb5 	.word	0x08005bb5
 8005be0:	08005bb5 	.word	0x08005bb5
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005bb5 	.word	0x08005bb5
 8005bec:	08005bb5 	.word	0x08005bb5
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005d3d 	.word	0x08005d3d
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005cf7 	.word	0x08005cf7
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d5f 	.word	0x08005d5f
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005cff 	.word	0x08005cff
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	602a      	str	r2, [r5, #0]
 8005c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c34:	2301      	movs	r3, #1
 8005c36:	e09f      	b.n	8005d78 <_printf_i+0x1ec>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	0607      	lsls	r7, r0, #24
 8005c3e:	f103 0104 	add.w	r1, r3, #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	d501      	bpl.n	8005c4a <_printf_i+0xbe>
 8005c46:	681e      	ldr	r6, [r3, #0]
 8005c48:	e003      	b.n	8005c52 <_printf_i+0xc6>
 8005c4a:	0646      	lsls	r6, r0, #25
 8005c4c:	d5fb      	bpl.n	8005c46 <_printf_i+0xba>
 8005c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	da03      	bge.n	8005c5e <_printf_i+0xd2>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	4276      	negs	r6, r6
 8005c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5e:	485a      	ldr	r0, [pc, #360]	; (8005dc8 <_printf_i+0x23c>)
 8005c60:	230a      	movs	r3, #10
 8005c62:	e012      	b.n	8005c8a <_printf_i+0xfe>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	6029      	str	r1, [r5, #0]
 8005c6c:	0605      	lsls	r5, r0, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0xe8>
 8005c70:	681e      	ldr	r6, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0xee>
 8005c74:	0641      	lsls	r1, r0, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0xe4>
 8005c78:	881e      	ldrh	r6, [r3, #0]
 8005c7a:	4853      	ldr	r0, [pc, #332]	; (8005dc8 <_printf_i+0x23c>)
 8005c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c7e:	bf0c      	ite	eq
 8005c80:	2308      	moveq	r3, #8
 8005c82:	230a      	movne	r3, #10
 8005c84:	2100      	movs	r1, #0
 8005c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c8a:	6865      	ldr	r5, [r4, #4]
 8005c8c:	60a5      	str	r5, [r4, #8]
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	bfa2      	ittt	ge
 8005c92:	6821      	ldrge	r1, [r4, #0]
 8005c94:	f021 0104 	bicge.w	r1, r1, #4
 8005c98:	6021      	strge	r1, [r4, #0]
 8005c9a:	b90e      	cbnz	r6, 8005ca0 <_printf_i+0x114>
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	d04b      	beq.n	8005d38 <_printf_i+0x1ac>
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8005caa:	5dc7      	ldrb	r7, [r0, r7]
 8005cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	460e      	mov	r6, r1
 8005cb6:	d9f4      	bls.n	8005ca2 <_printf_i+0x116>
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d10b      	bne.n	8005cd4 <_printf_i+0x148>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07de      	lsls	r6, r3, #31
 8005cc0:	d508      	bpl.n	8005cd4 <_printf_i+0x148>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	4299      	cmp	r1, r3
 8005cc8:	bfde      	ittt	le
 8005cca:	2330      	movle	r3, #48	; 0x30
 8005ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cd4:	1b52      	subs	r2, r2, r5
 8005cd6:	6122      	str	r2, [r4, #16]
 8005cd8:	f8cd a000 	str.w	sl, [sp]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	aa03      	add	r2, sp, #12
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fee4 	bl	8005ab0 <_printf_common>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d14a      	bne.n	8005d82 <_printf_i+0x1f6>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	b004      	add	sp, #16
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	4833      	ldr	r0, [pc, #204]	; (8005dcc <_printf_i+0x240>)
 8005d00:	2778      	movs	r7, #120	; 0x78
 8005d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	6829      	ldr	r1, [r5, #0]
 8005d0a:	061f      	lsls	r7, r3, #24
 8005d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d10:	d402      	bmi.n	8005d18 <_printf_i+0x18c>
 8005d12:	065f      	lsls	r7, r3, #25
 8005d14:	bf48      	it	mi
 8005d16:	b2b6      	uxthmi	r6, r6
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	bf48      	it	mi
 8005d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d20:	6029      	str	r1, [r5, #0]
 8005d22:	bf48      	it	mi
 8005d24:	6023      	strmi	r3, [r4, #0]
 8005d26:	b91e      	cbnz	r6, 8005d30 <_printf_i+0x1a4>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	f023 0320 	bic.w	r3, r3, #32
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2310      	movs	r3, #16
 8005d32:	e7a7      	b.n	8005c84 <_printf_i+0xf8>
 8005d34:	4824      	ldr	r0, [pc, #144]	; (8005dc8 <_printf_i+0x23c>)
 8005d36:	e7e4      	b.n	8005d02 <_printf_i+0x176>
 8005d38:	4615      	mov	r5, r2
 8005d3a:	e7bd      	b.n	8005cb8 <_printf_i+0x12c>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	6826      	ldr	r6, [r4, #0]
 8005d40:	6961      	ldr	r1, [r4, #20]
 8005d42:	1d18      	adds	r0, r3, #4
 8005d44:	6028      	str	r0, [r5, #0]
 8005d46:	0635      	lsls	r5, r6, #24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0x1c4>
 8005d4c:	6019      	str	r1, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0x1ca>
 8005d50:	0670      	lsls	r0, r6, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0x1c0>
 8005d54:	8019      	strh	r1, [r3, #0]
 8005d56:	2300      	movs	r3, #0
 8005d58:	6123      	str	r3, [r4, #16]
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	e7bc      	b.n	8005cd8 <_printf_i+0x14c>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	602a      	str	r2, [r5, #0]
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f7fa fa30 	bl	80001d0 <memchr>
 8005d70:	b108      	cbz	r0, 8005d76 <_printf_i+0x1ea>
 8005d72:	1b40      	subs	r0, r0, r5
 8005d74:	6060      	str	r0, [r4, #4]
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d80:	e7aa      	b.n	8005cd8 <_printf_i+0x14c>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	462a      	mov	r2, r5
 8005d86:	4649      	mov	r1, r9
 8005d88:	4640      	mov	r0, r8
 8005d8a:	47d0      	blx	sl
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d0ad      	beq.n	8005cec <_printf_i+0x160>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	d413      	bmi.n	8005dbe <_printf_i+0x232>
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	bfb8      	it	lt
 8005d9e:	4618      	movlt	r0, r3
 8005da0:	e7a6      	b.n	8005cf0 <_printf_i+0x164>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4632      	mov	r2, r6
 8005da6:	4649      	mov	r1, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	47d0      	blx	sl
 8005dac:	3001      	adds	r0, #1
 8005dae:	d09d      	beq.n	8005cec <_printf_i+0x160>
 8005db0:	3501      	adds	r5, #1
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	9903      	ldr	r1, [sp, #12]
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dcf2      	bgt.n	8005da2 <_printf_i+0x216>
 8005dbc:	e7eb      	b.n	8005d96 <_printf_i+0x20a>
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	f104 0619 	add.w	r6, r4, #25
 8005dc4:	e7f5      	b.n	8005db2 <_printf_i+0x226>
 8005dc6:	bf00      	nop
 8005dc8:	08005f15 	.word	0x08005f15
 8005dcc:	08005f26 	.word	0x08005f26

08005dd0 <memmove>:
 8005dd0:	4288      	cmp	r0, r1
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	eb01 0402 	add.w	r4, r1, r2
 8005dd8:	d902      	bls.n	8005de0 <memmove+0x10>
 8005dda:	4284      	cmp	r4, r0
 8005ddc:	4623      	mov	r3, r4
 8005dde:	d807      	bhi.n	8005df0 <memmove+0x20>
 8005de0:	1e43      	subs	r3, r0, #1
 8005de2:	42a1      	cmp	r1, r4
 8005de4:	d008      	beq.n	8005df8 <memmove+0x28>
 8005de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dee:	e7f8      	b.n	8005de2 <memmove+0x12>
 8005df0:	4402      	add	r2, r0
 8005df2:	4601      	mov	r1, r0
 8005df4:	428a      	cmp	r2, r1
 8005df6:	d100      	bne.n	8005dfa <memmove+0x2a>
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e02:	e7f7      	b.n	8005df4 <memmove+0x24>

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb f8d8 	bl	8000fc4 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	200007e4 	.word	0x200007e4

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <_realloc_r>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4680      	mov	r8, r0
 8005e46:	4614      	mov	r4, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	b921      	cbnz	r1, 8005e56 <_realloc_r+0x16>
 8005e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	4611      	mov	r1, r2
 8005e52:	f7ff bc49 	b.w	80056e8 <_malloc_r>
 8005e56:	b92a      	cbnz	r2, 8005e64 <_realloc_r+0x24>
 8005e58:	f7ff fbda 	bl	8005610 <_free_r>
 8005e5c:	4625      	mov	r5, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	f000 f81b 	bl	8005e9e <_malloc_usable_size_r>
 8005e68:	4284      	cmp	r4, r0
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	d802      	bhi.n	8005e74 <_realloc_r+0x34>
 8005e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e72:	d812      	bhi.n	8005e9a <_realloc_r+0x5a>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fc36 	bl	80056e8 <_malloc_r>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0ed      	beq.n	8005e5e <_realloc_r+0x1e>
 8005e82:	42bc      	cmp	r4, r7
 8005e84:	4622      	mov	r2, r4
 8005e86:	4631      	mov	r1, r6
 8005e88:	bf28      	it	cs
 8005e8a:	463a      	movcs	r2, r7
 8005e8c:	f7ff ffca 	bl	8005e24 <memcpy>
 8005e90:	4631      	mov	r1, r6
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff fbbc 	bl	8005610 <_free_r>
 8005e98:	e7e1      	b.n	8005e5e <_realloc_r+0x1e>
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	e7df      	b.n	8005e5e <_realloc_r+0x1e>

08005e9e <_malloc_usable_size_r>:
 8005e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea2:	1f18      	subs	r0, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbc      	itt	lt
 8005ea8:	580b      	ldrlt	r3, [r1, r0]
 8005eaa:	18c0      	addlt	r0, r0, r3
 8005eac:	4770      	bx	lr
	...

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
