
practica2_MICRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08003804  08003804  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003804  08003804  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800380c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000d8  080038e4  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080038e4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c152  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4f  00000000  00000000  0002c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000792  00000000  00000000  0002e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b32d  00000000  00000000  0002f042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6c3  00000000  00000000  0004a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cdb6  00000000  00000000  00058a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002730  00000000  00000000  000f57e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000f7f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003798 	.word	0x08003798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	08003798 	.word	0x08003798

080001c8 <encoder_loop>:

#define maxport GPIOB
#define a1 GPIO_PIN_4
#define b1 GPIO_PIN_5
int counter=0;
void encoder_loop(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(maxport, a1) == GPIO_PIN_RESET)
 80001cc:	2110      	movs	r1, #16
 80001ce:	482a      	ldr	r0, [pc, #168]	; (8000278 <encoder_loop+0xb0>)
 80001d0:	f000 feba 	bl	8000f48 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d14c      	bne.n	8000274 <encoder_loop+0xac>
		  {
	          if (HAL_GPIO_ReadPin(maxport, b1) == GPIO_PIN_RESET)
 80001da:	2120      	movs	r1, #32
 80001dc:	4826      	ldr	r0, [pc, #152]	; (8000278 <encoder_loop+0xb0>)
 80001de:	f000 feb3 	bl	8000f48 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d117      	bne.n	8000218 <encoder_loop+0x50>
	              {
	        	  while(HAL_GPIO_ReadPin(maxport, b1) == GPIO_PIN_RESET){};
 80001e8:	bf00      	nop
 80001ea:	2120      	movs	r1, #32
 80001ec:	4822      	ldr	r0, [pc, #136]	; (8000278 <encoder_loop+0xb0>)
 80001ee:	f000 feab 	bl	8000f48 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d0f8      	beq.n	80001ea <encoder_loop+0x22>
				   counter--;
 80001f8:	4b20      	ldr	r3, [pc, #128]	; (800027c <encoder_loop+0xb4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <encoder_loop+0xb4>)
 8000200:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(maxport, a1) == GPIO_PIN_RESET){};
 8000202:	bf00      	nop
 8000204:	2110      	movs	r1, #16
 8000206:	481c      	ldr	r0, [pc, #112]	; (8000278 <encoder_loop+0xb0>)
 8000208:	f000 fe9e 	bl	8000f48 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f8      	beq.n	8000204 <encoder_loop+0x3c>
				  HAL_Delay(10);
 8000212:	200a      	movs	r0, #10
 8000214:	f000 fc1c 	bl	8000a50 <HAL_Delay>
			      }




	          if (HAL_GPIO_ReadPin(maxport, b1) == GPIO_PIN_SET)
 8000218:	2120      	movs	r1, #32
 800021a:	4817      	ldr	r0, [pc, #92]	; (8000278 <encoder_loop+0xb0>)
 800021c:	f000 fe94 	bl	8000f48 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b01      	cmp	r3, #1
 8000224:	d11f      	bne.n	8000266 <encoder_loop+0x9e>
	                        {
	                  	  while(HAL_GPIO_ReadPin(maxport, b1) == GPIO_PIN_SET){};
 8000226:	bf00      	nop
 8000228:	2120      	movs	r1, #32
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <encoder_loop+0xb0>)
 800022c:	f000 fe8c 	bl	8000f48 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b01      	cmp	r3, #1
 8000234:	d0f8      	beq.n	8000228 <encoder_loop+0x60>
	          			   counter++;
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <encoder_loop+0xb4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <encoder_loop+0xb4>)
 800023e:	6013      	str	r3, [r2, #0]
	          			  while(HAL_GPIO_ReadPin(maxport, a1) == GPIO_PIN_RESET){};
 8000240:	bf00      	nop
 8000242:	2110      	movs	r1, #16
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <encoder_loop+0xb0>)
 8000246:	f000 fe7f 	bl	8000f48 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f8      	beq.n	8000242 <encoder_loop+0x7a>
	          			 while(HAL_GPIO_ReadPin(maxport, b1) == GPIO_PIN_RESET){};
 8000250:	bf00      	nop
 8000252:	2120      	movs	r1, #32
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <encoder_loop+0xb0>)
 8000256:	f000 fe77 	bl	8000f48 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f8      	beq.n	8000252 <encoder_loop+0x8a>

	          			  HAL_Delay(10);
 8000260:	200a      	movs	r0, #10
 8000262:	f000 fbf5 	bl	8000a50 <HAL_Delay>
	          		      }

	                  if (counter >= 31) {
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <encoder_loop+0xb4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b1e      	cmp	r3, #30
 800026c:	dd02      	ble.n	8000274 <encoder_loop+0xac>
	                      counter = 0;
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <encoder_loop+0xb4>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
	                  }

		  }
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	48000400 	.word	0x48000400
 800027c:	200000f4 	.word	0x200000f4

08000280 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f023 030f 	bic.w	r3, r3, #15
 8000290:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	f043 030c 	orr.w	r3, r3, #12
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	f043 030c 	orr.w	r3, r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002c0:	f107 0208 	add.w	r2, r7, #8
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2304      	movs	r3, #4
 80002ca:	214e      	movs	r1, #78	; 0x4e
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <lcd_send_cmd+0x5c>)
 80002ce:	f000 fefb 	bl	80010c8 <HAL_I2C_Master_Transmit>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000f8 	.word	0x200000f8

080002e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f023 030f 	bic.w	r3, r3, #15
 80002f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	f043 030d 	orr.w	r3, r3, #13
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	f043 0309 	orr.w	r3, r3, #9
 8000308:	b2db      	uxtb	r3, r3
 800030a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	f043 030d 	orr.w	r3, r3, #13
 8000312:	b2db      	uxtb	r3, r3
 8000314:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	f043 0309 	orr.w	r3, r3, #9
 800031c:	b2db      	uxtb	r3, r3
 800031e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2304      	movs	r3, #4
 800032a:	214e      	movs	r1, #78	; 0x4e
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <lcd_send_data+0x5c>)
 800032e:	f000 fecb 	bl	80010c8 <HAL_I2C_Master_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000f8 	.word	0x200000f8

08000340 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	68b8      	ldr	r0, [r7, #8]
 8000350:	f000 f807 	bl	8000362 <lcd_put_cur>
	lcd_send_string(string);
 8000354:	68f8      	ldr	r0, [r7, #12]
 8000356:	f000 f860 	bl	800041a <lcd_send_string>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
    switch (row)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <lcd_put_cur+0x18>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d005      	beq.n	8000384 <lcd_put_cur+0x22>
 8000378:	e009      	b.n	800038e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000380:	603b      	str	r3, [r7, #0]
            break;
 8000382:	e004      	b.n	800038e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800038a:	603b      	str	r3, [r7, #0]
            break;
 800038c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff74 	bl	8000280 <lcd_send_cmd>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <lcd_init>:


void lcd_init (void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003a4:	2032      	movs	r0, #50	; 0x32
 80003a6:	f000 fb53 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003aa:	2030      	movs	r0, #48	; 0x30
 80003ac:	f7ff ff68 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003b0:	2005      	movs	r0, #5
 80003b2:	f000 fb4d 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b6:	2030      	movs	r0, #48	; 0x30
 80003b8:	f7ff ff62 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fb47 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003c2:	2030      	movs	r0, #48	; 0x30
 80003c4:	f7ff ff5c 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003c8:	200a      	movs	r0, #10
 80003ca:	f000 fb41 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003ce:	2020      	movs	r0, #32
 80003d0:	f7ff ff56 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f000 fb3b 	bl	8000a50 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003da:	2028      	movs	r0, #40	; 0x28
 80003dc:	f7ff ff50 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fb35 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003e6:	2008      	movs	r0, #8
 80003e8:	f7ff ff4a 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f000 fb2f 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003f2:	2001      	movs	r0, #1
 80003f4:	f7ff ff44 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fb29 	bl	8000a50 <HAL_Delay>
	HAL_Delay(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 fb26 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000404:	2006      	movs	r0, #6
 8000406:	f7ff ff3b 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fb20 	bl	8000a50 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000410:	200c      	movs	r0, #12
 8000412:	f7ff ff35 	bl	8000280 <lcd_send_cmd>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}

0800041a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000422:	e006      	b.n	8000432 <lcd_send_string+0x18>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff57 	bl	80002e0 <lcd_send_data>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1f4      	bne.n	8000424 <lcd_send_string+0xa>
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000448:	f000 fa9c 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044c:	f000 f842 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000450:	f000 f90c 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000454:	f000 f8da 	bl	800060c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000458:	f000 f898 	bl	800058c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init();
 800045c:	f7ff ffa0 	bl	80003a0 <lcd_init>
lcd_enviar("Generador Ondas", 0,0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	4816      	ldr	r0, [pc, #88]	; (80004c0 <main+0x7c>)
 8000466:	f7ff ff6b 	bl	8000340 <lcd_enviar>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  encoder_loop();
 800046a:	f7ff fead 	bl	80001c8 <encoder_loop>

    if( counter<0)  counter = max_opciones - 1;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <main+0x80>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	da04      	bge.n	8000480 <main+0x3c>
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <main+0x84>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <main+0x80>)
 800047e:	6013      	str	r3, [r2, #0]
    if( counter> max_opciones - 1)  counter =0;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <main+0x84>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <main+0x80>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	dc02      	bgt.n	8000492 <main+0x4e>
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <main+0x80>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
//    lcd_enviar_int( opciones[counter], 0, 0);
    lcd_put_cur(1, 0);
 8000492:	2100      	movs	r1, #0
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ff64 	bl	8000362 <lcd_put_cur>
    lcd_send_string(opciones[counter]);
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <main+0x80>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2232      	movs	r2, #50	; 0x32
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <main+0x88>)
 80004a6:	4413      	add	r3, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffb6 	bl	800041a <lcd_send_string>
    lcd_put_cur(1, 6);
 80004ae:	2106      	movs	r1, #6
 80004b0:	2001      	movs	r0, #1
 80004b2:	f7ff ff56 	bl	8000362 <lcd_put_cur>
    lcd_send_string(" <<Option");
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <main+0x8c>)
 80004b8:	f7ff ffaf 	bl	800041a <lcd_send_string>
	  encoder_loop();
 80004bc:	e7d5      	b.n	800046a <main+0x26>
 80004be:	bf00      	nop
 80004c0:	080037b0 	.word	0x080037b0
 80004c4:	200000f4 	.word	0x200000f4
 80004c8:	200000c8 	.word	0x200000c8
 80004cc:	20000000 	.word	0x20000000
 80004d0:	080037c0 	.word	0x080037c0

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f92b 	bl	800373e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	2234      	movs	r2, #52	; 0x34
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 f91d 	bl	800373e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000504:	2303      	movs	r3, #3
 8000506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2310      	movs	r3, #16
 8000518:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000524:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000528:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f966 	bl	8001800 <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800053a:	f000 f90d 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000558:	2102      	movs	r1, #2
 800055a:	4618      	mov	r0, r3
 800055c:	f002 f98e 	bl	800287c <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000566:	f000 f8f7 	bl	8000758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800056a:	2320      	movs	r3, #32
 800056c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fbb7 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000580:	f000 f8ea 	bl	8000758 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3770      	adds	r7, #112	; 0x70
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	f000 fcee 	bl	8000fa8 <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 f8c1 	bl	8000758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_I2C1_Init+0x74>)
 80005da:	f001 f879 	bl	80016d0 <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f8b8 	bl	8000758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ec:	f001 f8bb 	bl	8001766 <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f8af 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f8 	.word	0x200000f8
 8000604:	40005400 	.word	0x40005400
 8000608:	2000090e 	.word	0x2000090e

0800060c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000612:	4a15      	ldr	r2, [pc, #84]	; (8000668 <MX_USART2_UART_Init+0x5c>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000618:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800061c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000650:	f002 fcdc 	bl	800300c <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f87d 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000014c 	.word	0x2000014c
 8000668:	40004400 	.word	0x40004400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b32      	ldr	r3, [pc, #200]	; (800074c <MX_GPIO_Init+0xe0>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a31      	ldr	r2, [pc, #196]	; (800074c <MX_GPIO_Init+0xe0>)
 8000688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_GPIO_Init+0xe0>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_GPIO_Init+0xe0>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a2b      	ldr	r2, [pc, #172]	; (800074c <MX_GPIO_Init+0xe0>)
 80006a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_GPIO_Init+0xe0>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xe0>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_GPIO_Init+0xe0>)
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xe0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_GPIO_Init+0xe0>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a1f      	ldr	r2, [pc, #124]	; (800074c <MX_GPIO_Init+0xe0>)
 80006d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_GPIO_Init+0xe0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <MX_GPIO_Init+0xe4>)
 80006ea:	f000 fc45 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <MX_GPIO_Init+0xe8>)
 8000706:	f000 faad 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = btn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 800070a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xe4>)
 8000720:	f000 faa0 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xe4>)
 800073e:	f000 fa91 	bl	8000c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000400 	.word	0x48000400
 8000754:	48000800 	.word	0x48000800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800079a:	2007      	movs	r0, #7
 800079c:	f000 fa2e 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x7c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d128      	bne.n	8000820 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	2312      	movs	r3, #18
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f8:	2304      	movs	r3, #4
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <HAL_I2C_MspInit+0x84>)
 8000804:	f000 fa2e 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_I2C_MspInit+0x80>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_I2C_MspInit+0x80>)
 800080e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000812:	61d3      	str	r3, [r2, #28]
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_I2C_MspInit+0x80>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40005400 	.word	0x40005400
 800082c:	40021000 	.word	0x40021000
 8000830:	48000400 	.word	0x48000400

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x7c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d128      	bne.n	80008a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x80>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <HAL_UART_MspInit+0x80>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0x80>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x80>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0x80>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_UART_MspInit+0x80>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 f9de 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f884 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 fef7 	bl	8003750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fd6f 	bl	8000444 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000968:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000974:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 8000978:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800097c:	200001d8 	.word	0x200001d8

08000980 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_IRQHandler>
	...

08000984 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x28>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f931 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff fee0 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f93b 	bl	8000c4a <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f911 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000cc 	.word	0x200000cc
 8000a08:	200000d4 	.word	0x200000d4
 8000a0c:	200000d0 	.word	0x200000d0

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	200001d4 	.word	0x200001d4

08000a38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200001d4 	.word	0x200001d4

08000a50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000d4 	.word	0x200000d4

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff47 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5c 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb0 	bl	8000bb8 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e14e      	b.n	8000f12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8140 	beq.w	8000f0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d017      	beq.n	8000d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d123      	bne.n	8000d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0203 	and.w	r2, r3, #3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 809a 	beq.w	8000f0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df0:	4a50      	ldr	r2, [pc, #320]	; (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1e0>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a46      	ldr	r2, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x2d4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1dc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a45      	ldr	r2, [pc, #276]	; (8000f3c <HAL_GPIO_Init+0x2d8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1d8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HAL_GPIO_Init+0x2dc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1d4>
 8000e34:	2303      	movs	r3, #3
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x1e2>
 8000e44:	2300      	movs	r3, #0
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e56:	4937      	ldr	r1, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e64:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb2:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_GPIO_Init+0x2e0>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f47f aea9 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e001      	b.n	8000f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e081      	b.n	80010be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fbec 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e006      	b.n	8001030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800102e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d104      	bne.n	8001042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69d9      	ldr	r1, [r3, #28]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2220      	movs	r2, #32
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	817b      	strh	r3, [r7, #10]
 80010d8:	4613      	mov	r3, r2
 80010da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b20      	cmp	r3, #32
 80010e6:	f040 80da 	bne.w	800129e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_I2C_Master_Transmit+0x30>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e0d3      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001100:	f7ff fc9a 	bl	8000a38 <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2319      	movs	r3, #25
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f8f0 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0be      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2221      	movs	r2, #33	; 0x21
 8001126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2210      	movs	r2, #16
 800112e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d90e      	bls.n	8001172 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	b2da      	uxtb	r2, r3
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 fa7e 	bl	800166c <I2C_TransferConfig>
 8001170:	e06c      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001180:	b2da      	uxtb	r2, r3
 8001182:	8979      	ldrh	r1, [r7, #10]
 8001184:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fa6d 	bl	800166c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001192:	e05b      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	6a39      	ldr	r1, [r7, #32]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f8fc 	bl	8001396 <I2C_WaitOnTXISFlagUntilTimeout>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e07b      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d034      	beq.n	800124c <HAL_I2C_Master_Transmit+0x184>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d130      	bne.n	800124c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f87f 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e04d      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001208:	b29b      	uxth	r3, r3
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d90e      	bls.n	800122c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	b2da      	uxtb	r2, r3
 800121a:	8979      	ldrh	r1, [r7, #10]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 fa21 	bl	800166c <I2C_TransferConfig>
 800122a:	e00f      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	b2da      	uxtb	r2, r3
 800123c:	8979      	ldrh	r1, [r7, #10]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fa10 	bl	800166c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d19e      	bne.n	8001194 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f8e2 	bl	8001424 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e01a      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2220      	movs	r2, #32
 8001270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_I2C_Master_Transmit+0x1e4>)
 800127e:	400b      	ands	r3, r1
 8001280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2220      	movs	r2, #32
 8001286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800129e:	2302      	movs	r3, #2
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	80002000 	.word	0x80002000
 80012ac:	fe00e800 	.word	0xfe00e800

080012b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d103      	bne.n	80012ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d007      	beq.n	80012ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	619a      	str	r2, [r3, #24]
  }
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001308:	e031      	b.n	800136e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d02d      	beq.n	800136e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001312:	f7ff fb91 	bl	8000a38 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d302      	bcc.n	8001328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d122      	bne.n	800136e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4013      	ands	r3, r2
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	429a      	cmp	r2, r3
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	429a      	cmp	r2, r3
 8001344:	d113      	bne.n	800136e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f043 0220 	orr.w	r2, r3, #32
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2220      	movs	r2, #32
 8001356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4013      	ands	r3, r2
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	429a      	cmp	r2, r3
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	429a      	cmp	r2, r3
 800138a:	d0be      	beq.n	800130a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013a2:	e033      	b.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f87f 	bl	80014ac <I2C_IsErrorOccurred>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e031      	b.n	800141c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d025      	beq.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c0:	f7ff fb3a 	bl	8000a38 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d302      	bcc.n	80013d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11a      	bne.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d013      	beq.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d1c4      	bne.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001430:	e02f      	b.n	8001492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f838 	bl	80014ac <I2C_IsErrorOccurred>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e02d      	b.n	80014a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001446:	f7ff faf7 	bl	8000a38 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	d302      	bcc.n	800145c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d11a      	bne.n	8001492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b20      	cmp	r3, #32
 8001468:	d013      	beq.n	8001492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f043 0220 	orr.w	r2, r3, #32
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2220      	movs	r2, #32
 800147a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e007      	b.n	80014a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b20      	cmp	r3, #32
 800149e:	d1c8      	bne.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d068      	beq.n	80015aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2210      	movs	r2, #16
 80014de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014e0:	e049      	b.n	8001576 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d045      	beq.n	8001576 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014ea:	f7ff faa5 	bl	8000a38 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d302      	bcc.n	8001500 <I2C_IsErrorOccurred+0x54>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d13a      	bne.n	8001576 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001512:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001522:	d121      	bne.n	8001568 <I2C_IsErrorOccurred+0xbc>
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800152a:	d01d      	beq.n	8001568 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	2b20      	cmp	r3, #32
 8001530:	d01a      	beq.n	8001568 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001540:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001542:	f7ff fa79 	bl	8000a38 <HAL_GetTick>
 8001546:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001548:	e00e      	b.n	8001568 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800154a:	f7ff fa75 	bl	8000a38 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b19      	cmp	r3, #25
 8001556:	d907      	bls.n	8001568 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001566:	e006      	b.n	8001576 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b20      	cmp	r3, #32
 8001574:	d1e9      	bne.n	800154a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b20      	cmp	r3, #32
 8001582:	d003      	beq.n	800158c <I2C_IsErrorOccurred+0xe0>
 8001584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0aa      	beq.n	80014e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800158c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2220      	movs	r2, #32
 800159a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01c      	beq.n	800165a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff fe45 	bl	80012b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <I2C_IsErrorOccurred+0x1bc>)
 8001632:	400b      	ands	r3, r1
 8001634:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800165a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800165e:	4618      	mov	r0, r3
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	fe00e800 	.word	0xfe00e800

0800166c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	817b      	strh	r3, [r7, #10]
 800167a:	4613      	mov	r3, r2
 800167c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001684:	7a7b      	ldrb	r3, [r7, #9]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800168c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	4313      	orrs	r3, r2
 8001696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	0d5b      	lsrs	r3, r3, #21
 80016a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <I2C_TransferConfig+0x60>)
 80016ac:	430b      	orrs	r3, r1
 80016ae:	43db      	mvns	r3, r3
 80016b0:	ea02 0103 	and.w	r1, r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	03ff63ff 	.word	0x03ff63ff

080016d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d138      	bne.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e032      	b.n	800175a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b20      	cmp	r3, #32
 800177a:	d139      	bne.n	80017f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001786:	2302      	movs	r3, #2
 8001788:	e033      	b.n	80017f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2224      	movs	r2, #36	; 0x24
 8001796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001806:	af00      	add	r7, sp, #0
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001810:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f001 b823 	b.w	800286c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 817d 	beq.w	8001b36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800183c:	4bbc      	ldr	r3, [pc, #752]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00c      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001848:	4bb9      	ldr	r3, [pc, #740]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d15c      	bne.n	800190e <HAL_RCC_OscConfig+0x10e>
 8001854:	4bb6      	ldr	r3, [pc, #728]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d155      	bne.n	800190e <HAL_RCC_OscConfig+0x10e>
 8001862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001866:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001876:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_RCC_OscConfig+0x94>
 800188e:	4ba8      	ldr	r3, [pc, #672]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	e015      	b.n	80018c0 <HAL_RCC_OscConfig+0xc0>
 8001894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001898:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018bc:	4b9c      	ldr	r3, [pc, #624]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018cc:	fa92 f2a2 	rbit	r2, r2
 80018d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 811f 	beq.w	8001b34 <HAL_RCC_OscConfig+0x334>
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8116 	bne.w	8001b34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	f000 bfaf 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x12e>
 8001920:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a82      	ldr	r2, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e036      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x158>
 800193e:	4b7c      	ldr	r3, [pc, #496]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7b      	ldr	r2, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a78      	ldr	r2, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e021      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x184>
 800196a:	4b71      	ldr	r3, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a70      	ldr	r2, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6d      	ldr	r2, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x19c>
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a69      	ldr	r2, [pc, #420]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a66      	ldr	r2, [pc, #408]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800199c:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f023 020f 	bic.w	r2, r3, #15
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	495f      	ldr	r1, [pc, #380]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d059      	beq.n	8001a7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f837 	bl	8000a38 <HAL_GetTick>
 80019ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f832 	bl	8000a38 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d902      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f000 bf43 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 80019e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x218>
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e015      	b.n	8001a44 <HAL_RCC_OscConfig+0x244>
 8001a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a50:	fa92 f2a2 	rbit	r2, r2
 8001a54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a5c:	fab2 f282 	clz	r2, r2
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f002 021f 	and.w	r2, r2, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ab      	beq.n	80019d0 <HAL_RCC_OscConfig+0x1d0>
 8001a78:	e05d      	b.n	8001b36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7fe ffdd 	bl	8000a38 <HAL_GetTick>
 8001a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a84:	f7fe ffd8 	bl	8000a38 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d902      	bls.n	8001a9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f000 bee9 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001aae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0x2cc>
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e015      	b.n	8001af8 <HAL_RCC_OscConfig+0x2f8>
 8001acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ae8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_RCC_OscConfig+0x330>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001afc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b00:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b04:	fa92 f2a2 	rbit	r2, r2
 8001b08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f002 021f 	and.w	r2, r2, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ab      	bne.n	8001a84 <HAL_RCC_OscConfig+0x284>
 8001b2c:	e003      	b.n	8001b36 <HAL_RCC_OscConfig+0x336>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 817d 	beq.w	8001e46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4c:	4ba6      	ldr	r3, [pc, #664]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b58:	4ba3      	ldr	r3, [pc, #652]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d172      	bne.n	8001c4a <HAL_RCC_OscConfig+0x44a>
 8001b64:	4ba0      	ldr	r3, [pc, #640]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d16c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x44a>
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3a0>
 8001b9a:	4b93      	ldr	r3, [pc, #588]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e013      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bc4:	4b88      	ldr	r3, [pc, #544]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001bce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bd2:	fa92 f2a2 	rbit	r2, r2
 8001bd6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bda:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0220 	orr.w	r2, r2, #32
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCC_OscConfig+0x410>
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f000 be2e 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	21f8      	movs	r1, #248	; 0xf8
 8001c26:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c2e:	fa91 f1a1 	rbit	r1, r1
 8001c32:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c36:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c3a:	fab1 f181 	clz	r1, r1
 8001c3e:	b2c9      	uxtb	r1, r1
 8001c40:	408b      	lsls	r3, r1
 8001c42:	4969      	ldr	r1, [pc, #420]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c48:	e0fd      	b.n	8001e46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8088 	beq.w	8001d6c <HAL_RCC_OscConfig+0x56c>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2301      	movs	r3, #1
 8001c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe fed6 	bl	8000a38 <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c92:	f7fe fed1 	bl	8000a38 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d902      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f000 bde2 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cd2:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x500>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2202      	movs	r2, #2
 8001d02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d0a:	fa92 f2a2 	rbit	r2, r2
 8001d0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f002 021f 	and.w	r2, r2, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0af      	beq.n	8001c92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	21f8      	movs	r1, #248	; 0xf8
 8001d48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d50:	fa91 f1a1 	rbit	r1, r1
 8001d54:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d58:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d5c:	fab1 f181 	clz	r1, r1
 8001d60:	b2c9      	uxtb	r1, r1
 8001d62:	408b      	lsls	r3, r1
 8001d64:	4920      	ldr	r1, [pc, #128]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
 8001d6a:	e06c      	b.n	8001e46 <HAL_RCC_OscConfig+0x646>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fe4e 	bl	8000a38 <HAL_GetTick>
 8001d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7fe fe49 	bl	8000a38 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d902      	bls.n	8001db8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	f000 bd5a 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d104      	bne.n	8001dec <HAL_RCC_OscConfig+0x5ec>
 8001de2:	4b01      	ldr	r3, [pc, #4]	; (8001de8 <HAL_RCC_OscConfig+0x5e8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e015      	b.n	8001e14 <HAL_RCC_OscConfig+0x614>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e10:	4bc8      	ldr	r3, [pc, #800]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2202      	movs	r2, #2
 8001e16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ad      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8110 	beq.w	800207c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d079      	beq.n	8001f60 <HAL_RCC_OscConfig+0x760>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4bab      	ldr	r3, [pc, #684]	; (8002138 <HAL_RCC_OscConfig+0x938>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	461a      	mov	r2, r3
 8001e92:	2301      	movs	r3, #1
 8001e94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7fe fdcf 	bl	8000a38 <HAL_GetTick>
 8001e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fdca 	bl	8000a38 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d902      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f000 bcdb 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f10:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 8001f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	6019      	str	r1, [r3, #0]
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f1a3 	rbit	r1, r3
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f36:	6019      	str	r1, [r3, #0]
  return result;
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0a0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x6a0>
 8001f5e:	e08d      	b.n	800207c <HAL_RCC_OscConfig+0x87c>
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f82:	601a      	str	r2, [r3, #0]
  return result;
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x938>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fd49 	bl	8000a38 <HAL_GetTick>
 8001fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe fd44 	bl	8000a38 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	f000 bc55 	b.w	800286c <HAL_RCC_OscConfig+0x106c>
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fca:	2202      	movs	r2, #2
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800202c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 8002030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800203a:	2102      	movs	r1, #2
 800203c:	6019      	str	r1, [r3, #0]
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	fa93 f1a3 	rbit	r1, r3
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002054:	6019      	str	r1, [r3, #0]
  return result;
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d197      	bne.n	8001fac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 81a1 	beq.w	80023d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d116      	bne.n	80020d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	61d3      	str	r3, [r2, #28]
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_OscConfig+0x93c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11a      	bne.n	8002114 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_RCC_OscConfig+0x93c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_RCC_OscConfig+0x93c>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fca5 	bl	8000a38 <HAL_GetTick>
 80020ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	e009      	b.n	8002108 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fca0 	bl	8000a38 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e3b1      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_RCC_OscConfig+0x93c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10d      	bne.n	8002140 <HAL_RCC_OscConfig+0x940>
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a02      	ldr	r2, [pc, #8]	; (8002134 <HAL_RCC_OscConfig+0x934>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e03c      	b.n	80021ac <HAL_RCC_OscConfig+0x9ac>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	10908120 	.word	0x10908120
 800213c:	40007000 	.word	0x40007000
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x96a>
 8002150:	4bc1      	ldr	r3, [pc, #772]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4ac0      	ldr	r2, [pc, #768]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4bbe      	ldr	r3, [pc, #760]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4abd      	ldr	r2, [pc, #756]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e020      	b.n	80021ac <HAL_RCC_OscConfig+0x9ac>
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x994>
 800217a:	4bb7      	ldr	r3, [pc, #732]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4ab6      	ldr	r2, [pc, #728]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4bb4      	ldr	r3, [pc, #720]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4ab3      	ldr	r2, [pc, #716]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x9ac>
 8002194:	4bb0      	ldr	r3, [pc, #704]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4aaf      	ldr	r2, [pc, #700]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4bad      	ldr	r3, [pc, #692]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4aac      	ldr	r2, [pc, #688]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8081 	beq.w	80022c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe fc3b 	bl	8000a38 <HAL_GetTick>
 80021c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fc36 	bl	8000a38 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e345      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800220c:	2202      	movs	r2, #2
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002230:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0xa4c>
 8002246:	4b84      	ldr	r3, [pc, #528]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	e013      	b.n	8002274 <HAL_RCC_OscConfig+0xa74>
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002278:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800227c:	2102      	movs	r1, #2
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002284:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	fa92 f1a2 	rbit	r1, r2
 800228e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002292:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002296:	6011      	str	r1, [r2, #0]
  return result;
 8002298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d084      	beq.n	80021c8 <HAL_RCC_OscConfig+0x9c8>
 80022be:	e07f      	b.n	80023c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe fbba 	bl	8000a38 <HAL_GetTick>
 80022c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fbb5 	bl	8000a38 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e2c4      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002328:	601a      	str	r2, [r3, #0]
  return result;
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002332:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0xb4e>
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	e013      	b.n	8002376 <HAL_RCC_OscConfig+0xb76>
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002356:	2202      	movs	r2, #2
 8002358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	fa93 f2a3 	rbit	r2, r3
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800237a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800237e:	2102      	movs	r1, #2
 8002380:	6011      	str	r1, [r2, #0]
 8002382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002386:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	fa92 f1a2 	rbit	r1, r2
 8002390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002394:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002398:	6011      	str	r1, [r2, #0]
  return result;
 800239a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fab2 f282 	clz	r2, r2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f002 021f 	and.w	r2, r2, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d184      	bne.n	80022ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4a22      	ldr	r2, [pc, #136]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8242 	beq.w	800286a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_OscConfig+0xc58>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	f000 8213 	beq.w	800281a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	f040 8162 	bne.w	80026ca <HAL_RCC_OscConfig+0xeca>
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800240e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800242a:	601a      	str	r2, [r3, #0]
  return result;
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002434:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002440:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe faf4 	bl	8000a38 <HAL_GetTick>
 8002450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	e00c      	b.n	8002470 <HAL_RCC_OscConfig+0xc70>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe faec 	bl	8000a38 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1fd      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002494:	601a      	str	r2, [r3, #0]
  return result;
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800249e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0xcba>
 80024b4:	4bb0      	ldr	r3, [pc, #704]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e027      	b.n	800250a <HAL_RCC_OscConfig+0xd0a>
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	4b9c      	ldr	r3, [pc, #624]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002512:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002516:	6011      	str	r1, [r2, #0]
 8002518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	fa92 f1a2 	rbit	r1, r2
 8002526:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800252e:	6011      	str	r1, [r2, #0]
  return result;
 8002530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002534:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f002 021f 	and.w	r2, r2, #31
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f202 	lsl.w	r2, r1, r2
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d182      	bne.n	800245c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	430b      	orrs	r3, r1
 8002578:	497f      	ldr	r1, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002586:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025a2:	601a      	str	r2, [r3, #0]
  return result;
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	461a      	mov	r2, r3
 80025c0:	2301      	movs	r3, #1
 80025c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fa38 	bl	8000a38 <HAL_GetTick>
 80025c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	e009      	b.n	80025e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fa33 	bl	8000a38 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e144      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002606:	601a      	str	r2, [r3, #0]
  return result;
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002610:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0xe2c>
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e027      	b.n	800267c <HAL_RCC_OscConfig+0xe7c>
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800265a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002680:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002684:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002688:	6011      	str	r1, [r2, #0]
 800268a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800268e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	fa92 f1a2 	rbit	r1, r2
 8002698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800269c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026a0:	6011      	str	r1, [r2, #0]
  return result;
 80026a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f002 021f 	and.w	r2, r2, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d082      	beq.n	80025ce <HAL_RCC_OscConfig+0xdce>
 80026c8:	e0cf      	b.n	800286a <HAL_RCC_OscConfig+0x106a>
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026ee:	601a      	str	r2, [r3, #0]
  return result;
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	2300      	movs	r3, #0
 800270e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe f992 	bl	8000a38 <HAL_GetTick>
 8002714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e009      	b.n	800272e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe f98d 	bl	8000a38 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e09e      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800273a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002752:	601a      	str	r2, [r3, #0]
  return result;
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800275c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d104      	bne.n	800277c <HAL_RCC_OscConfig+0xf7c>
 8002772:	4b01      	ldr	r3, [pc, #4]	; (8002778 <HAL_RCC_OscConfig+0xf78>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e029      	b.n	80027cc <HAL_RCC_OscConfig+0xfcc>
 8002778:	40021000 	.word	0x40021000
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x1078>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fa92 f1a2 	rbit	r1, r2
 80027e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027f0:	6011      	str	r1, [r2, #0]
  return result;
 80027f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d180      	bne.n	800271a <HAL_RCC_OscConfig+0xf1a>
 8002818:	e027      	b.n	800286a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e01e      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x1078>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002836:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800283a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800284e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b09e      	sub	sp, #120	; 0x78
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e162      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b90      	ldr	r3, [pc, #576]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	498b      	ldr	r1, [pc, #556]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b89      	ldr	r3, [pc, #548]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e14a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b82      	ldr	r3, [pc, #520]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	497f      	ldr	r1, [pc, #508]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80dc 	beq.w	8002aa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d13c      	bne.n	8002972 <HAL_RCC_ClockConfig+0xf6>
 80028f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_RCC_ClockConfig+0xa6>
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e00f      	b.n	8002942 <HAL_RCC_ClockConfig+0xc6>
 8002922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002926:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	667b      	str	r3, [r7, #100]	; 0x64
 8002930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002934:	663b      	str	r3, [r7, #96]	; 0x60
 8002936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002946:	65ba      	str	r2, [r7, #88]	; 0x58
 8002948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d17b      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0f3      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d13c      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x178>
 800297a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x128>
 800299e:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_ClockConfig+0x148>
 80029a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
 80029b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
 80029b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80029ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029cc:	fa92 f2a2 	rbit	r2, r2
 80029d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d13a      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b2      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
 80029f4:	2302      	movs	r3, #2
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x1a0>
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e00d      	b.n	8002a38 <HAL_RCC_ClockConfig+0x1bc>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2202      	movs	r2, #2
 8002a3a:	61ba      	str	r2, [r7, #24]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	617a      	str	r2, [r7, #20]
  return result;
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f042 0220 	orr.w	r2, r2, #32
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	f002 021f 	and.w	r2, r2, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e079      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	491a      	ldr	r1, [pc, #104]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fd ffde 	bl	8000a38 <HAL_GetTick>
 8002a7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fd ffda 	bl	8000a38 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e061      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_ClockConfig+0x260>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d214      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4906      	ldr	r1, [pc, #24]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_ClockConfig+0x25c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e040      	b.n	8002b5a <HAL_RCC_ClockConfig+0x2de>
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_ClockConfig+0x2e8>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_RCC_ClockConfig+0x2e8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4912      	ldr	r1, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b1e:	f000 f829 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b22:	4601      	mov	r1, r0
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCC_ClockConfig+0x2e8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2c:	22f0      	movs	r2, #240	; 0xf0
 8002b2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	60fa      	str	r2, [r7, #12]
  return result;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	40d3      	lsrs	r3, r2
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x2ec>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	fa21 f303 	lsr.w	r3, r1, r3
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_RCC_ClockConfig+0x2f0>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_RCC_ClockConfig+0x2f4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd ff2c 	bl	80009b0 <HAL_InitTick>
  
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3778      	adds	r7, #120	; 0x78
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080037cc 	.word	0x080037cc
 8002b6c:	200000cc 	.word	0x200000cc
 8002b70:	200000d0 	.word	0x200000d0

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e03c      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ba6:	623b      	str	r3, [r7, #32]
      break;
 8002ba8:	e03c      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	fa92 f2a2 	rbit	r2, r2
 8002bbc:	607a      	str	r2, [r7, #4]
  return result;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	fab2 f282 	clz	r2, r2
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	40d3      	lsrs	r3, r2
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	fa92 f2a2 	rbit	r2, r2
 8002be0:	60fa      	str	r2, [r7, #12]
  return result;
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	40d3      	lsrs	r3, r2
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	e004      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c20:	623b      	str	r3, [r7, #32]
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	372c      	adds	r7, #44	; 0x2c
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	080037e4 	.word	0x080037e4
 8002c40:	080037f4 	.word	0x080037f4
 8002c44:	003d0900 	.word	0x003d0900

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	200000cc 	.word	0x200000cc

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c66:	f7ff ffef 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	603a      	str	r2, [r7, #0]
  return result;
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	080037dc 	.word	0x080037dc

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002caa:	f7ff ffcd 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	fa92 f2a2 	rbit	r2, r2
 8002cc4:	603a      	str	r2, [r7, #0]
  return result;
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	40d3      	lsrs	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080037dc 	.word	0x080037dc

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b092      	sub	sp, #72	; 0x48
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80d4 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10e      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	61d3      	str	r3, [r2, #28]
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fe73 	bl	8000a38 <HAL_GetTick>
 8002d52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fd fe6f 	bl	8000a38 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e14b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8084 	beq.w	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d07c      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04b      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fd fe1f 	bl	8000a38 <HAL_GetTick>
 8002dfa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fd fe1b 	bl	8000a38 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0f5      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002e14:	2302      	movs	r3, #2
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d108      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e42:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	e00d      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	10908100 	.word	0x10908100
 8002e54:	2302      	movs	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	613a      	str	r2, [r7, #16]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0b7      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	495b      	ldr	r1, [pc, #364]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b57      	ldr	r3, [pc, #348]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494e      	ldr	r1, [pc, #312]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f023 0210 	bic.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4947      	ldr	r1, [pc, #284]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002efc:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	493f      	ldr	r1, [pc, #252]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f023 0220 	bic.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	4938      	ldr	r1, [pc, #224]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4930      	ldr	r1, [pc, #192]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4929      	ldr	r1, [pc, #164]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4921      	ldr	r1, [pc, #132]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	491a      	ldr	r1, [pc, #104]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	490b      	ldr	r1, [pc, #44]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3748      	adds	r7, #72	; 0x48
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e040      	b.n	80030a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fc00 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f82c 	bl	80030a8 <UART_SetConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e022      	b.n	80030a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f956 	bl	8003314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f9dd 	bl	8003458 <UART_CheckIdleState>
 800309e:	4603      	mov	r3, r0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b8a      	ldr	r3, [pc, #552]	; (80032fc <UART_SetConfig+0x254>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a78      	ldr	r2, [pc, #480]	; (8003300 <UART_SetConfig+0x258>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d120      	bne.n	8003166 <UART_SetConfig+0xbe>
 8003124:	4b77      	ldr	r3, [pc, #476]	; (8003304 <UART_SetConfig+0x25c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d817      	bhi.n	8003160 <UART_SetConfig+0xb8>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x90>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003155 	.word	0x08003155
 8003140:	0800315b 	.word	0x0800315b
 8003144:	0800314f 	.word	0x0800314f
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e01d      	b.n	800318a <UART_SetConfig+0xe2>
 800314e:	2302      	movs	r3, #2
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e01a      	b.n	800318a <UART_SetConfig+0xe2>
 8003154:	2304      	movs	r3, #4
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e017      	b.n	800318a <UART_SetConfig+0xe2>
 800315a:	2308      	movs	r3, #8
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e014      	b.n	800318a <UART_SetConfig+0xe2>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e011      	b.n	800318a <UART_SetConfig+0xe2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a67      	ldr	r2, [pc, #412]	; (8003308 <UART_SetConfig+0x260>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <UART_SetConfig+0xce>
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e009      	b.n	800318a <UART_SetConfig+0xe2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a64      	ldr	r2, [pc, #400]	; (800330c <UART_SetConfig+0x264>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d102      	bne.n	8003186 <UART_SetConfig+0xde>
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e001      	b.n	800318a <UART_SetConfig+0xe2>
 8003186:	2310      	movs	r3, #16
 8003188:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003192:	d15a      	bne.n	800324a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d827      	bhi.n	80031ea <UART_SetConfig+0x142>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0xf8>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	080031d5 	.word	0x080031d5
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031db 	.word	0x080031db
 80031b4:	080031eb 	.word	0x080031eb
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080031e3 	.word	0x080031e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff fd4c 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80031c8:	61b8      	str	r0, [r7, #24]
        break;
 80031ca:	e013      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031cc:	f7ff fd6a 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e00f      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <UART_SetConfig+0x268>)
 80031d6:	61bb      	str	r3, [r7, #24]
        break;
 80031d8:	e00c      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031da:	f7ff fccb 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80031de:	61b8      	str	r0, [r7, #24]
        break;
 80031e0:	e008      	b.n	80031f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e6:	61bb      	str	r3, [r7, #24]
        break;
 80031e8:	e004      	b.n	80031f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77bb      	strb	r3, [r7, #30]
        break;
 80031f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d074      	beq.n	80032e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	d916      	bls.n	8003244 <UART_SetConfig+0x19c>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d212      	bcs.n	8003244 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f023 030f 	bic.w	r3, r3, #15
 8003226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	b29a      	uxth	r2, r3
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	4313      	orrs	r3, r2
 8003238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	89fa      	ldrh	r2, [r7, #14]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	e04f      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77bb      	strb	r3, [r7, #30]
 8003248:	e04c      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d828      	bhi.n	80032a2 <UART_SetConfig+0x1fa>
 8003250:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <UART_SetConfig+0x1b0>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	0800327d 	.word	0x0800327d
 800325c:	08003285 	.word	0x08003285
 8003260:	0800328d 	.word	0x0800328d
 8003264:	080032a3 	.word	0x080032a3
 8003268:	08003293 	.word	0x08003293
 800326c:	080032a3 	.word	0x080032a3
 8003270:	080032a3 	.word	0x080032a3
 8003274:	080032a3 	.word	0x080032a3
 8003278:	0800329b 	.word	0x0800329b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7ff fcf0 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8003280:	61b8      	str	r0, [r7, #24]
        break;
 8003282:	e013      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fd0e 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <UART_SetConfig+0x268>)
 800328e:	61bb      	str	r3, [r7, #24]
        break;
 8003290:	e00c      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003292:	f7ff fc6f 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8003296:	61b8      	str	r0, [r7, #24]
        break;
 8003298:	e008      	b.n	80032ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329e:	61bb      	str	r3, [r7, #24]
        break;
 80032a0:	e004      	b.n	80032ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	77bb      	strb	r3, [r7, #30]
        break;
 80032aa:	bf00      	nop
    }

    if (pclk != 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085a      	lsrs	r2, r3, #1
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d909      	bls.n	80032e0 <UART_SetConfig+0x238>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d205      	bcs.n	80032e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e001      	b.n	80032e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	efff69f3 	.word	0xefff69f3
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	40004400 	.word	0x40004400
 800330c:	40004800 	.word	0x40004800
 8003310:	007a1200 	.word	0x007a1200

08003314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003412:	d10a      	bne.n	800342a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b098      	sub	sp, #96	; 0x60
 800345c:	af02      	add	r7, sp, #8
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003468:	f7fd fae6 	bl	8000a38 <HAL_GetTick>
 800346c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b08      	cmp	r3, #8
 800347a:	d12e      	bne.n	80034da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f88c 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d021      	beq.n	80034da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
 80034b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e6      	bne.n	8003496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e062      	b.n	80035a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d149      	bne.n	800357c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f856 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d03c      	beq.n	800357c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	623b      	str	r3, [r7, #32]
   return(result);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	60fb      	str	r3, [r7, #12]
   return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003554:	61fa      	str	r2, [r7, #28]
 8003556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	617b      	str	r3, [r7, #20]
   return(result);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e011      	b.n	80035a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3758      	adds	r7, #88	; 0x58
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	e049      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d045      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fd fa39 	bl	8000a38 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e048      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d031      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d110      	bne.n	800361a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2208      	movs	r2, #8
 80035fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f838 	bl	8003676 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2208      	movs	r2, #8
 800360a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e029      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d111      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f81e 	bl	8003676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0a6      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b095      	sub	sp, #84	; 0x54
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	643b      	str	r3, [r7, #64]	; 0x40
 800369e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e6      	bne.n	800367e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d118      	bne.n	800371e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	647b      	str	r3, [r7, #68]	; 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	613b      	str	r3, [r7, #16]
   return(result);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003732:	bf00      	nop
 8003734:	3754      	adds	r7, #84	; 0x54
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <memset>:
 800373e:	4402      	add	r2, r0
 8003740:	4603      	mov	r3, r0
 8003742:	4293      	cmp	r3, r2
 8003744:	d100      	bne.n	8003748 <memset+0xa>
 8003746:	4770      	bx	lr
 8003748:	f803 1b01 	strb.w	r1, [r3], #1
 800374c:	e7f9      	b.n	8003742 <memset+0x4>
	...

08003750 <__libc_init_array>:
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	4d0d      	ldr	r5, [pc, #52]	; (8003788 <__libc_init_array+0x38>)
 8003754:	4c0d      	ldr	r4, [pc, #52]	; (800378c <__libc_init_array+0x3c>)
 8003756:	1b64      	subs	r4, r4, r5
 8003758:	10a4      	asrs	r4, r4, #2
 800375a:	2600      	movs	r6, #0
 800375c:	42a6      	cmp	r6, r4
 800375e:	d109      	bne.n	8003774 <__libc_init_array+0x24>
 8003760:	4d0b      	ldr	r5, [pc, #44]	; (8003790 <__libc_init_array+0x40>)
 8003762:	4c0c      	ldr	r4, [pc, #48]	; (8003794 <__libc_init_array+0x44>)
 8003764:	f000 f818 	bl	8003798 <_init>
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	2600      	movs	r6, #0
 800376e:	42a6      	cmp	r6, r4
 8003770:	d105      	bne.n	800377e <__libc_init_array+0x2e>
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	f855 3b04 	ldr.w	r3, [r5], #4
 8003778:	4798      	blx	r3
 800377a:	3601      	adds	r6, #1
 800377c:	e7ee      	b.n	800375c <__libc_init_array+0xc>
 800377e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003782:	4798      	blx	r3
 8003784:	3601      	adds	r6, #1
 8003786:	e7f2      	b.n	800376e <__libc_init_array+0x1e>
 8003788:	08003804 	.word	0x08003804
 800378c:	08003804 	.word	0x08003804
 8003790:	08003804 	.word	0x08003804
 8003794:	08003808 	.word	0x08003808

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
