
practica_wilkin2times.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed4  08006ed4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006ed4  08006ed4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ed4  08006ed4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012fc  20000060  08006f3c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  08006f3c  0002135c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019670  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e5  00000000  00000000  00039743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d2  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4f4  00000000  00000000  0003f372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b65d  00000000  00000000  0005d866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b58a9  00000000  00000000  00078ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f18  00000000  00000000  0012e76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00134684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d90 	.word	0x08006d90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006d90 	.word	0x08006d90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000007c 	.word	0x2000007c
 80002a0:	2000011c 	.word	0x2000011c

080002a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	f043 030c 	orr.w	r3, r3, #12
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002e4:	f107 0208 	add.w	r2, r7, #8
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2304      	movs	r3, #4
 80002ee:	214e      	movs	r1, #78	; 0x4e
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <lcd_send_cmd+0x5c>)
 80002f2:	f001 ffef 	bl	80022d4 <HAL_I2C_Master_Transmit>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000036c 	.word	0x2000036c

08000304 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f043 030d 	orr.w	r3, r3, #13
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	f043 0309 	orr.w	r3, r3, #9
 800032c:	b2db      	uxtb	r3, r3
 800032e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	f043 030d 	orr.w	r3, r3, #13
 8000336:	b2db      	uxtb	r3, r3
 8000338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	f043 0309 	orr.w	r3, r3, #9
 8000340:	b2db      	uxtb	r3, r3
 8000342:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000344:	f107 0208 	add.w	r2, r7, #8
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2304      	movs	r3, #4
 800034e:	214e      	movs	r1, #78	; 0x4e
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <lcd_send_data+0x5c>)
 8000352:	f001 ffbf 	bl	80022d4 <HAL_I2C_Master_Transmit>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000036c 	.word	0x2000036c

08000364 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	4908      	ldr	r1, [pc, #32]	; (8000398 <lcd_enviar_int+0x34>)
 8000378:	4618      	mov	r0, r3
 800037a:	f006 f80f 	bl	800639c <siprintf>
    lcd_put_cur(row, col);
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	68b8      	ldr	r0, [r7, #8]
 8000382:	f000 f822 	bl	80003ca <lcd_put_cur>
    lcd_send_string(buffer);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f879 	bl	8000482 <lcd_send_string>
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08006da8 	.word	0x08006da8

0800039c <lcd_clear>:

void lcd_clear (void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80003a2:	2080      	movs	r0, #128	; 0x80
 80003a4:	f7ff ff7e 	bl	80002a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	e005      	b.n	80003ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80003ae:	2020      	movs	r0, #32
 80003b0:	f7ff ffa8 	bl	8000304 <lcd_send_data>
	for (int i=0; i<70; i++)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b45      	cmp	r3, #69	; 0x45
 80003be:	ddf6      	ble.n	80003ae <lcd_clear+0x12>
	}
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <lcd_put_cur+0x18>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d005      	beq.n	80003ec <lcd_put_cur+0x22>
 80003e0:	e009      	b.n	80003f6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e8:	603b      	str	r3, [r7, #0]
            break;
 80003ea:	e004      	b.n	80003f6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003f2:	603b      	str	r3, [r7, #0]
            break;
 80003f4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff52 	bl	80002a4 <lcd_send_cmd>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <lcd_init>:


void lcd_init (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800040c:	2032      	movs	r0, #50	; 0x32
 800040e:	f000 fd1b 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000412:	2030      	movs	r0, #48	; 0x30
 8000414:	f7ff ff46 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fd15 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 800041e:	2030      	movs	r0, #48	; 0x30
 8000420:	f7ff ff40 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fd0f 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 800042a:	2030      	movs	r0, #48	; 0x30
 800042c:	f7ff ff3a 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000430:	200a      	movs	r0, #10
 8000432:	f000 fd09 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000436:	2020      	movs	r0, #32
 8000438:	f7ff ff34 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 800043c:	200a      	movs	r0, #10
 800043e:	f000 fd03 	bl	8000e48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f7ff ff2e 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fcfd 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800044e:	2008      	movs	r0, #8
 8000450:	f7ff ff28 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fcf7 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ff22 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fcf1 	bl	8000e48 <HAL_Delay>
	HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 fcee 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800046c:	2006      	movs	r0, #6
 800046e:	f7ff ff19 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f000 fce8 	bl	8000e48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000478:	200c      	movs	r0, #12
 800047a:	f7ff ff13 	bl	80002a4 <lcd_send_cmd>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800048a:	e006      	b.n	800049a <lcd_send_string+0x18>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff35 	bl	8000304 <lcd_send_data>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f4      	bne.n	800048c <lcd_send_string+0xa>
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <Medir_ADC>:
int count_adc =0;
int count_lcd =0;
int count_sonic =0;

void Medir_ADC()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <Medir_ADC+0x28>)
 80004b2:	f000 fe73 	bl	800119c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80004b6:	2164      	movs	r1, #100	; 0x64
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Medir_ADC+0x28>)
 80004ba:	f000 ff11 	bl	80012e0 <HAL_ADC_PollForConversion>

	medicion = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <Medir_ADC+0x28>)
 80004c0:	f000 ffcc 	bl	800145c <HAL_ADC_GetValue>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <Medir_ADC+0x2c>)
 80004c8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <Medir_ADC+0x28>)
 80004cc:	f000 fed3 	bl	8001276 <HAL_ADC_Stop>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000031c 	.word	0x2000031c
 80004d8:	2000045c 	.word	0x2000045c

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fc7b 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f87f 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9a9 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f977 	bl	80007e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f2:	f000 f8d9 	bl	80006a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004f6:	f000 f933 	bl	8000760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80004fa:	f7ff ff85 	bl	8000408 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adc2 */
  osThreadDef(adc2, Startadc2, osPriorityNormal, 0, 128);
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <main+0xe4>)
 8000500:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000504:	461d      	mov	r5, r3
 8000506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adc2Handle = osThreadCreate(osThread(adc2), NULL);
 8000512:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fcf1 	bl	8004f00 <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <main+0xe8>)
 8000522:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcd2 */
  osThreadDef(lcd2, Startlcd2, osPriorityNormal, 0, 128);
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <main+0xec>)
 8000526:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800052a:	461d      	mov	r5, r3
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcd2Handle = osThreadCreate(osThread(lcd2), NULL);
 8000538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fcde 	bl	8004f00 <osThreadCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <main+0xf0>)
 8000548:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad2 */
  osThreadDef(keypad2, Startkeypad2, osPriorityNormal, 0, 128);
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <main+0xf4>)
 800054c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypad2Handle = osThreadCreate(osThread(keypad2), NULL);
 800055e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f004 fccb 	bl	8004f00 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <main+0xf8>)
 800056e:	6013      	str	r3, [r2, #0]

  /* definition and creation of matriz2 */
  osThreadDef(matriz2, Startmatriz2, osPriorityNormal, 0, 128);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xfc>)
 8000572:	f107 0420 	add.w	r4, r7, #32
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  matriz2Handle = osThreadCreate(osThread(matriz2), NULL);
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fcb8 	bl	8004f00 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <main+0x100>)
 8000594:	6013      	str	r3, [r2, #0]

  /* definition and creation of sonic2 */
  osThreadDef(sonic2, Startsonic2, osPriorityNormal, 0, 128);
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	1d3c      	adds	r4, r7, #4
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sonic2Handle = osThreadCreate(osThread(sonic2), NULL);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fca7 	bl	8004f00 <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <main+0x108>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f004 fc9b 	bl	8004ef2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0xe0>
 80005be:	bf00      	nop
 80005c0:	08006db4 	.word	0x08006db4
 80005c4:	20000448 	.word	0x20000448
 80005c8:	08006dd8 	.word	0x08006dd8
 80005cc:	2000044c 	.word	0x2000044c
 80005d0:	08006dfc 	.word	0x08006dfc
 80005d4:	20000450 	.word	0x20000450
 80005d8:	08006e20 	.word	0x08006e20
 80005dc:	20000454 	.word	0x20000454
 80005e0:	08006e44 	.word	0x08006e44
 80005e4:	20000458 	.word	0x20000458

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f2:	2228      	movs	r2, #40	; 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fef0 	bl	80063dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fee2 	bl	80063dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2303      	movs	r3, #3
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f9e2 	bl	8002a0c <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800064e:	f000 f9ca 	bl	80009e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fa0a 	bl	8003a88 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f9b4 	bl	80009e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fc62 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069a:	f000 f9a4 	bl	80009e6 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3770      	adds	r7, #112	; 0x70
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_ADC1_Init+0xb4>)
 80006c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_ADC1_Init+0xb4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <MX_ADC1_Init+0xb4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_ADC1_Init+0xb4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_ADC1_Init+0xb4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_ADC1_Init+0xb4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_ADC1_Init+0xb4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_ADC1_Init+0xb4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_ADC1_Init+0xb4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_ADC1_Init+0xb4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0xb4>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_ADC1_Init+0xb4>)
 8000708:	2204      	movs	r2, #4
 800070a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ADC1_Init+0xb4>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_ADC1_Init+0xb4>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <MX_ADC1_Init+0xb4>)
 800071a:	f000 fbb9 	bl	8000e90 <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000724:	f000 f95f 	bl	80009e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000728:	2301      	movs	r3, #1
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072c:	2301      	movs	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000734:	2307      	movs	r3, #7
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_ADC1_Init+0xb4>)
 8000746:	f000 fe97 	bl	8001478 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000750:	f000 f949 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000031c 	.word	0x2000031c

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_I2C1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_I2C1_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_I2C1_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x74>)
 800079c:	f001 fd0a 	bl	80021b4 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f91e 	bl	80009e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007ae:	f002 f895 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f915 	bl	80009e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007c0:	f002 f8d7 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f90c 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000036c 	.word	0x2000036c
 80007d8:	40005400 	.word	0x40005400
 80007dc:	2000090e 	.word	0x2000090e

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f003 ffb4 	bl	8004790 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8da 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200003c0 	.word	0x200003c0
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <MX_GPIO_Init+0xc4>)
 800085c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0xc4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_GPIO_Init+0xc4>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008be:	f001 fc61 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_GPIO_Init+0xcc>)
 80008da:	f001 fae1 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008f8:	f001 fad2 	bl	8001ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <Startadc2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startadc2 */
void Startadc2(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	 Medir_ADC();
 8000918:	f7ff fdc8 	bl	80004ac <Medir_ADC>
	 count_adc++;
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <Startadc2+0x20>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a03      	ldr	r2, [pc, #12]	; (8000930 <Startadc2+0x20>)
 8000924:	6013      	str	r3, [r2, #0]
    osDelay(100);
 8000926:	2064      	movs	r0, #100	; 0x64
 8000928:	f004 fb36 	bl	8004f98 <osDelay>
	 Medir_ADC();
 800092c:	e7f4      	b.n	8000918 <Startadc2+0x8>
 800092e:	bf00      	nop
 8000930:	20000468 	.word	0x20000468

08000934 <Startlcd2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlcd2 */
void Startlcd2(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlcd2 */
  /* Infinite loop */
  for(;;)
  {
    count_lcd++;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <Startlcd2+0x2c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <Startlcd2+0x2c>)
 8000944:	6013      	str	r3, [r2, #0]
	  lcd_clear();
 8000946:	f7ff fd29 	bl	800039c <lcd_clear>
	  lcd_enviar_int(medicion,0,0);
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <Startlcd2+0x30>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fd06 	bl	8000364 <lcd_enviar_int>
    osDelay(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f004 fb1d 	bl	8004f98 <osDelay>
    count_lcd++;
 800095e:	e7ed      	b.n	800093c <Startlcd2+0x8>
 8000960:	2000046c 	.word	0x2000046c
 8000964:	2000045c 	.word	0x2000045c

08000968 <Startkeypad2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startkeypad2 */
void Startkeypad2(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startkeypad2 */
  /* Infinite loop */
  for(;;)
  {
  count_keypad++;
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <Startkeypad2+0x1c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	4a03      	ldr	r2, [pc, #12]	; (8000984 <Startkeypad2+0x1c>)
 8000978:	6013      	str	r3, [r2, #0]
    osDelay(100);
 800097a:	2064      	movs	r0, #100	; 0x64
 800097c:	f004 fb0c 	bl	8004f98 <osDelay>
  count_keypad++;
 8000980:	e7f6      	b.n	8000970 <Startkeypad2+0x8>
 8000982:	bf00      	nop
 8000984:	20000464 	.word	0x20000464

08000988 <Startmatriz2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startmatriz2 */
void Startmatriz2(void const * argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startmatriz2 */
  /* Infinite loop */
  for(;;)
  {

	  count_matriz++;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <Startmatriz2+0x1c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <Startmatriz2+0x1c>)
 8000998:	6013      	str	r3, [r2, #0]
    osDelay(100);
 800099a:	2064      	movs	r0, #100	; 0x64
 800099c:	f004 fafc 	bl	8004f98 <osDelay>
	  count_matriz++;
 80009a0:	e7f6      	b.n	8000990 <Startmatriz2+0x8>
 80009a2:	bf00      	nop
 80009a4:	20000460 	.word	0x20000460

080009a8 <Startsonic2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsonic2 */
void Startsonic2(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startsonic2 */
  /* Infinite loop */
  for(;;)
  {
	  count_sonic++;
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <Startsonic2+0x1c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <Startsonic2+0x1c>)
 80009b8:	6013      	str	r3, [r2, #0]
    osDelay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f004 faec 	bl	8004f98 <osDelay>
	  count_sonic++;
 80009c0:	e7f6      	b.n	80009b0 <Startsonic2+0x8>
 80009c2:	bf00      	nop
 80009c4:	20000470 	.word	0x20000470

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 fa15 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ea:	b672      	cpsid	i
}
 80009ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_MspInit+0x4c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f001 fa0d 	bl	8001e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a60:	d124      	bne.n	8000aac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_ADC_MspInit+0x74>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f9fa 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_I2C_MspInit+0x7c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d128      	bne.n	8000b2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae4:	6153      	str	r3, [r2, #20]
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <HAL_I2C_MspInit+0x84>)
 8000b10:	f001 f9c6 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1e:	61d3      	str	r3, [r2, #28]
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_I2C_MspInit+0x80>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d128      	bne.n	8000bb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b92:	230c      	movs	r3, #12
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f001 f976 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	61d3      	str	r3, [r2, #28]
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bec:	f107 0210 	add.w	r2, r7, #16
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f97c 	bl	8003ef4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c06:	f003 f931 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8000c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c0e:	f003 f92d 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8000c12:	4603      	mov	r3, r0
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1a:	4a24      	ldr	r2, [pc, #144]	; (8000cac <HAL_InitTick+0xe8>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	0c9b      	lsrs	r3, r3, #18
 8000c22:	3b01      	subs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c50:	f003 fb14 	bl	800427c <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11b      	bne.n	8000c9a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c64:	f003 fb6c 	bl	8004340 <HAL_TIM_Base_Start_IT>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d111      	bne.n	8000c9a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c76:	201c      	movs	r0, #28
 8000c78:	f001 f904 	bl	8001e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d808      	bhi.n	8000c94 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c82:	2200      	movs	r2, #0
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	201c      	movs	r0, #28
 8000c88:	f001 f8e0 	bl	8001e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <HAL_InitTick+0xf0>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e002      	b.n	8000c9a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	20000474 	.word	0x20000474
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM2_IRQHandler+0x10>)
 8000cea:	f003 fb7d 	bl	80043e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000474 	.word	0x20000474

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f005 fbb6 	bl	8006498 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20004000 	.word	0x20004000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200004c0 	.word	0x200004c0
 8000d60:	20001360 	.word	0x20001360

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f005 fb75 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fb8f 	bl	80004dc <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dcc:	08006edc 	.word	0x08006edc
  ldr r2, =_sbss
 8000dd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dd4:	2000135c 	.word	0x2000135c

08000dd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x28>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f001 f822 	bl	8001e36 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff fee6 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fdfa 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	200004c4 	.word	0x200004c4

08000e30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200004c4 	.word	0x200004c4

08000e48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_Delay+0x44>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	; 0x68
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e169      	b.n	8001184 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d176      	bne.n	8000fb0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d152      	bne.n	8000f70 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fdab 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d13b      	bne.n	8000f70 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fdd3 	bl	8001aa4 <ADC_Disable>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d12f      	bne.n	8000f70 <HAL_ADC_Init+0xe0>
 8000f10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d12b      	bne.n	8000f70 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f20:	f023 0302 	bic.w	r3, r3, #2
 8000f24:	f043 0202 	orr.w	r2, r3, #2
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f3a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f4a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4c:	4b8f      	ldr	r3, [pc, #572]	; (800118c <HAL_ADC_Init+0x2fc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a8f      	ldr	r2, [pc, #572]	; (8001190 <HAL_ADC_Init+0x300>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9a      	lsrs	r2, r3, #18
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f62:	e002      	b.n	8000f6a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f9      	bne.n	8000f64 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f8c:	d110      	bne.n	8000fb0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0312 	bic.w	r3, r3, #18
 8000f96:	f043 0210 	orr.w	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f040 80d6 	bne.w	800116a <HAL_ADC_Init+0x2da>
 8000fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f040 80d1 	bne.w	800116a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 80c9 	bne.w	800116a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fe0:	f043 0202 	orr.w	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_ADC_Init+0x304>)
 8000fea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d108      	bne.n	8001010 <HAL_ADC_Init+0x180>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_ADC_Init+0x180>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_ADC_Init+0x182>
 8001010:	2300      	movs	r3, #0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d11c      	bne.n	8001050 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001016:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d010      	beq.n	800103e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d107      	bne.n	8001038 <HAL_ADC_Init+0x1a8>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_ADC_Init+0x1a8>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_ADC_Init+0x1aa>
 8001038:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800103a:	2b00      	cmp	r3, #0
 800103c:	d108      	bne.n	8001050 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800103e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	431a      	orrs	r2, r3
 800104c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800104e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	035b      	lsls	r3, r3, #13
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800105a:	2a01      	cmp	r2, #1
 800105c:	d002      	beq.n	8001064 <HAL_ADC_Init+0x1d4>
 800105e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001062:	e000      	b.n	8001066 <HAL_ADC_Init+0x1d6>
 8001064:	2200      	movs	r2, #0
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4313      	orrs	r3, r2
 8001074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001076:	4313      	orrs	r3, r2
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d11b      	bne.n	80010bc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e5b      	ldrb	r3, [r3, #25]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	3b01      	subs	r3, #1
 8001092:	045a      	lsls	r2, r3, #17
 8001094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001096:	4313      	orrs	r3, r2
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	663b      	str	r3, [r7, #96]	; 0x60
 800109e:	e00d      	b.n	80010bc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010a8:	f043 0220 	orr.w	r2, r3, #32
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d007      	beq.n	80010d4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	4313      	orrs	r3, r2
 80010ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010d0:	4313      	orrs	r3, r2
 80010d2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d114      	bne.n	800110c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7e1b      	ldrb	r3, [r3, #24]
 80010fa:	039a      	lsls	r2, r3, #14
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4313      	orrs	r3, r2
 8001106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001108:	4313      	orrs	r3, r2
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_ADC_Init+0x308>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800111c:	430b      	orrs	r3, r1
 800111e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10c      	bne.n	8001142 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f023 010f 	bic.w	r1, r3, #15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
 8001140:	e007      	b.n	8001152 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020f 	bic.w	r2, r2, #15
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f023 0303 	bic.w	r3, r3, #3
 8001160:	f043 0201 	orr.w	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
 8001168:	e00a      	b.n	8001180 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f023 0312 	bic.w	r3, r3, #18
 8001172:	f043 0210 	orr.w	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800117a:	2301      	movs	r3, #1
 800117c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001184:	4618      	mov	r0, r3
 8001186:	3768      	adds	r7, #104	; 0x68
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83
 8001194:	50000300 	.word	0x50000300
 8001198:	fff0c007 	.word	0xfff0c007

0800119c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d158      	bne.n	8001268 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_Start+0x28>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e054      	b.n	800126e <HAL_ADC_Start+0xd2>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fc05 	bl	80019dc <ADC_Enable>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d140      	bne.n	800125e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001212:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001226:	d106      	bne.n	8001236 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f023 0206 	bic.w	r2, r3, #6
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
 8001234:	e002      	b.n	800123c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	221c      	movs	r2, #28
 800124a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0204 	orr.w	r2, r2, #4
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	e006      	b.n	800126c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001266:	e001      	b.n	800126c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001268:	2302      	movs	r3, #2
 800126a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_ADC_Stop+0x1a>
 800128c:	2302      	movs	r3, #2
 800128e:	e023      	b.n	80012d8 <HAL_ADC_Stop+0x62>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001298:	216c      	movs	r1, #108	; 0x6c
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fc68 	bl	8001b70 <ADC_ConversionStop>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d111      	bne.n	80012ce <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fbfa 	bl	8001aa4 <ADC_Disable>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012f6:	2308      	movs	r3, #8
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e02e      	b.n	800135a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fc:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_ADC_PollForConversion+0x178>)
 80012fe:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d11d      	bne.n	8001356 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e08d      	b.n	800144e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f043 0220 	orr.w	r2, r3, #32
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e07b      	b.n	800144e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001362:	f7ff fd65 	bl	8000e30 <HAL_GetTick>
 8001366:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001368:	e021      	b.n	80013ae <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d01d      	beq.n	80013ae <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_ADC_PollForConversion+0xa8>
 8001378:	f7ff fd5a 	bl	8000e30 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d212      	bcs.n	80013ae <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10b      	bne.n	80013ae <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f043 0204 	orr.w	r2, r3, #4
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e04f      	b.n	800144e <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0d6      	beq.n	800136a <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d131      	bne.n	800143a <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d12c      	bne.n	800143a <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d125      	bne.n	800143a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d112      	bne.n	8001422 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d112      	bne.n	800143a <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
 8001420:	e00b      	b.n	800143a <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f043 0220 	orr.w	r2, r3, #32
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d103      	bne.n	800144c <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	50000300 	.word	0x50000300

0800145c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b09b      	sub	sp, #108	; 0x6c
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_ADC_ConfigChannel+0x22>
 8001496:	2302      	movs	r3, #2
 8001498:	e295      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x54e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 8279 	bne.w	80019a4 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d81c      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	461a      	mov	r2, r3
 80014ce:	231f      	movs	r3, #31
 80014d0:	4093      	lsls	r3, r2
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4019      	ands	r1, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
 80014f2:	e063      	b.n	80015bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d81e      	bhi.n	800153a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	3b1e      	subs	r3, #30
 8001510:	221f      	movs	r2, #31
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	4019      	ands	r1, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3b1e      	subs	r3, #30
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
 8001538:	e040      	b.n	80015bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b0e      	cmp	r3, #14
 8001540:	d81e      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	3b3c      	subs	r3, #60	; 0x3c
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	4019      	ands	r1, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	3b3c      	subs	r3, #60	; 0x3c
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
 800157e:	e01d      	b.n	80015bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3b5a      	subs	r3, #90	; 0x5a
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	4019      	ands	r1, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	3b5a      	subs	r3, #90	; 0x5a
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 80e5 	bne.w	8001796 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d91c      	bls.n	800160e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6999      	ldr	r1, [r3, #24]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6898      	ldr	r0, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1e      	subs	r3, #30
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	619a      	str	r2, [r3, #24]
 800160c:	e019      	b.n	8001642 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6959      	ldr	r1, [r3, #20]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	2207      	movs	r2, #7
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	3b01      	subs	r3, #1
 8001660:	2b03      	cmp	r3, #3
 8001662:	d84f      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0x28c>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_ADC_ConfigChannel+0x1f4>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	0800167d 	.word	0x0800167d
 8001670:	0800169f 	.word	0x0800169f
 8001674:	080016c1 	.word	0x080016c1
 8001678:	080016e3 	.word	0x080016e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001682:	4b97      	ldr	r3, [pc, #604]	; (80018e0 <HAL_ADC_ConfigChannel+0x468>)
 8001684:	4013      	ands	r3, r2
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	0691      	lsls	r1, r2, #26
 800168c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800168e:	430a      	orrs	r2, r1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800169a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800169c:	e07b      	b.n	8001796 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a4:	4b8e      	ldr	r3, [pc, #568]	; (80018e0 <HAL_ADC_ConfigChannel+0x468>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	0691      	lsls	r1, r2, #26
 80016ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b0:	430a      	orrs	r2, r1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016bc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016be:	e06a      	b.n	8001796 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016c6:	4b86      	ldr	r3, [pc, #536]	; (80018e0 <HAL_ADC_ConfigChannel+0x468>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	0691      	lsls	r1, r2, #26
 80016d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d2:	430a      	orrs	r2, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016de:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016e0:	e059      	b.n	8001796 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016e8:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_ADC_ConfigChannel+0x468>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	0691      	lsls	r1, r2, #26
 80016f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016f4:	430a      	orrs	r2, r1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001700:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001702:	e048      	b.n	8001796 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	069b      	lsls	r3, r3, #26
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001726:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800172e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	069b      	lsls	r3, r3, #26
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800174a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	069b      	lsls	r3, r3, #26
 800175c:	429a      	cmp	r2, r3
 800175e:	d107      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800176e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	069b      	lsls	r3, r3, #26
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001792:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001794:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x33e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x33e>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x340>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 80fe 	bne.w	80019ba <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d00f      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43da      	mvns	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	400a      	ands	r2, r1
 80017e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80017e4:	e049      	b.n	800187a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b09      	cmp	r3, #9
 8001806:	d91c      	bls.n	8001842 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6999      	ldr	r1, [r3, #24]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	3b1b      	subs	r3, #27
 800181a:	2207      	movs	r2, #7
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	4019      	ands	r1, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6898      	ldr	r0, [r3, #8]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	3b1b      	subs	r3, #27
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	e01b      	b.n	800187a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6959      	ldr	r1, [r3, #20]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	2207      	movs	r2, #7
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	4019      	ands	r1, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6898      	ldr	r0, [r3, #8]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_ADC_ConfigChannel+0x46c>)
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d105      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800188e:	2b00      	cmp	r3, #0
 8001890:	d014      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001896:	2b11      	cmp	r3, #17
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	f040 8085 	bne.w	80019ba <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d17e      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10c      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x470>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x470>
 80018dc:	2301      	movs	r3, #1
 80018de:	e004      	b.n	80018ea <HAL_ADC_ConfigChannel+0x472>
 80018e0:	83fff000 	.word	0x83fff000
 80018e4:	50000300 	.word	0x50000300
 80018e8:	2300      	movs	r3, #0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d150      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x498>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x498>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_ADC_ConfigChannel+0x49a>
 8001910:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001912:	2b00      	cmp	r3, #0
 8001914:	d13c      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d11d      	bne.n	800195a <HAL_ADC_ConfigChannel+0x4e2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001926:	d118      	bne.n	800195a <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001932:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_ADC_ConfigChannel+0x55c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <HAL_ADC_ConfigChannel+0x560>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9a      	lsrs	r2, r3, #18
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194a:	e002      	b.n	8001952 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3b01      	subs	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f9      	bne.n	800194c <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001958:	e02e      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b11      	cmp	r3, #17
 8001960:	d10b      	bne.n	800197a <HAL_ADC_ConfigChannel+0x502>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800196a:	d106      	bne.n	800197a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001976:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001978:	e01e      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b12      	cmp	r3, #18
 8001980:	d11a      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800198a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800198e:	e013      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019a2:	e00a      	b.n	80019ba <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019b8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	376c      	adds	r7, #108	; 0x6c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000
 80019d8:	431bde83 	.word	0x431bde83

080019dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <ADC_Enable+0x2c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <ADC_Enable+0x2c>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <ADC_Enable+0x2e>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d143      	bne.n	8001a96 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <ADC_Enable+0xc4>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e02f      	b.n	8001a98 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a48:	f7ff f9f2 	bl	8000e30 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a4e:	e01b      	b.n	8001a88 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a50:	f7ff f9ee 	bl	8000e30 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d914      	bls.n	8001a88 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d00d      	beq.n	8001a88 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f043 0210 	orr.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e007      	b.n	8001a98 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d1dc      	bne.n	8001a50 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	8000003f 	.word	0x8000003f

08001aa4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <ADC_Disable+0x2c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <ADC_Disable+0x2c>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <ADC_Disable+0x2e>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d047      	beq.n	8001b66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030d 	and.w	r3, r3, #13
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10f      	bne.n	8001b04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2203      	movs	r2, #3
 8001afa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f998 	bl	8000e30 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b02:	e029      	b.n	8001b58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e023      	b.n	8001b68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b20:	f7ff f986 	bl	8000e30 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d914      	bls.n	8001b58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10d      	bne.n	8001b58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f043 0210 	orr.w	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e007      	b.n	8001b68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d0dc      	beq.n	8001b20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 809b 	beq.w	8001ccc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ba4:	d12a      	bne.n	8001bfc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d126      	bne.n	8001bfc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d122      	bne.n	8001bfc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001bba:	e014      	b.n	8001be6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4a46      	ldr	r2, [pc, #280]	; (8001cd8 <ADC_ConversionStop+0x168>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d90d      	bls.n	8001be0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f043 0210 	orr.w	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e076      	b.n	8001cce <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3301      	adds	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d1e3      	bne.n	8001bbc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2240      	movs	r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b60      	cmp	r3, #96	; 0x60
 8001c00:	d015      	beq.n	8001c2e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d10e      	bne.n	8001c2e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0210 	orr.w	r2, r2, #16
 8001c2c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d015      	beq.n	8001c60 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d10e      	bne.n	8001c60 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b60      	cmp	r3, #96	; 0x60
 8001c64:	d005      	beq.n	8001c72 <ADC_ConversionStop+0x102>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b6c      	cmp	r3, #108	; 0x6c
 8001c6a:	d105      	bne.n	8001c78 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	617b      	str	r3, [r7, #20]
        break;
 8001c70:	e005      	b.n	8001c7e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c72:	2308      	movs	r3, #8
 8001c74:	617b      	str	r3, [r7, #20]
        break;
 8001c76:	e002      	b.n	8001c7e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]
        break;
 8001c7c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001c7e:	f7ff f8d7 	bl	8000e30 <HAL_GetTick>
 8001c82:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c84:	e01b      	b.n	8001cbe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c86:	f7ff f8d3 	bl	8000e30 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b0b      	cmp	r3, #11
 8001c92:	d914      	bls.n	8001cbe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e007      	b.n	8001cce <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1dc      	bne.n	8001c86 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	000993ff 	.word	0x000993ff

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff4c 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5e:	f7ff ff61 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7ff ffb1 	bl	8001dd0 <NVIC_EncodePriority>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff80 	bl	8001d7c <__NVIC_SetPriority>
}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff54 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e14e      	b.n	800214e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8140 	beq.w	8002148 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 809a 	beq.w	8002148 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_GPIO_Init+0x2cc>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800202c:	4a50      	ldr	r2, [pc, #320]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1e0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a46      	ldr	r2, [pc, #280]	; (8002174 <HAL_GPIO_Init+0x2d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1dc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_GPIO_Init+0x2d8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_GPIO_Init+0x2dc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1d4>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002074:	2305      	movs	r3, #5
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002080:	2300      	movs	r3, #0
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002092:	4937      	ldr	r1, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a0:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	f47f aea9 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
 800217c:	48000c00 	.word	0x48000c00
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e081      	b.n	80022ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fc6c 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e006      	b.n	800223c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800223a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d104      	bne.n	800224e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800224c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	461a      	mov	r2, r3
 80022e0:	460b      	mov	r3, r1
 80022e2:	817b      	strh	r3, [r7, #10]
 80022e4:	4613      	mov	r3, r2
 80022e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	f040 80da 	bne.w	80024aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_I2C_Master_Transmit+0x30>
 8002300:	2302      	movs	r3, #2
 8002302:	e0d3      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800230c:	f7fe fd90 	bl	8000e30 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2319      	movs	r3, #25
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8f0 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0be      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2210      	movs	r2, #16
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	893a      	ldrh	r2, [r7, #8]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2bff      	cmp	r3, #255	; 0xff
 800235e:	d90e      	bls.n	800237e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa7e 	bl	8002878 <I2C_TransferConfig>
 800237c:	e06c      	b.n	8002458 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	b2da      	uxtb	r2, r3
 800238e:	8979      	ldrh	r1, [r7, #10]
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fa6d 	bl	8002878 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800239e:	e05b      	b.n	8002458 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6a39      	ldr	r1, [r7, #32]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f8fc 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e07b      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d034      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x184>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d130      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f87f 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e04d      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d90e      	bls.n	8002438 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22ff      	movs	r2, #255	; 0xff
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fa21 	bl	8002878 <I2C_TransferConfig>
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	b2da      	uxtb	r2, r3
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fa10 	bl	8002878 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d19e      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8e2 	bl	8002630 <I2C_WaitOnSTOPFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e01a      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800248a:	400b      	ands	r3, r1
 800248c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	80002000 	.word	0x80002000
 80024b8:	fe00e800 	.word	0xfe00e800

080024bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d007      	beq.n	80024f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	619a      	str	r2, [r3, #24]
  }
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	e031      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d02d      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe fc87 	bl	8000e30 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d122      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	429a      	cmp	r2, r3
 8002550:	d113      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d0be      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ae:	e033      	b.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f87f 	bl	80026b8 <I2C_IsErrorOccurred>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e031      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d025      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025cc:	f7fe fc30 	bl	8000e30 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d302      	bcc.n	80025e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11a      	bne.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d013      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d1c4      	bne.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263c:	e02f      	b.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f838 	bl	80026b8 <I2C_IsErrorOccurred>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e02d      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe fbed 	bl	8000e30 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11a      	bne.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b20      	cmp	r3, #32
 8002674:	d013      	beq.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d1c8      	bne.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d068      	beq.n	80027b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ec:	e049      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d045      	beq.n	8002782 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fb9b 	bl	8000e30 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_IsErrorOccurred+0x54>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800271e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272e:	d121      	bne.n	8002774 <I2C_IsErrorOccurred+0xbc>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002736:	d01d      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d01a      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800274e:	f7fe fb6f 	bl	8000e30 <HAL_GetTick>
 8002752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	e00e      	b.n	8002774 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002756:	f7fe fb6b 	bl	8000e30 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b19      	cmp	r3, #25
 8002762:	d907      	bls.n	8002774 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002772:	e006      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1e9      	bne.n	8002756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b20      	cmp	r3, #32
 800278e:	d003      	beq.n	8002798 <I2C_IsErrorOccurred+0xe0>
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0aa      	beq.n	80026ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fe45 	bl	80024bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <I2C_IsErrorOccurred+0x1bc>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800286a:	4618      	mov	r0, r3
 800286c:	3728      	adds	r7, #40	; 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002890:	7a7b      	ldrb	r3, [r7, #9]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002898:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <I2C_TransferConfig+0x60>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	43db      	mvns	r3, r3
 80028bc:	ea02 0103 	and.w	r1, r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	03ff63ff 	.word	0x03ff63ff

080028dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d138      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e032      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800292e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d139      	bne.n	80029fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002992:	2302      	movs	r3, #2
 8002994:	e033      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2224      	movs	r2, #36	; 0x24
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f001 b823 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 817d 	beq.w	8002d42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a48:	4bbc      	ldr	r3, [pc, #752]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a54:	4bb9      	ldr	r3, [pc, #740]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d15c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x10e>
 8002a60:	4bb6      	ldr	r3, [pc, #728]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d155      	bne.n	8002b1a <HAL_RCC_OscConfig+0x10e>
 8002a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x94>
 8002a9a:	4ba8      	ldr	r3, [pc, #672]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e015      	b.n	8002acc <HAL_RCC_OscConfig+0xc0>
 8002aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002abc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ad4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ae0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 811f 	beq.w	8002d40 <HAL_RCC_OscConfig+0x334>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8116 	bne.w	8002d40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f000 bfaf 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12e>
 8002b2c:	4b83      	ldr	r3, [pc, #524]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a82      	ldr	r2, [pc, #520]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e036      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x158>
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7b      	ldr	r2, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a78      	ldr	r2, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e021      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x184>
 8002b76:	4b71      	ldr	r3, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a70      	ldr	r2, [pc, #448]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba8:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f023 020f 	bic.w	r2, r3, #15
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	495f      	ldr	r1, [pc, #380]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d059      	beq.n	8002c86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe f92d 	bl	8000e30 <HAL_GetTick>
 8002bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f928 	bl	8000e30 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b64      	cmp	r3, #100	; 0x64
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f000 bf43 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x218>
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x244>
 8002c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c28:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c54:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ab      	beq.n	8002bdc <HAL_RCC_OscConfig+0x1d0>
 8002c84:	e05d      	b.n	8002d42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe f8d3 	bl	8000e30 <HAL_GetTick>
 8002c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe f8ce 	bl	8000e30 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	; 0x64
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f000 bee9 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002caa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002cba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2cc>
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f8>
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d08:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d18:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ab      	bne.n	8002c90 <HAL_RCC_OscConfig+0x284>
 8002d38:	e003      	b.n	8002d42 <HAL_RCC_OscConfig+0x336>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 817d 	beq.w	8003052 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d58:	4ba6      	ldr	r3, [pc, #664]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d64:	4ba3      	ldr	r3, [pc, #652]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d172      	bne.n	8002e56 <HAL_RCC_OscConfig+0x44a>
 8002d70:	4ba0      	ldr	r3, [pc, #640]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d16c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x44a>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x3a0>
 8002da6:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c8>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dd0:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002dda:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dde:	fa92 f2a2 	rbit	r2, r2
 8002de2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002de6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0220 	orr.w	r2, r2, #32
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x410>
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f000 be2e 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	21f8      	movs	r1, #248	; 0xf8
 8002e32:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e3a:	fa91 f1a1 	rbit	r1, r1
 8002e3e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e42:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e46:	fab1 f181 	clz	r1, r1
 8002e4a:	b2c9      	uxtb	r1, r1
 8002e4c:	408b      	lsls	r3, r1
 8002e4e:	4969      	ldr	r1, [pc, #420]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e54:	e0fd      	b.n	8003052 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8088 	beq.w	8002f78 <HAL_RCC_OscConfig+0x56c>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2301      	movs	r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd ffcc 	bl	8000e30 <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fd ffc7 	bl	8000e30 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 bde2 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d8>
 8002ede:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e013      	b.n	8002f0c <HAL_RCC_OscConfig+0x500>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002efc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f12:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0af      	beq.n	8002e9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	21f8      	movs	r1, #248	; 0xf8
 8002f54:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f5c:	fa91 f1a1 	rbit	r1, r1
 8002f60:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f64:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f68:	fab1 f181 	clz	r1, r1
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	408b      	lsls	r3, r1
 8002f70:	4920      	ldr	r1, [pc, #128]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
 8002f76:	e06c      	b.n	8003052 <HAL_RCC_OscConfig+0x646>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd ff44 	bl	8000e30 <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fd ff3f 	bl	8000e30 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	f000 bd5a 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d104      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5ec>
 8002fee:	4b01      	ldr	r3, [pc, #4]	; (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e015      	b.n	8003020 <HAL_RCC_OscConfig+0x614>
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800301c:	4bc8      	ldr	r3, [pc, #800]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2202      	movs	r2, #2
 8003022:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003026:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003032:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003036:	fab2 f282 	clz	r2, r2
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f042 0220 	orr.w	r2, r2, #32
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f002 021f 	and.w	r2, r2, #31
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ad      	bne.n	8002fae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8110 	beq.w	8003288 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d079      	beq.n	800316c <HAL_RCC_OscConfig+0x760>
 8003078:	2301      	movs	r3, #1
 800307a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800308a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4bab      	ldr	r3, [pc, #684]	; (8003344 <HAL_RCC_OscConfig+0x938>)
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	461a      	mov	r2, r3
 800309e:	2301      	movs	r3, #1
 80030a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fd fec5 	bl	8000e30 <HAL_GetTick>
 80030a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fd fec0 	bl	8000e30 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	f000 bcdb 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003100:	2202      	movs	r2, #2
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800311a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 800311e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003128:	2102      	movs	r1, #2
 800312a:	6019      	str	r1, [r3, #0]
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f1a3 	rbit	r1, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003142:	6019      	str	r1, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0a0      	beq.n	80030ac <HAL_RCC_OscConfig+0x6a0>
 800316a:	e08d      	b.n	8003288 <HAL_RCC_OscConfig+0x87c>
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800318e:	601a      	str	r2, [r3, #0]
  return result;
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003198:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x938>)
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	2300      	movs	r3, #0
 80031ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fe3f 	bl	8000e30 <HAL_GetTick>
 80031b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fd fe3a 	bl	8000e30 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d902      	bls.n	80031ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	f000 bc55 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031fa:	2202      	movs	r2, #2
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800321e:	2202      	movs	r2, #2
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 800323c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003246:	2102      	movs	r1, #2
 8003248:	6019      	str	r1, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f1a3 	rbit	r1, r3
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003260:	6019      	str	r1, [r3, #0]
  return result;
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d197      	bne.n	80031b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 81a1 	beq.w	80035e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	61d3      	str	r3, [r2, #28]
 80032bc:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11a      	bne.n	8003320 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7fd fd9b 	bl	8000e30 <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	e009      	b.n	8003314 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003300:	f7fd fd96 	bl	8000e30 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e3b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x93c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10d      	bne.n	800334c <HAL_RCC_OscConfig+0x940>
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a02      	ldr	r2, [pc, #8]	; (8003340 <HAL_RCC_OscConfig+0x934>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e03c      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	10908120 	.word	0x10908120
 8003348:	40007000 	.word	0x40007000
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <HAL_RCC_OscConfig+0x96a>
 800335c:	4bc1      	ldr	r3, [pc, #772]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4ac0      	ldr	r2, [pc, #768]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	4bbe      	ldr	r3, [pc, #760]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4abd      	ldr	r2, [pc, #756]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	e020      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x994>
 8003386:	4bb7      	ldr	r3, [pc, #732]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4ab6      	ldr	r2, [pc, #728]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	4bb4      	ldr	r3, [pc, #720]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4ab3      	ldr	r2, [pc, #716]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 80033a0:	4bb0      	ldr	r3, [pc, #704]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4aaf      	ldr	r2, [pc, #700]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	4bad      	ldr	r3, [pc, #692]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4aac      	ldr	r2, [pc, #688]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8081 	beq.w	80034cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fd31 	bl	8000e30 <HAL_GetTick>
 80033ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fd fd2c 	bl	8000e30 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e345      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033f4:	2202      	movs	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003432:	601a      	str	r2, [r3, #0]
  return result;
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800343c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0xa4c>
 8003452:	4b84      	ldr	r3, [pc, #528]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0xa74>
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003460:	2202      	movs	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4b79      	ldr	r3, [pc, #484]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003484:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003488:	2102      	movs	r1, #2
 800348a:	6011      	str	r1, [r2, #0]
 800348c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003490:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	fa92 f1a2 	rbit	r1, r2
 800349a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034a2:	6011      	str	r1, [r2, #0]
  return result;
 80034a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f002 021f 	and.w	r2, r2, #31
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d084      	beq.n	80033d4 <HAL_RCC_OscConfig+0x9c8>
 80034ca:	e07f      	b.n	80035cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fd fcb0 	bl	8000e30 <HAL_GetTick>
 80034d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fd fcab 	bl	8000e30 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e2c4      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003534:	601a      	str	r2, [r3, #0]
  return result;
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800353e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d102      	bne.n	800355a <HAL_RCC_OscConfig+0xb4e>
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	e013      	b.n	8003582 <HAL_RCC_OscConfig+0xb76>
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003562:	2202      	movs	r2, #2
 8003564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003586:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800358a:	2102      	movs	r1, #2
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003592:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	fa92 f1a2 	rbit	r1, r2
 800359c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035a4:	6011      	str	r1, [r2, #0]
  return result;
 80035a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d184      	bne.n	80034d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8242 	beq.w	8003a76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	f000 8213 	beq.w	8003a26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f040 8162 	bne.w	80038d6 <HAL_RCC_OscConfig+0xeca>
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800361a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800364c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd fbea 	bl	8000e30 <HAL_GetTick>
 800365c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0xc70>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fbe2 	bl	8000e30 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1fd      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0xcba>
 80036c0:	4bb0      	ldr	r3, [pc, #704]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e027      	b.n	8003716 <HAL_RCC_OscConfig+0xd0a>
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	4b9c      	ldr	r3, [pc, #624]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800371a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800371e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003722:	6011      	str	r1, [r2, #0]
 8003724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003728:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	fa92 f1a2 	rbit	r1, r2
 8003732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003736:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800373a:	6011      	str	r1, [r2, #0]
  return result;
 800373c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003740:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0220 	orr.w	r2, r2, #32
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d182      	bne.n	8003668 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	430b      	orrs	r3, r1
 8003784:	497f      	ldr	r1, [pc, #508]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
 800378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003792:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037ae:	601a      	str	r2, [r3, #0]
  return result;
 80037b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2301      	movs	r3, #1
 80037ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fb2e 	bl	8000e30 <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	e009      	b.n	80037ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fb29 	bl	8000e30 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e144      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003812:	601a      	str	r2, [r3, #0]
  return result;
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800381c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_OscConfig+0xe2c>
 8003832:	4b54      	ldr	r3, [pc, #336]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e027      	b.n	8003888 <HAL_RCC_OscConfig+0xe7c>
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003890:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	fa92 f1a2 	rbit	r1, r2
 80038a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038ac:	6011      	str	r1, [r2, #0]
  return result;
 80038ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d082      	beq.n	80037da <HAL_RCC_OscConfig+0xdce>
 80038d4:	e0cf      	b.n	8003a76 <HAL_RCC_OscConfig+0x106a>
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	fa93 f2a3 	rbit	r2, r3
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038fa:	601a      	str	r2, [r3, #0]
  return result;
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003904:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd fa88 	bl	8000e30 <HAL_GetTick>
 8003920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	e009      	b.n	800393a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003926:	f7fd fa83 	bl	8000e30 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e09e      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800395e:	601a      	str	r2, [r3, #0]
  return result;
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d104      	bne.n	8003988 <HAL_RCC_OscConfig+0xf7c>
 800397e:	4b01      	ldr	r3, [pc, #4]	; (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e029      	b.n	80039d8 <HAL_RCC_OscConfig+0xfcc>
 8003984:	40021000 	.word	0x40021000
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	fa93 f2a3 	rbit	r2, r3
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x1078>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	fa92 f1a2 	rbit	r1, r2
 80039f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039fc:	6011      	str	r1, [r2, #0]
  return result;
 80039fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d180      	bne.n	8003926 <HAL_RCC_OscConfig+0xf1a>
 8003a24:	e027      	b.n	8003a76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01e      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_OscConfig+0x1078>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09e      	sub	sp, #120	; 0x78
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e162      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b90      	ldr	r3, [pc, #576]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b8d      	ldr	r3, [pc, #564]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	498b      	ldr	r1, [pc, #556]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b89      	ldr	r3, [pc, #548]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e14a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	497f      	ldr	r1, [pc, #508]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80dc 	beq.w	8003cb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d13c      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xf6>
 8003b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xa6>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	e00f      	b.n	8003b4e <HAL_RCC_ClockConfig+0xc6>
 8003b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b40:	663b      	str	r3, [r7, #96]	; 0x60
 8003b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b56:	fa92 f2a2 	rbit	r2, r2
 8003b5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d17b      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0f3      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d13c      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x178>
 8003b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x128>
 8003baa:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e00f      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13a      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b2      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
 8003c00:	2302      	movs	r3, #2
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	e00d      	b.n	8003c44 <HAL_RCC_ClockConfig+0x1bc>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	61ba      	str	r2, [r7, #24]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	617a      	str	r2, [r7, #20]
  return result;
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f042 0220 	orr.w	r2, r2, #32
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f002 021f 	and.w	r2, r2, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e079      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	491a      	ldr	r1, [pc, #104]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fd f8d4 	bl	8000e30 <HAL_GetTick>
 8003c88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd f8d0 	bl	8000e30 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e061      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d214      	bcs.n	8003cec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4906      	ldr	r1, [pc, #24]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e040      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	491a      	ldr	r1, [pc, #104]	; (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4912      	ldr	r1, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d2a:	f000 f829 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d2e:	4601      	mov	r1, r0
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d38:	22f0      	movs	r2, #240	; 0xf0
 8003d3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	fa92 f2a2 	rbit	r2, r2
 8003d42:	60fa      	str	r2, [r7, #12]
  return result;
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	40d3      	lsrs	r3, r2
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x2ec>)
 8003d50:	5cd3      	ldrb	r3, [r2, r3]
 8003d52:	fa21 f303 	lsr.w	r3, r1, r3
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <HAL_RCC_ClockConfig+0x2f0>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_ClockConfig+0x2f4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fc ff30 	bl	8000bc4 <HAL_InitTick>
  
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3778      	adds	r7, #120	; 0x78
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08006e68 	.word	0x08006e68
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	20000004 	.word	0x20000004

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b08b      	sub	sp, #44	; 0x2c
 8003d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x30>
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dae:	e03c      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003db2:	623b      	str	r3, [r7, #32]
      break;
 8003db4:	e03c      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003dbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	607a      	str	r2, [r7, #4]
  return result;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	fab2 f282 	clz	r2, r2
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	40d3      	lsrs	r3, r2
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dda:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	220f      	movs	r2, #15
 8003de4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	fa92 f2a2 	rbit	r2, r2
 8003dec:	60fa      	str	r2, [r7, #12]
  return result;
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	fab2 f282 	clz	r2, r2
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	40d3      	lsrs	r3, r2
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	e004      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	623b      	str	r3, [r7, #32]
      break;
 8003e28:	e002      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e2c:	623b      	str	r3, [r7, #32]
      break;
 8003e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	372c      	adds	r7, #44	; 0x2c
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	007a1200 	.word	0x007a1200
 8003e48:	08006e80 	.word	0x08006e80
 8003e4c:	08006e90 	.word	0x08006e90
 8003e50:	003d0900 	.word	0x003d0900

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000000 	.word	0x20000000

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e72:	f7ff ffef 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e76:	4601      	mov	r1, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	fa92 f2a2 	rbit	r2, r2
 8003e8c:	603a      	str	r2, [r7, #0]
  return result;
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	fab2 f282 	clz	r2, r2
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	40d3      	lsrs	r3, r2
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08006e78 	.word	0x08006e78

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eb6:	f7ff ffcd 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ec4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ec8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	fa92 f2a2 	rbit	r2, r2
 8003ed0:	603a      	str	r2, [r7, #0]
  return result;
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	40d3      	lsrs	r3, r2
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08006e78 	.word	0x08006e78

08003ef4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	220f      	movs	r2, #15
 8003f02:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_RCC_GetClockConfig+0x60>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0207 	and.w	r2, r3, #7
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40022000 	.word	0x40022000

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b092      	sub	sp, #72	; 0x48
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80d4 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10e      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
 8003f94:	4b48      	ldr	r3, [pc, #288]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b42      	ldr	r3, [pc, #264]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fc ff37 	bl	8000e30 <HAL_GetTick>
 8003fc2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fc ff33 	bl	8000e30 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e14b      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8084 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d07c      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004004:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	2301      	movs	r3, #1
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004056:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d04b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fc fee3 	bl	8000e30 <HAL_GetTick>
 800406a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fc fedf 	bl	8000e30 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0f5      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004084:	2302      	movs	r3, #2
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
 8004090:	2302      	movs	r3, #2
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	61fb      	str	r3, [r7, #28]
  return result;
 800409c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d108      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040b2:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	e00d      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	10908100 	.word	0x10908100
 80040c4:	2302      	movs	r3, #2
 80040c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2202      	movs	r2, #2
 80040d6:	613a      	str	r2, [r7, #16]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	fa92 f2a2 	rbit	r2, r2
 80040de:	60fa      	str	r2, [r7, #12]
  return result;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fab2 f282 	clz	r2, r2
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	f002 021f 	and.w	r2, r2, #31
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f202 	lsl.w	r2, r1, r2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0b7      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040fe:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495b      	ldr	r1, [pc, #364]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004110:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b57      	ldr	r3, [pc, #348]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4a56      	ldr	r2, [pc, #344]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004130:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494e      	ldr	r1, [pc, #312]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4947      	ldr	r1, [pc, #284]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	493f      	ldr	r1, [pc, #252]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f023 0220 	bic.w	r2, r3, #32
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	4938      	ldr	r1, [pc, #224]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004198:	4313      	orrs	r3, r2
 800419a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4930      	ldr	r1, [pc, #192]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4929      	ldr	r1, [pc, #164]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	4921      	ldr	r1, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	491a      	ldr	r1, [pc, #104]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004210:	4313      	orrs	r3, r2
 8004212:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	4912      	ldr	r1, [pc, #72]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800422e:	4313      	orrs	r3, r2
 8004230:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	490b      	ldr	r1, [pc, #44]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3748      	adds	r7, #72	; 0x48
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e049      	b.n	8004322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f841 	bl	800432a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 f9dc 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e03b      	b.n	80043d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_TIM_Base_Start_IT+0x9c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_TIM_Base_Start_IT+0x4e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004382:	d004      	beq.n	800438e <HAL_TIM_Base_Start_IT+0x4e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d115      	bne.n	80043ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004396:	4013      	ands	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d015      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x8c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d011      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	e008      	b.n	80043cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e000      	b.n	80043ce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014000 	.word	0x40014000
 80043e4:	00010007 	.word	0x00010007

080043e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0202 	mvn.w	r2, #2
 8004414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f905 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8f7 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f908 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0204 	mvn.w	r2, #4
 8004468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8db 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8cd 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8de 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0208 	mvn.w	r2, #8
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8b1 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8a3 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8b4 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b10      	cmp	r3, #16
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0210 	mvn.w	r2, #16
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2208      	movs	r2, #8
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f887 	bl	800463a <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f879 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f88a 	bl	800464e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0201 	mvn.w	r2, #1
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fa2e 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8e8 	bl	8004768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d10e      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8db 	bl	800477c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f838 	bl	8004662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b20      	cmp	r3, #32
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0220 	mvn.w	r2, #32
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f89b 	bl	8004754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2e      	ldr	r2, [pc, #184]	; (8004744 <TIM_Base_SetConfig+0xcc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0x20>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d108      	bne.n	80046aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <TIM_Base_SetConfig+0xcc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <TIM_Base_SetConfig+0x5a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0x5a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a22      	ldr	r2, [pc, #136]	; (8004748 <TIM_Base_SetConfig+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0x5a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a21      	ldr	r2, [pc, #132]	; (800474c <TIM_Base_SetConfig+0xd4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x5a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <TIM_Base_SetConfig+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <TIM_Base_SetConfig+0xcc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_Base_SetConfig+0xb0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <TIM_Base_SetConfig+0xd0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_Base_SetConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0c      	ldr	r2, [pc, #48]	; (800474c <TIM_Base_SetConfig+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_Base_SetConfig+0xb0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <TIM_Base_SetConfig+0xd8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d103      	bne.n	8004730 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	615a      	str	r2, [r3, #20]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40014000 	.word	0x40014000
 800474c:	40014400 	.word	0x40014400
 8004750:	40014800 	.word	0x40014800

08004754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e040      	b.n	8004824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc f9c4 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	; 0x24
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f82c 	bl	800482c <UART_SetConfig>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e022      	b.n	8004824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f956 	bl	8004a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f9dd 	bl	8004bdc <UART_CheckIdleState>
 8004822:	4603      	mov	r3, r0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b8a      	ldr	r3, [pc, #552]	; (8004a80 <UART_SetConfig+0x254>)
 8004858:	4013      	ands	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	6979      	ldr	r1, [r7, #20]
 8004860:	430b      	orrs	r3, r1
 8004862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	430a      	orrs	r2, r1
 800489c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a78      	ldr	r2, [pc, #480]	; (8004a84 <UART_SetConfig+0x258>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d120      	bne.n	80048ea <UART_SetConfig+0xbe>
 80048a8:	4b77      	ldr	r3, [pc, #476]	; (8004a88 <UART_SetConfig+0x25c>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d817      	bhi.n	80048e4 <UART_SetConfig+0xb8>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <UART_SetConfig+0x90>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048df 	.word	0x080048df
 80048c8:	080048d3 	.word	0x080048d3
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e01d      	b.n	800490e <UART_SetConfig+0xe2>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e01a      	b.n	800490e <UART_SetConfig+0xe2>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e017      	b.n	800490e <UART_SetConfig+0xe2>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e014      	b.n	800490e <UART_SetConfig+0xe2>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e011      	b.n	800490e <UART_SetConfig+0xe2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a67      	ldr	r2, [pc, #412]	; (8004a8c <UART_SetConfig+0x260>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d102      	bne.n	80048fa <UART_SetConfig+0xce>
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e009      	b.n	800490e <UART_SetConfig+0xe2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a64      	ldr	r2, [pc, #400]	; (8004a90 <UART_SetConfig+0x264>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d102      	bne.n	800490a <UART_SetConfig+0xde>
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e001      	b.n	800490e <UART_SetConfig+0xe2>
 800490a:	2310      	movs	r3, #16
 800490c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004916:	d15a      	bne.n	80049ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004918:	7ffb      	ldrb	r3, [r7, #31]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d827      	bhi.n	800496e <UART_SetConfig+0x142>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0xf8>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7ff fa90 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 800494c:	61b8      	str	r0, [r7, #24]
        break;
 800494e:	e013      	b.n	8004978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7ff faae 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8004954:	61b8      	str	r0, [r7, #24]
        break;
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b4e      	ldr	r3, [pc, #312]	; (8004a94 <UART_SetConfig+0x268>)
 800495a:	61bb      	str	r3, [r7, #24]
        break;
 800495c:	e00c      	b.n	8004978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7ff fa0f 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8004962:	61b8      	str	r0, [r7, #24]
        break;
 8004964:	e008      	b.n	8004978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	61bb      	str	r3, [r7, #24]
        break;
 800496c:	e004      	b.n	8004978 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77bb      	strb	r3, [r7, #30]
        break;
 8004976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d074      	beq.n	8004a68 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	005a      	lsls	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d916      	bls.n	80049c8 <UART_SetConfig+0x19c>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d212      	bcs.n	80049c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f023 030f 	bic.w	r3, r3, #15
 80049aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	89fb      	ldrh	r3, [r7, #14]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	89fa      	ldrh	r2, [r7, #14]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e04f      	b.n	8004a68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77bb      	strb	r3, [r7, #30]
 80049cc:	e04c      	b.n	8004a68 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ce:	7ffb      	ldrb	r3, [r7, #31]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d828      	bhi.n	8004a26 <UART_SetConfig+0x1fa>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x1b0>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7ff fa34 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004a04:	61b8      	str	r0, [r7, #24]
        break;
 8004a06:	e013      	b.n	8004a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7ff fa52 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61b8      	str	r0, [r7, #24]
        break;
 8004a0e:	e00f      	b.n	8004a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <UART_SetConfig+0x268>)
 8004a12:	61bb      	str	r3, [r7, #24]
        break;
 8004a14:	e00c      	b.n	8004a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7ff f9b3 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8004a1a:	61b8      	str	r0, [r7, #24]
        break;
 8004a1c:	e008      	b.n	8004a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61bb      	str	r3, [r7, #24]
        break;
 8004a24:	e004      	b.n	8004a30 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085a      	lsrs	r2, r3, #1
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	441a      	add	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b0f      	cmp	r3, #15
 8004a4e:	d909      	bls.n	8004a64 <UART_SetConfig+0x238>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	d205      	bcs.n	8004a64 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	e001      	b.n	8004a68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	efff69f3 	.word	0xefff69f3
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	007a1200 	.word	0x007a1200

08004a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b96:	d10a      	bne.n	8004bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b098      	sub	sp, #96	; 0x60
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bec:	f7fc f920 	bl	8000e30 <HAL_GetTick>
 8004bf0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d12e      	bne.n	8004c5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f88c 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d021      	beq.n	8004c5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e062      	b.n	8004d24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d149      	bne.n	8004d00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f856 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d03c      	beq.n	8004d00 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	623b      	str	r3, [r7, #32]
   return(result);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e011      	b.n	8004d24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3758      	adds	r7, #88	; 0x58
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3c:	e049      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d045      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fc f873 	bl	8000e30 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e048      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d031      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d110      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f838 	bl	8004dfa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e029      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dac:	d111      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f81e 	bl	8004dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e00f      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0a6      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b095      	sub	sp, #84	; 0x54
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
 8004e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d118      	bne.n	8004ea2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004eb6:	bf00      	nop
 8004eb8:	3754      	adds	r7, #84	; 0x54
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed4:	2b84      	cmp	r3, #132	; 0x84
 8004ed6:	d005      	beq.n	8004ee4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ed8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ef6:	f000 faed 	bl	80054d4 <vTaskStartScheduler>
  
  return osOK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d020      	beq.n	8004f54 <osThreadCreate+0x54>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01c      	beq.n	8004f54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685c      	ldr	r4, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691e      	ldr	r6, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ffc8 	bl	8004ec2 <makeFreeRtosPriority>
 8004f32:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f3c:	9202      	str	r2, [sp, #8]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	9100      	str	r1, [sp, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	4632      	mov	r2, r6
 8004f46:	4629      	mov	r1, r5
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 f8ed 	bl	8005128 <xTaskCreateStatic>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e01c      	b.n	8004f8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685c      	ldr	r4, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f60:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ffaa 	bl	8004ec2 <makeFreeRtosPriority>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	9200      	str	r2, [sp, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 f92e 	bl	80051e0 <xTaskCreate>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e000      	b.n	8004f90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <osDelay+0x16>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	e000      	b.n	8004fb0 <osDelay+0x18>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa5b 	bl	800546c <vTaskDelay>
  
  return osOK;
 8004fb6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f103 0208 	add.w	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0208 	add.w	r2, r3, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d103      	bne.n	8005082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e00c      	b.n	800509c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3308      	adds	r3, #8
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e002      	b.n	8005090 <vListInsert+0x2e>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	429a      	cmp	r2, r3
 800509a:	d2f6      	bcs.n	800508a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6892      	ldr	r2, [r2, #8]
 80050ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d103      	bne.n	8005108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1e5a      	subs	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af04      	add	r7, sp, #16
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xTaskCreateStatic+0x46>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	61fb      	str	r3, [r7, #28]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800516e:	23a0      	movs	r3, #160	; 0xa0
 8005170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2ba0      	cmp	r3, #160	; 0xa0
 8005176:	d00a      	beq.n	800518e <xTaskCreateStatic+0x66>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	61bb      	str	r3, [r7, #24]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01e      	beq.n	80051d2 <xTaskCreateStatic+0xaa>
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01b      	beq.n	80051d2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ac:	2300      	movs	r3, #0
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	9302      	str	r3, [sp, #8]
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f851 	bl	800526c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051cc:	f000 f8e4 	bl	8005398 <prvAddNewTaskToReadyList>
 80051d0:	e001      	b.n	80051d6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051d6:	697b      	ldr	r3, [r7, #20]
	}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fef7 	bl	8005fe8 <pvPortMalloc>
 80051fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00e      	beq.n	8005220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005202:	20a0      	movs	r0, #160	; 0xa0
 8005204:	f000 fef0 	bl	8005fe8 <pvPortMalloc>
 8005208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
 8005216:	e005      	b.n	8005224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005218:	6978      	ldr	r0, [r7, #20]
 800521a:	f000 ffa9 	bl	8006170 <vPortFree>
 800521e:	e001      	b.n	8005224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d017      	beq.n	800525a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	2300      	movs	r3, #0
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	9302      	str	r3, [sp, #8]
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f80f 	bl	800526c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800524e:	69f8      	ldr	r0, [r7, #28]
 8005250:	f000 f8a2 	bl	8005398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005254:	2301      	movs	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	e002      	b.n	8005260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005260:	69bb      	ldr	r3, [r7, #24]
	}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005284:	3b01      	subs	r3, #1
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f023 0307 	bic.w	r3, r3, #7
 8005292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e012      	b.n	80052e0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	7819      	ldrb	r1, [r3, #0]
 80052c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	3334      	adds	r3, #52	; 0x34
 80052ca:	460a      	mov	r2, r1
 80052cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d9e9      	bls.n	80052ba <prvInitialiseNewTask+0x4e>
 80052e6:	e000      	b.n	80052ea <prvInitialiseNewTask+0x7e>
		{
			break;
 80052e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d901      	bls.n	80052fc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052f8:	2306      	movs	r3, #6
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2200      	movs	r2, #0
 800530c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fe74 	bl	8005000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	3318      	adds	r3, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fe6f 	bl	8005000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f1c3 0207 	rsb	r2, r3, #7
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	2200      	movs	r2, #0
 8005344:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	334c      	adds	r3, #76	; 0x4c
 800534c:	224c      	movs	r2, #76	; 0x4c
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f843 	bl	80063dc <memset>
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <prvInitialiseNewTask+0x120>)
 800535a:	651a      	str	r2, [r3, #80]	; 0x50
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <prvInitialiseNewTask+0x124>)
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	4a0b      	ldr	r2, [pc, #44]	; (8005394 <prvInitialiseNewTask+0x128>)
 8005366:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	69b8      	ldr	r0, [r7, #24]
 800536e:	f000 fc2b 	bl	8005bc8 <pxPortInitialiseStack>
 8005372:	4602      	mov	r2, r0
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005384:	bf00      	nop
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20001214 	.word	0x20001214
 8005390:	2000127c 	.word	0x2000127c
 8005394:	200012e4 	.word	0x200012e4

08005398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a0:	f000 fd40 	bl	8005e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <prvAddNewTaskToReadyList+0xb8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a29      	ldr	r2, [pc, #164]	; (8005450 <prvAddNewTaskToReadyList+0xb8>)
 80053ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ae:	4b29      	ldr	r3, [pc, #164]	; (8005454 <prvAddNewTaskToReadyList+0xbc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053b6:	4a27      	ldr	r2, [pc, #156]	; (8005454 <prvAddNewTaskToReadyList+0xbc>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053bc:	4b24      	ldr	r3, [pc, #144]	; (8005450 <prvAddNewTaskToReadyList+0xb8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d110      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053c4:	f000 fad2 	bl	800596c <prvInitialiseTaskLists>
 80053c8:	e00d      	b.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <prvAddNewTaskToReadyList+0xc0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <prvAddNewTaskToReadyList+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d802      	bhi.n	80053e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <prvAddNewTaskToReadyList+0xbc>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <prvAddNewTaskToReadyList+0xc4>)
 80053ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	409a      	lsls	r2, r3
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <prvAddNewTaskToReadyList+0xc8>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <prvAddNewTaskToReadyList+0xcc>)
 8005410:	441a      	add	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7ff fdfe 	bl	800501a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800541e:	f000 fd31 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <prvAddNewTaskToReadyList+0xc0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvAddNewTaskToReadyList+0xbc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	429a      	cmp	r2, r3
 8005436:	d207      	bcs.n	8005448 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <prvAddNewTaskToReadyList+0xd0>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200005c8 	.word	0x200005c8
 8005454:	200004c8 	.word	0x200004c8
 8005458:	200005d4 	.word	0x200005d4
 800545c:	200005e4 	.word	0x200005e4
 8005460:	200005d0 	.word	0x200005d0
 8005464:	200004cc 	.word	0x200004cc
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d017      	beq.n	80054ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <vTaskDelay+0x60>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <vTaskDelay+0x30>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60bb      	str	r3, [r7, #8]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800549c:	f000 f884 	bl	80055a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054a0:	2100      	movs	r1, #0
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fb2a 	bl	8005afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054a8:	f000 f88c 	bl	80055c4 <xTaskResumeAll>
 80054ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <vTaskDelay+0x64>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200005f0 	.word	0x200005f0
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054e2:	463a      	mov	r2, r7
 80054e4:	1d39      	adds	r1, r7, #4
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fa fec0 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2300      	movs	r3, #0
 8005500:	460a      	mov	r2, r1
 8005502:	4921      	ldr	r1, [pc, #132]	; (8005588 <vTaskStartScheduler+0xb4>)
 8005504:	4821      	ldr	r0, [pc, #132]	; (800558c <vTaskStartScheduler+0xb8>)
 8005506:	f7ff fe0f 	bl	8005128 <xTaskCreateStatic>
 800550a:	4603      	mov	r3, r0
 800550c:	4a20      	ldr	r2, [pc, #128]	; (8005590 <vTaskStartScheduler+0xbc>)
 800550e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <vTaskStartScheduler+0xbc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e001      	b.n	8005522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11b      	bne.n	8005560 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	613b      	str	r3, [r7, #16]
}
 800553a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <vTaskStartScheduler+0xc0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	334c      	adds	r3, #76	; 0x4c
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <vTaskStartScheduler+0xc4>)
 8005544:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <vTaskStartScheduler+0xc8>)
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800554e:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <vTaskStartScheduler+0xcc>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005554:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <vTaskStartScheduler+0xd0>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800555a:	f000 fbc1 	bl	8005ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800555e:	e00e      	b.n	800557e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d10a      	bne.n	800557e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60fb      	str	r3, [r7, #12]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <vTaskStartScheduler+0xa8>
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	08006e60 	.word	0x08006e60
 800558c:	0800593d 	.word	0x0800593d
 8005590:	200005ec 	.word	0x200005ec
 8005594:	200004c8 	.word	0x200004c8
 8005598:	2000005c 	.word	0x2000005c
 800559c:	200005e8 	.word	0x200005e8
 80055a0:	200005d4 	.word	0x200005d4
 80055a4:	200005cc 	.word	0x200005cc

080055a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <vTaskSuspendAll+0x18>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4a03      	ldr	r2, [pc, #12]	; (80055c0 <vTaskSuspendAll+0x18>)
 80055b4:	6013      	str	r3, [r2, #0]
}
 80055b6:	bf00      	nop
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	200005f0 	.word	0x200005f0

080055c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055d2:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <xTaskResumeAll+0x114>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	603b      	str	r3, [r7, #0]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055f0:	f000 fc18 	bl	8005e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055f4:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <xTaskResumeAll+0x114>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	4a37      	ldr	r2, [pc, #220]	; (80056d8 <xTaskResumeAll+0x114>)
 80055fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <xTaskResumeAll+0x114>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d161      	bne.n	80056ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005606:	4b35      	ldr	r3, [pc, #212]	; (80056dc <xTaskResumeAll+0x118>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d05d      	beq.n	80056ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800560e:	e02e      	b.n	800566e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <xTaskResumeAll+0x11c>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3318      	adds	r3, #24
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fd59 	bl	80050d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fd54 	bl	80050d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	2201      	movs	r2, #1
 8005632:	409a      	lsls	r2, r3
 8005634:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <xTaskResumeAll+0x120>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <xTaskResumeAll+0x120>)
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <xTaskResumeAll+0x124>)
 800564c:	441a      	add	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7ff fce0 	bl	800501a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4b23      	ldr	r3, [pc, #140]	; (80056ec <xTaskResumeAll+0x128>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	429a      	cmp	r2, r3
 8005666:	d302      	bcc.n	800566e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <xTaskResumeAll+0x12c>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566e:	4b1c      	ldr	r3, [pc, #112]	; (80056e0 <xTaskResumeAll+0x11c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1cc      	bne.n	8005610 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800567c:	f000 fa18 	bl	8005ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <xTaskResumeAll+0x130>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d010      	beq.n	80056ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800568c:	f000 f836 	bl	80056fc <xTaskIncrementTick>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <xTaskResumeAll+0x12c>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f1      	bne.n	800568c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <xTaskResumeAll+0x130>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <xTaskResumeAll+0x12c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <xTaskResumeAll+0x134>)
 80056bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f000 fbdb 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 80056ce:	68bb      	ldr	r3, [r7, #8]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200005f0 	.word	0x200005f0
 80056dc:	200005c8 	.word	0x200005c8
 80056e0:	20000588 	.word	0x20000588
 80056e4:	200005d0 	.word	0x200005d0
 80056e8:	200004cc 	.word	0x200004cc
 80056ec:	200004c8 	.word	0x200004c8
 80056f0:	200005dc 	.word	0x200005dc
 80056f4:	200005d8 	.word	0x200005d8
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005706:	4b51      	ldr	r3, [pc, #324]	; (800584c <xTaskIncrementTick+0x150>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 808d 	bne.w	800582a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005710:	4b4f      	ldr	r3, [pc, #316]	; (8005850 <xTaskIncrementTick+0x154>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005718:	4a4d      	ldr	r2, [pc, #308]	; (8005850 <xTaskIncrementTick+0x154>)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d120      	bne.n	8005766 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005724:	4b4b      	ldr	r3, [pc, #300]	; (8005854 <xTaskIncrementTick+0x158>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <xTaskIncrementTick+0x48>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	603b      	str	r3, [r7, #0]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <xTaskIncrementTick+0x46>
 8005744:	4b43      	ldr	r3, [pc, #268]	; (8005854 <xTaskIncrementTick+0x158>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	4b43      	ldr	r3, [pc, #268]	; (8005858 <xTaskIncrementTick+0x15c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a41      	ldr	r2, [pc, #260]	; (8005854 <xTaskIncrementTick+0x158>)
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	4a41      	ldr	r2, [pc, #260]	; (8005858 <xTaskIncrementTick+0x15c>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b40      	ldr	r3, [pc, #256]	; (800585c <xTaskIncrementTick+0x160>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3301      	adds	r3, #1
 800575e:	4a3f      	ldr	r2, [pc, #252]	; (800585c <xTaskIncrementTick+0x160>)
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	f000 f9a5 	bl	8005ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <xTaskIncrementTick+0x164>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	429a      	cmp	r2, r3
 800576e:	d34d      	bcc.n	800580c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	4b38      	ldr	r3, [pc, #224]	; (8005854 <xTaskIncrementTick+0x158>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <xTaskIncrementTick+0x82>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xTaskIncrementTick+0x84>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005784:	4b36      	ldr	r3, [pc, #216]	; (8005860 <xTaskIncrementTick+0x164>)
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	601a      	str	r2, [r3, #0]
					break;
 800578c:	e03e      	b.n	800580c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xTaskIncrementTick+0x158>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d203      	bcs.n	80057ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057a6:	4a2e      	ldr	r2, [pc, #184]	; (8005860 <xTaskIncrementTick+0x164>)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6013      	str	r3, [r2, #0]
						break;
 80057ac:	e02e      	b.n	800580c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fc8e 	bl	80050d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3318      	adds	r3, #24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fc85 	bl	80050d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <xTaskIncrementTick+0x168>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <xTaskIncrementTick+0x168>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a1f      	ldr	r2, [pc, #124]	; (8005868 <xTaskIncrementTick+0x16c>)
 80057ea:	441a      	add	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7ff fc11 	bl	800501a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <xTaskIncrementTick+0x170>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	429a      	cmp	r2, r3
 8005804:	d3b4      	bcc.n	8005770 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800580a:	e7b1      	b.n	8005770 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800580c:	4b17      	ldr	r3, [pc, #92]	; (800586c <xTaskIncrementTick+0x170>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4915      	ldr	r1, [pc, #84]	; (8005868 <xTaskIncrementTick+0x16c>)
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d907      	bls.n	8005834 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e004      	b.n	8005834 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <xTaskIncrementTick+0x174>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3301      	adds	r3, #1
 8005830:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <xTaskIncrementTick+0x174>)
 8005832:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <xTaskIncrementTick+0x178>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005840:	697b      	ldr	r3, [r7, #20]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200005f0 	.word	0x200005f0
 8005850:	200005cc 	.word	0x200005cc
 8005854:	20000580 	.word	0x20000580
 8005858:	20000584 	.word	0x20000584
 800585c:	200005e0 	.word	0x200005e0
 8005860:	200005e8 	.word	0x200005e8
 8005864:	200005d0 	.word	0x200005d0
 8005868:	200004cc 	.word	0x200004cc
 800586c:	200004c8 	.word	0x200004c8
 8005870:	200005d8 	.word	0x200005d8
 8005874:	200005dc 	.word	0x200005dc

08005878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <vTaskSwitchContext+0xac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005886:	4b28      	ldr	r3, [pc, #160]	; (8005928 <vTaskSwitchContext+0xb0>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800588c:	e044      	b.n	8005918 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <vTaskSwitchContext+0xb0>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <vTaskSwitchContext+0xb4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058a2:	7afb      	ldrb	r3, [r7, #11]
 80058a4:	f1c3 031f 	rsb	r3, r3, #31
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	4921      	ldr	r1, [pc, #132]	; (8005930 <vTaskSwitchContext+0xb8>)
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vTaskSwitchContext+0x5a>
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a14      	ldr	r2, [pc, #80]	; (8005930 <vTaskSwitchContext+0xb8>)
 80058e0:	4413      	add	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3308      	adds	r3, #8
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d104      	bne.n	8005904 <vTaskSwitchContext+0x8c>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <vTaskSwitchContext+0xbc>)
 800590c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800590e:	4b09      	ldr	r3, [pc, #36]	; (8005934 <vTaskSwitchContext+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	334c      	adds	r3, #76	; 0x4c
 8005914:	4a08      	ldr	r2, [pc, #32]	; (8005938 <vTaskSwitchContext+0xc0>)
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	200005f0 	.word	0x200005f0
 8005928:	200005dc 	.word	0x200005dc
 800592c:	200005d0 	.word	0x200005d0
 8005930:	200004cc 	.word	0x200004cc
 8005934:	200004c8 	.word	0x200004c8
 8005938:	2000005c 	.word	0x2000005c

0800593c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005944:	f000 f852 	bl	80059ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <prvIdleTask+0x28>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d9f9      	bls.n	8005944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <prvIdleTask+0x2c>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005960:	e7f0      	b.n	8005944 <prvIdleTask+0x8>
 8005962:	bf00      	nop
 8005964:	200004cc 	.word	0x200004cc
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	e00c      	b.n	8005992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <prvInitialiseTaskLists+0x60>)
 8005984:	4413      	add	r3, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fb1a 	bl	8004fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3301      	adds	r3, #1
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b06      	cmp	r3, #6
 8005996:	d9ef      	bls.n	8005978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005998:	480d      	ldr	r0, [pc, #52]	; (80059d0 <prvInitialiseTaskLists+0x64>)
 800599a:	f7ff fb11 	bl	8004fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800599e:	480d      	ldr	r0, [pc, #52]	; (80059d4 <prvInitialiseTaskLists+0x68>)
 80059a0:	f7ff fb0e 	bl	8004fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059a4:	480c      	ldr	r0, [pc, #48]	; (80059d8 <prvInitialiseTaskLists+0x6c>)
 80059a6:	f7ff fb0b 	bl	8004fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059aa:	480c      	ldr	r0, [pc, #48]	; (80059dc <prvInitialiseTaskLists+0x70>)
 80059ac:	f7ff fb08 	bl	8004fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059b0:	480b      	ldr	r0, [pc, #44]	; (80059e0 <prvInitialiseTaskLists+0x74>)
 80059b2:	f7ff fb05 	bl	8004fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <prvInitialiseTaskLists+0x78>)
 80059b8:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <prvInitialiseTaskLists+0x64>)
 80059ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvInitialiseTaskLists+0x7c>)
 80059be:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <prvInitialiseTaskLists+0x68>)
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200004cc 	.word	0x200004cc
 80059d0:	20000558 	.word	0x20000558
 80059d4:	2000056c 	.word	0x2000056c
 80059d8:	20000588 	.word	0x20000588
 80059dc:	2000059c 	.word	0x2000059c
 80059e0:	200005b4 	.word	0x200005b4
 80059e4:	20000580 	.word	0x20000580
 80059e8:	20000584 	.word	0x20000584

080059ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f2:	e019      	b.n	8005a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059f4:	f000 fa16 	bl	8005e24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <prvCheckTasksWaitingTermination+0x50>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fb65 	bl	80050d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a1e:	f000 fa31 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f810 	bl	8005a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e1      	bne.n	80059f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	2000059c 	.word	0x2000059c
 8005a40:	200005c8 	.word	0x200005c8
 8005a44:	200005b0 	.word	0x200005b0

08005a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	334c      	adds	r3, #76	; 0x4c
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fcc9 	bl	80063ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d108      	bne.n	8005a76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb81 	bl	8006170 <vPortFree>
				vPortFree( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fb7e 	bl	8006170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a74:	e018      	b.n	8005aa8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d103      	bne.n	8005a88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fb75 	bl	8006170 <vPortFree>
	}
 8005a86:	e00f      	b.n	8005aa8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d00a      	beq.n	8005aa8 <prvDeleteTCB+0x60>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <prvDeleteTCB+0x5e>
	}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <prvResetNextTaskUnblockTime+0x44>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <prvResetNextTaskUnblockTime+0x14>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <prvResetNextTaskUnblockTime+0x16>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvResetNextTaskUnblockTime+0x48>)
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ad2:	e008      	b.n	8005ae6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <prvResetNextTaskUnblockTime+0x44>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <prvResetNextTaskUnblockTime+0x48>)
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000580 	.word	0x20000580
 8005af8:	200005e8 	.word	0x200005e8

08005afc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fade 	bl	80050d4 <uxListRemove>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	2201      	movs	r2, #1
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4013      	ands	r3, r2
 8005b32:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d10a      	bne.n	8005b54 <prvAddCurrentTaskToDelayedList+0x58>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	481a      	ldr	r0, [pc, #104]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b4e:	f7ff fa64 	bl	800501a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b52:	e026      	b.n	8005ba2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d209      	bcs.n	8005b80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7ff fa72 	bl	8005062 <vListInsert>
}
 8005b7e:	e010      	b.n	8005ba2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff fa68 	bl	8005062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d202      	bcs.n	8005ba2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b9c:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6013      	str	r3, [r2, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200005cc 	.word	0x200005cc
 8005bb0:	200004c8 	.word	0x200004c8
 8005bb4:	200005d0 	.word	0x200005d0
 8005bb8:	200005b4 	.word	0x200005b4
 8005bbc:	20000584 	.word	0x20000584
 8005bc0:	20000580 	.word	0x20000580
 8005bc4:	200005e8 	.word	0x200005e8

08005bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3b04      	subs	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <pxPortInitialiseStack+0x64>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b14      	subs	r3, #20
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f06f 0202 	mvn.w	r2, #2
 8005c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3b20      	subs	r3, #32
 8005c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	08005c31 	.word	0x08005c31

08005c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <prvTaskExitError+0x54>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d00a      	beq.n	8005c5a <prvTaskExitError+0x2a>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <prvTaskExitError+0x28>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c6e:	bf00      	nop
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0fc      	beq.n	8005c70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	2000000c 	.word	0x2000000c
	...

08005c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	4770      	bx	lr
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	200004c8 	.word	0x200004c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <prvPortStartFirstTask+0x24>)
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f380 8808 	msr	MSP, r0
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8814 	msr	CONTROL, r0
 8005cca:	b662      	cpsie	i
 8005ccc:	b661      	cpsie	f
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	df00      	svc	0
 8005cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cda:	bf00      	nop
 8005cdc:	e000ed08 	.word	0xe000ed08

08005ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <xPortStartScheduler+0x120>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a46      	ldr	r2, [pc, #280]	; (8005e04 <xPortStartScheduler+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10a      	bne.n	8005d06 <xPortStartScheduler+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xPortStartScheduler+0x120>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <xPortStartScheduler+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10a      	bne.n	8005d26 <xPortStartScheduler+0x46>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d26:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <xPortStartScheduler+0x12c>)
 8005d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <xPortStartScheduler+0x130>)
 8005d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d54:	e009      	b.n	8005d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d0ef      	beq.n	8005d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d00a      	beq.n	8005d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <xPortStartScheduler+0x134>)
 8005dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <xPortStartScheduler+0x138>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dce:	f000 f8dd 	bl	8005f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <xPortStartScheduler+0x13c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dd8:	f000 f8fc 	bl	8005fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xPortStartScheduler+0x140>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <xPortStartScheduler+0x140>)
 8005de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de8:	f7ff ff66 	bl	8005cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dec:	f7ff fd44 	bl	8005878 <vTaskSwitchContext>
	prvTaskExitError();
 8005df0:	f7ff ff1e 	bl	8005c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00
 8005e04:	410fc271 	.word	0x410fc271
 8005e08:	410fc270 	.word	0x410fc270
 8005e0c:	e000e400 	.word	0xe000e400
 8005e10:	200005f4 	.word	0x200005f4
 8005e14:	200005f8 	.word	0x200005f8
 8005e18:	e000ed20 	.word	0xe000ed20
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	e000ef34 	.word	0xe000ef34

08005e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10f      	bne.n	8005e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortEnterCritical+0x5c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vPortEnterCritical+0x4a>
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <vPortExitCritical+0x50>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <vPortExitCritical+0x24>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <vPortExitCritical+0x42>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7ff fcb2 	bl	8005878 <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	200004c8 	.word	0x200004c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f62:	f7ff fbcb 	bl	80056fc <xTaskIncrementTick>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <SysTick_Handler+0x40>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <vPortSetupTimerInterrupt+0x38>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <vPortSetupTimerInterrupt+0x40>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <vPortSetupTimerInterrupt+0x44>)
 8005faa:	3b01      	subs	r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	e000e018 	.word	0xe000e018
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	10624dd3 	.word	0x10624dd3
 8005fd0:	e000e014 	.word	0xe000e014

08005fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe4 <vPortEnableVFP+0x10>
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fde:	6001      	str	r1, [r0, #0]
 8005fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed88 	.word	0xe000ed88

08005fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff4:	f7ff fad8 	bl	80055a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff8:	4b58      	ldr	r3, [pc, #352]	; (800615c <pvPortMalloc+0x174>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006000:	f000 f910 	bl	8006224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006004:	4b56      	ldr	r3, [pc, #344]	; (8006160 <pvPortMalloc+0x178>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 808e 	bne.w	800612e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01d      	beq.n	8006054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006018:	2208      	movs	r2, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	3308      	adds	r3, #8
 8006032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <pvPortMalloc+0x6c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d069      	beq.n	800612e <pvPortMalloc+0x146>
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <pvPortMalloc+0x17c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d864      	bhi.n	800612e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006064:	4b40      	ldr	r3, [pc, #256]	; (8006168 <pvPortMalloc+0x180>)
 8006066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006068:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <pvPortMalloc+0x180>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800606e:	e004      	b.n	800607a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d903      	bls.n	800608c <pvPortMalloc+0xa4>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f1      	bne.n	8006070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800608c:	4b33      	ldr	r3, [pc, #204]	; (800615c <pvPortMalloc+0x174>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d04b      	beq.n	800612e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2208      	movs	r2, #8
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	2308      	movs	r3, #8
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d91f      	bls.n	80060f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <pvPortMalloc+0xf8>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	613b      	str	r3, [r7, #16]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f000 f8f8 	bl	80062e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f8:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <pvPortMalloc+0x17c>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <pvPortMalloc+0x17c>)
 8006104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <pvPortMalloc+0x17c>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <pvPortMalloc+0x184>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d203      	bcs.n	800611a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006112:	4b14      	ldr	r3, [pc, #80]	; (8006164 <pvPortMalloc+0x17c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a15      	ldr	r2, [pc, #84]	; (800616c <pvPortMalloc+0x184>)
 8006118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b10      	ldr	r3, [pc, #64]	; (8006160 <pvPortMalloc+0x178>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	431a      	orrs	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800612e:	f7ff fa49 	bl	80055c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <pvPortMalloc+0x16a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <pvPortMalloc+0x168>
	return pvReturn;
 8006152:	69fb      	ldr	r3, [r7, #28]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20001204 	.word	0x20001204
 8006160:	20001210 	.word	0x20001210
 8006164:	20001208 	.word	0x20001208
 8006168:	200011fc 	.word	0x200011fc
 800616c:	2000120c 	.word	0x2000120c

08006170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d048      	beq.n	8006214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006182:	2308      	movs	r3, #8
 8006184:	425b      	negs	r3, r3
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <vPortFree+0xac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <vPortFree+0x44>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <vPortFree+0x62>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	60bb      	str	r3, [r7, #8]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <vPortFree+0xac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d019      	beq.n	8006214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d115      	bne.n	8006214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <vPortFree+0xac>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	43db      	mvns	r3, r3
 80061f2:	401a      	ands	r2, r3
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061f8:	f7ff f9d6 	bl	80055a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <vPortFree+0xb0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4413      	add	r3, r2
 8006206:	4a06      	ldr	r2, [pc, #24]	; (8006220 <vPortFree+0xb0>)
 8006208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800620a:	6938      	ldr	r0, [r7, #16]
 800620c:	f000 f86c 	bl	80062e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006210:	f7ff f9d8 	bl	80055c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20001210 	.word	0x20001210
 8006220:	20001208 	.word	0x20001208

08006224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800622a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800622e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <prvHeapInit+0xac>)
 8006232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <prvHeapInit+0xac>)
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <prvHeapInit+0xb0>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <prvHeapInit+0xb0>)
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006270:	2208      	movs	r2, #8
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <prvHeapInit+0xb4>)
 8006284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <prvHeapInit+0xb4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800628e:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <prvHeapInit+0xb4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvHeapInit+0xb4>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvHeapInit+0xb8>)
 80062b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <prvHeapInit+0xbc>)
 80062ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062bc:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <prvHeapInit+0xc0>)
 80062be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	200005fc 	.word	0x200005fc
 80062d4:	200011fc 	.word	0x200011fc
 80062d8:	20001204 	.word	0x20001204
 80062dc:	2000120c 	.word	0x2000120c
 80062e0:	20001208 	.word	0x20001208
 80062e4:	20001210 	.word	0x20001210

080062e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <prvInsertBlockIntoFreeList+0xac>)
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e002      	b.n	80062fc <prvInsertBlockIntoFreeList+0x14>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d8f7      	bhi.n	80062f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d108      	bne.n	800632a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d118      	bne.n	8006370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d00d      	beq.n	8006366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e008      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e003      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d002      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200011fc 	.word	0x200011fc
 8006398:	20001204 	.word	0x20001204

0800639c <siprintf>:
 800639c:	b40e      	push	{r1, r2, r3}
 800639e:	b500      	push	{lr}
 80063a0:	b09c      	sub	sp, #112	; 0x70
 80063a2:	ab1d      	add	r3, sp, #116	; 0x74
 80063a4:	9002      	str	r0, [sp, #8]
 80063a6:	9006      	str	r0, [sp, #24]
 80063a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063ac:	4809      	ldr	r0, [pc, #36]	; (80063d4 <siprintf+0x38>)
 80063ae:	9107      	str	r1, [sp, #28]
 80063b0:	9104      	str	r1, [sp, #16]
 80063b2:	4909      	ldr	r1, [pc, #36]	; (80063d8 <siprintf+0x3c>)
 80063b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b8:	9105      	str	r1, [sp, #20]
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	a902      	add	r1, sp, #8
 80063c0:	f000 f9f6 	bl	80067b0 <_svfiprintf_r>
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	b01c      	add	sp, #112	; 0x70
 80063cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d0:	b003      	add	sp, #12
 80063d2:	4770      	bx	lr
 80063d4:	2000005c 	.word	0x2000005c
 80063d8:	ffff0208 	.word	0xffff0208

080063dc <memset>:
 80063dc:	4402      	add	r2, r0
 80063de:	4603      	mov	r3, r0
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d100      	bne.n	80063e6 <memset+0xa>
 80063e4:	4770      	bx	lr
 80063e6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ea:	e7f9      	b.n	80063e0 <memset+0x4>

080063ec <_reclaim_reent>:
 80063ec:	4b29      	ldr	r3, [pc, #164]	; (8006494 <_reclaim_reent+0xa8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4283      	cmp	r3, r0
 80063f2:	b570      	push	{r4, r5, r6, lr}
 80063f4:	4604      	mov	r4, r0
 80063f6:	d04b      	beq.n	8006490 <_reclaim_reent+0xa4>
 80063f8:	69c3      	ldr	r3, [r0, #28]
 80063fa:	b143      	cbz	r3, 800640e <_reclaim_reent+0x22>
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d144      	bne.n	800648c <_reclaim_reent+0xa0>
 8006402:	69e3      	ldr	r3, [r4, #28]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	b111      	cbz	r1, 800640e <_reclaim_reent+0x22>
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f87f 	bl	800650c <_free_r>
 800640e:	6961      	ldr	r1, [r4, #20]
 8006410:	b111      	cbz	r1, 8006418 <_reclaim_reent+0x2c>
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f87a 	bl	800650c <_free_r>
 8006418:	69e1      	ldr	r1, [r4, #28]
 800641a:	b111      	cbz	r1, 8006422 <_reclaim_reent+0x36>
 800641c:	4620      	mov	r0, r4
 800641e:	f000 f875 	bl	800650c <_free_r>
 8006422:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006424:	b111      	cbz	r1, 800642c <_reclaim_reent+0x40>
 8006426:	4620      	mov	r0, r4
 8006428:	f000 f870 	bl	800650c <_free_r>
 800642c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800642e:	b111      	cbz	r1, 8006436 <_reclaim_reent+0x4a>
 8006430:	4620      	mov	r0, r4
 8006432:	f000 f86b 	bl	800650c <_free_r>
 8006436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006438:	b111      	cbz	r1, 8006440 <_reclaim_reent+0x54>
 800643a:	4620      	mov	r0, r4
 800643c:	f000 f866 	bl	800650c <_free_r>
 8006440:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006442:	b111      	cbz	r1, 800644a <_reclaim_reent+0x5e>
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f861 	bl	800650c <_free_r>
 800644a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800644c:	b111      	cbz	r1, 8006454 <_reclaim_reent+0x68>
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f85c 	bl	800650c <_free_r>
 8006454:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006456:	b111      	cbz	r1, 800645e <_reclaim_reent+0x72>
 8006458:	4620      	mov	r0, r4
 800645a:	f000 f857 	bl	800650c <_free_r>
 800645e:	6a23      	ldr	r3, [r4, #32]
 8006460:	b1b3      	cbz	r3, 8006490 <_reclaim_reent+0xa4>
 8006462:	4620      	mov	r0, r4
 8006464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006468:	4718      	bx	r3
 800646a:	5949      	ldr	r1, [r1, r5]
 800646c:	b941      	cbnz	r1, 8006480 <_reclaim_reent+0x94>
 800646e:	3504      	adds	r5, #4
 8006470:	69e3      	ldr	r3, [r4, #28]
 8006472:	2d80      	cmp	r5, #128	; 0x80
 8006474:	68d9      	ldr	r1, [r3, #12]
 8006476:	d1f8      	bne.n	800646a <_reclaim_reent+0x7e>
 8006478:	4620      	mov	r0, r4
 800647a:	f000 f847 	bl	800650c <_free_r>
 800647e:	e7c0      	b.n	8006402 <_reclaim_reent+0x16>
 8006480:	680e      	ldr	r6, [r1, #0]
 8006482:	4620      	mov	r0, r4
 8006484:	f000 f842 	bl	800650c <_free_r>
 8006488:	4631      	mov	r1, r6
 800648a:	e7ef      	b.n	800646c <_reclaim_reent+0x80>
 800648c:	2500      	movs	r5, #0
 800648e:	e7ef      	b.n	8006470 <_reclaim_reent+0x84>
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	bf00      	nop
 8006494:	2000005c 	.word	0x2000005c

08006498 <__errno>:
 8006498:	4b01      	ldr	r3, [pc, #4]	; (80064a0 <__errno+0x8>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	2000005c 	.word	0x2000005c

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4d0d      	ldr	r5, [pc, #52]	; (80064dc <__libc_init_array+0x38>)
 80064a8:	4c0d      	ldr	r4, [pc, #52]	; (80064e0 <__libc_init_array+0x3c>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	2600      	movs	r6, #0
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	4d0b      	ldr	r5, [pc, #44]	; (80064e4 <__libc_init_array+0x40>)
 80064b6:	4c0c      	ldr	r4, [pc, #48]	; (80064e8 <__libc_init_array+0x44>)
 80064b8:	f000 fc6a 	bl	8006d90 <_init>
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	2600      	movs	r6, #0
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	08006ed4 	.word	0x08006ed4
 80064e0:	08006ed4 	.word	0x08006ed4
 80064e4:	08006ed4 	.word	0x08006ed4
 80064e8:	08006ed8 	.word	0x08006ed8

080064ec <__retarget_lock_acquire_recursive>:
 80064ec:	4770      	bx	lr

080064ee <__retarget_lock_release_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <memcpy>:
 80064f0:	440a      	add	r2, r1
 80064f2:	4291      	cmp	r1, r2
 80064f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f8:	d100      	bne.n	80064fc <memcpy+0xc>
 80064fa:	4770      	bx	lr
 80064fc:	b510      	push	{r4, lr}
 80064fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006506:	4291      	cmp	r1, r2
 8006508:	d1f9      	bne.n	80064fe <memcpy+0xe>
 800650a:	bd10      	pop	{r4, pc}

0800650c <_free_r>:
 800650c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800650e:	2900      	cmp	r1, #0
 8006510:	d044      	beq.n	800659c <_free_r+0x90>
 8006512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006516:	9001      	str	r0, [sp, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f1a1 0404 	sub.w	r4, r1, #4
 800651e:	bfb8      	it	lt
 8006520:	18e4      	addlt	r4, r4, r3
 8006522:	f000 f8df 	bl	80066e4 <__malloc_lock>
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <_free_r+0x94>)
 8006528:	9801      	ldr	r0, [sp, #4]
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	b933      	cbnz	r3, 800653c <_free_r+0x30>
 800652e:	6063      	str	r3, [r4, #4]
 8006530:	6014      	str	r4, [r2, #0]
 8006532:	b003      	add	sp, #12
 8006534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006538:	f000 b8da 	b.w	80066f0 <__malloc_unlock>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d908      	bls.n	8006552 <_free_r+0x46>
 8006540:	6825      	ldr	r5, [r4, #0]
 8006542:	1961      	adds	r1, r4, r5
 8006544:	428b      	cmp	r3, r1
 8006546:	bf01      	itttt	eq
 8006548:	6819      	ldreq	r1, [r3, #0]
 800654a:	685b      	ldreq	r3, [r3, #4]
 800654c:	1949      	addeq	r1, r1, r5
 800654e:	6021      	streq	r1, [r4, #0]
 8006550:	e7ed      	b.n	800652e <_free_r+0x22>
 8006552:	461a      	mov	r2, r3
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b10b      	cbz	r3, 800655c <_free_r+0x50>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d9fa      	bls.n	8006552 <_free_r+0x46>
 800655c:	6811      	ldr	r1, [r2, #0]
 800655e:	1855      	adds	r5, r2, r1
 8006560:	42a5      	cmp	r5, r4
 8006562:	d10b      	bne.n	800657c <_free_r+0x70>
 8006564:	6824      	ldr	r4, [r4, #0]
 8006566:	4421      	add	r1, r4
 8006568:	1854      	adds	r4, r2, r1
 800656a:	42a3      	cmp	r3, r4
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	d1e0      	bne.n	8006532 <_free_r+0x26>
 8006570:	681c      	ldr	r4, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	6053      	str	r3, [r2, #4]
 8006576:	440c      	add	r4, r1
 8006578:	6014      	str	r4, [r2, #0]
 800657a:	e7da      	b.n	8006532 <_free_r+0x26>
 800657c:	d902      	bls.n	8006584 <_free_r+0x78>
 800657e:	230c      	movs	r3, #12
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	e7d6      	b.n	8006532 <_free_r+0x26>
 8006584:	6825      	ldr	r5, [r4, #0]
 8006586:	1961      	adds	r1, r4, r5
 8006588:	428b      	cmp	r3, r1
 800658a:	bf04      	itt	eq
 800658c:	6819      	ldreq	r1, [r3, #0]
 800658e:	685b      	ldreq	r3, [r3, #4]
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	bf04      	itt	eq
 8006594:	1949      	addeq	r1, r1, r5
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	6054      	str	r4, [r2, #4]
 800659a:	e7ca      	b.n	8006532 <_free_r+0x26>
 800659c:	b003      	add	sp, #12
 800659e:	bd30      	pop	{r4, r5, pc}
 80065a0:	20001354 	.word	0x20001354

080065a4 <sbrk_aligned>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	4e0e      	ldr	r6, [pc, #56]	; (80065e0 <sbrk_aligned+0x3c>)
 80065a8:	460c      	mov	r4, r1
 80065aa:	6831      	ldr	r1, [r6, #0]
 80065ac:	4605      	mov	r5, r0
 80065ae:	b911      	cbnz	r1, 80065b6 <sbrk_aligned+0x12>
 80065b0:	f000 fba6 	bl	8006d00 <_sbrk_r>
 80065b4:	6030      	str	r0, [r6, #0]
 80065b6:	4621      	mov	r1, r4
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 fba1 	bl	8006d00 <_sbrk_r>
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	d00a      	beq.n	80065d8 <sbrk_aligned+0x34>
 80065c2:	1cc4      	adds	r4, r0, #3
 80065c4:	f024 0403 	bic.w	r4, r4, #3
 80065c8:	42a0      	cmp	r0, r4
 80065ca:	d007      	beq.n	80065dc <sbrk_aligned+0x38>
 80065cc:	1a21      	subs	r1, r4, r0
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 fb96 	bl	8006d00 <_sbrk_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d101      	bne.n	80065dc <sbrk_aligned+0x38>
 80065d8:	f04f 34ff 	mov.w	r4, #4294967295
 80065dc:	4620      	mov	r0, r4
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	20001358 	.word	0x20001358

080065e4 <_malloc_r>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	1ccd      	adds	r5, r1, #3
 80065ea:	f025 0503 	bic.w	r5, r5, #3
 80065ee:	3508      	adds	r5, #8
 80065f0:	2d0c      	cmp	r5, #12
 80065f2:	bf38      	it	cc
 80065f4:	250c      	movcc	r5, #12
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	4607      	mov	r7, r0
 80065fa:	db01      	blt.n	8006600 <_malloc_r+0x1c>
 80065fc:	42a9      	cmp	r1, r5
 80065fe:	d905      	bls.n	800660c <_malloc_r+0x28>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	2600      	movs	r6, #0
 8006606:	4630      	mov	r0, r6
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066e0 <_malloc_r+0xfc>
 8006610:	f000 f868 	bl	80066e4 <__malloc_lock>
 8006614:	f8d8 3000 	ldr.w	r3, [r8]
 8006618:	461c      	mov	r4, r3
 800661a:	bb5c      	cbnz	r4, 8006674 <_malloc_r+0x90>
 800661c:	4629      	mov	r1, r5
 800661e:	4638      	mov	r0, r7
 8006620:	f7ff ffc0 	bl	80065a4 <sbrk_aligned>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	4604      	mov	r4, r0
 8006628:	d155      	bne.n	80066d6 <_malloc_r+0xf2>
 800662a:	f8d8 4000 	ldr.w	r4, [r8]
 800662e:	4626      	mov	r6, r4
 8006630:	2e00      	cmp	r6, #0
 8006632:	d145      	bne.n	80066c0 <_malloc_r+0xdc>
 8006634:	2c00      	cmp	r4, #0
 8006636:	d048      	beq.n	80066ca <_malloc_r+0xe6>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	4631      	mov	r1, r6
 800663c:	4638      	mov	r0, r7
 800663e:	eb04 0903 	add.w	r9, r4, r3
 8006642:	f000 fb5d 	bl	8006d00 <_sbrk_r>
 8006646:	4581      	cmp	r9, r0
 8006648:	d13f      	bne.n	80066ca <_malloc_r+0xe6>
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	1a6d      	subs	r5, r5, r1
 800664e:	4629      	mov	r1, r5
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff ffa7 	bl	80065a4 <sbrk_aligned>
 8006656:	3001      	adds	r0, #1
 8006658:	d037      	beq.n	80066ca <_malloc_r+0xe6>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	442b      	add	r3, r5
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	f8d8 3000 	ldr.w	r3, [r8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d038      	beq.n	80066da <_malloc_r+0xf6>
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	42a2      	cmp	r2, r4
 800666c:	d12b      	bne.n	80066c6 <_malloc_r+0xe2>
 800666e:	2200      	movs	r2, #0
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	e00f      	b.n	8006694 <_malloc_r+0xb0>
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	1b52      	subs	r2, r2, r5
 8006678:	d41f      	bmi.n	80066ba <_malloc_r+0xd6>
 800667a:	2a0b      	cmp	r2, #11
 800667c:	d917      	bls.n	80066ae <_malloc_r+0xca>
 800667e:	1961      	adds	r1, r4, r5
 8006680:	42a3      	cmp	r3, r4
 8006682:	6025      	str	r5, [r4, #0]
 8006684:	bf18      	it	ne
 8006686:	6059      	strne	r1, [r3, #4]
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	bf08      	it	eq
 800668c:	f8c8 1000 	streq.w	r1, [r8]
 8006690:	5162      	str	r2, [r4, r5]
 8006692:	604b      	str	r3, [r1, #4]
 8006694:	4638      	mov	r0, r7
 8006696:	f104 060b 	add.w	r6, r4, #11
 800669a:	f000 f829 	bl	80066f0 <__malloc_unlock>
 800669e:	f026 0607 	bic.w	r6, r6, #7
 80066a2:	1d23      	adds	r3, r4, #4
 80066a4:	1af2      	subs	r2, r6, r3
 80066a6:	d0ae      	beq.n	8006606 <_malloc_r+0x22>
 80066a8:	1b9b      	subs	r3, r3, r6
 80066aa:	50a3      	str	r3, [r4, r2]
 80066ac:	e7ab      	b.n	8006606 <_malloc_r+0x22>
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	6862      	ldr	r2, [r4, #4]
 80066b2:	d1dd      	bne.n	8006670 <_malloc_r+0x8c>
 80066b4:	f8c8 2000 	str.w	r2, [r8]
 80066b8:	e7ec      	b.n	8006694 <_malloc_r+0xb0>
 80066ba:	4623      	mov	r3, r4
 80066bc:	6864      	ldr	r4, [r4, #4]
 80066be:	e7ac      	b.n	800661a <_malloc_r+0x36>
 80066c0:	4634      	mov	r4, r6
 80066c2:	6876      	ldr	r6, [r6, #4]
 80066c4:	e7b4      	b.n	8006630 <_malloc_r+0x4c>
 80066c6:	4613      	mov	r3, r2
 80066c8:	e7cc      	b.n	8006664 <_malloc_r+0x80>
 80066ca:	230c      	movs	r3, #12
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4638      	mov	r0, r7
 80066d0:	f000 f80e 	bl	80066f0 <__malloc_unlock>
 80066d4:	e797      	b.n	8006606 <_malloc_r+0x22>
 80066d6:	6025      	str	r5, [r4, #0]
 80066d8:	e7dc      	b.n	8006694 <_malloc_r+0xb0>
 80066da:	605b      	str	r3, [r3, #4]
 80066dc:	deff      	udf	#255	; 0xff
 80066de:	bf00      	nop
 80066e0:	20001354 	.word	0x20001354

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__malloc_lock+0x8>)
 80066e6:	f7ff bf01 	b.w	80064ec <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	20001350 	.word	0x20001350

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f7ff befc 	b.w	80064ee <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	20001350 	.word	0x20001350

080066fc <__ssputs_r>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	688e      	ldr	r6, [r1, #8]
 8006702:	461f      	mov	r7, r3
 8006704:	42be      	cmp	r6, r7
 8006706:	680b      	ldr	r3, [r1, #0]
 8006708:	4682      	mov	sl, r0
 800670a:	460c      	mov	r4, r1
 800670c:	4690      	mov	r8, r2
 800670e:	d82c      	bhi.n	800676a <__ssputs_r+0x6e>
 8006710:	898a      	ldrh	r2, [r1, #12]
 8006712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006716:	d026      	beq.n	8006766 <__ssputs_r+0x6a>
 8006718:	6965      	ldr	r5, [r4, #20]
 800671a:	6909      	ldr	r1, [r1, #16]
 800671c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006720:	eba3 0901 	sub.w	r9, r3, r1
 8006724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006728:	1c7b      	adds	r3, r7, #1
 800672a:	444b      	add	r3, r9
 800672c:	106d      	asrs	r5, r5, #1
 800672e:	429d      	cmp	r5, r3
 8006730:	bf38      	it	cc
 8006732:	461d      	movcc	r5, r3
 8006734:	0553      	lsls	r3, r2, #21
 8006736:	d527      	bpl.n	8006788 <__ssputs_r+0x8c>
 8006738:	4629      	mov	r1, r5
 800673a:	f7ff ff53 	bl	80065e4 <_malloc_r>
 800673e:	4606      	mov	r6, r0
 8006740:	b360      	cbz	r0, 800679c <__ssputs_r+0xa0>
 8006742:	6921      	ldr	r1, [r4, #16]
 8006744:	464a      	mov	r2, r9
 8006746:	f7ff fed3 	bl	80064f0 <memcpy>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	6126      	str	r6, [r4, #16]
 8006758:	6165      	str	r5, [r4, #20]
 800675a:	444e      	add	r6, r9
 800675c:	eba5 0509 	sub.w	r5, r5, r9
 8006760:	6026      	str	r6, [r4, #0]
 8006762:	60a5      	str	r5, [r4, #8]
 8006764:	463e      	mov	r6, r7
 8006766:	42be      	cmp	r6, r7
 8006768:	d900      	bls.n	800676c <__ssputs_r+0x70>
 800676a:	463e      	mov	r6, r7
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	4632      	mov	r2, r6
 8006770:	4641      	mov	r1, r8
 8006772:	f000 faab 	bl	8006ccc <memmove>
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	1b9b      	subs	r3, r3, r6
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	4433      	add	r3, r6
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2000      	movs	r0, #0
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	462a      	mov	r2, r5
 800678a:	f000 fac9 	bl	8006d20 <_realloc_r>
 800678e:	4606      	mov	r6, r0
 8006790:	2800      	cmp	r0, #0
 8006792:	d1e0      	bne.n	8006756 <__ssputs_r+0x5a>
 8006794:	6921      	ldr	r1, [r4, #16]
 8006796:	4650      	mov	r0, sl
 8006798:	f7ff feb8 	bl	800650c <_free_r>
 800679c:	230c      	movs	r3, #12
 800679e:	f8ca 3000 	str.w	r3, [sl]
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295
 80067ae:	e7e9      	b.n	8006784 <__ssputs_r+0x88>

080067b0 <_svfiprintf_r>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4698      	mov	r8, r3
 80067b6:	898b      	ldrh	r3, [r1, #12]
 80067b8:	061b      	lsls	r3, r3, #24
 80067ba:	b09d      	sub	sp, #116	; 0x74
 80067bc:	4607      	mov	r7, r0
 80067be:	460d      	mov	r5, r1
 80067c0:	4614      	mov	r4, r2
 80067c2:	d50e      	bpl.n	80067e2 <_svfiprintf_r+0x32>
 80067c4:	690b      	ldr	r3, [r1, #16]
 80067c6:	b963      	cbnz	r3, 80067e2 <_svfiprintf_r+0x32>
 80067c8:	2140      	movs	r1, #64	; 0x40
 80067ca:	f7ff ff0b 	bl	80065e4 <_malloc_r>
 80067ce:	6028      	str	r0, [r5, #0]
 80067d0:	6128      	str	r0, [r5, #16]
 80067d2:	b920      	cbnz	r0, 80067de <_svfiprintf_r+0x2e>
 80067d4:	230c      	movs	r3, #12
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e0d0      	b.n	8006980 <_svfiprintf_r+0x1d0>
 80067de:	2340      	movs	r3, #64	; 0x40
 80067e0:	616b      	str	r3, [r5, #20]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9309      	str	r3, [sp, #36]	; 0x24
 80067e6:	2320      	movs	r3, #32
 80067e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f0:	2330      	movs	r3, #48	; 0x30
 80067f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006998 <_svfiprintf_r+0x1e8>
 80067f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067fa:	f04f 0901 	mov.w	r9, #1
 80067fe:	4623      	mov	r3, r4
 8006800:	469a      	mov	sl, r3
 8006802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006806:	b10a      	cbz	r2, 800680c <_svfiprintf_r+0x5c>
 8006808:	2a25      	cmp	r2, #37	; 0x25
 800680a:	d1f9      	bne.n	8006800 <_svfiprintf_r+0x50>
 800680c:	ebba 0b04 	subs.w	fp, sl, r4
 8006810:	d00b      	beq.n	800682a <_svfiprintf_r+0x7a>
 8006812:	465b      	mov	r3, fp
 8006814:	4622      	mov	r2, r4
 8006816:	4629      	mov	r1, r5
 8006818:	4638      	mov	r0, r7
 800681a:	f7ff ff6f 	bl	80066fc <__ssputs_r>
 800681e:	3001      	adds	r0, #1
 8006820:	f000 80a9 	beq.w	8006976 <_svfiprintf_r+0x1c6>
 8006824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006826:	445a      	add	r2, fp
 8006828:	9209      	str	r2, [sp, #36]	; 0x24
 800682a:	f89a 3000 	ldrb.w	r3, [sl]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80a1 	beq.w	8006976 <_svfiprintf_r+0x1c6>
 8006834:	2300      	movs	r3, #0
 8006836:	f04f 32ff 	mov.w	r2, #4294967295
 800683a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800683e:	f10a 0a01 	add.w	sl, sl, #1
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	9307      	str	r3, [sp, #28]
 8006846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800684a:	931a      	str	r3, [sp, #104]	; 0x68
 800684c:	4654      	mov	r4, sl
 800684e:	2205      	movs	r2, #5
 8006850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006854:	4850      	ldr	r0, [pc, #320]	; (8006998 <_svfiprintf_r+0x1e8>)
 8006856:	f7f9 fcbb 	bl	80001d0 <memchr>
 800685a:	9a04      	ldr	r2, [sp, #16]
 800685c:	b9d8      	cbnz	r0, 8006896 <_svfiprintf_r+0xe6>
 800685e:	06d0      	lsls	r0, r2, #27
 8006860:	bf44      	itt	mi
 8006862:	2320      	movmi	r3, #32
 8006864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006868:	0711      	lsls	r1, r2, #28
 800686a:	bf44      	itt	mi
 800686c:	232b      	movmi	r3, #43	; 0x2b
 800686e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006872:	f89a 3000 	ldrb.w	r3, [sl]
 8006876:	2b2a      	cmp	r3, #42	; 0x2a
 8006878:	d015      	beq.n	80068a6 <_svfiprintf_r+0xf6>
 800687a:	9a07      	ldr	r2, [sp, #28]
 800687c:	4654      	mov	r4, sl
 800687e:	2000      	movs	r0, #0
 8006880:	f04f 0c0a 	mov.w	ip, #10
 8006884:	4621      	mov	r1, r4
 8006886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800688a:	3b30      	subs	r3, #48	; 0x30
 800688c:	2b09      	cmp	r3, #9
 800688e:	d94d      	bls.n	800692c <_svfiprintf_r+0x17c>
 8006890:	b1b0      	cbz	r0, 80068c0 <_svfiprintf_r+0x110>
 8006892:	9207      	str	r2, [sp, #28]
 8006894:	e014      	b.n	80068c0 <_svfiprintf_r+0x110>
 8006896:	eba0 0308 	sub.w	r3, r0, r8
 800689a:	fa09 f303 	lsl.w	r3, r9, r3
 800689e:	4313      	orrs	r3, r2
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	46a2      	mov	sl, r4
 80068a4:	e7d2      	b.n	800684c <_svfiprintf_r+0x9c>
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	9103      	str	r1, [sp, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfbb      	ittet	lt
 80068b2:	425b      	neglt	r3, r3
 80068b4:	f042 0202 	orrlt.w	r2, r2, #2
 80068b8:	9307      	strge	r3, [sp, #28]
 80068ba:	9307      	strlt	r3, [sp, #28]
 80068bc:	bfb8      	it	lt
 80068be:	9204      	strlt	r2, [sp, #16]
 80068c0:	7823      	ldrb	r3, [r4, #0]
 80068c2:	2b2e      	cmp	r3, #46	; 0x2e
 80068c4:	d10c      	bne.n	80068e0 <_svfiprintf_r+0x130>
 80068c6:	7863      	ldrb	r3, [r4, #1]
 80068c8:	2b2a      	cmp	r3, #42	; 0x2a
 80068ca:	d134      	bne.n	8006936 <_svfiprintf_r+0x186>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	1d1a      	adds	r2, r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	9203      	str	r2, [sp, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bfb8      	it	lt
 80068d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80068dc:	3402      	adds	r4, #2
 80068de:	9305      	str	r3, [sp, #20]
 80068e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80069a8 <_svfiprintf_r+0x1f8>
 80068e4:	7821      	ldrb	r1, [r4, #0]
 80068e6:	2203      	movs	r2, #3
 80068e8:	4650      	mov	r0, sl
 80068ea:	f7f9 fc71 	bl	80001d0 <memchr>
 80068ee:	b138      	cbz	r0, 8006900 <_svfiprintf_r+0x150>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	eba0 000a 	sub.w	r0, r0, sl
 80068f6:	2240      	movs	r2, #64	; 0x40
 80068f8:	4082      	lsls	r2, r0
 80068fa:	4313      	orrs	r3, r2
 80068fc:	3401      	adds	r4, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006904:	4825      	ldr	r0, [pc, #148]	; (800699c <_svfiprintf_r+0x1ec>)
 8006906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800690a:	2206      	movs	r2, #6
 800690c:	f7f9 fc60 	bl	80001d0 <memchr>
 8006910:	2800      	cmp	r0, #0
 8006912:	d038      	beq.n	8006986 <_svfiprintf_r+0x1d6>
 8006914:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <_svfiprintf_r+0x1f0>)
 8006916:	bb1b      	cbnz	r3, 8006960 <_svfiprintf_r+0x1b0>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	3307      	adds	r3, #7
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	4433      	add	r3, r6
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	e768      	b.n	80067fe <_svfiprintf_r+0x4e>
 800692c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006930:	460c      	mov	r4, r1
 8006932:	2001      	movs	r0, #1
 8006934:	e7a6      	b.n	8006884 <_svfiprintf_r+0xd4>
 8006936:	2300      	movs	r3, #0
 8006938:	3401      	adds	r4, #1
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	4619      	mov	r1, r3
 800693e:	f04f 0c0a 	mov.w	ip, #10
 8006942:	4620      	mov	r0, r4
 8006944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006948:	3a30      	subs	r2, #48	; 0x30
 800694a:	2a09      	cmp	r2, #9
 800694c:	d903      	bls.n	8006956 <_svfiprintf_r+0x1a6>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0c6      	beq.n	80068e0 <_svfiprintf_r+0x130>
 8006952:	9105      	str	r1, [sp, #20]
 8006954:	e7c4      	b.n	80068e0 <_svfiprintf_r+0x130>
 8006956:	fb0c 2101 	mla	r1, ip, r1, r2
 800695a:	4604      	mov	r4, r0
 800695c:	2301      	movs	r3, #1
 800695e:	e7f0      	b.n	8006942 <_svfiprintf_r+0x192>
 8006960:	ab03      	add	r3, sp, #12
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	462a      	mov	r2, r5
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <_svfiprintf_r+0x1f4>)
 8006968:	a904      	add	r1, sp, #16
 800696a:	4638      	mov	r0, r7
 800696c:	f3af 8000 	nop.w
 8006970:	1c42      	adds	r2, r0, #1
 8006972:	4606      	mov	r6, r0
 8006974:	d1d6      	bne.n	8006924 <_svfiprintf_r+0x174>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	065b      	lsls	r3, r3, #25
 800697a:	f53f af2d 	bmi.w	80067d8 <_svfiprintf_r+0x28>
 800697e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006980:	b01d      	add	sp, #116	; 0x74
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <_svfiprintf_r+0x1f4>)
 800698e:	a904      	add	r1, sp, #16
 8006990:	4638      	mov	r0, r7
 8006992:	f000 f879 	bl	8006a88 <_printf_i>
 8006996:	e7eb      	b.n	8006970 <_svfiprintf_r+0x1c0>
 8006998:	08006ea0 	.word	0x08006ea0
 800699c:	08006eaa 	.word	0x08006eaa
 80069a0:	00000000 	.word	0x00000000
 80069a4:	080066fd 	.word	0x080066fd
 80069a8:	08006ea6 	.word	0x08006ea6

080069ac <_printf_common>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	4616      	mov	r6, r2
 80069b2:	4699      	mov	r9, r3
 80069b4:	688a      	ldr	r2, [r1, #8]
 80069b6:	690b      	ldr	r3, [r1, #16]
 80069b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069bc:	4293      	cmp	r3, r2
 80069be:	bfb8      	it	lt
 80069c0:	4613      	movlt	r3, r2
 80069c2:	6033      	str	r3, [r6, #0]
 80069c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c8:	4607      	mov	r7, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	b10a      	cbz	r2, 80069d2 <_printf_common+0x26>
 80069ce:	3301      	adds	r3, #1
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	0699      	lsls	r1, r3, #26
 80069d6:	bf42      	ittt	mi
 80069d8:	6833      	ldrmi	r3, [r6, #0]
 80069da:	3302      	addmi	r3, #2
 80069dc:	6033      	strmi	r3, [r6, #0]
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	f015 0506 	ands.w	r5, r5, #6
 80069e4:	d106      	bne.n	80069f4 <_printf_common+0x48>
 80069e6:	f104 0a19 	add.w	sl, r4, #25
 80069ea:	68e3      	ldr	r3, [r4, #12]
 80069ec:	6832      	ldr	r2, [r6, #0]
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dc26      	bgt.n	8006a42 <_printf_common+0x96>
 80069f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f8:	1e13      	subs	r3, r2, #0
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	0692      	lsls	r2, r2, #26
 8006a02:	d42b      	bmi.n	8006a5c <_printf_common+0xb0>
 8006a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c0      	blx	r8
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d01e      	beq.n	8006a50 <_printf_common+0xa4>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	f003 0306 	and.w	r3, r3, #6
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	bf02      	ittt	eq
 8006a1e:	68e5      	ldreq	r5, [r4, #12]
 8006a20:	6833      	ldreq	r3, [r6, #0]
 8006a22:	1aed      	subeq	r5, r5, r3
 8006a24:	68a3      	ldr	r3, [r4, #8]
 8006a26:	bf0c      	ite	eq
 8006a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a2c:	2500      	movne	r5, #0
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bfc4      	itt	gt
 8006a32:	1a9b      	subgt	r3, r3, r2
 8006a34:	18ed      	addgt	r5, r5, r3
 8006a36:	2600      	movs	r6, #0
 8006a38:	341a      	adds	r4, #26
 8006a3a:	42b5      	cmp	r5, r6
 8006a3c:	d11a      	bne.n	8006a74 <_printf_common+0xc8>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e008      	b.n	8006a54 <_printf_common+0xa8>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4652      	mov	r2, sl
 8006a46:	4649      	mov	r1, r9
 8006a48:	4638      	mov	r0, r7
 8006a4a:	47c0      	blx	r8
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d103      	bne.n	8006a58 <_printf_common+0xac>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	3501      	adds	r5, #1
 8006a5a:	e7c6      	b.n	80069ea <_printf_common+0x3e>
 8006a5c:	18e1      	adds	r1, r4, r3
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	2030      	movs	r0, #48	; 0x30
 8006a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a66:	4422      	add	r2, r4
 8006a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a70:	3302      	adds	r3, #2
 8006a72:	e7c7      	b.n	8006a04 <_printf_common+0x58>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4622      	mov	r2, r4
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	47c0      	blx	r8
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0e6      	beq.n	8006a50 <_printf_common+0xa4>
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7d9      	b.n	8006a3a <_printf_common+0x8e>
	...

08006a88 <_printf_i>:
 8006a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	7e0f      	ldrb	r7, [r1, #24]
 8006a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a90:	2f78      	cmp	r7, #120	; 0x78
 8006a92:	4691      	mov	r9, r2
 8006a94:	4680      	mov	r8, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	469a      	mov	sl, r3
 8006a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a9e:	d807      	bhi.n	8006ab0 <_printf_i+0x28>
 8006aa0:	2f62      	cmp	r7, #98	; 0x62
 8006aa2:	d80a      	bhi.n	8006aba <_printf_i+0x32>
 8006aa4:	2f00      	cmp	r7, #0
 8006aa6:	f000 80d4 	beq.w	8006c52 <_printf_i+0x1ca>
 8006aaa:	2f58      	cmp	r7, #88	; 0x58
 8006aac:	f000 80c0 	beq.w	8006c30 <_printf_i+0x1a8>
 8006ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab8:	e03a      	b.n	8006b30 <_printf_i+0xa8>
 8006aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006abe:	2b15      	cmp	r3, #21
 8006ac0:	d8f6      	bhi.n	8006ab0 <_printf_i+0x28>
 8006ac2:	a101      	add	r1, pc, #4	; (adr r1, 8006ac8 <_printf_i+0x40>)
 8006ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006b35 	.word	0x08006b35
 8006ad0:	08006ab1 	.word	0x08006ab1
 8006ad4:	08006ab1 	.word	0x08006ab1
 8006ad8:	08006ab1 	.word	0x08006ab1
 8006adc:	08006ab1 	.word	0x08006ab1
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006ab1 	.word	0x08006ab1
 8006ae8:	08006ab1 	.word	0x08006ab1
 8006aec:	08006ab1 	.word	0x08006ab1
 8006af0:	08006ab1 	.word	0x08006ab1
 8006af4:	08006c39 	.word	0x08006c39
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006bf3 	.word	0x08006bf3
 8006b00:	08006ab1 	.word	0x08006ab1
 8006b04:	08006ab1 	.word	0x08006ab1
 8006b08:	08006c5b 	.word	0x08006c5b
 8006b0c:	08006ab1 	.word	0x08006ab1
 8006b10:	08006b61 	.word	0x08006b61
 8006b14:	08006ab1 	.word	0x08006ab1
 8006b18:	08006ab1 	.word	0x08006ab1
 8006b1c:	08006bfb 	.word	0x08006bfb
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	602a      	str	r2, [r5, #0]
 8006b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b30:	2301      	movs	r3, #1
 8006b32:	e09f      	b.n	8006c74 <_printf_i+0x1ec>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	0607      	lsls	r7, r0, #24
 8006b3a:	f103 0104 	add.w	r1, r3, #4
 8006b3e:	6029      	str	r1, [r5, #0]
 8006b40:	d501      	bpl.n	8006b46 <_printf_i+0xbe>
 8006b42:	681e      	ldr	r6, [r3, #0]
 8006b44:	e003      	b.n	8006b4e <_printf_i+0xc6>
 8006b46:	0646      	lsls	r6, r0, #25
 8006b48:	d5fb      	bpl.n	8006b42 <_printf_i+0xba>
 8006b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	da03      	bge.n	8006b5a <_printf_i+0xd2>
 8006b52:	232d      	movs	r3, #45	; 0x2d
 8006b54:	4276      	negs	r6, r6
 8006b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b5a:	485a      	ldr	r0, [pc, #360]	; (8006cc4 <_printf_i+0x23c>)
 8006b5c:	230a      	movs	r3, #10
 8006b5e:	e012      	b.n	8006b86 <_printf_i+0xfe>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1d19      	adds	r1, r3, #4
 8006b66:	6029      	str	r1, [r5, #0]
 8006b68:	0605      	lsls	r5, r0, #24
 8006b6a:	d501      	bpl.n	8006b70 <_printf_i+0xe8>
 8006b6c:	681e      	ldr	r6, [r3, #0]
 8006b6e:	e002      	b.n	8006b76 <_printf_i+0xee>
 8006b70:	0641      	lsls	r1, r0, #25
 8006b72:	d5fb      	bpl.n	8006b6c <_printf_i+0xe4>
 8006b74:	881e      	ldrh	r6, [r3, #0]
 8006b76:	4853      	ldr	r0, [pc, #332]	; (8006cc4 <_printf_i+0x23c>)
 8006b78:	2f6f      	cmp	r7, #111	; 0x6f
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2308      	moveq	r3, #8
 8006b7e:	230a      	movne	r3, #10
 8006b80:	2100      	movs	r1, #0
 8006b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b86:	6865      	ldr	r5, [r4, #4]
 8006b88:	60a5      	str	r5, [r4, #8]
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	bfa2      	ittt	ge
 8006b8e:	6821      	ldrge	r1, [r4, #0]
 8006b90:	f021 0104 	bicge.w	r1, r1, #4
 8006b94:	6021      	strge	r1, [r4, #0]
 8006b96:	b90e      	cbnz	r6, 8006b9c <_printf_i+0x114>
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	d04b      	beq.n	8006c34 <_printf_i+0x1ac>
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ba6:	5dc7      	ldrb	r7, [r0, r7]
 8006ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bac:	4637      	mov	r7, r6
 8006bae:	42bb      	cmp	r3, r7
 8006bb0:	460e      	mov	r6, r1
 8006bb2:	d9f4      	bls.n	8006b9e <_printf_i+0x116>
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d10b      	bne.n	8006bd0 <_printf_i+0x148>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07de      	lsls	r6, r3, #31
 8006bbc:	d508      	bpl.n	8006bd0 <_printf_i+0x148>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	6861      	ldr	r1, [r4, #4]
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	bfde      	ittt	le
 8006bc6:	2330      	movle	r3, #48	; 0x30
 8006bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bd0:	1b52      	subs	r2, r2, r5
 8006bd2:	6122      	str	r2, [r4, #16]
 8006bd4:	f8cd a000 	str.w	sl, [sp]
 8006bd8:	464b      	mov	r3, r9
 8006bda:	aa03      	add	r2, sp, #12
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7ff fee4 	bl	80069ac <_printf_common>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d14a      	bne.n	8006c7e <_printf_i+0x1f6>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	b004      	add	sp, #16
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	f043 0320 	orr.w	r3, r3, #32
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	4833      	ldr	r0, [pc, #204]	; (8006cc8 <_printf_i+0x240>)
 8006bfc:	2778      	movs	r7, #120	; 0x78
 8006bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	6829      	ldr	r1, [r5, #0]
 8006c06:	061f      	lsls	r7, r3, #24
 8006c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c0c:	d402      	bmi.n	8006c14 <_printf_i+0x18c>
 8006c0e:	065f      	lsls	r7, r3, #25
 8006c10:	bf48      	it	mi
 8006c12:	b2b6      	uxthmi	r6, r6
 8006c14:	07df      	lsls	r7, r3, #31
 8006c16:	bf48      	it	mi
 8006c18:	f043 0320 	orrmi.w	r3, r3, #32
 8006c1c:	6029      	str	r1, [r5, #0]
 8006c1e:	bf48      	it	mi
 8006c20:	6023      	strmi	r3, [r4, #0]
 8006c22:	b91e      	cbnz	r6, 8006c2c <_printf_i+0x1a4>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	f023 0320 	bic.w	r3, r3, #32
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	e7a7      	b.n	8006b80 <_printf_i+0xf8>
 8006c30:	4824      	ldr	r0, [pc, #144]	; (8006cc4 <_printf_i+0x23c>)
 8006c32:	e7e4      	b.n	8006bfe <_printf_i+0x176>
 8006c34:	4615      	mov	r5, r2
 8006c36:	e7bd      	b.n	8006bb4 <_printf_i+0x12c>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	6826      	ldr	r6, [r4, #0]
 8006c3c:	6961      	ldr	r1, [r4, #20]
 8006c3e:	1d18      	adds	r0, r3, #4
 8006c40:	6028      	str	r0, [r5, #0]
 8006c42:	0635      	lsls	r5, r6, #24
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	d501      	bpl.n	8006c4c <_printf_i+0x1c4>
 8006c48:	6019      	str	r1, [r3, #0]
 8006c4a:	e002      	b.n	8006c52 <_printf_i+0x1ca>
 8006c4c:	0670      	lsls	r0, r6, #25
 8006c4e:	d5fb      	bpl.n	8006c48 <_printf_i+0x1c0>
 8006c50:	8019      	strh	r1, [r3, #0]
 8006c52:	2300      	movs	r3, #0
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	4615      	mov	r5, r2
 8006c58:	e7bc      	b.n	8006bd4 <_printf_i+0x14c>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	602a      	str	r2, [r5, #0]
 8006c60:	681d      	ldr	r5, [r3, #0]
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	2100      	movs	r1, #0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7f9 fab2 	bl	80001d0 <memchr>
 8006c6c:	b108      	cbz	r0, 8006c72 <_printf_i+0x1ea>
 8006c6e:	1b40      	subs	r0, r0, r5
 8006c70:	6060      	str	r0, [r4, #4]
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	2300      	movs	r3, #0
 8006c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7c:	e7aa      	b.n	8006bd4 <_printf_i+0x14c>
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4649      	mov	r1, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	47d0      	blx	sl
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d0ad      	beq.n	8006be8 <_printf_i+0x160>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	079b      	lsls	r3, r3, #30
 8006c90:	d413      	bmi.n	8006cba <_printf_i+0x232>
 8006c92:	68e0      	ldr	r0, [r4, #12]
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	4298      	cmp	r0, r3
 8006c98:	bfb8      	it	lt
 8006c9a:	4618      	movlt	r0, r3
 8006c9c:	e7a6      	b.n	8006bec <_printf_i+0x164>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	47d0      	blx	sl
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d09d      	beq.n	8006be8 <_printf_i+0x160>
 8006cac:	3501      	adds	r5, #1
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	1a5b      	subs	r3, r3, r1
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dcf2      	bgt.n	8006c9e <_printf_i+0x216>
 8006cb8:	e7eb      	b.n	8006c92 <_printf_i+0x20a>
 8006cba:	2500      	movs	r5, #0
 8006cbc:	f104 0619 	add.w	r6, r4, #25
 8006cc0:	e7f5      	b.n	8006cae <_printf_i+0x226>
 8006cc2:	bf00      	nop
 8006cc4:	08006eb1 	.word	0x08006eb1
 8006cc8:	08006ec2 	.word	0x08006ec2

08006ccc <memmove>:
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	eb01 0402 	add.w	r4, r1, r2
 8006cd4:	d902      	bls.n	8006cdc <memmove+0x10>
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	4623      	mov	r3, r4
 8006cda:	d807      	bhi.n	8006cec <memmove+0x20>
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	42a1      	cmp	r1, r4
 8006ce0:	d008      	beq.n	8006cf4 <memmove+0x28>
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cea:	e7f8      	b.n	8006cde <memmove+0x12>
 8006cec:	4402      	add	r2, r0
 8006cee:	4601      	mov	r1, r0
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d100      	bne.n	8006cf6 <memmove+0x2a>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cfe:	e7f7      	b.n	8006cf0 <memmove+0x24>

08006d00 <_sbrk_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d06      	ldr	r5, [pc, #24]	; (8006d1c <_sbrk_r+0x1c>)
 8006d04:	2300      	movs	r3, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7f9 fff4 	bl	8000cf8 <_sbrk>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_sbrk_r+0x1a>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_sbrk_r+0x1a>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	2000134c 	.word	0x2000134c

08006d20 <_realloc_r>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4680      	mov	r8, r0
 8006d26:	4614      	mov	r4, r2
 8006d28:	460e      	mov	r6, r1
 8006d2a:	b921      	cbnz	r1, 8006d36 <_realloc_r+0x16>
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4611      	mov	r1, r2
 8006d32:	f7ff bc57 	b.w	80065e4 <_malloc_r>
 8006d36:	b92a      	cbnz	r2, 8006d44 <_realloc_r+0x24>
 8006d38:	f7ff fbe8 	bl	800650c <_free_r>
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	f000 f81b 	bl	8006d7e <_malloc_usable_size_r>
 8006d48:	4284      	cmp	r4, r0
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	d802      	bhi.n	8006d54 <_realloc_r+0x34>
 8006d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d52:	d812      	bhi.n	8006d7a <_realloc_r+0x5a>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff fc44 	bl	80065e4 <_malloc_r>
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0ed      	beq.n	8006d3e <_realloc_r+0x1e>
 8006d62:	42bc      	cmp	r4, r7
 8006d64:	4622      	mov	r2, r4
 8006d66:	4631      	mov	r1, r6
 8006d68:	bf28      	it	cs
 8006d6a:	463a      	movcs	r2, r7
 8006d6c:	f7ff fbc0 	bl	80064f0 <memcpy>
 8006d70:	4631      	mov	r1, r6
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff fbca 	bl	800650c <_free_r>
 8006d78:	e7e1      	b.n	8006d3e <_realloc_r+0x1e>
 8006d7a:	4635      	mov	r5, r6
 8006d7c:	e7df      	b.n	8006d3e <_realloc_r+0x1e>

08006d7e <_malloc_usable_size_r>:
 8006d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d82:	1f18      	subs	r0, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfbc      	itt	lt
 8006d88:	580b      	ldrlt	r3, [r1, r0]
 8006d8a:	18c0      	addlt	r0, r0, r3
 8006d8c:	4770      	bx	lr
	...

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
