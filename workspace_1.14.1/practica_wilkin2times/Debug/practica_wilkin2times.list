
practica_wilkin2times.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006e84  08006e84  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e84  08006e84  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e8  20000060  08006eec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  08006eec  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001961b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e5  00000000  00000000  000396ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d2  00000000  00000000  0003e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4f4  00000000  00000000  0003f322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b625  00000000  00000000  0005d816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b586f  00000000  00000000  00078e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f18  00000000  00000000  0012e6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001345c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d40 	.word	0x08006d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006d40 	.word	0x08006d40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000007c 	.word	0x2000007c
 80002a0:	2000011c 	.word	0x2000011c

080002a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	f043 030c 	orr.w	r3, r3, #12
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002e4:	f107 0208 	add.w	r2, r7, #8
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2304      	movs	r3, #4
 80002ee:	214e      	movs	r1, #78	; 0x4e
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <lcd_send_cmd+0x5c>)
 80002f2:	f001 ffc9 	bl	8002288 <HAL_I2C_Master_Transmit>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000036c 	.word	0x2000036c

08000304 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f043 030d 	orr.w	r3, r3, #13
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	f043 0309 	orr.w	r3, r3, #9
 800032c:	b2db      	uxtb	r3, r3
 800032e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	f043 030d 	orr.w	r3, r3, #13
 8000336:	b2db      	uxtb	r3, r3
 8000338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	f043 0309 	orr.w	r3, r3, #9
 8000340:	b2db      	uxtb	r3, r3
 8000342:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000344:	f107 0208 	add.w	r2, r7, #8
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2304      	movs	r3, #4
 800034e:	214e      	movs	r1, #78	; 0x4e
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <lcd_send_data+0x5c>)
 8000352:	f001 ff99 	bl	8002288 <HAL_I2C_Master_Transmit>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000036c 	.word	0x2000036c

08000364 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	4908      	ldr	r1, [pc, #32]	; (8000398 <lcd_enviar_int+0x34>)
 8000378:	4618      	mov	r0, r3
 800037a:	f005 ffe7 	bl	800634c <siprintf>
    lcd_put_cur(row, col);
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	68b8      	ldr	r0, [r7, #8]
 8000382:	f000 f822 	bl	80003ca <lcd_put_cur>
    lcd_send_string(buffer);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f879 	bl	8000482 <lcd_send_string>
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08006d58 	.word	0x08006d58

0800039c <lcd_clear>:

void lcd_clear (void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80003a2:	2080      	movs	r0, #128	; 0x80
 80003a4:	f7ff ff7e 	bl	80002a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	e005      	b.n	80003ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80003ae:	2020      	movs	r0, #32
 80003b0:	f7ff ffa8 	bl	8000304 <lcd_send_data>
	for (int i=0; i<70; i++)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b45      	cmp	r3, #69	; 0x45
 80003be:	ddf6      	ble.n	80003ae <lcd_clear+0x12>
	}
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <lcd_put_cur+0x18>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d005      	beq.n	80003ec <lcd_put_cur+0x22>
 80003e0:	e009      	b.n	80003f6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e8:	603b      	str	r3, [r7, #0]
            break;
 80003ea:	e004      	b.n	80003f6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003f2:	603b      	str	r3, [r7, #0]
            break;
 80003f4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff52 	bl	80002a4 <lcd_send_cmd>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <lcd_init>:


void lcd_init (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800040c:	2032      	movs	r0, #50	; 0x32
 800040e:	f000 fcf5 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000412:	2030      	movs	r0, #48	; 0x30
 8000414:	f7ff ff46 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fcef 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x30);
 800041e:	2030      	movs	r0, #48	; 0x30
 8000420:	f7ff ff40 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fce9 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x30);
 800042a:	2030      	movs	r0, #48	; 0x30
 800042c:	f7ff ff3a 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000430:	200a      	movs	r0, #10
 8000432:	f000 fce3 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000436:	2020      	movs	r0, #32
 8000438:	f7ff ff34 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 800043c:	200a      	movs	r0, #10
 800043e:	f000 fcdd 	bl	8000dfc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f7ff ff2e 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fcd7 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800044e:	2008      	movs	r0, #8
 8000450:	f7ff ff28 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fcd1 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ff22 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fccb 	bl	8000dfc <HAL_Delay>
	HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 fcc8 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800046c:	2006      	movs	r0, #6
 800046e:	f7ff ff19 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f000 fcc2 	bl	8000dfc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000478:	200c      	movs	r0, #12
 800047a:	f7ff ff13 	bl	80002a4 <lcd_send_cmd>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800048a:	e006      	b.n	800049a <lcd_send_string+0x18>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff35 	bl	8000304 <lcd_send_data>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f4      	bne.n	800048c <lcd_send_string+0xa>
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <Medir_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t medicion;
void Medir_ADC()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <Medir_ADC+0x28>)
 80004b2:	f000 fe4d 	bl	8001150 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80004b6:	2164      	movs	r1, #100	; 0x64
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Medir_ADC+0x28>)
 80004ba:	f000 feeb 	bl	8001294 <HAL_ADC_PollForConversion>

	medicion = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <Medir_ADC+0x28>)
 80004c0:	f000 ffa6 	bl	8001410 <HAL_ADC_GetValue>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <Medir_ADC+0x2c>)
 80004c8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <Medir_ADC+0x28>)
 80004cc:	f000 fead 	bl	800122a <HAL_ADC_Stop>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000031c 	.word	0x2000031c
 80004d8:	2000045c 	.word	0x2000045c

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fc55 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f87f 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9a9 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f977 	bl	80007e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f2:	f000 f8d9 	bl	80006a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004f6:	f000 f933 	bl	8000760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80004fa:	f7ff ff85 	bl	8000408 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adc2 */
  osThreadDef(adc2, Startadc2, osPriorityNormal, 0, 128);
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <main+0xe4>)
 8000500:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000504:	461d      	mov	r5, r3
 8000506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adc2Handle = osThreadCreate(osThread(adc2), NULL);
 8000512:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fccb 	bl	8004eb4 <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <main+0xe8>)
 8000522:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcd2 */
  osThreadDef(lcd2, Startlcd2, osPriorityNormal, 0, 128);
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <main+0xec>)
 8000526:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800052a:	461d      	mov	r5, r3
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcd2Handle = osThreadCreate(osThread(lcd2), NULL);
 8000538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fcb8 	bl	8004eb4 <osThreadCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <main+0xf0>)
 8000548:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypad2 */
  osThreadDef(keypad2, Startkeypad2, osPriorityNormal, 0, 128);
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <main+0xf4>)
 800054c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypad2Handle = osThreadCreate(osThread(keypad2), NULL);
 800055e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f004 fca5 	bl	8004eb4 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <main+0xf8>)
 800056e:	6013      	str	r3, [r2, #0]

  /* definition and creation of matriz2 */
  osThreadDef(matriz2, Startmatriz2, osPriorityNormal, 0, 128);
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xfc>)
 8000572:	f107 0420 	add.w	r4, r7, #32
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  matriz2Handle = osThreadCreate(osThread(matriz2), NULL);
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fc92 	bl	8004eb4 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <main+0x100>)
 8000594:	6013      	str	r3, [r2, #0]

  /* definition and creation of sonic2 */
  osThreadDef(sonic2, Startsonic2, osPriorityNormal, 0, 128);
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	1d3c      	adds	r4, r7, #4
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sonic2Handle = osThreadCreate(osThread(sonic2), NULL);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fc81 	bl	8004eb4 <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <main+0x108>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f004 fc75 	bl	8004ea6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0xe0>
 80005be:	bf00      	nop
 80005c0:	08006d64 	.word	0x08006d64
 80005c4:	20000448 	.word	0x20000448
 80005c8:	08006d88 	.word	0x08006d88
 80005cc:	2000044c 	.word	0x2000044c
 80005d0:	08006dac 	.word	0x08006dac
 80005d4:	20000450 	.word	0x20000450
 80005d8:	08006dd0 	.word	0x08006dd0
 80005dc:	20000454 	.word	0x20000454
 80005e0:	08006df4 	.word	0x08006df4
 80005e4:	20000458 	.word	0x20000458

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f2:	2228      	movs	r2, #40	; 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fec8 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 feba 	bl	800638c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2303      	movs	r3, #3
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f9bc 	bl	80029c0 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800064e:	f000 f9a4 	bl	800099a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f9e4 	bl	8003a3c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f98e 	bl	800099a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fc3c 	bl	8003f0c <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069a:	f000 f97e 	bl	800099a <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3770      	adds	r7, #112	; 0x70
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_ADC1_Init+0xb4>)
 80006c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_ADC1_Init+0xb4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <MX_ADC1_Init+0xb4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_ADC1_Init+0xb4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_ADC1_Init+0xb4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_ADC1_Init+0xb4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_ADC1_Init+0xb4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_ADC1_Init+0xb4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_ADC1_Init+0xb4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_ADC1_Init+0xb4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0xb4>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_ADC1_Init+0xb4>)
 8000708:	2204      	movs	r2, #4
 800070a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ADC1_Init+0xb4>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_ADC1_Init+0xb4>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <MX_ADC1_Init+0xb4>)
 800071a:	f000 fb93 	bl	8000e44 <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000724:	f000 f939 	bl	800099a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000728:	2301      	movs	r3, #1
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072c:	2301      	movs	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000734:	2307      	movs	r3, #7
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_ADC1_Init+0xb4>)
 8000746:	f000 fe71 	bl	800142c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000750:	f000 f923 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000031c 	.word	0x2000031c

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_I2C1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_I2C1_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_I2C1_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x74>)
 800079c:	f001 fce4 	bl	8002168 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f8f8 	bl	800099a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007ae:	f002 f86f 	bl	8002890 <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f8ef 	bl	800099a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007c0:	f002 f8b1 	bl	8002926 <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f8e6 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000036c 	.word	0x2000036c
 80007d8:	40005400 	.word	0x40005400
 80007dc:	2000090e 	.word	0x2000090e

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f003 ff8e 	bl	8004744 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8b4 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200003c0 	.word	0x200003c0
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <MX_GPIO_Init+0xc4>)
 800085c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0xc4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_GPIO_Init+0xc4>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008be:	f001 fc3b 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_GPIO_Init+0xcc>)
 80008da:	f001 fabb 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008f8:	f001 faac 	bl	8001e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <Startadc2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startadc2 */
void Startadc2(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 Medir_ADC();
 8000918:	f7ff fdc8 	bl	80004ac <Medir_ADC>
    osDelay(100);
 800091c:	2064      	movs	r0, #100	; 0x64
 800091e:	f004 fb15 	bl	8004f4c <osDelay>
	 Medir_ADC();
 8000922:	e7f9      	b.n	8000918 <Startadc2+0x8>

08000924 <Startlcd2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlcd2 */
void Startlcd2(void const * argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlcd2 */
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 800092c:	f7ff fd36 	bl	800039c <lcd_clear>
	  lcd_enviar_int(medicion,0,0);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <Startlcd2+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd13 	bl	8000364 <lcd_enviar_int>
    osDelay(500);
 800093e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000942:	f004 fb03 	bl	8004f4c <osDelay>
	  lcd_clear();
 8000946:	e7f1      	b.n	800092c <Startlcd2+0x8>
 8000948:	2000045c 	.word	0x2000045c

0800094c <Startkeypad2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startkeypad2 */
void Startkeypad2(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startkeypad2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f004 faf9 	bl	8004f4c <osDelay>
 800095a:	e7fb      	b.n	8000954 <Startkeypad2+0x8>

0800095c <Startmatriz2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startmatriz2 */
void Startmatriz2(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startmatriz2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f004 faf1 	bl	8004f4c <osDelay>
 800096a:	e7fb      	b.n	8000964 <Startmatriz2+0x8>

0800096c <Startsonic2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsonic2 */
void Startsonic2(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startsonic2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f004 fae9 	bl	8004f4c <osDelay>
 800097a:	e7fb      	b.n	8000974 <Startsonic2+0x8>

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fa15 	bl	8000dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099e:	b672      	cpsid	i
}
 80009a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_MspInit+0x4c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_MspInit+0x4c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f001 fa0d 	bl	8001e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a14:	d124      	bne.n	8000a60 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_ADC_MspInit+0x74>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a46:	2301      	movs	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 f9fa 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_I2C_MspInit+0x7c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d128      	bne.n	8000ae0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <HAL_I2C_MspInit+0x84>)
 8000ac4:	f001 f9c6 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad2:	61d3      	str	r3, [r2, #28]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_I2C_MspInit+0x80>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f001 f976 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_InitTick+0xe4>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <HAL_InitTick+0xe4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	61d3      	str	r3, [r2, #28]
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_InitTick+0xe4>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba0:	f107 0210 	add.w	r2, r7, #16
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 f97c 	bl	8003ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bba:	f003 f931 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8000bbe:	6378      	str	r0, [r7, #52]	; 0x34
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bc2:	f003 f92d 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_InitTick+0xe8>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	0c9b      	lsrs	r3, r3, #18
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_InitTick+0xec>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_InitTick+0xec>)
 8000be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xec>)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_InitTick+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <HAL_InitTick+0xec>)
 8000c04:	f003 fb14 	bl	8004230 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <HAL_InitTick+0xec>)
 8000c18:	f003 fb6c 	bl	80042f4 <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f001 f904 	bl	8001e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f001 f8e0 	bl	8001e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_InitTick+0xf0>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20000460 	.word	0x20000460
 8000c68:	20000004 	.word	0x20000004

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM2_IRQHandler+0x10>)
 8000c9e:	f003 fb7d 	bl	800439c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000460 	.word	0x20000460

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f005 fbb4 	bl	8006448 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20004000 	.word	0x20004000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200004ac 	.word	0x200004ac
 8000d14:	20001348 	.word	0x20001348

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f005 fb73 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fbb5 	bl	80004dc <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d74:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d80:	08006e8c 	.word	0x08006e8c
  ldr r2, =_sbss
 8000d84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d88:	20001348 	.word	0x20001348

08000d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x28>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f001 f822 	bl	8001dea <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f7ff fee6 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fdfa 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200004b0 	.word	0x200004b0

08000de4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200004b0 	.word	0x200004b0

08000dfc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09a      	sub	sp, #104	; 0x68
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e169      	b.n	8001138 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d176      	bne.n	8000f64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d152      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fdab 	bl	80009f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d13b      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fdd3 	bl	8001a58 <ADC_Disable>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d12f      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
 8000ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d12b      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed4:	f023 0302 	bic.w	r3, r3, #2
 8000ed8:	f043 0202 	orr.w	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000efe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f00:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HAL_ADC_Init+0x2fc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a8f      	ldr	r2, [pc, #572]	; (8001144 <HAL_ADC_Init+0x300>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9a      	lsrs	r2, r3, #18
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f16:	e002      	b.n	8000f1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f9      	bne.n	8000f18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f40:	d110      	bne.n	8000f64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f023 0312 	bic.w	r3, r3, #18
 8000f4a:	f043 0210 	orr.w	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 80d6 	bne.w	800111e <HAL_ADC_Init+0x2da>
 8000f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 80d1 	bne.w	800111e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 80c9 	bne.w	800111e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f94:	f043 0202 	orr.w	r2, r3, #2
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_ADC_Init+0x304>)
 8000f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_ADC_Init+0x180>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_Init+0x180>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_Init+0x182>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11c      	bne.n	8001004 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fca:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d010      	beq.n	8000ff2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <HAL_ADC_Init+0x1a8>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_Init+0x1a8>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0x1aa>
 8000fec:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001002:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7e5b      	ldrb	r3, [r3, #25]
 8001008:	035b      	lsls	r3, r3, #13
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800100e:	2a01      	cmp	r2, #1
 8001010:	d002      	beq.n	8001018 <HAL_ADC_Init+0x1d4>
 8001012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001016:	e000      	b.n	800101a <HAL_ADC_Init+0x1d6>
 8001018:	2200      	movs	r2, #0
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4313      	orrs	r3, r2
 8001028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102a:	4313      	orrs	r3, r2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d11b      	bne.n	8001070 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e5b      	ldrb	r3, [r3, #25]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	3b01      	subs	r3, #1
 8001046:	045a      	lsls	r2, r3, #17
 8001048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800104a:	4313      	orrs	r3, r2
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	663b      	str	r3, [r7, #96]	; 0x60
 8001052:	e00d      	b.n	8001070 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800105c:	f043 0220 	orr.w	r2, r3, #32
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	2b01      	cmp	r3, #1
 8001076:	d007      	beq.n	8001088 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	4313      	orrs	r3, r2
 8001082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001084:	4313      	orrs	r3, r2
 8001086:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d114      	bne.n	80010c0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7e1b      	ldrb	r3, [r3, #24]
 80010ae:	039a      	lsls	r2, r3, #14
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4313      	orrs	r3, r2
 80010ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010bc:	4313      	orrs	r3, r2
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_ADC_Init+0x308>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010d0:	430b      	orrs	r3, r1
 80010d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10c      	bne.n	80010f6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f023 010f 	bic.w	r1, r3, #15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	631a      	str	r2, [r3, #48]	; 0x30
 80010f4:	e007      	b.n	8001106 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020f 	bic.w	r2, r2, #15
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f023 0303 	bic.w	r3, r3, #3
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
 800111c:	e00a      	b.n	8001134 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f023 0312 	bic.w	r3, r3, #18
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001138:	4618      	mov	r0, r3
 800113a:	3768      	adds	r7, #104	; 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	50000300 	.word	0x50000300
 800114c:	fff0c007 	.word	0xfff0c007

08001150 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	d158      	bne.n	800121c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_ADC_Start+0x28>
 8001174:	2302      	movs	r3, #2
 8001176:	e054      	b.n	8001222 <HAL_ADC_Start+0xd2>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fc05 	bl	8001990 <ADC_Enable>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d140      	bne.n	8001212 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011da:	d106      	bne.n	80011ea <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	f023 0206 	bic.w	r2, r3, #6
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	221c      	movs	r2, #28
 80011fe:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0204 	orr.w	r2, r2, #4
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	e006      	b.n	8001220 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800121a:	e001      	b.n	8001220 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800121c:	2302      	movs	r3, #2
 800121e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Stop+0x1a>
 8001240:	2302      	movs	r3, #2
 8001242:	e023      	b.n	800128c <HAL_ADC_Stop+0x62>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800124c:	216c      	movs	r1, #108	; 0x6c
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fc68 	bl	8001b24 <ADC_ConversionStop>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d111      	bne.n	8001282 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fbfa 	bl	8001a58 <ADC_Disable>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d102      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012aa:	2308      	movs	r3, #8
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e02e      	b.n	800130e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_ADC_PollForConversion+0x178>)
 80012b2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d112      	bne.n	80012e6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d11d      	bne.n	800130a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e08d      	b.n	8001402 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07b      	b.n	8001402 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001316:	f7ff fd65 	bl	8000de4 <HAL_GetTick>
 800131a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800131c:	e021      	b.n	8001362 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d01d      	beq.n	8001362 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_ADC_PollForConversion+0xa8>
 800132c:	f7ff fd5a 	bl	8000de4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d212      	bcs.n	8001362 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10b      	bne.n	8001362 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f043 0204 	orr.w	r2, r3, #4
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04f      	b.n	8001402 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0d6      	beq.n	800131e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001386:	2b00      	cmp	r3, #0
 8001388:	d131      	bne.n	80013ee <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12c      	bne.n	80013ee <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d125      	bne.n	80013ee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d112      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d112      	bne.n	80013ee <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
 80013d4:	e00b      	b.n	80013ee <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	50000300 	.word	0x50000300

08001410 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b09b      	sub	sp, #108	; 0x6c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADC_ConfigChannel+0x22>
 800144a:	2302      	movs	r3, #2
 800144c:	e295      	b.n	800197a <HAL_ADC_ConfigChannel+0x54e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 8279 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d81c      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	461a      	mov	r2, r3
 8001482:	231f      	movs	r3, #31
 8001484:	4093      	lsls	r3, r2
 8001486:	43db      	mvns	r3, r3
 8001488:	4019      	ands	r1, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
 80014a6:	e063      	b.n	8001570 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d81e      	bhi.n	80014ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	3b1e      	subs	r3, #30
 80014c4:	221f      	movs	r2, #31
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	4019      	ands	r1, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3b1e      	subs	r3, #30
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
 80014ec:	e040      	b.n	8001570 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b0e      	cmp	r3, #14
 80014f4:	d81e      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	3b3c      	subs	r3, #60	; 0x3c
 800150a:	221f      	movs	r2, #31
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	4019      	ands	r1, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	3b3c      	subs	r3, #60	; 0x3c
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
 8001532:	e01d      	b.n	8001570 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	3b5a      	subs	r3, #90	; 0x5a
 8001548:	221f      	movs	r2, #31
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	4019      	ands	r1, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	3b5a      	subs	r3, #90	; 0x5a
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80e5 	bne.w	800174a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d91c      	bls.n	80015c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6999      	ldr	r1, [r3, #24]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	3b1e      	subs	r3, #30
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	3b1e      	subs	r3, #30
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	e019      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6959      	ldr	r1, [r3, #20]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	2207      	movs	r2, #7
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	4019      	ands	r1, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6898      	ldr	r0, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	fa00 f203 	lsl.w	r2, r0, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	3b01      	subs	r3, #1
 8001614:	2b03      	cmp	r3, #3
 8001616:	d84f      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0x28c>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_ADC_ConfigChannel+0x1f4>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001653 	.word	0x08001653
 8001628:	08001675 	.word	0x08001675
 800162c:	08001697 	.word	0x08001697
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001636:	4b97      	ldr	r3, [pc, #604]	; (8001894 <HAL_ADC_ConfigChannel+0x468>)
 8001638:	4013      	ands	r3, r2
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	0691      	lsls	r1, r2, #26
 8001640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001642:	430a      	orrs	r2, r1
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800164e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001650:	e07b      	b.n	800174a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001658:	4b8e      	ldr	r3, [pc, #568]	; (8001894 <HAL_ADC_ConfigChannel+0x468>)
 800165a:	4013      	ands	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	0691      	lsls	r1, r2, #26
 8001662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001664:	430a      	orrs	r2, r1
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001670:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001672:	e06a      	b.n	800174a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800167a:	4b86      	ldr	r3, [pc, #536]	; (8001894 <HAL_ADC_ConfigChannel+0x468>)
 800167c:	4013      	ands	r3, r2
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	0691      	lsls	r1, r2, #26
 8001684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001686:	430a      	orrs	r2, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001692:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001694:	e059      	b.n	800174a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800169c:	4b7d      	ldr	r3, [pc, #500]	; (8001894 <HAL_ADC_ConfigChannel+0x468>)
 800169e:	4013      	ands	r3, r2
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	0691      	lsls	r1, r2, #26
 80016a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a8:	430a      	orrs	r2, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016b4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b6:	e048      	b.n	800174a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	069b      	lsls	r3, r3, #26
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016da:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	069b      	lsls	r3, r3, #26
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	069b      	lsls	r3, r3, #26
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001722:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800172a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	069b      	lsls	r3, r3, #26
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001746:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001748:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_ADC_ConfigChannel+0x33e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_ConfigChannel+0x33e>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_ADC_ConfigChannel+0x340>
 800176a:	2300      	movs	r3, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 80fe 	bne.w	800196e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d00f      	beq.n	800179a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43da      	mvns	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	400a      	ands	r2, r1
 8001794:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001798:	e049      	b.n	800182e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	409a      	lsls	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d91c      	bls.n	80017f6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6999      	ldr	r1, [r3, #24]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	3b1b      	subs	r3, #27
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4019      	ands	r1, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	3b1b      	subs	r3, #27
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	e01b      	b.n	800182e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6959      	ldr	r1, [r3, #20]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	2207      	movs	r2, #7
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	4019      	ands	r1, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6898      	ldr	r0, [r3, #8]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	fa00 f203 	lsl.w	r2, r0, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_ADC_ConfigChannel+0x46c>)
 8001830:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d105      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800183a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d014      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800184a:	2b11      	cmp	r3, #17
 800184c:	d105      	bne.n	800185a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800185e:	2b12      	cmp	r3, #18
 8001860:	f040 8085 	bne.w	800196e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800186c:	2b00      	cmp	r3, #0
 800186e:	d17e      	bne.n	800196e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10c      	bne.n	800189c <HAL_ADC_ConfigChannel+0x470>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_ADC_ConfigChannel+0x470>
 8001890:	2301      	movs	r3, #1
 8001892:	e004      	b.n	800189e <HAL_ADC_ConfigChannel+0x472>
 8001894:	83fff000 	.word	0x83fff000
 8001898:	50000300 	.word	0x50000300
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d150      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x498>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x498>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x49a>
 80018c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d13c      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d11d      	bne.n	800190e <HAL_ADC_ConfigChannel+0x4e2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018da:	d118      	bne.n	800190e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_ADC_ConfigChannel+0x55c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_ADC_ConfigChannel+0x560>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9a      	lsrs	r2, r3, #18
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018fe:	e002      	b.n	8001906 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3b01      	subs	r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800190c:	e02e      	b.n	800196c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b11      	cmp	r3, #17
 8001914:	d10b      	bne.n	800192e <HAL_ADC_ConfigChannel+0x502>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800191e:	d106      	bne.n	800192e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800192c:	e01e      	b.n	800196c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b12      	cmp	r3, #18
 8001934:	d11a      	bne.n	800196c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800193e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001940:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001942:	e013      	b.n	800196c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001956:	e00a      	b.n	800196e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800196a:	e000      	b.n	800196e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800196c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001976:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800197a:	4618      	mov	r0, r3
 800197c:	376c      	adds	r7, #108	; 0x6c
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000000 	.word	0x20000000
 800198c:	431bde83 	.word	0x431bde83

08001990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <ADC_Enable+0x2c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <ADC_Enable+0x2c>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <ADC_Enable+0x2e>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d143      	bne.n	8001a4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <ADC_Enable+0xc4>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e02f      	b.n	8001a4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80019fc:	f7ff f9f2 	bl	8000de4 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a02:	e01b      	b.n	8001a3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a04:	f7ff f9ee 	bl	8000de4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d914      	bls.n	8001a3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d00d      	beq.n	8001a3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f043 0210 	orr.w	r2, r3, #16
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e007      	b.n	8001a4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d1dc      	bne.n	8001a04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	8000003f 	.word	0x8000003f

08001a58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <ADC_Disable+0x2c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <ADC_Disable+0x2c>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <ADC_Disable+0x2e>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d047      	beq.n	8001b1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030d 	and.w	r3, r3, #13
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10f      	bne.n	8001ab8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0202 	orr.w	r2, r2, #2
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2203      	movs	r2, #3
 8001aae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f998 	bl	8000de4 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ab6:	e029      	b.n	8001b0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0210 	orr.w	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e023      	b.n	8001b1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ad4:	f7ff f986 	bl	8000de4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d914      	bls.n	8001b0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10d      	bne.n	8001b0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f043 0210 	orr.w	r2, r3, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e007      	b.n	8001b1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d0dc      	beq.n	8001ad4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 809b 	beq.w	8001c80 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b58:	d12a      	bne.n	8001bb0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d126      	bne.n	8001bb0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d122      	bne.n	8001bb0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001b6e:	e014      	b.n	8001b9a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <ADC_ConversionStop+0x168>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d90d      	bls.n	8001b94 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e076      	b.n	8001c82 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d1e3      	bne.n	8001b70 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b60      	cmp	r3, #96	; 0x60
 8001bb4:	d015      	beq.n	8001be2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d10e      	bne.n	8001be2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0210 	orr.w	r2, r2, #16
 8001be0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d015      	beq.n	8001c14 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d10e      	bne.n	8001c14 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b60      	cmp	r3, #96	; 0x60
 8001c18:	d005      	beq.n	8001c26 <ADC_ConversionStop+0x102>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b6c      	cmp	r3, #108	; 0x6c
 8001c1e:	d105      	bne.n	8001c2c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c20:	230c      	movs	r3, #12
 8001c22:	617b      	str	r3, [r7, #20]
        break;
 8001c24:	e005      	b.n	8001c32 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c26:	2308      	movs	r3, #8
 8001c28:	617b      	str	r3, [r7, #20]
        break;
 8001c2a:	e002      	b.n	8001c32 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
        break;
 8001c30:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001c32:	f7ff f8d7 	bl	8000de4 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c38:	e01b      	b.n	8001c72 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c3a:	f7ff f8d3 	bl	8000de4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b0b      	cmp	r3, #11
 8001c46:	d914      	bls.n	8001c72 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1dc      	bne.n	8001c3a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	000993ff 	.word	0x000993ff

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ff4c 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e12:	f7ff ff61 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7ff ffb1 	bl	8001d84 <NVIC_EncodePriority>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff80 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff54 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	e14e      	b.n	8002102 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8140 	beq.w	80020fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d005      	beq.n	8001e94 <HAL_GPIO_Init+0x40>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d130      	bne.n	8001ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	f003 0201 	and.w	r2, r3, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d017      	beq.n	8001f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d123      	bne.n	8001f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0203 	and.w	r2, r3, #3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 809a 	beq.w	80020fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	4b55      	ldr	r3, [pc, #340]	; (8002120 <HAL_GPIO_Init+0x2cc>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_GPIO_Init+0x2cc>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b52      	ldr	r3, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x2cc>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800200a:	d013      	beq.n	8002034 <HAL_GPIO_Init+0x1e0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a46      	ldr	r2, [pc, #280]	; (8002128 <HAL_GPIO_Init+0x2d4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a45      	ldr	r2, [pc, #276]	; (800212c <HAL_GPIO_Init+0x2d8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1d8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a44      	ldr	r2, [pc, #272]	; (8002130 <HAL_GPIO_Init+0x2dc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1d4>
 8002024:	2303      	movs	r3, #3
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x1e2>
 8002028:	2305      	movs	r3, #5
 800202a:	e004      	b.n	8002036 <HAL_GPIO_Init+0x1e2>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x1e2>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_GPIO_Init+0x1e2>
 8002034:	2300      	movs	r3, #0
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002046:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002054:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_GPIO_Init+0x2e0>)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f aea9 	bne.w	8001e64 <HAL_GPIO_Init+0x10>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	48000400 	.word	0x48000400
 800212c:	48000800 	.word	0x48000800
 8002130:	48000c00 	.word	0x48000c00
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e081      	b.n	800227e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fc6c 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d104      	bne.n	8002202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	461a      	mov	r2, r3
 8002294:	460b      	mov	r3, r1
 8002296:	817b      	strh	r3, [r7, #10]
 8002298:	4613      	mov	r3, r2
 800229a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	f040 80da 	bne.w	800245e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x30>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0d3      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe fd90 	bl	8000de4 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2319      	movs	r3, #25
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8f0 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0be      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2210      	movs	r2, #16
 80022ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d90e      	bls.n	8002332 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	b2da      	uxtb	r2, r3
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_I2C_Master_Transmit+0x1e0>)
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fa7e 	bl	800282c <I2C_TransferConfig>
 8002330:	e06c      	b.n	800240c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	b2da      	uxtb	r2, r3
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <HAL_I2C_Master_Transmit+0x1e0>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fa6d 	bl	800282c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002352:	e05b      	b.n	800240c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	6a39      	ldr	r1, [r7, #32]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8fc 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e07b      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d034      	beq.n	800240c <HAL_I2C_Master_Transmit+0x184>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d130      	bne.n	800240c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f87f 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04d      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2bff      	cmp	r3, #255	; 0xff
 80023cc:	d90e      	bls.n	80023ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	8979      	ldrh	r1, [r7, #10]
 80023dc:	2300      	movs	r3, #0
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fa21 	bl	800282c <I2C_TransferConfig>
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fa10 	bl	800282c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d19e      	bne.n	8002354 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8e2 	bl	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e01a      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_I2C_Master_Transmit+0x1e4>)
 800243e:	400b      	ands	r3, r1
 8002440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	80002000 	.word	0x80002000
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d007      	beq.n	80024ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	619a      	str	r2, [r3, #24]
  }
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c8:	e031      	b.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d02d      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7fe fc87 	bl	8000de4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d122      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	429a      	cmp	r2, r3
 8002504:	d113      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d0be      	beq.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002562:	e033      	b.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f87f 	bl	800266c <I2C_IsErrorOccurred>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e031      	b.n	80025dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d025      	beq.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7fe fc30 	bl	8000de4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d302      	bcc.n	8002596 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11a      	bne.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d013      	beq.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e007      	b.n	80025dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d1c4      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f0:	e02f      	b.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f838 	bl	800266c <I2C_IsErrorOccurred>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e02d      	b.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe fbed 	bl	8000de4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d11a      	bne.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d013      	beq.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1c8      	bne.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d068      	beq.n	800276a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a0:	e049      	b.n	8002736 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d045      	beq.n	8002736 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7fe fb9b 	bl	8000de4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_IsErrorOccurred+0x54>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13a      	bne.n	8002736 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d121      	bne.n	8002728 <I2C_IsErrorOccurred+0xbc>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ea:	d01d      	beq.n	8002728 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d01a      	beq.n	8002728 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002702:	f7fe fb6f 	bl	8000de4 <HAL_GetTick>
 8002706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002708:	e00e      	b.n	8002728 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800270a:	f7fe fb6b 	bl	8000de4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b19      	cmp	r3, #25
 8002716:	d907      	bls.n	8002728 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002726:	e006      	b.n	8002736 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d1e9      	bne.n	800270a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b20      	cmp	r3, #32
 8002742:	d003      	beq.n	800274c <I2C_IsErrorOccurred+0xe0>
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0aa      	beq.n	80026a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800274c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01c      	beq.n	800281a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fe45 	bl	8002470 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <I2C_IsErrorOccurred+0x1bc>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800281e:	4618      	mov	r0, r3
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	fe00e800 	.word	0xfe00e800

0800282c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	4613      	mov	r3, r2
 800283c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002844:	7a7b      	ldrb	r3, [r7, #9]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800284c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	4313      	orrs	r3, r2
 8002856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800285a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	0d5b      	lsrs	r3, r3, #21
 8002866:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <I2C_TransferConfig+0x60>)
 800286c:	430b      	orrs	r3, r1
 800286e:	43db      	mvns	r3, r3
 8002870:	ea02 0103 	and.w	r1, r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	03ff63ff 	.word	0x03ff63ff

08002890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d138      	bne.n	8002918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e032      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	d139      	bne.n	80029b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002946:	2302      	movs	r3, #2
 8002948:	e033      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f001 b823 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 817d 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029fc:	4bbc      	ldr	r3, [pc, #752]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a08:	4bb9      	ldr	r3, [pc, #740]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d15c      	bne.n	8002ace <HAL_RCC_OscConfig+0x10e>
 8002a14:	4bb6      	ldr	r3, [pc, #728]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d155      	bne.n	8002ace <HAL_RCC_OscConfig+0x10e>
 8002a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x94>
 8002a4e:	4ba8      	ldr	r3, [pc, #672]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e015      	b.n	8002a80 <HAL_RCC_OscConfig+0xc0>
 8002a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a7c:	4b9c      	ldr	r3, [pc, #624]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 811f 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8116 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f000 bfaf 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x12e>
 8002ae0:	4b83      	ldr	r3, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a82      	ldr	r2, [pc, #520]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e036      	b.n	8002b5c <HAL_RCC_OscConfig+0x19c>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x158>
 8002afe:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7b      	ldr	r2, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b79      	ldr	r3, [pc, #484]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a78      	ldr	r2, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e021      	b.n	8002b5c <HAL_RCC_OscConfig+0x19c>
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x184>
 8002b2a:	4b71      	ldr	r3, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a70      	ldr	r2, [pc, #448]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6e      	ldr	r3, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6d      	ldr	r2, [pc, #436]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0x19c>
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a69      	ldr	r2, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a66      	ldr	r2, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f023 020f 	bic.w	r2, r3, #15
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	495f      	ldr	r1, [pc, #380]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d059      	beq.n	8002c3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe f92d 	bl	8000de4 <HAL_GetTick>
 8002b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe f928 	bl	8000de4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f000 bf43 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8002ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002baa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x218>
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_OscConfig+0x244>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bdc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f042 0220 	orr.w	r2, r2, #32
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	f002 021f 	and.w	r2, r2, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ab      	beq.n	8002b90 <HAL_RCC_OscConfig+0x1d0>
 8002c38:	e05d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f8d3 	bl	8000de4 <HAL_GetTick>
 8002c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe f8ce 	bl	8000de4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d902      	bls.n	8002c5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	f000 bee9 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2cc>
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2f8>
 8002c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ca8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cbc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ccc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f042 0220 	orr.w	r2, r2, #32
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f002 021f 	and.w	r2, r2, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ab      	bne.n	8002c44 <HAL_RCC_OscConfig+0x284>
 8002cec:	e003      	b.n	8002cf6 <HAL_RCC_OscConfig+0x336>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 817d 	beq.w	8003006 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d0c:	4ba6      	ldr	r3, [pc, #664]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d18:	4ba3      	ldr	r3, [pc, #652]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d172      	bne.n	8002e0a <HAL_RCC_OscConfig+0x44a>
 8002d24:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d16c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x44a>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3a0>
 8002d5a:	4b93      	ldr	r3, [pc, #588]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e013      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c8>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d92:	fa92 f2a2 	rbit	r2, r2
 8002d96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x410>
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f000 be2e 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	21f8      	movs	r1, #248	; 0xf8
 8002de6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dee:	fa91 f1a1 	rbit	r1, r1
 8002df2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002df6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dfa:	fab1 f181 	clz	r1, r1
 8002dfe:	b2c9      	uxtb	r1, r1
 8002e00:	408b      	lsls	r3, r1
 8002e02:	4969      	ldr	r1, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e08:	e0fd      	b.n	8003006 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8088 	beq.w	8002f2c <HAL_RCC_OscConfig+0x56c>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	2301      	movs	r3, #1
 8002e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fd ffcc 	bl	8000de4 <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fd ffc7 	bl	8000de4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	f000 bde2 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d8>
 8002e92:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e013      	b.n	8002ec0 <HAL_RCC_OscConfig+0x500>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002eb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ebc:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ec6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ed2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f002 021f 	and.w	r2, r2, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0af      	beq.n	8002e52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	21f8      	movs	r1, #248	; 0xf8
 8002f08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f10:	fa91 f1a1 	rbit	r1, r1
 8002f14:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f1c:	fab1 f181 	clz	r1, r1
 8002f20:	b2c9      	uxtb	r1, r1
 8002f22:	408b      	lsls	r3, r1
 8002f24:	4920      	ldr	r1, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
 8002f2a:	e06c      	b.n	8003006 <HAL_RCC_OscConfig+0x646>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd ff44 	bl	8000de4 <HAL_GetTick>
 8002f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fd ff3f 	bl	8000de4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	f000 bd5a 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d104      	bne.n	8002fac <HAL_RCC_OscConfig+0x5ec>
 8002fa2:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <HAL_RCC_OscConfig+0x5e8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCC_OscConfig+0x614>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fd0:	4bc8      	ldr	r3, [pc, #800]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fde:	fa92 f2a2 	rbit	r2, r2
 8002fe2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fe6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ad      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8110 	beq.w	800323c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d079      	beq.n	8003120 <HAL_RCC_OscConfig+0x760>
 800302c:	2301      	movs	r3, #1
 800302e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	4bab      	ldr	r3, [pc, #684]	; (80032f8 <HAL_RCC_OscConfig+0x938>)
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	461a      	mov	r2, r3
 8003052:	2301      	movs	r3, #1
 8003054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fd fec5 	bl	8000de4 <HAL_GetTick>
 800305a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7fd fec0 	bl	8000de4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d902      	bls.n	8003076 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	f000 bcdb 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030dc:	2102      	movs	r1, #2
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f1a3 	rbit	r1, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030f6:	6019      	str	r1, [r3, #0]
  return result;
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0a0      	beq.n	8003060 <HAL_RCC_OscConfig+0x6a0>
 800311e:	e08d      	b.n	800323c <HAL_RCC_OscConfig+0x87c>
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003142:	601a      	str	r2, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800314c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x938>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	2300      	movs	r3, #0
 8003160:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fd fe3f 	bl	8000de4 <HAL_GetTick>
 8003166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316c:	f7fd fe3a 	bl	8000de4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d902      	bls.n	8003182 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	f000 bc55 	b.w	8003a2c <HAL_RCC_OscConfig+0x106c>
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031d2:	2202      	movs	r2, #2
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 80031f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031fa:	2102      	movs	r1, #2
 80031fc:	6019      	str	r1, [r3, #0]
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f1a3 	rbit	r1, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003214:	6019      	str	r1, [r3, #0]
  return result;
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d197      	bne.n	800316c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 81a1 	beq.w	8003594 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d116      	bne.n	8003292 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800328a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCC_OscConfig+0x93c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x93c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_RCC_OscConfig+0x93c>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032aa:	f7fd fd9b 	bl	8000de4 <HAL_GetTick>
 80032ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fd fd96 	bl	8000de4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b64      	cmp	r3, #100	; 0x64
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e3b1      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_OscConfig+0x93c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ef      	beq.n	80032b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10d      	bne.n	8003300 <HAL_RCC_OscConfig+0x940>
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a02      	ldr	r2, [pc, #8]	; (80032f4 <HAL_RCC_OscConfig+0x934>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e03c      	b.n	800336c <HAL_RCC_OscConfig+0x9ac>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	10908120 	.word	0x10908120
 80032fc:	40007000 	.word	0x40007000
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x96a>
 8003310:	4bc1      	ldr	r3, [pc, #772]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4ac0      	ldr	r2, [pc, #768]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6213      	str	r3, [r2, #32]
 800331c:	4bbe      	ldr	r3, [pc, #760]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4abd      	ldr	r2, [pc, #756]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003322:	f023 0304 	bic.w	r3, r3, #4
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	e020      	b.n	800336c <HAL_RCC_OscConfig+0x9ac>
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x994>
 800333a:	4bb7      	ldr	r3, [pc, #732]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4ab6      	ldr	r2, [pc, #728]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	4bb4      	ldr	r3, [pc, #720]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4ab3      	ldr	r2, [pc, #716]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0x9ac>
 8003354:	4bb0      	ldr	r3, [pc, #704]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4aaf      	ldr	r2, [pc, #700]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	4bad      	ldr	r3, [pc, #692]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4aac      	ldr	r2, [pc, #688]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8081 	beq.w	8003480 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fd fd31 	bl	8000de4 <HAL_GetTick>
 8003382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fd fd2c 	bl	8000de4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e345      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033a8:	2202      	movs	r2, #2
 80033aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033e6:	601a      	str	r2, [r3, #0]
  return result;
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d102      	bne.n	800340c <HAL_RCC_OscConfig+0xa4c>
 8003406:	4b84      	ldr	r3, [pc, #528]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	e013      	b.n	8003434 <HAL_RCC_OscConfig+0xa74>
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003414:	2202      	movs	r2, #2
 8003416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	fa93 f2a3 	rbit	r2, r3
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003438:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800343c:	2102      	movs	r1, #2
 800343e:	6011      	str	r1, [r2, #0]
 8003440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003444:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	fa92 f1a2 	rbit	r1, r2
 800344e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003452:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003456:	6011      	str	r1, [r2, #0]
  return result;
 8003458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800345c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f002 021f 	and.w	r2, r2, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d084      	beq.n	8003388 <HAL_RCC_OscConfig+0x9c8>
 800347e:	e07f      	b.n	8003580 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7fd fcb0 	bl	8000de4 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fcab 	bl	8000de4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e2c4      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034aa:	2202      	movs	r2, #2
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034e8:	601a      	str	r2, [r3, #0]
  return result;
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d102      	bne.n	800350e <HAL_RCC_OscConfig+0xb4e>
 8003508:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	e013      	b.n	8003536 <HAL_RCC_OscConfig+0xb76>
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003516:	2202      	movs	r2, #2
 8003518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800353e:	2102      	movs	r1, #2
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003546:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fa92 f1a2 	rbit	r1, r2
 8003550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003554:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003558:	6011      	str	r1, [r2, #0]
  return result;
 800355a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d184      	bne.n	800348a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003580:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 800358e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003592:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8242 	beq.w	8003a2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_RCC_OscConfig+0xc58>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	f000 8213 	beq.w	80039da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f040 8162 	bne.w	800388a <HAL_RCC_OscConfig+0xeca>
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ea:	601a      	str	r2, [r3, #0]
  return result;
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	461a      	mov	r2, r3
 8003608:	2300      	movs	r3, #0
 800360a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fbea 	bl	8000de4 <HAL_GetTick>
 8003610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003614:	e00c      	b.n	8003630 <HAL_RCC_OscConfig+0xc70>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fbe2 	bl	8000de4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1fd      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003654:	601a      	str	r2, [r3, #0]
  return result;
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800365e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_RCC_OscConfig+0xcba>
 8003674:	4bb0      	ldr	r3, [pc, #704]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e027      	b.n	80036ca <HAL_RCC_OscConfig+0xd0a>
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	4b9c      	ldr	r3, [pc, #624]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036d6:	6011      	str	r1, [r2, #0]
 80036d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	fa92 f1a2 	rbit	r1, r2
 80036e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036ee:	6011      	str	r1, [r2, #0]
  return result;
 80036f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f042 0220 	orr.w	r2, r2, #32
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f002 021f 	and.w	r2, r2, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d182      	bne.n	800361c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003716:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	430b      	orrs	r3, r1
 8003738:	497f      	ldr	r1, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003762:	601a      	str	r2, [r3, #0]
  return result;
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800376c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	461a      	mov	r2, r3
 8003780:	2301      	movs	r3, #1
 8003782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fb2e 	bl	8000de4 <HAL_GetTick>
 8003788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800378c:	e009      	b.n	80037a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd fb29 	bl	8000de4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e144      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	fa93 f2a3 	rbit	r2, r3
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037c6:	601a      	str	r2, [r3, #0]
  return result;
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d102      	bne.n	80037ec <HAL_RCC_OscConfig+0xe2c>
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	e027      	b.n	800383c <HAL_RCC_OscConfig+0xe7c>
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800381a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003840:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003844:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800384e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	fa92 f1a2 	rbit	r1, r2
 8003858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003860:	6011      	str	r1, [r2, #0]
  return result;
 8003862:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003866:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d082      	beq.n	800378e <HAL_RCC_OscConfig+0xdce>
 8003888:	e0cf      	b.n	8003a2a <HAL_RCC_OscConfig+0x106a>
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038ae:	601a      	str	r2, [r3, #0]
  return result;
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fa88 	bl	8000de4 <HAL_GetTick>
 80038d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	e009      	b.n	80038ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038da:	f7fd fa83 	bl	8000de4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e09e      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003912:	601a      	str	r2, [r3, #0]
  return result;
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800391c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d104      	bne.n	800393c <HAL_RCC_OscConfig+0xf7c>
 8003932:	4b01      	ldr	r3, [pc, #4]	; (8003938 <HAL_RCC_OscConfig+0xf78>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e029      	b.n	800398c <HAL_RCC_OscConfig+0xfcc>
 8003938:	40021000 	.word	0x40021000
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800396a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x1078>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003990:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003994:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003998:	6011      	str	r1, [r2, #0]
 800399a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800399e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	fa92 f1a2 	rbit	r1, r2
 80039a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039b0:	6011      	str	r1, [r2, #0]
  return result;
 80039b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	fab2 f282 	clz	r2, r2
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f042 0220 	orr.w	r2, r2, #32
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f002 021f 	and.w	r2, r2, #31
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f202 	lsl.w	r2, r1, r2
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d180      	bne.n	80038da <HAL_RCC_OscConfig+0xf1a>
 80039d8:	e027      	b.n	8003a2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e01e      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_OscConfig+0x1078>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10b      	bne.n	8003a26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b09e      	sub	sp, #120	; 0x78
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e162      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b90      	ldr	r3, [pc, #576]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d910      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 0207 	bic.w	r2, r3, #7
 8003a6a:	498b      	ldr	r1, [pc, #556]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b89      	ldr	r3, [pc, #548]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e14a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b82      	ldr	r3, [pc, #520]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	497f      	ldr	r1, [pc, #508]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80dc 	beq.w	8003c68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d13c      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xf6>
 8003ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xa6>
 8003adc:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e00f      	b.n	8003b02 <HAL_RCC_ClockConfig+0xc6>
 8003ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	667b      	str	r3, [r7, #100]	; 0x64
 8003af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af4:	663b      	str	r3, [r7, #96]	; 0x60
 8003af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003afe:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0a:	fa92 f2a2 	rbit	r2, r2
 8003b0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b12:	fab2 f282 	clz	r2, r2
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f042 0220 	orr.w	r2, r2, #32
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f002 021f 	and.w	r2, r2, #31
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d17b      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0f3      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d13c      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x178>
 8003b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x128>
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	e00f      	b.n	8003b84 <HAL_RCC_ClockConfig+0x148>
 8003b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	643b      	str	r3, [r7, #64]	; 0x40
 8003b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b88:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b8c:	fa92 f2a2 	rbit	r2, r2
 8003b90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b94:	fab2 f282 	clz	r2, r2
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f002 021f 	and.w	r2, r2, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13a      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0b2      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	e00d      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1bc>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
 8003be8:	2302      	movs	r3, #2
 8003bea:	623b      	str	r3, [r7, #32]
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	61ba      	str	r2, [r7, #24]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	fa92 f2a2 	rbit	r2, r2
 8003c02:	617a      	str	r2, [r7, #20]
  return result;
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	fab2 f282 	clz	r2, r2
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	f042 0220 	orr.w	r2, r2, #32
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	f002 021f 	and.w	r2, r2, #31
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e079      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	491a      	ldr	r1, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fd f8d4 	bl	8000de4 <HAL_GetTick>
 8003c3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fd f8d0 	bl	8000de4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e061      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_RCC_ClockConfig+0x260>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d214      	bcs.n	8003ca0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4906      	ldr	r1, [pc, #24]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_RCC_ClockConfig+0x25c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e040      	b.n	8003d1a <HAL_RCC_ClockConfig+0x2de>
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_ClockConfig+0x2e8>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	491a      	ldr	r1, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x2e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCC_ClockConfig+0x2e8>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4912      	ldr	r1, [pc, #72]	; (8003d24 <HAL_RCC_ClockConfig+0x2e8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cde:	f000 f829 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCC_ClockConfig+0x2e8>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cec:	22f0      	movs	r2, #240	; 0xf0
 8003cee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	fa92 f2a2 	rbit	r2, r2
 8003cf6:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	fab2 f282 	clz	r2, r2
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	40d3      	lsrs	r3, r2
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x2ec>)
 8003d04:	5cd3      	ldrb	r3, [r2, r3]
 8003d06:	fa21 f303 	lsr.w	r3, r1, r3
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <HAL_RCC_ClockConfig+0x2f0>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_RCC_ClockConfig+0x2f4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc ff30 	bl	8000b78 <HAL_InitTick>
  
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3778      	adds	r7, #120	; 0x78
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	08006e18 	.word	0x08006e18
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	20000004 	.word	0x20000004

08003d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b08b      	sub	sp, #44	; 0x2c
 8003d38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d4e:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d002      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x30>
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x36>
 8003d62:	e03c      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d66:	623b      	str	r3, [r7, #32]
      break;
 8003d68:	e03c      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	fa92 f2a2 	rbit	r2, r2
 8003d7c:	607a      	str	r2, [r7, #4]
  return result;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	fab2 f282 	clz	r2, r2
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	40d3      	lsrs	r3, r2
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
 8003d8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	220f      	movs	r2, #15
 8003d98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	fa92 f2a2 	rbit	r2, r2
 8003da0:	60fa      	str	r2, [r7, #12]
  return result;
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	fab2 f282 	clz	r2, r2
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	40d3      	lsrs	r3, r2
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	623b      	str	r3, [r7, #32]
      break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003de0:	623b      	str	r3, [r7, #32]
      break;
 8003de2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	372c      	adds	r7, #44	; 0x2c
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	007a1200 	.word	0x007a1200
 8003dfc:	08006e30 	.word	0x08006e30
 8003e00:	08006e40 	.word	0x08006e40
 8003e04:	003d0900 	.word	0x003d0900

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000000 	.word	0x20000000

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e26:	f7ff ffef 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	fa92 f2a2 	rbit	r2, r2
 8003e40:	603a      	str	r2, [r7, #0]
  return result;
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	40d3      	lsrs	r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08006e28 	.word	0x08006e28

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e6a:	f7ff ffcd 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	fa92 f2a2 	rbit	r2, r2
 8003e84:	603a      	str	r2, [r7, #0]
  return result;
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	40d3      	lsrs	r3, r2
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08006e28 	.word	0x08006e28

08003ea8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_RCC_GetClockConfig+0x5c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_GetClockConfig+0x5c>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCC_GetClockConfig+0x60>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0207 	and.w	r2, r3, #7
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40022000 	.word	0x40022000

08003f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b092      	sub	sp, #72	; 0x48
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80d4 	beq.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f30:	4b4e      	ldr	r3, [pc, #312]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10e      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4a4a      	ldr	r2, [pc, #296]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	61d3      	str	r3, [r2, #28]
 8003f48:	4b48      	ldr	r3, [pc, #288]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b45      	ldr	r3, [pc, #276]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fc ff37 	bl	8000de4 <HAL_GetTick>
 8003f76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fc ff33 	bl	8000de4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	; 0x64
 8003f86:	d901      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e14b      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b38      	ldr	r3, [pc, #224]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f98:	4b34      	ldr	r3, [pc, #208]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8084 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d07c      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fc fee3 	bl	8000de4 <HAL_GetTick>
 800401e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fc fedf 	bl	8000de4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0f5      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004038:	2302      	movs	r3, #2
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	2302      	movs	r3, #2
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	61fb      	str	r3, [r7, #28]
  return result;
 8004050:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d108      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004066:	4b01      	ldr	r3, [pc, #4]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	e00d      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800406c:	40021000 	.word	0x40021000
 8004070:	40007000 	.word	0x40007000
 8004074:	10908100 	.word	0x10908100
 8004078:	2302      	movs	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2202      	movs	r2, #2
 800408a:	613a      	str	r2, [r7, #16]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	fa92 f2a2 	rbit	r2, r2
 8004092:	60fa      	str	r2, [r7, #12]
  return result;
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	fab2 f282 	clz	r2, r2
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f002 021f 	and.w	r2, r2, #31
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0b7      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040b2:	4b5e      	ldr	r3, [pc, #376]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	495b      	ldr	r1, [pc, #364]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4a56      	ldr	r2, [pc, #344]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e4:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f023 0203 	bic.w	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494e      	ldr	r1, [pc, #312]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4947      	ldr	r1, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004110:	4313      	orrs	r3, r2
 8004112:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004120:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	493f      	ldr	r1, [pc, #252]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f023 0220 	bic.w	r2, r3, #32
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4938      	ldr	r1, [pc, #224]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800414c:	4313      	orrs	r3, r2
 800414e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415c:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	4930      	ldr	r1, [pc, #192]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800416a:	4313      	orrs	r3, r2
 800416c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	4921      	ldr	r1, [pc, #132]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	4912      	ldr	r1, [pc, #72]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	490b      	ldr	r1, [pc, #44]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004200:	4313      	orrs	r3, r2
 8004202:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800421e:	4313      	orrs	r3, r2
 8004220:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3748      	adds	r7, #72	; 0x48
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e049      	b.n	80042d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f841 	bl	80042de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 f9dc 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e03b      	b.n	8004384 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_TIM_Base_Start_IT+0x9c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_TIM_Base_Start_IT+0x4e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d004      	beq.n	8004342 <HAL_TIM_Base_Start_IT+0x4e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_TIM_Base_Start_IT+0xa0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d115      	bne.n	800436e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_TIM_Base_Start_IT+0xa4>)
 800434a:	4013      	ands	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d015      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x8c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d011      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	e008      	b.n	8004380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e000      	b.n	8004382 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40014000 	.word	0x40014000
 8004398:	00010007 	.word	0x00010007

0800439c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0202 	mvn.w	r2, #2
 80043c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f905 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8f7 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f908 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0204 	mvn.w	r2, #4
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8db 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8cd 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8de 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b08      	cmp	r3, #8
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0208 	mvn.w	r2, #8
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8b1 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8a3 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8b4 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0210 	mvn.w	r2, #16
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2208      	movs	r2, #8
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f887 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f879 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f88a 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0201 	mvn.w	r2, #1
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fa2e 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8e8 	bl	800471c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455a:	d10e      	bne.n	800457a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d107      	bne.n	800457a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8db 	bl	8004730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d10e      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d107      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f838 	bl	8004616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d10e      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d107      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f06f 0220 	mvn.w	r2, #32
 80045ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f89b 	bl	8004708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <TIM_Base_SetConfig+0xcc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0x20>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d108      	bne.n	800465e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <TIM_Base_SetConfig+0xcc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0x5a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0x5a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <TIM_Base_SetConfig+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0x5a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_Base_SetConfig+0xd4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0x5a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <TIM_Base_SetConfig+0xd8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <TIM_Base_SetConfig+0xcc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <TIM_Base_SetConfig+0xd0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <TIM_Base_SetConfig+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <TIM_Base_SetConfig+0xd8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d103      	bne.n	80046e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	615a      	str	r2, [r3, #20]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800

08004708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e040      	b.n	80047d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc f9c4 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f82c 	bl	80047e0 <UART_SetConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e022      	b.n	80047d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f956 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9dd 	bl	8004b90 <UART_CheckIdleState>
 80047d6:	4603      	mov	r3, r0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b8a      	ldr	r3, [pc, #552]	; (8004a34 <UART_SetConfig+0x254>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	6979      	ldr	r1, [r7, #20]
 8004814:	430b      	orrs	r3, r1
 8004816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a78      	ldr	r2, [pc, #480]	; (8004a38 <UART_SetConfig+0x258>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d120      	bne.n	800489e <UART_SetConfig+0xbe>
 800485c:	4b77      	ldr	r3, [pc, #476]	; (8004a3c <UART_SetConfig+0x25c>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b03      	cmp	r3, #3
 8004866:	d817      	bhi.n	8004898 <UART_SetConfig+0xb8>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x90>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	0800488d 	.word	0x0800488d
 8004878:	08004893 	.word	0x08004893
 800487c:	08004887 	.word	0x08004887
 8004880:	2300      	movs	r3, #0
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e01d      	b.n	80048c2 <UART_SetConfig+0xe2>
 8004886:	2302      	movs	r3, #2
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e01a      	b.n	80048c2 <UART_SetConfig+0xe2>
 800488c:	2304      	movs	r3, #4
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e017      	b.n	80048c2 <UART_SetConfig+0xe2>
 8004892:	2308      	movs	r3, #8
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e014      	b.n	80048c2 <UART_SetConfig+0xe2>
 8004898:	2310      	movs	r3, #16
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e011      	b.n	80048c2 <UART_SetConfig+0xe2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a67      	ldr	r2, [pc, #412]	; (8004a40 <UART_SetConfig+0x260>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d102      	bne.n	80048ae <UART_SetConfig+0xce>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e009      	b.n	80048c2 <UART_SetConfig+0xe2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a64      	ldr	r2, [pc, #400]	; (8004a44 <UART_SetConfig+0x264>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d102      	bne.n	80048be <UART_SetConfig+0xde>
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e001      	b.n	80048c2 <UART_SetConfig+0xe2>
 80048be:	2310      	movs	r3, #16
 80048c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ca:	d15a      	bne.n	8004982 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d827      	bhi.n	8004922 <UART_SetConfig+0x142>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0xf8>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004905 	.word	0x08004905
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	08004923 	.word	0x08004923
 80048e8:	08004913 	.word	0x08004913
 80048ec:	08004923 	.word	0x08004923
 80048f0:	08004923 	.word	0x08004923
 80048f4:	08004923 	.word	0x08004923
 80048f8:	0800491b 	.word	0x0800491b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048fc:	f7ff fa90 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8004900:	61b8      	str	r0, [r7, #24]
        break;
 8004902:	e013      	b.n	800492c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7ff faae 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8004908:	61b8      	str	r0, [r7, #24]
        break;
 800490a:	e00f      	b.n	800492c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800490c:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <UART_SetConfig+0x268>)
 800490e:	61bb      	str	r3, [r7, #24]
        break;
 8004910:	e00c      	b.n	800492c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004912:	f7ff fa0f 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8004916:	61b8      	str	r0, [r7, #24]
        break;
 8004918:	e008      	b.n	800492c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491e:	61bb      	str	r3, [r7, #24]
        break;
 8004920:	e004      	b.n	800492c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	77bb      	strb	r3, [r7, #30]
        break;
 800492a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d074      	beq.n	8004a1c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	005a      	lsls	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	441a      	add	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d916      	bls.n	800497c <UART_SetConfig+0x19c>
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d212      	bcs.n	800497c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f023 030f 	bic.w	r3, r3, #15
 800495e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	b29a      	uxth	r2, r3
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	4313      	orrs	r3, r2
 8004970:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	89fa      	ldrh	r2, [r7, #14]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	e04f      	b.n	8004a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	77bb      	strb	r3, [r7, #30]
 8004980:	e04c      	b.n	8004a1c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004982:	7ffb      	ldrb	r3, [r7, #31]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d828      	bhi.n	80049da <UART_SetConfig+0x1fa>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0x1b0>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049db 	.word	0x080049db
 80049a0:	080049cb 	.word	0x080049cb
 80049a4:	080049db 	.word	0x080049db
 80049a8:	080049db 	.word	0x080049db
 80049ac:	080049db 	.word	0x080049db
 80049b0:	080049d3 	.word	0x080049d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b4:	f7ff fa34 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 80049b8:	61b8      	str	r0, [r7, #24]
        break;
 80049ba:	e013      	b.n	80049e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049bc:	f7ff fa52 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80049c0:	61b8      	str	r0, [r7, #24]
        break;
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <UART_SetConfig+0x268>)
 80049c6:	61bb      	str	r3, [r7, #24]
        break;
 80049c8:	e00c      	b.n	80049e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7ff f9b3 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 80049ce:	61b8      	str	r0, [r7, #24]
        break;
 80049d0:	e008      	b.n	80049e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	61bb      	str	r3, [r7, #24]
        break;
 80049d8:	e004      	b.n	80049e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	77bb      	strb	r3, [r7, #30]
        break;
 80049e2:	bf00      	nop
    }

    if (pclk != 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d018      	beq.n	8004a1c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	085a      	lsrs	r2, r3, #1
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b0f      	cmp	r3, #15
 8004a02:	d909      	bls.n	8004a18 <UART_SetConfig+0x238>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d205      	bcs.n	8004a18 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	e001      	b.n	8004a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a28:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	efff69f3 	.word	0xefff69f3
 8004a38:	40013800 	.word	0x40013800
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40004400 	.word	0x40004400
 8004a44:	40004800 	.word	0x40004800
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4a:	d10a      	bne.n	8004b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b098      	sub	sp, #96	; 0x60
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba0:	f7fc f920 	bl	8000de4 <HAL_GetTick>
 8004ba4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d12e      	bne.n	8004c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f88c 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d021      	beq.n	8004c12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be2:	653b      	str	r3, [r7, #80]	; 0x50
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
 8004bee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e6      	bne.n	8004bce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e062      	b.n	8004cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d149      	bne.n	8004cb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f856 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03c      	beq.n	8004cb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	623b      	str	r3, [r7, #32]
   return(result);
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8c:	61fa      	str	r2, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e011      	b.n	8004cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3758      	adds	r7, #88	; 0x58
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf0:	e049      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d045      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfa:	f7fc f873 	bl	8000de4 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e048      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d031      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d110      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2208      	movs	r2, #8
 8004d36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f838 	bl	8004dae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2208      	movs	r2, #8
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e029      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d60:	d111      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f81e 	bl	8004dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00f      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d0a6      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b095      	sub	sp, #84	; 0x54
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e6      	bne.n	8004db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d118      	bne.n	8004e56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e6      	bne.n	8004e24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e6a:	bf00      	nop
 8004e6c:	3754      	adds	r7, #84	; 0x54
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e88:	2b84      	cmp	r3, #132	; 0x84
 8004e8a:	d005      	beq.n	8004e98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	3303      	adds	r3, #3
 8004e96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004eaa:	f000 faed 	bl	8005488 <vTaskStartScheduler>
  
  return osOK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af04      	add	r7, sp, #16
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d020      	beq.n	8004f08 <osThreadCreate+0x54>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01c      	beq.n	8004f08 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685c      	ldr	r4, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691e      	ldr	r6, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ffc8 	bl	8004e76 <makeFreeRtosPriority>
 8004ee6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ef0:	9202      	str	r2, [sp, #8]
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	9100      	str	r1, [sp, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4629      	mov	r1, r5
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f8ed 	bl	80050dc <xTaskCreateStatic>
 8004f02:	4603      	mov	r3, r0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e01c      	b.n	8004f42 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685c      	ldr	r4, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f14:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ffaa 	bl	8004e76 <makeFreeRtosPriority>
 8004f22:	4602      	mov	r2, r0
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	9200      	str	r2, [sp, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4632      	mov	r2, r6
 8004f30:	4629      	mov	r1, r5
 8004f32:	4620      	mov	r0, r4
 8004f34:	f000 f92e 	bl	8005194 <xTaskCreate>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <osDelay+0x16>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	e000      	b.n	8004f64 <osDelay+0x18>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa5b 	bl	8005420 <vTaskDelay>
  
  return osOK;
 8004f6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f103 0208 	add.w	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f103 0208 	add.w	r2, r3, #8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 0208 	add.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d103      	bne.n	8005036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e00c      	b.n	8005050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3308      	adds	r3, #8
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e002      	b.n	8005044 <vListInsert+0x2e>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d2f6      	bcs.n	800503e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6852      	ldr	r2, [r2, #4]
 80050a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d103      	bne.n	80050bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	; 0x38
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xTaskCreateStatic+0x46>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fb      	str	r3, [r7, #28]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005122:	23a0      	movs	r3, #160	; 0xa0
 8005124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2ba0      	cmp	r3, #160	; 0xa0
 800512a:	d00a      	beq.n	8005142 <xTaskCreateStatic+0x66>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61bb      	str	r3, [r7, #24]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01e      	beq.n	8005186 <xTaskCreateStatic+0xaa>
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01b      	beq.n	8005186 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005156:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	2202      	movs	r2, #2
 800515c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005160:	2300      	movs	r3, #0
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f851 	bl	8005220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800517e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005180:	f000 f8e4 	bl	800534c <prvAddNewTaskToReadyList>
 8005184:	e001      	b.n	800518a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800518a:	697b      	ldr	r3, [r7, #20]
	}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af04      	add	r7, sp, #16
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fef5 	bl	8005f98 <pvPortMalloc>
 80051ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051b6:	20a0      	movs	r0, #160	; 0xa0
 80051b8:	f000 feee 	bl	8005f98 <pvPortMalloc>
 80051bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ca:	e005      	b.n	80051d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	f000 ffa7 	bl	8006120 <vPortFree>
 80051d2:	e001      	b.n	80051d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d017      	beq.n	800520e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f80f 	bl	8005220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005202:	69f8      	ldr	r0, [r7, #28]
 8005204:	f000 f8a2 	bl	800534c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e002      	b.n	8005214 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005214:	69bb      	ldr	r3, [r7, #24]
	}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005238:	3b01      	subs	r3, #1
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f023 0307 	bic.w	r3, r3, #7
 8005246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	617b      	str	r3, [r7, #20]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	e012      	b.n	8005294 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	7819      	ldrb	r1, [r3, #0]
 8005276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	3334      	adds	r3, #52	; 0x34
 800527e:	460a      	mov	r2, r1
 8005280:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	d9e9      	bls.n	800526e <prvInitialiseNewTask+0x4e>
 800529a:	e000      	b.n	800529e <prvInitialiseNewTask+0x7e>
		{
			break;
 800529c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d901      	bls.n	80052b0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052ac:	2306      	movs	r3, #6
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	2200      	movs	r2, #0
 80052c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	3304      	adds	r3, #4
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fe74 	bl	8004fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	3318      	adds	r3, #24
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fe6f 	bl	8004fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	f1c3 0207 	rsb	r2, r3, #7
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	334c      	adds	r3, #76	; 0x4c
 8005300:	224c      	movs	r2, #76	; 0x4c
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f841 	bl	800638c <memset>
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <prvInitialiseNewTask+0x120>)
 800530e:	651a      	str	r2, [r3, #80]	; 0x50
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <prvInitialiseNewTask+0x124>)
 8005314:	655a      	str	r2, [r3, #84]	; 0x54
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <prvInitialiseNewTask+0x128>)
 800531a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	69b8      	ldr	r0, [r7, #24]
 8005322:	f000 fc2b 	bl	8005b7c <pxPortInitialiseStack>
 8005326:	4602      	mov	r2, r0
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005338:	bf00      	nop
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20001200 	.word	0x20001200
 8005344:	20001268 	.word	0x20001268
 8005348:	200012d0 	.word	0x200012d0

0800534c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005354:	f000 fd3e 	bl	8005dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005358:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <prvAddNewTaskToReadyList+0xb8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a29      	ldr	r2, [pc, #164]	; (8005404 <prvAddNewTaskToReadyList+0xb8>)
 8005360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005362:	4b29      	ldr	r3, [pc, #164]	; (8005408 <prvAddNewTaskToReadyList+0xbc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536a:	4a27      	ldr	r2, [pc, #156]	; (8005408 <prvAddNewTaskToReadyList+0xbc>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005370:	4b24      	ldr	r3, [pc, #144]	; (8005404 <prvAddNewTaskToReadyList+0xb8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d110      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005378:	f000 fad2 	bl	8005920 <prvInitialiseTaskLists>
 800537c:	e00d      	b.n	800539a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <prvAddNewTaskToReadyList+0xc0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005386:	4b20      	ldr	r3, [pc, #128]	; (8005408 <prvAddNewTaskToReadyList+0xbc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d802      	bhi.n	800539a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <prvAddNewTaskToReadyList+0xbc>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 80053a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	2201      	movs	r2, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <prvAddNewTaskToReadyList+0xcc>)
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7ff fdfe 	bl	8004fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d2:	f000 fd2f 	bl	8005e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <prvAddNewTaskToReadyList+0xc0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prvAddNewTaskToReadyList+0xbc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d207      	bcs.n	80053fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200005b4 	.word	0x200005b4
 8005408:	200004b4 	.word	0x200004b4
 800540c:	200005c0 	.word	0x200005c0
 8005410:	200005d0 	.word	0x200005d0
 8005414:	200005bc 	.word	0x200005bc
 8005418:	200004b8 	.word	0x200004b8
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d017      	beq.n	8005462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <vTaskDelay+0x60>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <vTaskDelay+0x30>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60bb      	str	r3, [r7, #8]
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005450:	f000 f884 	bl	800555c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005454:	2100      	movs	r1, #0
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fb2a 	bl	8005ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800545c:	f000 f88c 	bl	8005578 <xTaskResumeAll>
 8005460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <vTaskDelay+0x64>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200005dc 	.word	0x200005dc
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005496:	463a      	mov	r2, r7
 8005498:	1d39      	adds	r1, r7, #4
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fa fee6 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	9202      	str	r2, [sp, #8]
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2300      	movs	r3, #0
 80054b4:	460a      	mov	r2, r1
 80054b6:	4921      	ldr	r1, [pc, #132]	; (800553c <vTaskStartScheduler+0xb4>)
 80054b8:	4821      	ldr	r0, [pc, #132]	; (8005540 <vTaskStartScheduler+0xb8>)
 80054ba:	f7ff fe0f 	bl	80050dc <xTaskCreateStatic>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a20      	ldr	r2, [pc, #128]	; (8005544 <vTaskStartScheduler+0xbc>)
 80054c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <vTaskStartScheduler+0xbc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e001      	b.n	80054d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11b      	bne.n	8005514 <vTaskStartScheduler+0x8c>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	613b      	str	r3, [r7, #16]
}
 80054ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <vTaskStartScheduler+0xc0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	334c      	adds	r3, #76	; 0x4c
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <vTaskStartScheduler+0xc4>)
 80054f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <vTaskStartScheduler+0xc8>)
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005502:	4b14      	ldr	r3, [pc, #80]	; (8005554 <vTaskStartScheduler+0xcc>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <vTaskStartScheduler+0xd0>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800550e:	f000 fbbf 	bl	8005c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005512:	e00e      	b.n	8005532 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d10a      	bne.n	8005532 <vTaskStartScheduler+0xaa>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vTaskStartScheduler+0xa8>
}
 8005532:	bf00      	nop
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	08006e10 	.word	0x08006e10
 8005540:	080058f1 	.word	0x080058f1
 8005544:	200005d8 	.word	0x200005d8
 8005548:	200004b4 	.word	0x200004b4
 800554c:	2000005c 	.word	0x2000005c
 8005550:	200005d4 	.word	0x200005d4
 8005554:	200005c0 	.word	0x200005c0
 8005558:	200005b8 	.word	0x200005b8

0800555c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <vTaskSuspendAll+0x18>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a03      	ldr	r2, [pc, #12]	; (8005574 <vTaskSuspendAll+0x18>)
 8005568:	6013      	str	r3, [r2, #0]
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	200005dc 	.word	0x200005dc

08005578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <xTaskResumeAll+0x114>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055a4:	f000 fc16 	bl	8005dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <xTaskResumeAll+0x114>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	4a37      	ldr	r2, [pc, #220]	; (800568c <xTaskResumeAll+0x114>)
 80055b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b2:	4b36      	ldr	r3, [pc, #216]	; (800568c <xTaskResumeAll+0x114>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d161      	bne.n	800567e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ba:	4b35      	ldr	r3, [pc, #212]	; (8005690 <xTaskResumeAll+0x118>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d05d      	beq.n	800567e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c2:	e02e      	b.n	8005622 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <xTaskResumeAll+0x11c>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3318      	adds	r3, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fd59 	bl	8005088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fd54 	bl	8005088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	2201      	movs	r2, #1
 80055e6:	409a      	lsls	r2, r3
 80055e8:	4b2b      	ldr	r3, [pc, #172]	; (8005698 <xTaskResumeAll+0x120>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <xTaskResumeAll+0x120>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <xTaskResumeAll+0x124>)
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7ff fce0 	bl	8004fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <xTaskResumeAll+0x128>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800561c:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <xTaskResumeAll+0x12c>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <xTaskResumeAll+0x11c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1cc      	bne.n	80055c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005630:	f000 fa18 	bl	8005a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <xTaskResumeAll+0x130>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005640:	f000 f836 	bl	80056b0 <xTaskIncrementTick>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <xTaskResumeAll+0x12c>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3b01      	subs	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f1      	bne.n	8005640 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800565c:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <xTaskResumeAll+0x130>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <xTaskResumeAll+0x12c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <xTaskResumeAll+0x134>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800567e:	f000 fbd9 	bl	8005e34 <vPortExitCritical>

	return xAlreadyYielded;
 8005682:	68bb      	ldr	r3, [r7, #8]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	200005dc 	.word	0x200005dc
 8005690:	200005b4 	.word	0x200005b4
 8005694:	20000574 	.word	0x20000574
 8005698:	200005bc 	.word	0x200005bc
 800569c:	200004b8 	.word	0x200004b8
 80056a0:	200004b4 	.word	0x200004b4
 80056a4:	200005c8 	.word	0x200005c8
 80056a8:	200005c4 	.word	0x200005c4
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	4b51      	ldr	r3, [pc, #324]	; (8005800 <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 808d 	bne.w	80057de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c4:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <xTaskIncrementTick+0x154>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056cc:	4a4d      	ldr	r2, [pc, #308]	; (8005804 <xTaskIncrementTick+0x154>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d120      	bne.n	800571a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d8:	4b4b      	ldr	r3, [pc, #300]	; (8005808 <xTaskIncrementTick+0x158>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	603b      	str	r3, [r7, #0]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xTaskIncrementTick+0x46>
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <xTaskIncrementTick+0x158>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <xTaskIncrementTick+0x15c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a41      	ldr	r2, [pc, #260]	; (8005808 <xTaskIncrementTick+0x158>)
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4a41      	ldr	r2, [pc, #260]	; (800580c <xTaskIncrementTick+0x15c>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4b40      	ldr	r3, [pc, #256]	; (8005810 <xTaskIncrementTick+0x160>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	4a3f      	ldr	r2, [pc, #252]	; (8005810 <xTaskIncrementTick+0x160>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	f000 f9a5 	bl	8005a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571a:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <xTaskIncrementTick+0x164>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d34d      	bcc.n	80057c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005724:	4b38      	ldr	r3, [pc, #224]	; (8005808 <xTaskIncrementTick+0x158>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xTaskIncrementTick+0x82>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <xTaskIncrementTick+0x84>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	4b36      	ldr	r3, [pc, #216]	; (8005814 <xTaskIncrementTick+0x164>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
					break;
 8005740:	e03e      	b.n	80057c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <xTaskIncrementTick+0x158>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <xTaskIncrementTick+0x164>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
						break;
 8005760:	e02e      	b.n	80057c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fc8e 	bl	8005088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fc85 	bl	8005088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <xTaskIncrementTick+0x168>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <xTaskIncrementTick+0x168>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <xTaskIncrementTick+0x16c>)
 800579e:	441a      	add	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7ff fc11 	bl	8004fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <xTaskIncrementTick+0x170>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3b4      	bcc.n	8005724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057be:	e7b1      	b.n	8005724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xTaskIncrementTick+0x170>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4915      	ldr	r1, [pc, #84]	; (800581c <xTaskIncrementTick+0x16c>)
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d907      	bls.n	80057e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e004      	b.n	80057e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <xTaskIncrementTick+0x174>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <xTaskIncrementTick+0x174>)
 80057e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <xTaskIncrementTick+0x178>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057f4:	697b      	ldr	r3, [r7, #20]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200005dc 	.word	0x200005dc
 8005804:	200005b8 	.word	0x200005b8
 8005808:	2000056c 	.word	0x2000056c
 800580c:	20000570 	.word	0x20000570
 8005810:	200005cc 	.word	0x200005cc
 8005814:	200005d4 	.word	0x200005d4
 8005818:	200005bc 	.word	0x200005bc
 800581c:	200004b8 	.word	0x200004b8
 8005820:	200004b4 	.word	0x200004b4
 8005824:	200005c4 	.word	0x200005c4
 8005828:	200005c8 	.word	0x200005c8

0800582c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <vTaskSwitchContext+0xac>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800583a:	4b28      	ldr	r3, [pc, #160]	; (80058dc <vTaskSwitchContext+0xb0>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005840:	e044      	b.n	80058cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <vTaskSwitchContext+0xb0>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <vTaskSwitchContext+0xb4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	f1c3 031f 	rsb	r3, r3, #31
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	4921      	ldr	r1, [pc, #132]	; (80058e4 <vTaskSwitchContext+0xb8>)
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	607b      	str	r3, [r7, #4]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <vTaskSwitchContext+0x5a>
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <vTaskSwitchContext+0xb8>)
 8005894:	4413      	add	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3308      	adds	r3, #8
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d104      	bne.n	80058b8 <vTaskSwitchContext+0x8c>
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <vTaskSwitchContext+0xbc>)
 80058c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <vTaskSwitchContext+0xbc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	334c      	adds	r3, #76	; 0x4c
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <vTaskSwitchContext+0xc0>)
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	200005dc 	.word	0x200005dc
 80058dc:	200005c8 	.word	0x200005c8
 80058e0:	200005bc 	.word	0x200005bc
 80058e4:	200004b8 	.word	0x200004b8
 80058e8:	200004b4 	.word	0x200004b4
 80058ec:	2000005c 	.word	0x2000005c

080058f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058f8:	f000 f852 	bl	80059a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvIdleTask+0x28>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d9f9      	bls.n	80058f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <prvIdleTask+0x2c>)
 8005906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005914:	e7f0      	b.n	80058f8 <prvIdleTask+0x8>
 8005916:	bf00      	nop
 8005918:	200004b8 	.word	0x200004b8
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005926:	2300      	movs	r3, #0
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	e00c      	b.n	8005946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <prvInitialiseTaskLists+0x60>)
 8005938:	4413      	add	r3, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fb1a 	bl	8004f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3301      	adds	r3, #1
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d9ef      	bls.n	800592c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800594c:	480d      	ldr	r0, [pc, #52]	; (8005984 <prvInitialiseTaskLists+0x64>)
 800594e:	f7ff fb11 	bl	8004f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005952:	480d      	ldr	r0, [pc, #52]	; (8005988 <prvInitialiseTaskLists+0x68>)
 8005954:	f7ff fb0e 	bl	8004f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005958:	480c      	ldr	r0, [pc, #48]	; (800598c <prvInitialiseTaskLists+0x6c>)
 800595a:	f7ff fb0b 	bl	8004f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800595e:	480c      	ldr	r0, [pc, #48]	; (8005990 <prvInitialiseTaskLists+0x70>)
 8005960:	f7ff fb08 	bl	8004f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005964:	480b      	ldr	r0, [pc, #44]	; (8005994 <prvInitialiseTaskLists+0x74>)
 8005966:	f7ff fb05 	bl	8004f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <prvInitialiseTaskLists+0x78>)
 800596c:	4a05      	ldr	r2, [pc, #20]	; (8005984 <prvInitialiseTaskLists+0x64>)
 800596e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <prvInitialiseTaskLists+0x7c>)
 8005972:	4a05      	ldr	r2, [pc, #20]	; (8005988 <prvInitialiseTaskLists+0x68>)
 8005974:	601a      	str	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200004b8 	.word	0x200004b8
 8005984:	20000544 	.word	0x20000544
 8005988:	20000558 	.word	0x20000558
 800598c:	20000574 	.word	0x20000574
 8005990:	20000588 	.word	0x20000588
 8005994:	200005a0 	.word	0x200005a0
 8005998:	2000056c 	.word	0x2000056c
 800599c:	20000570 	.word	0x20000570

080059a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a6:	e019      	b.n	80059dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059a8:	f000 fa14 	bl	8005dd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <prvCheckTasksWaitingTermination+0x50>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fb65 	bl	8005088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <prvCheckTasksWaitingTermination+0x54>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	4a0b      	ldr	r2, [pc, #44]	; (80059f4 <prvCheckTasksWaitingTermination+0x54>)
 80059c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059d2:	f000 fa2f 	bl	8005e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f810 	bl	80059fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e1      	bne.n	80059a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000588 	.word	0x20000588
 80059f4:	200005b4 	.word	0x200005b4
 80059f8:	2000059c 	.word	0x2000059c

080059fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	334c      	adds	r3, #76	; 0x4c
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fcc7 	bl	800639c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fb7f 	bl	8006120 <vPortFree>
				vPortFree( pxTCB );
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb7c 	bl	8006120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a28:	e018      	b.n	8005a5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d103      	bne.n	8005a3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb73 	bl	8006120 <vPortFree>
	}
 8005a3a:	e00f      	b.n	8005a5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d00a      	beq.n	8005a5c <prvDeleteTCB+0x60>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <prvDeleteTCB+0x5e>
	}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <prvResetNextTaskUnblockTime+0x44>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <prvResetNextTaskUnblockTime+0x14>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <prvResetNextTaskUnblockTime+0x16>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <prvResetNextTaskUnblockTime+0x48>)
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295
 8005a84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a86:	e008      	b.n	8005a9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <prvResetNextTaskUnblockTime+0x44>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	4a05      	ldr	r2, [pc, #20]	; (8005aac <prvResetNextTaskUnblockTime+0x48>)
 8005a98:	6013      	str	r3, [r2, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	2000056c 	.word	0x2000056c
 8005aac:	200005d4 	.word	0x200005d4

08005ab0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fade 	bl	8005088 <uxListRemove>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	4a20      	ldr	r2, [pc, #128]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ae8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d10a      	bne.n	8005b08 <prvAddCurrentTaskToDelayedList+0x58>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	481a      	ldr	r0, [pc, #104]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b02:	f7ff fa64 	bl	8004fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b06:	e026      	b.n	8005b56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d209      	bcs.n	8005b34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7ff fa72 	bl	8005016 <vListInsert>
}
 8005b32:	e010      	b.n	8005b56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7ff fa68 	bl	8005016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d202      	bcs.n	8005b56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6013      	str	r3, [r2, #0]
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200005b8 	.word	0x200005b8
 8005b64:	200004b4 	.word	0x200004b4
 8005b68:	200005bc 	.word	0x200005bc
 8005b6c:	200005a0 	.word	0x200005a0
 8005b70:	20000570 	.word	0x20000570
 8005b74:	2000056c 	.word	0x2000056c
 8005b78:	200005d4 	.word	0x200005d4

08005b7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3b04      	subs	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b04      	subs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bac:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <pxPortInitialiseStack+0x64>)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3b14      	subs	r3, #20
 8005bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3b04      	subs	r3, #4
 8005bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f06f 0202 	mvn.w	r2, #2
 8005bca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3b20      	subs	r3, #32
 8005bd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	08005be5 	.word	0x08005be5

08005be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <prvTaskExitError+0x54>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d00a      	beq.n	8005c0e <prvTaskExitError+0x2a>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <prvTaskExitError+0x28>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60bb      	str	r3, [r7, #8]
}
 8005c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c22:	bf00      	nop
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0fc      	beq.n	8005c24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	2000000c 	.word	0x2000000c
 8005c3c:	00000000 	.word	0x00000000

08005c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <pxCurrentTCBConst2>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	f380 8809 	msr	PSP, r0
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	4770      	bx	lr
 8005c5c:	f3af 8000 	nop.w

08005c60 <pxCurrentTCBConst2>:
 8005c60:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c68:	4808      	ldr	r0, [pc, #32]	; (8005c8c <prvPortStartFirstTask+0x24>)
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	6800      	ldr	r0, [r0, #0]
 8005c6e:	f380 8808 	msr	MSP, r0
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8814 	msr	CONTROL, r0
 8005c7a:	b662      	cpsie	i
 8005c7c:	b661      	cpsie	f
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	df00      	svc	0
 8005c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c8a:	bf00      	nop
 8005c8c:	e000ed08 	.word	0xe000ed08

08005c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c96:	4b46      	ldr	r3, [pc, #280]	; (8005db0 <xPortStartScheduler+0x120>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a46      	ldr	r2, [pc, #280]	; (8005db4 <xPortStartScheduler+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10a      	bne.n	8005cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <xPortStartScheduler+0x120>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <xPortStartScheduler+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10a      	bne.n	8005cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cd6:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	22ff      	movs	r2, #255	; 0xff
 8005ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cfe:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d04:	e009      	b.n	8005d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d0ef      	beq.n	8005d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1c3 0307 	rsb	r3, r3, #7
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00a      	beq.n	8005d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60bb      	str	r3, [r7, #8]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d5a:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a14      	ldr	r2, [pc, #80]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d7e:	f000 f8dd 	bl	8005f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <xPortStartScheduler+0x13c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d88:	f000 f8fc 	bl	8005f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <xPortStartScheduler+0x140>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <xPortStartScheduler+0x140>)
 8005d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d98:	f7ff ff66 	bl	8005c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d9c:	f7ff fd46 	bl	800582c <vTaskSwitchContext>
	prvTaskExitError();
 8005da0:	f7ff ff20 	bl	8005be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	e000ed00 	.word	0xe000ed00
 8005db4:	410fc271 	.word	0x410fc271
 8005db8:	410fc270 	.word	0x410fc270
 8005dbc:	e000e400 	.word	0xe000e400
 8005dc0:	200005e0 	.word	0x200005e0
 8005dc4:	200005e4 	.word	0x200005e4
 8005dc8:	e000ed20 	.word	0xe000ed20
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ef34 	.word	0xe000ef34

08005dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	607b      	str	r3, [r7, #4]
}
 8005dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dee:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <vPortEnterCritical+0x58>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <vPortEnterCritical+0x58>)
 8005df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <vPortEnterCritical+0x58>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d10f      	bne.n	8005e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <vPortEnterCritical+0x5c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <vPortEnterCritical+0x4a>
	}
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <vPortExitCritical+0x50>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <vPortExitCritical+0x24>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	607b      	str	r3, [r7, #4]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <vPortExitCritical+0x50>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <vPortExitCritical+0x50>)
 8005e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e62:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <vPortExitCritical+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <vPortExitCritical+0x42>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	2000000c 	.word	0x2000000c
	...

08005e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e90:	f3ef 8009 	mrs	r0, PSP
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <pxCurrentTCBConst>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f01e 0f10 	tst.w	lr, #16
 8005ea0:	bf08      	it	eq
 8005ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	6010      	str	r0, [r2, #0]
 8005eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eb4:	f380 8811 	msr	BASEPRI, r0
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f7ff fcb4 	bl	800582c <vTaskSwitchContext>
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f380 8811 	msr	BASEPRI, r0
 8005ecc:	bc09      	pop	{r0, r3}
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed6:	f01e 0f10 	tst.w	lr, #16
 8005eda:	bf08      	it	eq
 8005edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ee0:	f380 8809 	msr	PSP, r0
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w

08005ef0 <pxCurrentTCBConst>:
 8005ef0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop

08005ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f12:	f7ff fbcd 	bl	80056b0 <xTaskIncrementTick>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <SysTick_Handler+0x40>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <vPortSetupTimerInterrupt+0x34>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <vPortSetupTimerInterrupt+0x38>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <vPortSetupTimerInterrupt+0x3c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <vPortSetupTimerInterrupt+0x40>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	099b      	lsrs	r3, r3, #6
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <vPortSetupTimerInterrupt+0x44>)
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <vPortSetupTimerInterrupt+0x34>)
 8005f60:	2207      	movs	r2, #7
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	e000e010 	.word	0xe000e010
 8005f74:	e000e018 	.word	0xe000e018
 8005f78:	20000000 	.word	0x20000000
 8005f7c:	10624dd3 	.word	0x10624dd3
 8005f80:	e000e014 	.word	0xe000e014

08005f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f94 <vPortEnableVFP+0x10>
 8005f88:	6801      	ldr	r1, [r0, #0]
 8005f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f8e:	6001      	str	r1, [r0, #0]
 8005f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f92:	bf00      	nop
 8005f94:	e000ed88 	.word	0xe000ed88

08005f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fa4:	f7ff fada 	bl	800555c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa8:	4b58      	ldr	r3, [pc, #352]	; (800610c <pvPortMalloc+0x174>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fb0:	f000 f910 	bl	80061d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fb4:	4b56      	ldr	r3, [pc, #344]	; (8006110 <pvPortMalloc+0x178>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 808e 	bne.w	80060de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01d      	beq.n	8006004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fc8:	2208      	movs	r2, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4413      	add	r3, r2
 8005fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f023 0307 	bic.w	r3, r3, #7
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <pvPortMalloc+0x6c>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	617b      	str	r3, [r7, #20]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d069      	beq.n	80060de <pvPortMalloc+0x146>
 800600a:	4b42      	ldr	r3, [pc, #264]	; (8006114 <pvPortMalloc+0x17c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d864      	bhi.n	80060de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006014:	4b40      	ldr	r3, [pc, #256]	; (8006118 <pvPortMalloc+0x180>)
 8006016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006018:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <pvPortMalloc+0x180>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800601e:	e004      	b.n	800602a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d903      	bls.n	800603c <pvPortMalloc+0xa4>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f1      	bne.n	8006020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800603c:	4b33      	ldr	r3, [pc, #204]	; (800610c <pvPortMalloc+0x174>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	429a      	cmp	r2, r3
 8006044:	d04b      	beq.n	80060de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2208      	movs	r2, #8
 800604c:	4413      	add	r3, r2
 800604e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	2308      	movs	r3, #8
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	429a      	cmp	r2, r3
 8006066:	d91f      	bls.n	80060a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <pvPortMalloc+0xf8>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	613b      	str	r3, [r7, #16]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060a2:	69b8      	ldr	r0, [r7, #24]
 80060a4:	f000 f8f8 	bl	8006298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <pvPortMalloc+0x17c>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a18      	ldr	r2, [pc, #96]	; (8006114 <pvPortMalloc+0x17c>)
 80060b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <pvPortMalloc+0x17c>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <pvPortMalloc+0x184>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d203      	bcs.n	80060ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <pvPortMalloc+0x17c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <pvPortMalloc+0x184>)
 80060c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <pvPortMalloc+0x178>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060de:	f7ff fa4b 	bl	8005578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <pvPortMalloc+0x16a>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <pvPortMalloc+0x168>
	return pvReturn;
 8006102:	69fb      	ldr	r3, [r7, #28]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	; 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	200011f0 	.word	0x200011f0
 8006110:	200011fc 	.word	0x200011fc
 8006114:	200011f4 	.word	0x200011f4
 8006118:	200011e8 	.word	0x200011e8
 800611c:	200011f8 	.word	0x200011f8

08006120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d048      	beq.n	80061c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006132:	2308      	movs	r3, #8
 8006134:	425b      	negs	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b21      	ldr	r3, [pc, #132]	; (80061cc <vPortFree+0xac>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <vPortFree+0x44>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <vPortFree+0x62>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <vPortFree+0xac>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d019      	beq.n	80061c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d115      	bne.n	80061c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <vPortFree+0xac>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a8:	f7ff f9d8 	bl	800555c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <vPortFree+0xb0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	4a06      	ldr	r2, [pc, #24]	; (80061d0 <vPortFree+0xb0>)
 80061b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f000 f86c 	bl	8006298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061c0:	f7ff f9da 	bl	8005578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200011fc 	.word	0x200011fc
 80061d0:	200011f4 	.word	0x200011f4

080061d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <prvHeapInit+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0307 	bic.w	r3, r3, #7
 80061fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <prvHeapInit+0xac>)
 8006204:	4413      	add	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <prvHeapInit+0xb0>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <prvHeapInit+0xb0>)
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006220:	2208      	movs	r2, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0307 	bic.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <prvHeapInit+0xb4>)
 8006234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <prvHeapInit+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <prvHeapInit+0xb4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvHeapInit+0xb4>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <prvHeapInit+0xb8>)
 8006262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <prvHeapInit+0xbc>)
 800626a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <prvHeapInit+0xc0>)
 800626e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	200005e8 	.word	0x200005e8
 8006284:	200011e8 	.word	0x200011e8
 8006288:	200011f0 	.word	0x200011f0
 800628c:	200011f8 	.word	0x200011f8
 8006290:	200011f4 	.word	0x200011f4
 8006294:	200011fc 	.word	0x200011fc

08006298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <prvInsertBlockIntoFreeList+0xac>)
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e002      	b.n	80062ac <prvInsertBlockIntoFreeList+0x14>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d8f7      	bhi.n	80062a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d108      	bne.n	80062da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d118      	bne.n	8006320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d00d      	beq.n	8006316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e008      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e003      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d002      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	200011e8 	.word	0x200011e8
 8006348:	200011f0 	.word	0x200011f0

0800634c <siprintf>:
 800634c:	b40e      	push	{r1, r2, r3}
 800634e:	b500      	push	{lr}
 8006350:	b09c      	sub	sp, #112	; 0x70
 8006352:	ab1d      	add	r3, sp, #116	; 0x74
 8006354:	9002      	str	r0, [sp, #8]
 8006356:	9006      	str	r0, [sp, #24]
 8006358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800635c:	4809      	ldr	r0, [pc, #36]	; (8006384 <siprintf+0x38>)
 800635e:	9107      	str	r1, [sp, #28]
 8006360:	9104      	str	r1, [sp, #16]
 8006362:	4909      	ldr	r1, [pc, #36]	; (8006388 <siprintf+0x3c>)
 8006364:	f853 2b04 	ldr.w	r2, [r3], #4
 8006368:	9105      	str	r1, [sp, #20]
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	a902      	add	r1, sp, #8
 8006370:	f000 f9f6 	bl	8006760 <_svfiprintf_r>
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	b01c      	add	sp, #112	; 0x70
 800637c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006380:	b003      	add	sp, #12
 8006382:	4770      	bx	lr
 8006384:	2000005c 	.word	0x2000005c
 8006388:	ffff0208 	.word	0xffff0208

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <_reclaim_reent>:
 800639c:	4b29      	ldr	r3, [pc, #164]	; (8006444 <_reclaim_reent+0xa8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4283      	cmp	r3, r0
 80063a2:	b570      	push	{r4, r5, r6, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	d04b      	beq.n	8006440 <_reclaim_reent+0xa4>
 80063a8:	69c3      	ldr	r3, [r0, #28]
 80063aa:	b143      	cbz	r3, 80063be <_reclaim_reent+0x22>
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d144      	bne.n	800643c <_reclaim_reent+0xa0>
 80063b2:	69e3      	ldr	r3, [r4, #28]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	b111      	cbz	r1, 80063be <_reclaim_reent+0x22>
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 f87f 	bl	80064bc <_free_r>
 80063be:	6961      	ldr	r1, [r4, #20]
 80063c0:	b111      	cbz	r1, 80063c8 <_reclaim_reent+0x2c>
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 f87a 	bl	80064bc <_free_r>
 80063c8:	69e1      	ldr	r1, [r4, #28]
 80063ca:	b111      	cbz	r1, 80063d2 <_reclaim_reent+0x36>
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 f875 	bl	80064bc <_free_r>
 80063d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80063d4:	b111      	cbz	r1, 80063dc <_reclaim_reent+0x40>
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 f870 	bl	80064bc <_free_r>
 80063dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063de:	b111      	cbz	r1, 80063e6 <_reclaim_reent+0x4a>
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 f86b 	bl	80064bc <_free_r>
 80063e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063e8:	b111      	cbz	r1, 80063f0 <_reclaim_reent+0x54>
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 f866 	bl	80064bc <_free_r>
 80063f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063f2:	b111      	cbz	r1, 80063fa <_reclaim_reent+0x5e>
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 f861 	bl	80064bc <_free_r>
 80063fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063fc:	b111      	cbz	r1, 8006404 <_reclaim_reent+0x68>
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f85c 	bl	80064bc <_free_r>
 8006404:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006406:	b111      	cbz	r1, 800640e <_reclaim_reent+0x72>
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f857 	bl	80064bc <_free_r>
 800640e:	6a23      	ldr	r3, [r4, #32]
 8006410:	b1b3      	cbz	r3, 8006440 <_reclaim_reent+0xa4>
 8006412:	4620      	mov	r0, r4
 8006414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006418:	4718      	bx	r3
 800641a:	5949      	ldr	r1, [r1, r5]
 800641c:	b941      	cbnz	r1, 8006430 <_reclaim_reent+0x94>
 800641e:	3504      	adds	r5, #4
 8006420:	69e3      	ldr	r3, [r4, #28]
 8006422:	2d80      	cmp	r5, #128	; 0x80
 8006424:	68d9      	ldr	r1, [r3, #12]
 8006426:	d1f8      	bne.n	800641a <_reclaim_reent+0x7e>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f847 	bl	80064bc <_free_r>
 800642e:	e7c0      	b.n	80063b2 <_reclaim_reent+0x16>
 8006430:	680e      	ldr	r6, [r1, #0]
 8006432:	4620      	mov	r0, r4
 8006434:	f000 f842 	bl	80064bc <_free_r>
 8006438:	4631      	mov	r1, r6
 800643a:	e7ef      	b.n	800641c <_reclaim_reent+0x80>
 800643c:	2500      	movs	r5, #0
 800643e:	e7ef      	b.n	8006420 <_reclaim_reent+0x84>
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	bf00      	nop
 8006444:	2000005c 	.word	0x2000005c

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	; (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	2000005c 	.word	0x2000005c

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	; (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	; (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	; (8006498 <__libc_init_array+0x44>)
 8006468:	f000 fc6a 	bl	8006d40 <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	08006e84 	.word	0x08006e84
 8006490:	08006e84 	.word	0x08006e84
 8006494:	08006e84 	.word	0x08006e84
 8006498:	08006e88 	.word	0x08006e88

0800649c <__retarget_lock_acquire_recursive>:
 800649c:	4770      	bx	lr

0800649e <__retarget_lock_release_recursive>:
 800649e:	4770      	bx	lr

080064a0 <memcpy>:
 80064a0:	440a      	add	r2, r1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a8:	d100      	bne.n	80064ac <memcpy+0xc>
 80064aa:	4770      	bx	lr
 80064ac:	b510      	push	{r4, lr}
 80064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b6:	4291      	cmp	r1, r2
 80064b8:	d1f9      	bne.n	80064ae <memcpy+0xe>
 80064ba:	bd10      	pop	{r4, pc}

080064bc <_free_r>:
 80064bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064be:	2900      	cmp	r1, #0
 80064c0:	d044      	beq.n	800654c <_free_r+0x90>
 80064c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c6:	9001      	str	r0, [sp, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f1a1 0404 	sub.w	r4, r1, #4
 80064ce:	bfb8      	it	lt
 80064d0:	18e4      	addlt	r4, r4, r3
 80064d2:	f000 f8df 	bl	8006694 <__malloc_lock>
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <_free_r+0x94>)
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	6813      	ldr	r3, [r2, #0]
 80064dc:	b933      	cbnz	r3, 80064ec <_free_r+0x30>
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	6014      	str	r4, [r2, #0]
 80064e2:	b003      	add	sp, #12
 80064e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064e8:	f000 b8da 	b.w	80066a0 <__malloc_unlock>
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d908      	bls.n	8006502 <_free_r+0x46>
 80064f0:	6825      	ldr	r5, [r4, #0]
 80064f2:	1961      	adds	r1, r4, r5
 80064f4:	428b      	cmp	r3, r1
 80064f6:	bf01      	itttt	eq
 80064f8:	6819      	ldreq	r1, [r3, #0]
 80064fa:	685b      	ldreq	r3, [r3, #4]
 80064fc:	1949      	addeq	r1, r1, r5
 80064fe:	6021      	streq	r1, [r4, #0]
 8006500:	e7ed      	b.n	80064de <_free_r+0x22>
 8006502:	461a      	mov	r2, r3
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	b10b      	cbz	r3, 800650c <_free_r+0x50>
 8006508:	42a3      	cmp	r3, r4
 800650a:	d9fa      	bls.n	8006502 <_free_r+0x46>
 800650c:	6811      	ldr	r1, [r2, #0]
 800650e:	1855      	adds	r5, r2, r1
 8006510:	42a5      	cmp	r5, r4
 8006512:	d10b      	bne.n	800652c <_free_r+0x70>
 8006514:	6824      	ldr	r4, [r4, #0]
 8006516:	4421      	add	r1, r4
 8006518:	1854      	adds	r4, r2, r1
 800651a:	42a3      	cmp	r3, r4
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	d1e0      	bne.n	80064e2 <_free_r+0x26>
 8006520:	681c      	ldr	r4, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	6053      	str	r3, [r2, #4]
 8006526:	440c      	add	r4, r1
 8006528:	6014      	str	r4, [r2, #0]
 800652a:	e7da      	b.n	80064e2 <_free_r+0x26>
 800652c:	d902      	bls.n	8006534 <_free_r+0x78>
 800652e:	230c      	movs	r3, #12
 8006530:	6003      	str	r3, [r0, #0]
 8006532:	e7d6      	b.n	80064e2 <_free_r+0x26>
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	1961      	adds	r1, r4, r5
 8006538:	428b      	cmp	r3, r1
 800653a:	bf04      	itt	eq
 800653c:	6819      	ldreq	r1, [r3, #0]
 800653e:	685b      	ldreq	r3, [r3, #4]
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	bf04      	itt	eq
 8006544:	1949      	addeq	r1, r1, r5
 8006546:	6021      	streq	r1, [r4, #0]
 8006548:	6054      	str	r4, [r2, #4]
 800654a:	e7ca      	b.n	80064e2 <_free_r+0x26>
 800654c:	b003      	add	sp, #12
 800654e:	bd30      	pop	{r4, r5, pc}
 8006550:	20001340 	.word	0x20001340

08006554 <sbrk_aligned>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	4e0e      	ldr	r6, [pc, #56]	; (8006590 <sbrk_aligned+0x3c>)
 8006558:	460c      	mov	r4, r1
 800655a:	6831      	ldr	r1, [r6, #0]
 800655c:	4605      	mov	r5, r0
 800655e:	b911      	cbnz	r1, 8006566 <sbrk_aligned+0x12>
 8006560:	f000 fba6 	bl	8006cb0 <_sbrk_r>
 8006564:	6030      	str	r0, [r6, #0]
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f000 fba1 	bl	8006cb0 <_sbrk_r>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d00a      	beq.n	8006588 <sbrk_aligned+0x34>
 8006572:	1cc4      	adds	r4, r0, #3
 8006574:	f024 0403 	bic.w	r4, r4, #3
 8006578:	42a0      	cmp	r0, r4
 800657a:	d007      	beq.n	800658c <sbrk_aligned+0x38>
 800657c:	1a21      	subs	r1, r4, r0
 800657e:	4628      	mov	r0, r5
 8006580:	f000 fb96 	bl	8006cb0 <_sbrk_r>
 8006584:	3001      	adds	r0, #1
 8006586:	d101      	bne.n	800658c <sbrk_aligned+0x38>
 8006588:	f04f 34ff 	mov.w	r4, #4294967295
 800658c:	4620      	mov	r0, r4
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	20001344 	.word	0x20001344

08006594 <_malloc_r>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	1ccd      	adds	r5, r1, #3
 800659a:	f025 0503 	bic.w	r5, r5, #3
 800659e:	3508      	adds	r5, #8
 80065a0:	2d0c      	cmp	r5, #12
 80065a2:	bf38      	it	cc
 80065a4:	250c      	movcc	r5, #12
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	4607      	mov	r7, r0
 80065aa:	db01      	blt.n	80065b0 <_malloc_r+0x1c>
 80065ac:	42a9      	cmp	r1, r5
 80065ae:	d905      	bls.n	80065bc <_malloc_r+0x28>
 80065b0:	230c      	movs	r3, #12
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	2600      	movs	r6, #0
 80065b6:	4630      	mov	r0, r6
 80065b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006690 <_malloc_r+0xfc>
 80065c0:	f000 f868 	bl	8006694 <__malloc_lock>
 80065c4:	f8d8 3000 	ldr.w	r3, [r8]
 80065c8:	461c      	mov	r4, r3
 80065ca:	bb5c      	cbnz	r4, 8006624 <_malloc_r+0x90>
 80065cc:	4629      	mov	r1, r5
 80065ce:	4638      	mov	r0, r7
 80065d0:	f7ff ffc0 	bl	8006554 <sbrk_aligned>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	4604      	mov	r4, r0
 80065d8:	d155      	bne.n	8006686 <_malloc_r+0xf2>
 80065da:	f8d8 4000 	ldr.w	r4, [r8]
 80065de:	4626      	mov	r6, r4
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	d145      	bne.n	8006670 <_malloc_r+0xdc>
 80065e4:	2c00      	cmp	r4, #0
 80065e6:	d048      	beq.n	800667a <_malloc_r+0xe6>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	4631      	mov	r1, r6
 80065ec:	4638      	mov	r0, r7
 80065ee:	eb04 0903 	add.w	r9, r4, r3
 80065f2:	f000 fb5d 	bl	8006cb0 <_sbrk_r>
 80065f6:	4581      	cmp	r9, r0
 80065f8:	d13f      	bne.n	800667a <_malloc_r+0xe6>
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	1a6d      	subs	r5, r5, r1
 80065fe:	4629      	mov	r1, r5
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff ffa7 	bl	8006554 <sbrk_aligned>
 8006606:	3001      	adds	r0, #1
 8006608:	d037      	beq.n	800667a <_malloc_r+0xe6>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	442b      	add	r3, r5
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	f8d8 3000 	ldr.w	r3, [r8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d038      	beq.n	800668a <_malloc_r+0xf6>
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	42a2      	cmp	r2, r4
 800661c:	d12b      	bne.n	8006676 <_malloc_r+0xe2>
 800661e:	2200      	movs	r2, #0
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	e00f      	b.n	8006644 <_malloc_r+0xb0>
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	1b52      	subs	r2, r2, r5
 8006628:	d41f      	bmi.n	800666a <_malloc_r+0xd6>
 800662a:	2a0b      	cmp	r2, #11
 800662c:	d917      	bls.n	800665e <_malloc_r+0xca>
 800662e:	1961      	adds	r1, r4, r5
 8006630:	42a3      	cmp	r3, r4
 8006632:	6025      	str	r5, [r4, #0]
 8006634:	bf18      	it	ne
 8006636:	6059      	strne	r1, [r3, #4]
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	bf08      	it	eq
 800663c:	f8c8 1000 	streq.w	r1, [r8]
 8006640:	5162      	str	r2, [r4, r5]
 8006642:	604b      	str	r3, [r1, #4]
 8006644:	4638      	mov	r0, r7
 8006646:	f104 060b 	add.w	r6, r4, #11
 800664a:	f000 f829 	bl	80066a0 <__malloc_unlock>
 800664e:	f026 0607 	bic.w	r6, r6, #7
 8006652:	1d23      	adds	r3, r4, #4
 8006654:	1af2      	subs	r2, r6, r3
 8006656:	d0ae      	beq.n	80065b6 <_malloc_r+0x22>
 8006658:	1b9b      	subs	r3, r3, r6
 800665a:	50a3      	str	r3, [r4, r2]
 800665c:	e7ab      	b.n	80065b6 <_malloc_r+0x22>
 800665e:	42a3      	cmp	r3, r4
 8006660:	6862      	ldr	r2, [r4, #4]
 8006662:	d1dd      	bne.n	8006620 <_malloc_r+0x8c>
 8006664:	f8c8 2000 	str.w	r2, [r8]
 8006668:	e7ec      	b.n	8006644 <_malloc_r+0xb0>
 800666a:	4623      	mov	r3, r4
 800666c:	6864      	ldr	r4, [r4, #4]
 800666e:	e7ac      	b.n	80065ca <_malloc_r+0x36>
 8006670:	4634      	mov	r4, r6
 8006672:	6876      	ldr	r6, [r6, #4]
 8006674:	e7b4      	b.n	80065e0 <_malloc_r+0x4c>
 8006676:	4613      	mov	r3, r2
 8006678:	e7cc      	b.n	8006614 <_malloc_r+0x80>
 800667a:	230c      	movs	r3, #12
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4638      	mov	r0, r7
 8006680:	f000 f80e 	bl	80066a0 <__malloc_unlock>
 8006684:	e797      	b.n	80065b6 <_malloc_r+0x22>
 8006686:	6025      	str	r5, [r4, #0]
 8006688:	e7dc      	b.n	8006644 <_malloc_r+0xb0>
 800668a:	605b      	str	r3, [r3, #4]
 800668c:	deff      	udf	#255	; 0xff
 800668e:	bf00      	nop
 8006690:	20001340 	.word	0x20001340

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_lock+0x8>)
 8006696:	f7ff bf01 	b.w	800649c <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	2000133c 	.word	0x2000133c

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f7ff befc 	b.w	800649e <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	2000133c 	.word	0x2000133c

080066ac <__ssputs_r>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	688e      	ldr	r6, [r1, #8]
 80066b2:	461f      	mov	r7, r3
 80066b4:	42be      	cmp	r6, r7
 80066b6:	680b      	ldr	r3, [r1, #0]
 80066b8:	4682      	mov	sl, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4690      	mov	r8, r2
 80066be:	d82c      	bhi.n	800671a <__ssputs_r+0x6e>
 80066c0:	898a      	ldrh	r2, [r1, #12]
 80066c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066c6:	d026      	beq.n	8006716 <__ssputs_r+0x6a>
 80066c8:	6965      	ldr	r5, [r4, #20]
 80066ca:	6909      	ldr	r1, [r1, #16]
 80066cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d0:	eba3 0901 	sub.w	r9, r3, r1
 80066d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066d8:	1c7b      	adds	r3, r7, #1
 80066da:	444b      	add	r3, r9
 80066dc:	106d      	asrs	r5, r5, #1
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf38      	it	cc
 80066e2:	461d      	movcc	r5, r3
 80066e4:	0553      	lsls	r3, r2, #21
 80066e6:	d527      	bpl.n	8006738 <__ssputs_r+0x8c>
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7ff ff53 	bl	8006594 <_malloc_r>
 80066ee:	4606      	mov	r6, r0
 80066f0:	b360      	cbz	r0, 800674c <__ssputs_r+0xa0>
 80066f2:	6921      	ldr	r1, [r4, #16]
 80066f4:	464a      	mov	r2, r9
 80066f6:	f7ff fed3 	bl	80064a0 <memcpy>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	6126      	str	r6, [r4, #16]
 8006708:	6165      	str	r5, [r4, #20]
 800670a:	444e      	add	r6, r9
 800670c:	eba5 0509 	sub.w	r5, r5, r9
 8006710:	6026      	str	r6, [r4, #0]
 8006712:	60a5      	str	r5, [r4, #8]
 8006714:	463e      	mov	r6, r7
 8006716:	42be      	cmp	r6, r7
 8006718:	d900      	bls.n	800671c <__ssputs_r+0x70>
 800671a:	463e      	mov	r6, r7
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	4632      	mov	r2, r6
 8006720:	4641      	mov	r1, r8
 8006722:	f000 faab 	bl	8006c7c <memmove>
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	1b9b      	subs	r3, r3, r6
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	4433      	add	r3, r6
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	2000      	movs	r0, #0
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	462a      	mov	r2, r5
 800673a:	f000 fac9 	bl	8006cd0 <_realloc_r>
 800673e:	4606      	mov	r6, r0
 8006740:	2800      	cmp	r0, #0
 8006742:	d1e0      	bne.n	8006706 <__ssputs_r+0x5a>
 8006744:	6921      	ldr	r1, [r4, #16]
 8006746:	4650      	mov	r0, sl
 8006748:	f7ff feb8 	bl	80064bc <_free_r>
 800674c:	230c      	movs	r3, #12
 800674e:	f8ca 3000 	str.w	r3, [sl]
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	f04f 30ff 	mov.w	r0, #4294967295
 800675e:	e7e9      	b.n	8006734 <__ssputs_r+0x88>

08006760 <_svfiprintf_r>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	4698      	mov	r8, r3
 8006766:	898b      	ldrh	r3, [r1, #12]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	b09d      	sub	sp, #116	; 0x74
 800676c:	4607      	mov	r7, r0
 800676e:	460d      	mov	r5, r1
 8006770:	4614      	mov	r4, r2
 8006772:	d50e      	bpl.n	8006792 <_svfiprintf_r+0x32>
 8006774:	690b      	ldr	r3, [r1, #16]
 8006776:	b963      	cbnz	r3, 8006792 <_svfiprintf_r+0x32>
 8006778:	2140      	movs	r1, #64	; 0x40
 800677a:	f7ff ff0b 	bl	8006594 <_malloc_r>
 800677e:	6028      	str	r0, [r5, #0]
 8006780:	6128      	str	r0, [r5, #16]
 8006782:	b920      	cbnz	r0, 800678e <_svfiprintf_r+0x2e>
 8006784:	230c      	movs	r3, #12
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e0d0      	b.n	8006930 <_svfiprintf_r+0x1d0>
 800678e:	2340      	movs	r3, #64	; 0x40
 8006790:	616b      	str	r3, [r5, #20]
 8006792:	2300      	movs	r3, #0
 8006794:	9309      	str	r3, [sp, #36]	; 0x24
 8006796:	2320      	movs	r3, #32
 8006798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800679c:	f8cd 800c 	str.w	r8, [sp, #12]
 80067a0:	2330      	movs	r3, #48	; 0x30
 80067a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006948 <_svfiprintf_r+0x1e8>
 80067a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067aa:	f04f 0901 	mov.w	r9, #1
 80067ae:	4623      	mov	r3, r4
 80067b0:	469a      	mov	sl, r3
 80067b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b6:	b10a      	cbz	r2, 80067bc <_svfiprintf_r+0x5c>
 80067b8:	2a25      	cmp	r2, #37	; 0x25
 80067ba:	d1f9      	bne.n	80067b0 <_svfiprintf_r+0x50>
 80067bc:	ebba 0b04 	subs.w	fp, sl, r4
 80067c0:	d00b      	beq.n	80067da <_svfiprintf_r+0x7a>
 80067c2:	465b      	mov	r3, fp
 80067c4:	4622      	mov	r2, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff ff6f 	bl	80066ac <__ssputs_r>
 80067ce:	3001      	adds	r0, #1
 80067d0:	f000 80a9 	beq.w	8006926 <_svfiprintf_r+0x1c6>
 80067d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067d6:	445a      	add	r2, fp
 80067d8:	9209      	str	r2, [sp, #36]	; 0x24
 80067da:	f89a 3000 	ldrb.w	r3, [sl]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80a1 	beq.w	8006926 <_svfiprintf_r+0x1c6>
 80067e4:	2300      	movs	r3, #0
 80067e6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ee:	f10a 0a01 	add.w	sl, sl, #1
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	9307      	str	r3, [sp, #28]
 80067f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067fa:	931a      	str	r3, [sp, #104]	; 0x68
 80067fc:	4654      	mov	r4, sl
 80067fe:	2205      	movs	r2, #5
 8006800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006804:	4850      	ldr	r0, [pc, #320]	; (8006948 <_svfiprintf_r+0x1e8>)
 8006806:	f7f9 fce3 	bl	80001d0 <memchr>
 800680a:	9a04      	ldr	r2, [sp, #16]
 800680c:	b9d8      	cbnz	r0, 8006846 <_svfiprintf_r+0xe6>
 800680e:	06d0      	lsls	r0, r2, #27
 8006810:	bf44      	itt	mi
 8006812:	2320      	movmi	r3, #32
 8006814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006818:	0711      	lsls	r1, r2, #28
 800681a:	bf44      	itt	mi
 800681c:	232b      	movmi	r3, #43	; 0x2b
 800681e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006822:	f89a 3000 	ldrb.w	r3, [sl]
 8006826:	2b2a      	cmp	r3, #42	; 0x2a
 8006828:	d015      	beq.n	8006856 <_svfiprintf_r+0xf6>
 800682a:	9a07      	ldr	r2, [sp, #28]
 800682c:	4654      	mov	r4, sl
 800682e:	2000      	movs	r0, #0
 8006830:	f04f 0c0a 	mov.w	ip, #10
 8006834:	4621      	mov	r1, r4
 8006836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800683a:	3b30      	subs	r3, #48	; 0x30
 800683c:	2b09      	cmp	r3, #9
 800683e:	d94d      	bls.n	80068dc <_svfiprintf_r+0x17c>
 8006840:	b1b0      	cbz	r0, 8006870 <_svfiprintf_r+0x110>
 8006842:	9207      	str	r2, [sp, #28]
 8006844:	e014      	b.n	8006870 <_svfiprintf_r+0x110>
 8006846:	eba0 0308 	sub.w	r3, r0, r8
 800684a:	fa09 f303 	lsl.w	r3, r9, r3
 800684e:	4313      	orrs	r3, r2
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	46a2      	mov	sl, r4
 8006854:	e7d2      	b.n	80067fc <_svfiprintf_r+0x9c>
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	1d19      	adds	r1, r3, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	9103      	str	r1, [sp, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfbb      	ittet	lt
 8006862:	425b      	neglt	r3, r3
 8006864:	f042 0202 	orrlt.w	r2, r2, #2
 8006868:	9307      	strge	r3, [sp, #28]
 800686a:	9307      	strlt	r3, [sp, #28]
 800686c:	bfb8      	it	lt
 800686e:	9204      	strlt	r2, [sp, #16]
 8006870:	7823      	ldrb	r3, [r4, #0]
 8006872:	2b2e      	cmp	r3, #46	; 0x2e
 8006874:	d10c      	bne.n	8006890 <_svfiprintf_r+0x130>
 8006876:	7863      	ldrb	r3, [r4, #1]
 8006878:	2b2a      	cmp	r3, #42	; 0x2a
 800687a:	d134      	bne.n	80068e6 <_svfiprintf_r+0x186>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	9203      	str	r2, [sp, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	bfb8      	it	lt
 8006888:	f04f 33ff 	movlt.w	r3, #4294967295
 800688c:	3402      	adds	r4, #2
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006958 <_svfiprintf_r+0x1f8>
 8006894:	7821      	ldrb	r1, [r4, #0]
 8006896:	2203      	movs	r2, #3
 8006898:	4650      	mov	r0, sl
 800689a:	f7f9 fc99 	bl	80001d0 <memchr>
 800689e:	b138      	cbz	r0, 80068b0 <_svfiprintf_r+0x150>
 80068a0:	9b04      	ldr	r3, [sp, #16]
 80068a2:	eba0 000a 	sub.w	r0, r0, sl
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	4082      	lsls	r2, r0
 80068aa:	4313      	orrs	r3, r2
 80068ac:	3401      	adds	r4, #1
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b4:	4825      	ldr	r0, [pc, #148]	; (800694c <_svfiprintf_r+0x1ec>)
 80068b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ba:	2206      	movs	r2, #6
 80068bc:	f7f9 fc88 	bl	80001d0 <memchr>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d038      	beq.n	8006936 <_svfiprintf_r+0x1d6>
 80068c4:	4b22      	ldr	r3, [pc, #136]	; (8006950 <_svfiprintf_r+0x1f0>)
 80068c6:	bb1b      	cbnz	r3, 8006910 <_svfiprintf_r+0x1b0>
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	3307      	adds	r3, #7
 80068cc:	f023 0307 	bic.w	r3, r3, #7
 80068d0:	3308      	adds	r3, #8
 80068d2:	9303      	str	r3, [sp, #12]
 80068d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d6:	4433      	add	r3, r6
 80068d8:	9309      	str	r3, [sp, #36]	; 0x24
 80068da:	e768      	b.n	80067ae <_svfiprintf_r+0x4e>
 80068dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068e0:	460c      	mov	r4, r1
 80068e2:	2001      	movs	r0, #1
 80068e4:	e7a6      	b.n	8006834 <_svfiprintf_r+0xd4>
 80068e6:	2300      	movs	r3, #0
 80068e8:	3401      	adds	r4, #1
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f04f 0c0a 	mov.w	ip, #10
 80068f2:	4620      	mov	r0, r4
 80068f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f8:	3a30      	subs	r2, #48	; 0x30
 80068fa:	2a09      	cmp	r2, #9
 80068fc:	d903      	bls.n	8006906 <_svfiprintf_r+0x1a6>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0c6      	beq.n	8006890 <_svfiprintf_r+0x130>
 8006902:	9105      	str	r1, [sp, #20]
 8006904:	e7c4      	b.n	8006890 <_svfiprintf_r+0x130>
 8006906:	fb0c 2101 	mla	r1, ip, r1, r2
 800690a:	4604      	mov	r4, r0
 800690c:	2301      	movs	r3, #1
 800690e:	e7f0      	b.n	80068f2 <_svfiprintf_r+0x192>
 8006910:	ab03      	add	r3, sp, #12
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	462a      	mov	r2, r5
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <_svfiprintf_r+0x1f4>)
 8006918:	a904      	add	r1, sp, #16
 800691a:	4638      	mov	r0, r7
 800691c:	f3af 8000 	nop.w
 8006920:	1c42      	adds	r2, r0, #1
 8006922:	4606      	mov	r6, r0
 8006924:	d1d6      	bne.n	80068d4 <_svfiprintf_r+0x174>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	065b      	lsls	r3, r3, #25
 800692a:	f53f af2d 	bmi.w	8006788 <_svfiprintf_r+0x28>
 800692e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006930:	b01d      	add	sp, #116	; 0x74
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	ab03      	add	r3, sp, #12
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	462a      	mov	r2, r5
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <_svfiprintf_r+0x1f4>)
 800693e:	a904      	add	r1, sp, #16
 8006940:	4638      	mov	r0, r7
 8006942:	f000 f879 	bl	8006a38 <_printf_i>
 8006946:	e7eb      	b.n	8006920 <_svfiprintf_r+0x1c0>
 8006948:	08006e50 	.word	0x08006e50
 800694c:	08006e5a 	.word	0x08006e5a
 8006950:	00000000 	.word	0x00000000
 8006954:	080066ad 	.word	0x080066ad
 8006958:	08006e56 	.word	0x08006e56

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4616      	mov	r6, r2
 8006962:	4699      	mov	r9, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800696c:	4293      	cmp	r3, r2
 800696e:	bfb8      	it	lt
 8006970:	4613      	movlt	r3, r2
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006978:	4607      	mov	r7, r0
 800697a:	460c      	mov	r4, r1
 800697c:	b10a      	cbz	r2, 8006982 <_printf_common+0x26>
 800697e:	3301      	adds	r3, #1
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0699      	lsls	r1, r3, #26
 8006986:	bf42      	ittt	mi
 8006988:	6833      	ldrmi	r3, [r6, #0]
 800698a:	3302      	addmi	r3, #2
 800698c:	6033      	strmi	r3, [r6, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d106      	bne.n	80069a4 <_printf_common+0x48>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	dc26      	bgt.n	80069f2 <_printf_common+0x96>
 80069a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069a8:	1e13      	subs	r3, r2, #0
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	bf18      	it	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d42b      	bmi.n	8006a0c <_printf_common+0xb0>
 80069b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069b8:	4649      	mov	r1, r9
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d01e      	beq.n	8006a00 <_printf_common+0xa4>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	f003 0306 	and.w	r3, r3, #6
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	bf02      	ittt	eq
 80069ce:	68e5      	ldreq	r5, [r4, #12]
 80069d0:	6833      	ldreq	r3, [r6, #0]
 80069d2:	1aed      	subeq	r5, r5, r3
 80069d4:	68a3      	ldr	r3, [r4, #8]
 80069d6:	bf0c      	ite	eq
 80069d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069dc:	2500      	movne	r5, #0
 80069de:	4293      	cmp	r3, r2
 80069e0:	bfc4      	itt	gt
 80069e2:	1a9b      	subgt	r3, r3, r2
 80069e4:	18ed      	addgt	r5, r5, r3
 80069e6:	2600      	movs	r6, #0
 80069e8:	341a      	adds	r4, #26
 80069ea:	42b5      	cmp	r5, r6
 80069ec:	d11a      	bne.n	8006a24 <_printf_common+0xc8>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e008      	b.n	8006a04 <_printf_common+0xa8>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4649      	mov	r1, r9
 80069f8:	4638      	mov	r0, r7
 80069fa:	47c0      	blx	r8
 80069fc:	3001      	adds	r0, #1
 80069fe:	d103      	bne.n	8006a08 <_printf_common+0xac>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	3501      	adds	r5, #1
 8006a0a:	e7c6      	b.n	800699a <_printf_common+0x3e>
 8006a0c:	18e1      	adds	r1, r4, r3
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	2030      	movs	r0, #48	; 0x30
 8006a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a16:	4422      	add	r2, r4
 8006a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a20:	3302      	adds	r3, #2
 8006a22:	e7c7      	b.n	80069b4 <_printf_common+0x58>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4622      	mov	r2, r4
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c0      	blx	r8
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0e6      	beq.n	8006a00 <_printf_common+0xa4>
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7d9      	b.n	80069ea <_printf_common+0x8e>
	...

08006a38 <_printf_i>:
 8006a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	7e0f      	ldrb	r7, [r1, #24]
 8006a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a40:	2f78      	cmp	r7, #120	; 0x78
 8006a42:	4691      	mov	r9, r2
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a4e:	d807      	bhi.n	8006a60 <_printf_i+0x28>
 8006a50:	2f62      	cmp	r7, #98	; 0x62
 8006a52:	d80a      	bhi.n	8006a6a <_printf_i+0x32>
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	f000 80d4 	beq.w	8006c02 <_printf_i+0x1ca>
 8006a5a:	2f58      	cmp	r7, #88	; 0x58
 8006a5c:	f000 80c0 	beq.w	8006be0 <_printf_i+0x1a8>
 8006a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a68:	e03a      	b.n	8006ae0 <_printf_i+0xa8>
 8006a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a6e:	2b15      	cmp	r3, #21
 8006a70:	d8f6      	bhi.n	8006a60 <_printf_i+0x28>
 8006a72:	a101      	add	r1, pc, #4	; (adr r1, 8006a78 <_printf_i+0x40>)
 8006a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a78:	08006ad1 	.word	0x08006ad1
 8006a7c:	08006ae5 	.word	0x08006ae5
 8006a80:	08006a61 	.word	0x08006a61
 8006a84:	08006a61 	.word	0x08006a61
 8006a88:	08006a61 	.word	0x08006a61
 8006a8c:	08006a61 	.word	0x08006a61
 8006a90:	08006ae5 	.word	0x08006ae5
 8006a94:	08006a61 	.word	0x08006a61
 8006a98:	08006a61 	.word	0x08006a61
 8006a9c:	08006a61 	.word	0x08006a61
 8006aa0:	08006a61 	.word	0x08006a61
 8006aa4:	08006be9 	.word	0x08006be9
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006ba3 	.word	0x08006ba3
 8006ab0:	08006a61 	.word	0x08006a61
 8006ab4:	08006a61 	.word	0x08006a61
 8006ab8:	08006c0b 	.word	0x08006c0b
 8006abc:	08006a61 	.word	0x08006a61
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006a61 	.word	0x08006a61
 8006ac8:	08006a61 	.word	0x08006a61
 8006acc:	08006bab 	.word	0x08006bab
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	1d1a      	adds	r2, r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	602a      	str	r2, [r5, #0]
 8006ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e09f      	b.n	8006c24 <_printf_i+0x1ec>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	0607      	lsls	r7, r0, #24
 8006aea:	f103 0104 	add.w	r1, r3, #4
 8006aee:	6029      	str	r1, [r5, #0]
 8006af0:	d501      	bpl.n	8006af6 <_printf_i+0xbe>
 8006af2:	681e      	ldr	r6, [r3, #0]
 8006af4:	e003      	b.n	8006afe <_printf_i+0xc6>
 8006af6:	0646      	lsls	r6, r0, #25
 8006af8:	d5fb      	bpl.n	8006af2 <_printf_i+0xba>
 8006afa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	da03      	bge.n	8006b0a <_printf_i+0xd2>
 8006b02:	232d      	movs	r3, #45	; 0x2d
 8006b04:	4276      	negs	r6, r6
 8006b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b0a:	485a      	ldr	r0, [pc, #360]	; (8006c74 <_printf_i+0x23c>)
 8006b0c:	230a      	movs	r3, #10
 8006b0e:	e012      	b.n	8006b36 <_printf_i+0xfe>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	6820      	ldr	r0, [r4, #0]
 8006b14:	1d19      	adds	r1, r3, #4
 8006b16:	6029      	str	r1, [r5, #0]
 8006b18:	0605      	lsls	r5, r0, #24
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0xe8>
 8006b1c:	681e      	ldr	r6, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0xee>
 8006b20:	0641      	lsls	r1, r0, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0xe4>
 8006b24:	881e      	ldrh	r6, [r3, #0]
 8006b26:	4853      	ldr	r0, [pc, #332]	; (8006c74 <_printf_i+0x23c>)
 8006b28:	2f6f      	cmp	r7, #111	; 0x6f
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2308      	moveq	r3, #8
 8006b2e:	230a      	movne	r3, #10
 8006b30:	2100      	movs	r1, #0
 8006b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b36:	6865      	ldr	r5, [r4, #4]
 8006b38:	60a5      	str	r5, [r4, #8]
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	bfa2      	ittt	ge
 8006b3e:	6821      	ldrge	r1, [r4, #0]
 8006b40:	f021 0104 	bicge.w	r1, r1, #4
 8006b44:	6021      	strge	r1, [r4, #0]
 8006b46:	b90e      	cbnz	r6, 8006b4c <_printf_i+0x114>
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	d04b      	beq.n	8006be4 <_printf_i+0x1ac>
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b52:	fb03 6711 	mls	r7, r3, r1, r6
 8006b56:	5dc7      	ldrb	r7, [r0, r7]
 8006b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b5c:	4637      	mov	r7, r6
 8006b5e:	42bb      	cmp	r3, r7
 8006b60:	460e      	mov	r6, r1
 8006b62:	d9f4      	bls.n	8006b4e <_printf_i+0x116>
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d10b      	bne.n	8006b80 <_printf_i+0x148>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	07de      	lsls	r6, r3, #31
 8006b6c:	d508      	bpl.n	8006b80 <_printf_i+0x148>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	6861      	ldr	r1, [r4, #4]
 8006b72:	4299      	cmp	r1, r3
 8006b74:	bfde      	ittt	le
 8006b76:	2330      	movle	r3, #48	; 0x30
 8006b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b80:	1b52      	subs	r2, r2, r5
 8006b82:	6122      	str	r2, [r4, #16]
 8006b84:	f8cd a000 	str.w	sl, [sp]
 8006b88:	464b      	mov	r3, r9
 8006b8a:	aa03      	add	r2, sp, #12
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f7ff fee4 	bl	800695c <_printf_common>
 8006b94:	3001      	adds	r0, #1
 8006b96:	d14a      	bne.n	8006c2e <_printf_i+0x1f6>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	b004      	add	sp, #16
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	f043 0320 	orr.w	r3, r3, #32
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	4833      	ldr	r0, [pc, #204]	; (8006c78 <_printf_i+0x240>)
 8006bac:	2778      	movs	r7, #120	; 0x78
 8006bae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	6829      	ldr	r1, [r5, #0]
 8006bb6:	061f      	lsls	r7, r3, #24
 8006bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bbc:	d402      	bmi.n	8006bc4 <_printf_i+0x18c>
 8006bbe:	065f      	lsls	r7, r3, #25
 8006bc0:	bf48      	it	mi
 8006bc2:	b2b6      	uxthmi	r6, r6
 8006bc4:	07df      	lsls	r7, r3, #31
 8006bc6:	bf48      	it	mi
 8006bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bcc:	6029      	str	r1, [r5, #0]
 8006bce:	bf48      	it	mi
 8006bd0:	6023      	strmi	r3, [r4, #0]
 8006bd2:	b91e      	cbnz	r6, 8006bdc <_printf_i+0x1a4>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	f023 0320 	bic.w	r3, r3, #32
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	2310      	movs	r3, #16
 8006bde:	e7a7      	b.n	8006b30 <_printf_i+0xf8>
 8006be0:	4824      	ldr	r0, [pc, #144]	; (8006c74 <_printf_i+0x23c>)
 8006be2:	e7e4      	b.n	8006bae <_printf_i+0x176>
 8006be4:	4615      	mov	r5, r2
 8006be6:	e7bd      	b.n	8006b64 <_printf_i+0x12c>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	6826      	ldr	r6, [r4, #0]
 8006bec:	6961      	ldr	r1, [r4, #20]
 8006bee:	1d18      	adds	r0, r3, #4
 8006bf0:	6028      	str	r0, [r5, #0]
 8006bf2:	0635      	lsls	r5, r6, #24
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0x1c4>
 8006bf8:	6019      	str	r1, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <_printf_i+0x1ca>
 8006bfc:	0670      	lsls	r0, r6, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0x1c0>
 8006c00:	8019      	strh	r1, [r3, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	4615      	mov	r5, r2
 8006c08:	e7bc      	b.n	8006b84 <_printf_i+0x14c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	1d1a      	adds	r2, r3, #4
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	681d      	ldr	r5, [r3, #0]
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	2100      	movs	r1, #0
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7f9 fada 	bl	80001d0 <memchr>
 8006c1c:	b108      	cbz	r0, 8006c22 <_printf_i+0x1ea>
 8006c1e:	1b40      	subs	r0, r0, r5
 8006c20:	6060      	str	r0, [r4, #4]
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	2300      	movs	r3, #0
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2c:	e7aa      	b.n	8006b84 <_printf_i+0x14c>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	462a      	mov	r2, r5
 8006c32:	4649      	mov	r1, r9
 8006c34:	4640      	mov	r0, r8
 8006c36:	47d0      	blx	sl
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d0ad      	beq.n	8006b98 <_printf_i+0x160>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	079b      	lsls	r3, r3, #30
 8006c40:	d413      	bmi.n	8006c6a <_printf_i+0x232>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	4298      	cmp	r0, r3
 8006c48:	bfb8      	it	lt
 8006c4a:	4618      	movlt	r0, r3
 8006c4c:	e7a6      	b.n	8006b9c <_printf_i+0x164>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4632      	mov	r2, r6
 8006c52:	4649      	mov	r1, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	47d0      	blx	sl
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d09d      	beq.n	8006b98 <_printf_i+0x160>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	9903      	ldr	r1, [sp, #12]
 8006c62:	1a5b      	subs	r3, r3, r1
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dcf2      	bgt.n	8006c4e <_printf_i+0x216>
 8006c68:	e7eb      	b.n	8006c42 <_printf_i+0x20a>
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	f104 0619 	add.w	r6, r4, #25
 8006c70:	e7f5      	b.n	8006c5e <_printf_i+0x226>
 8006c72:	bf00      	nop
 8006c74:	08006e61 	.word	0x08006e61
 8006c78:	08006e72 	.word	0x08006e72

08006c7c <memmove>:
 8006c7c:	4288      	cmp	r0, r1
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	eb01 0402 	add.w	r4, r1, r2
 8006c84:	d902      	bls.n	8006c8c <memmove+0x10>
 8006c86:	4284      	cmp	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x20>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	42a1      	cmp	r1, r4
 8006c90:	d008      	beq.n	8006ca4 <memmove+0x28>
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0x12>
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	428a      	cmp	r2, r1
 8006ca2:	d100      	bne.n	8006ca6 <memmove+0x2a>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cae:	e7f7      	b.n	8006ca0 <memmove+0x24>

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7f9 fff6 	bl	8000cac <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20001338 	.word	0x20001338

08006cd0 <_realloc_r>:
 8006cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	460e      	mov	r6, r1
 8006cda:	b921      	cbnz	r1, 8006ce6 <_realloc_r+0x16>
 8006cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	f7ff bc57 	b.w	8006594 <_malloc_r>
 8006ce6:	b92a      	cbnz	r2, 8006cf4 <_realloc_r+0x24>
 8006ce8:	f7ff fbe8 	bl	80064bc <_free_r>
 8006cec:	4625      	mov	r5, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf4:	f000 f81b 	bl	8006d2e <_malloc_usable_size_r>
 8006cf8:	4284      	cmp	r4, r0
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	d802      	bhi.n	8006d04 <_realloc_r+0x34>
 8006cfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d02:	d812      	bhi.n	8006d2a <_realloc_r+0x5a>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff fc44 	bl	8006594 <_malloc_r>
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d0ed      	beq.n	8006cee <_realloc_r+0x1e>
 8006d12:	42bc      	cmp	r4, r7
 8006d14:	4622      	mov	r2, r4
 8006d16:	4631      	mov	r1, r6
 8006d18:	bf28      	it	cs
 8006d1a:	463a      	movcs	r2, r7
 8006d1c:	f7ff fbc0 	bl	80064a0 <memcpy>
 8006d20:	4631      	mov	r1, r6
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7ff fbca 	bl	80064bc <_free_r>
 8006d28:	e7e1      	b.n	8006cee <_realloc_r+0x1e>
 8006d2a:	4635      	mov	r5, r6
 8006d2c:	e7df      	b.n	8006cee <_realloc_r+0x1e>

08006d2e <_malloc_usable_size_r>:
 8006d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d32:	1f18      	subs	r0, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfbc      	itt	lt
 8006d38:	580b      	ldrlt	r3, [r1, r0]
 8006d3a:	18c0      	addlt	r0, r0, r3
 8006d3c:	4770      	bx	lr
	...

08006d40 <_init>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr

08006d4c <_fini>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr
