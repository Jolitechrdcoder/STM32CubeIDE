
os_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005110  08005110  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ec  20000060  08005178  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000124c  08005178  0002124c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160ed  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec9  00000000  00000000  000361c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec2  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028005  00000000  00000000  0003b24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e61  00000000  00000000  0006324f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa76d  00000000  00000000  000790b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f4  00000000  00000000  00173820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00178a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005054 	.word	0x08005054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005054 	.word	0x08005054

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000007c 	.word	0x2000007c
 800050c:	2000011c 	.word	0x2000011c

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fad9 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f833 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8b3 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f881 	bl	8000628 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart33 */
  osThreadDef(uart33, Startuart33, osPriorityNormal, 0, 128);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <main+0x64>)
 8000528:	f107 041c 	add.w	r4, r7, #28
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart33Handle = osThreadCreate(osThread(uart33), NULL);
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fa55 	bl	80039f0 <osThreadCreate>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <main+0x68>)
 800054a:	6013      	str	r3, [r2, #0]

  /* definition and creation of bombillos */
  osThreadDef(bombillos, Startbombillos, osPriorityNormal, 0, 128);
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x6c>)
 800054e:	463c      	mov	r4, r7
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bombillosHandle = osThreadCreate(osThread(bombillos), NULL);
 800055e:	463b      	mov	r3, r7
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fa44 	bl	80039f0 <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <main+0x70>)
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f003 fa38 	bl	80039e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x62>
 8000574:	08005074 	.word	0x08005074
 8000578:	200003a4 	.word	0x200003a4
 800057c:	0800509c 	.word	0x0800509c
 8000580:	200003a8 	.word	0x200003a8

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fc82 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005aa:	f000 fd9b 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 f92a 	bl	800080c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d2:	230a      	movs	r3, #10
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fdd2 	bl	8001190 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 f90b 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	2104      	movs	r1, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f99a 	bl	8001948 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 f8f7 	bl	800080c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	; 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART2_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000634:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x58>)
 800066c:	f002 fb32 	bl	8002cd4 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000676:	f000 f8c9 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000031c 	.word	0x2000031c
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xc4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_GPIO_Init+0xc4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a24      	ldr	r2, [pc, #144]	; (800074c <MX_GPIO_Init+0xc4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_GPIO_Init+0xc4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fcad 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000710:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <MX_GPIO_Init+0xc8>)
 8000722:	f000 faf5 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8000726:	2320      	movs	r3, #32
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 fae6 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800

08000754 <Startuart33>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart33 */
void Startuart33(void const * argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_UART_Receive(&huart2,(uint8_t*)rxbuff,1,HAL_MAX_DELAY) == HAL_OK)
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	2201      	movs	r2, #1
 8000762:	4911      	ldr	r1, [pc, #68]	; (80007a8 <Startuart33+0x54>)
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <Startuart33+0x58>)
 8000766:	f002 fb8d 	bl	8002e84 <HAL_UART_Receive>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f5      	bne.n	800075c <Startuart33+0x8>
	  {
		  if(rxbuff[0]=='1'){
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <Startuart33+0x54>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b31      	cmp	r3, #49	; 0x31
 8000776:	d109      	bne.n	800078c <Startuart33+0x38>
			  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000778:	2120      	movs	r1, #32
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 fc89 	bl	8001094 <HAL_GPIO_TogglePin>
			  osDelay(500);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f003 f97f 	bl	8003a88 <osDelay>
 800078a:	e7e7      	b.n	800075c <Startuart33+0x8>
		  }
		  else if(rxbuff[0]=='0'){
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <Startuart33+0x54>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b30      	cmp	r3, #48	; 0x30
 8000792:	d1e3      	bne.n	800075c <Startuart33+0x8>
			  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fc7b 	bl	8001094 <HAL_GPIO_TogglePin>
			  osDelay(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f003 f971 	bl	8003a88 <osDelay>
	  if(HAL_UART_Receive(&huart2,(uint8_t*)rxbuff,1,HAL_MAX_DELAY) == HAL_OK)
 80007a6:	e7d9      	b.n	800075c <Startuart33+0x8>
 80007a8:	200003ac 	.word	0x200003ac
 80007ac:	2000031c 	.word	0x2000031c

080007b0 <Startbombillos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startbombillos */
void Startbombillos(void const * argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startbombillos */
  /* Infinite loop */
  for(;;)
  {  char count[]="0";
 80007b8:	2330      	movs	r3, #48	; 0x30
 80007ba:	81bb      	strh	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t*)count,strlen(count), HAL_MAX_DELAY);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd05 	bl	80001d0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f107 010c 	add.w	r1, r7, #12
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <Startbombillos+0x34>)
 80007d4:	f002 facc 	bl	8002d70 <HAL_UART_Transmit>
    osDelay(500);
 80007d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007dc:	f003 f954 	bl	8003a88 <osDelay>
  {  char count[]="0";
 80007e0:	e7ea      	b.n	80007b8 <Startbombillos+0x8>
 80007e2:	bf00      	nop
 80007e4:	2000031c 	.word	0x2000031c

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f987 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40000400 	.word	0x40000400

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_MspInit+0x4c>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6613      	str	r3, [r2, #96]	; 0x60
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x4c>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x4c>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6593      	str	r3, [r2, #88]	; 0x58
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fa31 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ac      	sub	sp, #176	; 0xb0
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2288      	movs	r2, #136	; 0x88
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fb07 	bl	8004e9c <memset>
  if(huart->Instance==USART2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a21      	ldr	r2, [pc, #132]	; (8000918 <HAL_UART_MspInit+0xb0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d13b      	bne.n	8000910 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800089c:	2300      	movs	r3, #0
 800089e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 faa5 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b0:	f7ff ffac 	bl	800080c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008be:	6593      	str	r3, [r2, #88]	; 0x58
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_UART_MspInit+0xb4>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e4:	230c      	movs	r3, #12
 80008e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fc:	2307      	movs	r3, #7
 80008fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f000 fa00 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	37b0      	adds	r7, #176	; 0xb0
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40004400 	.word	0x40004400
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <HAL_InitTick+0xe0>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <HAL_InitTick+0xe0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <HAL_InitTick+0xe0>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000946:	f107 0210 	add.w	r2, r7, #16
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f9bd 	bl	8001cd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	2b00      	cmp	r3, #0
 800095e:	d103      	bne.n	8000968 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000960:	f001 f98a 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000964:	6378      	str	r0, [r7, #52]	; 0x34
 8000966:	e004      	b.n	8000972 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000968:	f001 f986 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800096c:	4603      	mov	r3, r0
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000974:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <HAL_InitTick+0xe4>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3b01      	subs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <HAL_InitTick+0xe8>)
 8000982:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <HAL_InitTick+0xec>)
 8000984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_InitTick+0xe8>)
 8000988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <HAL_InitTick+0xe8>)
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_InitTick+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_InitTick+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_InitTick+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80009a6:	4818      	ldr	r0, [pc, #96]	; (8000a08 <HAL_InitTick+0xe8>)
 80009a8:	f001 fee0 	bl	800276c <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d11b      	bne.n	80009f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <HAL_InitTick+0xe8>)
 80009bc:	f001 ff38 	bl	8002830 <HAL_TIM_Base_Start_IT>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d111      	bne.n	80009f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009ce:	201d      	movs	r0, #29
 80009d0:	f000 f990 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d808      	bhi.n	80009ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80009da:	2200      	movs	r2, #0
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	201d      	movs	r0, #29
 80009e0:	f000 f96c 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_InitTick+0xf0>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e002      	b.n	80009f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3738      	adds	r7, #56	; 0x38
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	200003b0 	.word	0x200003b0
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	20000004 	.word	0x20000004

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM3_IRQHandler+0x10>)
 8000a46:	f001 ff63 	bl	8002910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200003b0 	.word	0x200003b0

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f004 fa57 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fd31 	bl	8000510 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000abc:	08005118 	.word	0x08005118
  ldr r2, =_sbss
 8000ac0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ac4:	2000124c 	.word	0x2000124c

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_Init+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_Init+0x3c>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f8df 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	200f      	movs	r0, #15
 8000aea:	f7ff ff19 	bl	8000920 <HAL_InitTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	e001      	b.n	8000afe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afa:	f7ff fe8d 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	200003fc 	.word	0x200003fc

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200003fc 	.word	0x200003fc

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e17f      	b.n	8001020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8171 	beq.w	800101a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d118      	bne.n	8000df0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ac 	beq.w	800101a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b5f      	ldr	r3, [pc, #380]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a5e      	ldr	r2, [pc, #376]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eda:	4a5a      	ldr	r2, [pc, #360]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x242>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <HAL_GPIO_Init+0x33c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x23a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <HAL_GPIO_Init+0x340>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x236>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	; (8001054 <HAL_GPIO_Init+0x344>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x232>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	; (8001058 <HAL_GPIO_Init+0x348>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x22e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x22a>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f52:	2300      	movs	r3, #0
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f64:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <HAL_GPIO_Init+0x350>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae78 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48001000 	.word	0x48001000
 8001058:	48001400 	.word	0x48001400
 800105c:	48001800 	.word	0x48001800
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001080:	e002      	b.n	8001088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43d9      	mvns	r1, r3
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	400b      	ands	r3, r1
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d130      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d038      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2232      	movs	r2, #50	; 0x32
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001128:	e002      	b.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f2      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d110      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e00f      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d007      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000
 8001188:	20000000 	.word	0x20000000
 800118c:	431bde83 	.word	0x431bde83

08001190 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e3ca      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4b97      	ldr	r3, [pc, #604]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ac:	4b94      	ldr	r3, [pc, #592]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80e4 	beq.w	800138c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_RCC_OscConfig+0x4a>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	f040 808b 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f040 8087 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x62>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e3a2      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_RCC_OscConfig+0x7c>
 8001202:	4b7f      	ldr	r3, [pc, #508]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120a:	e005      	b.n	8001218 <HAL_RCC_OscConfig+0x88>
 800120c:	4b7c      	ldr	r3, [pc, #496]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001218:	4293      	cmp	r3, r2
 800121a:	d223      	bcs.n	8001264 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fd87 	bl	8001d34 <RCC_SetFlashLatencyFromMSIRange>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e383      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b73      	ldr	r3, [pc, #460]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a72      	ldr	r2, [pc, #456]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	496d      	ldr	r1, [pc, #436]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b6c      	ldr	r3, [pc, #432]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4968      	ldr	r1, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e025      	b.n	80012b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a65      	ldr	r2, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4960      	ldr	r1, [pc, #384]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	495b      	ldr	r1, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd47 	bl	8001d34 <RCC_SetFlashLatencyFromMSIRange>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e343      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b0:	f000 fc4a 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	4950      	ldr	r1, [pc, #320]	; (8001404 <HAL_RCC_OscConfig+0x274>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_RCC_OscConfig+0x278>)
 80012ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <HAL_RCC_OscConfig+0x27c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fb23 	bl	8000920 <HAL_InitTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d052      	beq.n	800138a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	e327      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d032      	beq.n	8001356 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc1a 	bl	8000b34 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001304:	f7ff fc16 	bl	8000b34 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e310      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4931      	ldr	r1, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	492c      	ldr	r1, [pc, #176]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
 8001354:	e01a      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001362:	f7ff fbe7 	bl	8000b34 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136a:	f7ff fbe3 	bl	8000b34 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2dd      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x1da>
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d074      	beq.n	8001482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x21a>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d10e      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d064      	beq.n	8001480 <HAL_RCC_OscConfig+0x2f0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d160      	bne.n	8001480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2ba      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x24a>
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e026      	b.n	8001428 <HAL_RCC_OscConfig+0x298>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e2:	d115      	bne.n	8001410 <HAL_RCC_OscConfig+0x280>
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a02      	ldr	r2, [pc, #8]	; (8001400 <HAL_RCC_OscConfig+0x270>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x298>
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	080050c0 	.word	0x080050c0
 8001408:	20000000 	.word	0x20000000
 800140c:	20000004 	.word	0x20000004
 8001410:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a9f      	ldr	r2, [pc, #636]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b9d      	ldr	r3, [pc, #628]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a9c      	ldr	r2, [pc, #624]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fb80 	bl	8000b34 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fb7c 	bl	8000b34 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e276      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144a:	4b92      	ldr	r3, [pc, #584]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x2a8>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb6c 	bl	8000b34 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb68 	bl	8000b34 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e262      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001472:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d0>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d060      	beq.n	8001550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x310>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d119      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d116      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	4b7c      	ldr	r3, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x328>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e23f      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	4973      	ldr	r1, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	e040      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d023      	beq.n	800151e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6e      	ldr	r2, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb27 	bl	8000b34 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb23 	bl	8000b34 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e21d      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	495f      	ldr	r1, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fb03 	bl	8000b34 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff faff 	bl	8000b34 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1f9      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01c      	beq.n	800159e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fade 	bl	8000b34 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fada 	bl	8000b34 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1d4      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ef      	beq.n	800157c <HAL_RCC_OscConfig+0x3ec>
 800159c:	e01b      	b.n	80015d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	4a3b      	ldr	r2, [pc, #236]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fac1 	bl	8000b34 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fabd 	bl	8000b34 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1b7      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ef      	bne.n	80015b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a6 	beq.w	8001730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160c:	2301      	movs	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_RCC_OscConfig+0x508>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d118      	bne.n	800164e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_RCC_OscConfig+0x508>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x508>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001628:	f7ff fa84 	bl	8000b34 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7ff fa80 	bl	8000b34 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e17a      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x508>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x4d8>
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001666:	e029      	b.n	80016bc <HAL_RCC_OscConfig+0x52c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d115      	bne.n	800169c <HAL_RCC_OscConfig+0x50c>
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	e014      	b.n	80016bc <HAL_RCC_OscConfig+0x52c>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40007000 	.word	0x40007000
 800169c:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a9b      	ldr	r2, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ac:	4b98      	ldr	r3, [pc, #608]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	4a97      	ldr	r2, [pc, #604]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d016      	beq.n	80016f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa36 	bl	8000b34 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fa32 	bl	8000b34 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e12a      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ed      	beq.n	80016cc <HAL_RCC_OscConfig+0x53c>
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fa1f 	bl	8000b34 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa1b 	bl	8000b34 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e113      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ed      	bne.n	80016fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a79      	ldr	r2, [pc, #484]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80fe 	beq.w	8001936 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b02      	cmp	r3, #2
 8001740:	f040 80d0 	bne.w	80018e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001744:	4b72      	ldr	r3, [pc, #456]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d130      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	3b01      	subs	r3, #1
 8001764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d127      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11f      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001784:	2a07      	cmp	r2, #7
 8001786:	bf14      	ite	ne
 8001788:	2201      	movne	r2, #1
 800178a:	2200      	moveq	r2, #0
 800178c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	4293      	cmp	r3, r2
 8001790:	d113      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d06e      	beq.n	8001898 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d069      	beq.n	8001894 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0ad      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e8:	f7ff f9a4 	bl	8000b34 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f9a0 	bl	8000b34 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e09a      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x784>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800181e:	3a01      	subs	r2, #1
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001828:	0212      	lsls	r2, r2, #8
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001830:	0852      	lsrs	r2, r2, #1
 8001832:	3a01      	subs	r2, #1
 8001834:	0552      	lsls	r2, r2, #21
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183c:	0852      	lsrs	r2, r2, #1
 800183e:	3a01      	subs	r2, #1
 8001840:	0652      	lsls	r2, r2, #25
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001848:	0912      	lsrs	r2, r2, #4
 800184a:	0452      	lsls	r2, r2, #17
 800184c:	430a      	orrs	r2, r1
 800184e:	4930      	ldr	r1, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186c:	f7ff f962 	bl	8000b34 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f95e 	bl	8000b34 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e058      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001892:	e050      	b.n	8001936 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e04f      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d148      	bne.n	8001936 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018bc:	f7ff f93a 	bl	8000b34 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f936 	bl	8000b34 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e030      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x734>
 80018e2:	e028      	b.n	8001936 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_RCC_OscConfig+0x780>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f91d 	bl	8000b34 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e00c      	b.n	8001918 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f919 	bl	8000b34 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d905      	bls.n	8001918 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
 8001910:	40021000 	.word	0x40021000
 8001914:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_OscConfig+0x7b0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ec      	bne.n	80018fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x7b0>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4905      	ldr	r1, [pc, #20]	; (8001940 <HAL_RCC_OscConfig+0x7b0>)
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x7b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
 8001930:	e001      	b.n	8001936 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	feeefffc 	.word	0xfeeefffc

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0e7      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4970      	ldr	r1, [pc, #448]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0cf      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d908      	bls.n	80019ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4960      	ldr	r1, [pc, #384]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d04c      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d121      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0a6      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e09a      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e08e      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e086      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4943      	ldr	r1, [pc, #268]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f880 	bl	8000b34 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f87c 	bl	8000b34 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e06e      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d010      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d208      	bcs.n	8001a8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	492b      	ldr	r1, [pc, #172]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d210      	bcs.n	8001abe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0207 	bic.w	r2, r3, #7
 8001aa4:	4923      	ldr	r1, [pc, #140]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e036      	b.n	8001b2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	4918      	ldr	r1, [pc, #96]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4910      	ldr	r1, [pc, #64]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afc:	f000 f824 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	490b      	ldr	r1, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x1f4>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1fc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fefd 	bl	8000920 <HAL_InitTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	080050c0 	.word	0x080050c0
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x34>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d11e      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e004      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d134      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0xa6>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d003      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xac>
 8001bec:	e005      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf0:	617b      	str	r3, [r7, #20]
      break;
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf6:	617b      	str	r3, [r7, #20]
      break;
 8001bf8:	e002      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	617b      	str	r3, [r7, #20]
      break;
 8001bfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	fb03 f202 	mul.w	r2, r3, r2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	0e5b      	lsrs	r3, r3, #25
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	3301      	adds	r3, #1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c40:	69bb      	ldr	r3, [r7, #24]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	080050d8 	.word	0x080050d8
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	080050d0 	.word	0x080050d0

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca8:	f7ff ffda 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0adb      	lsrs	r3, r3, #11
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	080050d0 	.word	0x080050d0

08001cd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	220f      	movs	r2, #15
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCC_GetClockConfig+0x60>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0207 	and.w	r2, r3, #7
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40022000 	.word	0x40022000

08001d34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d4c:	f7ff f9bc 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001d50:	6178      	str	r0, [r7, #20]
 8001d52:	e014      	b.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d6c:	f7ff f9ac 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001d70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d10b      	bne.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d919      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d90:	d902      	bls.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d92:	2302      	movs	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e013      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e010      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d902      	bls.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da4:	2303      	movs	r3, #3
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e00a      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d102      	bne.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db0:	2302      	movs	r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e004      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b70      	cmp	r3, #112	; 0x70
 8001dba:	d101      	bne.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 0207 	bic.w	r2, r3, #7
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e00:	2300      	movs	r3, #0
 8001e02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d041      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e18:	d02a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e1e:	d824      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e24:	d008      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e2a:	d81e      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e34:	d010      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e36:	e018      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e38:	4b86      	ldr	r3, [pc, #536]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a85      	ldr	r2, [pc, #532]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e44:	e015      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fabb 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8001e52:	4603      	mov	r3, r0
 8001e54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e56:	e00c      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fba6 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e003      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e6e:	e000      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e86:	4973      	ldr	r1, [pc, #460]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e8e:	e001      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d041      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ea8:	d02a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eae:	d824      	bhi.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb4:	d008      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eba:	d81e      	bhi.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ec6:	e018      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a61      	ldr	r2, [pc, #388]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed4:	e015      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa73 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee6:	e00c      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3320      	adds	r3, #32
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb5e 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef8:	e003      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	74fb      	strb	r3, [r7, #19]
      break;
 8001efe:	e000      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f16:	494f      	ldr	r1, [pc, #316]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f1e:	e001      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a0 	beq.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f46:	2300      	movs	r3, #0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	4a40      	ldr	r2, [pc, #256]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	; 0x58
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fdde 	bl	8000b34 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7a:	e009      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7c:	f7fe fdda 	bl	8000b34 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d902      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f8e:	e005      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d15c      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01f      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fd99 	bl	8000b34 <HAL_GetTick>
 8002002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002004:	e00b      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe fd95 	bl	8000b34 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d902      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	74fb      	strb	r3, [r7, #19]
            break;
 800201c:	e006      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ec      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002042:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800204a:	e009      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
 8002050:	e006      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7c7b      	ldrb	r3, [r7, #17]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b9e      	ldr	r3, [pc, #632]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a9d      	ldr	r2, [pc, #628]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207e:	4b98      	ldr	r3, [pc, #608]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	4994      	ldr	r1, [pc, #592]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a0:	4b8f      	ldr	r3, [pc, #572]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f023 020c 	bic.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	498c      	ldr	r1, [pc, #560]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c2:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4983      	ldr	r1, [pc, #524]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020e4:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	497b      	ldr	r1, [pc, #492]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	4972      	ldr	r1, [pc, #456]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002128:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	496a      	ldr	r1, [pc, #424]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214a:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	4961      	ldr	r1, [pc, #388]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800216c:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	4959      	ldr	r1, [pc, #356]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218e:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219c:	4950      	ldr	r1, [pc, #320]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b0:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	4948      	ldr	r1, [pc, #288]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d2:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	493f      	ldr	r1, [pc, #252]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d028      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f4:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002202:	4937      	ldr	r1, [pc, #220]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002212:	d106      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
 8002220:	e011      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222a:	d10c      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8c8 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d028      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	491f      	ldr	r1, [pc, #124]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002270:	d106      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227c:	60d3      	str	r3, [r2, #12]
 800227e:	e011      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	2101      	movs	r1, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f899 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002296:	4603      	mov	r3, r0
 8002298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d02b      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ce:	d109      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a02      	ldr	r2, [pc, #8]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e014      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f867 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02f      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002322:	4928      	ldr	r1, [pc, #160]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002332:	d10d      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f844 	bl	80023c8 <RCCEx_PLLSAI1_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d014      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e011      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002358:	d10c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3320      	adds	r3, #32
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f925 	bl	80025b0 <RCCEx_PLLSAI2_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238e:	490d      	ldr	r1, [pc, #52]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b2:	4904      	ldr	r1, [pc, #16]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023d6:	4b75      	ldr	r3, [pc, #468]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d018      	beq.n	8002414 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10d      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
       ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
       ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d047      	beq.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e044      	b.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d018      	beq.n	800244e <RCCEx_PLLSAI1_Config+0x86>
 800241c:	2b03      	cmp	r3, #3
 800241e:	d825      	bhi.n	800246c <RCCEx_PLLSAI1_Config+0xa4>
 8002420:	2b01      	cmp	r3, #1
 8002422:	d002      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x62>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d009      	beq.n	800243c <RCCEx_PLLSAI1_Config+0x74>
 8002428:	e020      	b.n	800246c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11d      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e01a      	b.n	8002472 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800243c:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e013      	b.n	8002476 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800244e:	4b57      	ldr	r3, [pc, #348]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800245a:	4b54      	ldr	r3, [pc, #336]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800246a:	e006      	b.n	800247a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e004      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247a:	bf00      	nop
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	430b      	orrs	r3, r1
 8002498:	4944      	ldr	r1, [pc, #272]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d17d      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a40      	ldr	r2, [pc, #256]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fb40 	bl	8000b34 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024b6:	e009      	b.n	80024cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024b8:	f7fe fb3c 	bl	8000b34 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d902      	bls.n	80024cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ca:	e005      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ef      	bne.n	80024b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d160      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	0211      	lsls	r1, r2, #8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	0912      	lsrs	r2, r2, #4
 80024fc:	0452      	lsls	r2, r2, #17
 80024fe:	430a      	orrs	r2, r1
 8002500:	492a      	ldr	r1, [pc, #168]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	610b      	str	r3, [r1, #16]
 8002506:	e027      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	0211      	lsls	r1, r2, #8
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6912      	ldr	r2, [r2, #16]
 8002524:	0852      	lsrs	r2, r2, #1
 8002526:	3a01      	subs	r2, #1
 8002528:	0552      	lsls	r2, r2, #21
 800252a:	430a      	orrs	r2, r1
 800252c:	491f      	ldr	r1, [pc, #124]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	610b      	str	r3, [r1, #16]
 8002532:	e011      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800253c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6892      	ldr	r2, [r2, #8]
 8002544:	0211      	lsls	r1, r2, #8
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6952      	ldr	r2, [r2, #20]
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0652      	lsls	r2, r2, #25
 8002550:	430a      	orrs	r2, r1
 8002552:	4916      	ldr	r1, [pc, #88]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fae6 	bl	8000b34 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256a:	e009      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800256c:	f7fe fae2 	bl	8000b34 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
          break;
 800257e:	e005      	b.n	800258c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4904      	ldr	r1, [pc, #16]	; (80025ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025be:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ca:	4b67      	ldr	r3, [pc, #412]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10d      	bne.n	80025f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
       ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
       ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d047      	beq.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e044      	b.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d018      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0x86>
 8002604:	2b03      	cmp	r3, #3
 8002606:	d825      	bhi.n	8002654 <RCCEx_PLLSAI2_Config+0xa4>
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <RCCEx_PLLSAI2_Config+0x62>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d009      	beq.n	8002624 <RCCEx_PLLSAI2_Config+0x74>
 8002610:	e020      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e01a      	b.n	800265a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e013      	b.n	800265e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002636:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002642:	4b49      	ldr	r3, [pc, #292]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002652:	e006      	b.n	8002662 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e004      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002662:	bf00      	nop
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	430b      	orrs	r3, r1
 8002680:	4939      	ldr	r1, [pc, #228]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d167      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a35      	ldr	r2, [pc, #212]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fa4c 	bl	8000b34 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a0:	f7fe fa48 	bl	8000b34 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
        break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b4:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ef      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d14a      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	0912      	lsrs	r2, r2, #4
 80026e4:	0452      	lsls	r2, r2, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	491f      	ldr	r1, [pc, #124]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	614b      	str	r3, [r1, #20]
 80026ee:	e011      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	0211      	lsls	r1, r2, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6912      	ldr	r2, [r2, #16]
 8002706:	0852      	lsrs	r2, r2, #1
 8002708:	3a01      	subs	r2, #1
 800270a:	0652      	lsls	r2, r2, #25
 800270c:	430a      	orrs	r2, r1
 800270e:	4916      	ldr	r1, [pc, #88]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	4313      	orrs	r3, r2
 8002712:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fa08 	bl	8000b34 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002728:	f7fe fa04 	bl	8000b34 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
          break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	4904      	ldr	r1, [pc, #16]	; (8002768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e049      	b.n	8002812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f841 	bl	800281a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 f9da 	bl	8002b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d001      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e04f      	b.n	80028e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01d      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d018      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_TIM_Base_Start_IT+0xcc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_TIM_Base_Start_IT+0xd0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_TIM_Base_Start_IT+0xd4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x76>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_TIM_Base_Start_IT+0xd8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d115      	bne.n	80028d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_TIM_Base_Start_IT+0xdc>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d015      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0xb4>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028be:	d011      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	e008      	b.n	80028e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e000      	b.n	80028e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40013400 	.word	0x40013400
 8002908:	40014000 	.word	0x40014000
 800290c:	00010007 	.word	0x00010007

08002910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d020      	beq.n	8002974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0202 	mvn.w	r2, #2
 8002944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8e4 	bl	8002b28 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8d6 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f8e7 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d020      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0204 	mvn.w	r2, #4
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8be 	bl	8002b28 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8b0 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f8c1 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0208 	mvn.w	r2, #8
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2204      	movs	r2, #4
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f898 	bl	8002b28 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f88a 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f89b 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0210 	mvn.w	r2, #16
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f872 	bl	8002b28 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f864 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f875 	bl	8002b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0201 	mvn.w	r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fd feb6 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f906 	bl	8002cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8fe 	bl	8002cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f834 	bl	8002b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0220 	mvn.w	r2, #32
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8c6 	bl	8002c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a40      	ldr	r2, [pc, #256]	; (8002c78 <TIM_Base_SetConfig+0x114>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d00f      	beq.n	8002ba4 <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <TIM_Base_SetConfig+0x118>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3c      	ldr	r2, [pc, #240]	; (8002c80 <TIM_Base_SetConfig+0x11c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d007      	beq.n	8002ba4 <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <TIM_Base_SetConfig+0x120>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3a      	ldr	r2, [pc, #232]	; (8002c88 <TIM_Base_SetConfig+0x124>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d108      	bne.n	8002bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <TIM_Base_SetConfig+0x114>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc4:	d01b      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <TIM_Base_SetConfig+0x118>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d017      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <TIM_Base_SetConfig+0x11c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <TIM_Base_SetConfig+0x120>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00f      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <TIM_Base_SetConfig+0x124>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <TIM_Base_SetConfig+0x128>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <TIM_Base_SetConfig+0x12c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x9a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <TIM_Base_SetConfig+0x130>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <TIM_Base_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00f      	beq.n	8002c5c <TIM_Base_SetConfig+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <TIM_Base_SetConfig+0x124>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <TIM_Base_SetConfig+0x128>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <TIM_Base_SetConfig+0xf8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <TIM_Base_SetConfig+0x12c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_Base_SetConfig+0xf8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <TIM_Base_SetConfig+0x130>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	615a      	str	r2, [r3, #20]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40013400 	.word	0x40013400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800

08002c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e040      	b.n	8002d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd fdb6 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fc34 	bl	8003588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f979 	bl	8003018 <UART_SetConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e01b      	b.n	8002d68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fcb3 	bl	80036cc <UART_CheckIdleState>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d178      	bne.n	8002e7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Transmit+0x24>
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e071      	b.n	8002e7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2221      	movs	r2, #33	; 0x21
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da6:	f7fd fec5 	bl	8000b34 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Transmit+0x68>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de0:	e030      	b.n	8002e44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fd15 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e03c      	b.n	8002e7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	b292      	uxth	r2, r2
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	e008      	b.n	8002e32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1c8      	bne.n	8002de2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fcde 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e005      	b.n	8002e7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80b6 	bne.w	800300c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_UART_Receive+0x28>
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ae      	b.n	800300e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2222      	movs	r2, #34	; 0x22
 8002ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec6:	f7fd fe35 	bl	8000b34 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d10e      	bne.n	8002f04 <HAL_UART_Receive+0x80>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_UART_Receive+0x76>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ef8:	e02d      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f02:	e028      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_UART_Receive+0xa4>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <HAL_UART_Receive+0x9a>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f1c:	e01b      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	227f      	movs	r2, #127	; 0x7f
 8002f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f26:	e016      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f30:	d10d      	bne.n	8002f4e <HAL_UART_Receive+0xca>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_UART_Receive+0xc0>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	227f      	movs	r2, #127	; 0x7f
 8002f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f42:	e008      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	223f      	movs	r2, #63	; 0x3f
 8002f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f4c:	e003      	b.n	8002f56 <HAL_UART_Receive+0xd2>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	d108      	bne.n	8002f7a <HAL_UART_Receive+0xf6>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e003      	b.n	8002f82 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f82:	e037      	b.n	8002ff4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fc44 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e033      	b.n	800300e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10c      	bne.n	8002fc6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	8a7b      	ldrh	r3, [r7, #18]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	e00d      	b.n	8002fe2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	8a7b      	ldrh	r3, [r7, #18]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1c1      	bne.n	8002f84 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4ba4      	ldr	r3, [pc, #656]	; (80032d8 <UART_SetConfig+0x2c0>)
 8003048:	4013      	ands	r3, r2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003050:	430b      	orrs	r3, r1
 8003052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a99      	ldr	r2, [pc, #612]	; (80032dc <UART_SetConfig+0x2c4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	4313      	orrs	r3, r2
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a90      	ldr	r2, [pc, #576]	; (80032e0 <UART_SetConfig+0x2c8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d126      	bne.n	80030f0 <UART_SetConfig+0xd8>
 80030a2:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <UART_SetConfig+0x2cc>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d81b      	bhi.n	80030e8 <UART_SetConfig+0xd0>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0xa0>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030e1 	.word	0x080030e1
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e116      	b.n	80032fe <UART_SetConfig+0x2e6>
 80030d0:	2302      	movs	r3, #2
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e112      	b.n	80032fe <UART_SetConfig+0x2e6>
 80030d8:	2304      	movs	r3, #4
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e10e      	b.n	80032fe <UART_SetConfig+0x2e6>
 80030e0:	2308      	movs	r3, #8
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e10a      	b.n	80032fe <UART_SetConfig+0x2e6>
 80030e8:	2310      	movs	r3, #16
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e106      	b.n	80032fe <UART_SetConfig+0x2e6>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7c      	ldr	r2, [pc, #496]	; (80032e8 <UART_SetConfig+0x2d0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d138      	bne.n	800316c <UART_SetConfig+0x154>
 80030fa:	4b7a      	ldr	r3, [pc, #488]	; (80032e4 <UART_SetConfig+0x2cc>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d82d      	bhi.n	8003164 <UART_SetConfig+0x14c>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <UART_SetConfig+0xf8>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003145 	.word	0x08003145
 8003114:	08003165 	.word	0x08003165
 8003118:	08003165 	.word	0x08003165
 800311c:	08003165 	.word	0x08003165
 8003120:	08003155 	.word	0x08003155
 8003124:	08003165 	.word	0x08003165
 8003128:	08003165 	.word	0x08003165
 800312c:	08003165 	.word	0x08003165
 8003130:	0800314d 	.word	0x0800314d
 8003134:	08003165 	.word	0x08003165
 8003138:	08003165 	.word	0x08003165
 800313c:	08003165 	.word	0x08003165
 8003140:	0800315d 	.word	0x0800315d
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e0d8      	b.n	80032fe <UART_SetConfig+0x2e6>
 800314c:	2302      	movs	r3, #2
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	e0d4      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003154:	2304      	movs	r3, #4
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315a:	e0d0      	b.n	80032fe <UART_SetConfig+0x2e6>
 800315c:	2308      	movs	r3, #8
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e0cc      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003164:	2310      	movs	r3, #16
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e0c8      	b.n	80032fe <UART_SetConfig+0x2e6>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5e      	ldr	r2, [pc, #376]	; (80032ec <UART_SetConfig+0x2d4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d125      	bne.n	80031c2 <UART_SetConfig+0x1aa>
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <UART_SetConfig+0x2cc>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003180:	2b30      	cmp	r3, #48	; 0x30
 8003182:	d016      	beq.n	80031b2 <UART_SetConfig+0x19a>
 8003184:	2b30      	cmp	r3, #48	; 0x30
 8003186:	d818      	bhi.n	80031ba <UART_SetConfig+0x1a2>
 8003188:	2b20      	cmp	r3, #32
 800318a:	d00a      	beq.n	80031a2 <UART_SetConfig+0x18a>
 800318c:	2b20      	cmp	r3, #32
 800318e:	d814      	bhi.n	80031ba <UART_SetConfig+0x1a2>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <UART_SetConfig+0x182>
 8003194:	2b10      	cmp	r3, #16
 8003196:	d008      	beq.n	80031aa <UART_SetConfig+0x192>
 8003198:	e00f      	b.n	80031ba <UART_SetConfig+0x1a2>
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a0:	e0ad      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031a2:	2302      	movs	r3, #2
 80031a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a8:	e0a9      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031aa:	2304      	movs	r3, #4
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b0:	e0a5      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031b2:	2308      	movs	r3, #8
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b8:	e0a1      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031ba:	2310      	movs	r3, #16
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c0:	e09d      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <UART_SetConfig+0x2d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d125      	bne.n	8003218 <UART_SetConfig+0x200>
 80031cc:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <UART_SetConfig+0x2cc>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031d6:	2bc0      	cmp	r3, #192	; 0xc0
 80031d8:	d016      	beq.n	8003208 <UART_SetConfig+0x1f0>
 80031da:	2bc0      	cmp	r3, #192	; 0xc0
 80031dc:	d818      	bhi.n	8003210 <UART_SetConfig+0x1f8>
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d00a      	beq.n	80031f8 <UART_SetConfig+0x1e0>
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d814      	bhi.n	8003210 <UART_SetConfig+0x1f8>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <UART_SetConfig+0x1d8>
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d008      	beq.n	8003200 <UART_SetConfig+0x1e8>
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x1f8>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e082      	b.n	80032fe <UART_SetConfig+0x2e6>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e07e      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e07a      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e076      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e072      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a35      	ldr	r2, [pc, #212]	; (80032f4 <UART_SetConfig+0x2dc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d12a      	bne.n	8003278 <UART_SetConfig+0x260>
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003230:	d01a      	beq.n	8003268 <UART_SetConfig+0x250>
 8003232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003236:	d81b      	bhi.n	8003270 <UART_SetConfig+0x258>
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d00c      	beq.n	8003258 <UART_SetConfig+0x240>
 800323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003242:	d815      	bhi.n	8003270 <UART_SetConfig+0x258>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <UART_SetConfig+0x238>
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d008      	beq.n	8003260 <UART_SetConfig+0x248>
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x258>
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e052      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e04e      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e04a      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e046      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e042      	b.n	80032fe <UART_SetConfig+0x2e6>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a17      	ldr	r2, [pc, #92]	; (80032dc <UART_SetConfig+0x2c4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d13a      	bne.n	80032f8 <UART_SetConfig+0x2e0>
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <UART_SetConfig+0x2cc>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800328c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003290:	d01a      	beq.n	80032c8 <UART_SetConfig+0x2b0>
 8003292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003296:	d81b      	bhi.n	80032d0 <UART_SetConfig+0x2b8>
 8003298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329c:	d00c      	beq.n	80032b8 <UART_SetConfig+0x2a0>
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a2:	d815      	bhi.n	80032d0 <UART_SetConfig+0x2b8>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <UART_SetConfig+0x298>
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d008      	beq.n	80032c0 <UART_SetConfig+0x2a8>
 80032ae:	e00f      	b.n	80032d0 <UART_SetConfig+0x2b8>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e022      	b.n	80032fe <UART_SetConfig+0x2e6>
 80032b8:	2302      	movs	r3, #2
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e01e      	b.n	80032fe <UART_SetConfig+0x2e6>
 80032c0:	2304      	movs	r3, #4
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e01a      	b.n	80032fe <UART_SetConfig+0x2e6>
 80032c8:	2308      	movs	r3, #8
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e016      	b.n	80032fe <UART_SetConfig+0x2e6>
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e012      	b.n	80032fe <UART_SetConfig+0x2e6>
 80032d8:	efff69f3 	.word	0xefff69f3
 80032dc:	40008000 	.word	0x40008000
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40004800 	.word	0x40004800
 80032f0:	40004c00 	.word	0x40004c00
 80032f4:	40005000 	.word	0x40005000
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a9f      	ldr	r2, [pc, #636]	; (8003580 <UART_SetConfig+0x568>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d17a      	bne.n	80033fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800330c:	2b08      	cmp	r3, #8
 800330e:	d824      	bhi.n	800335a <UART_SetConfig+0x342>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0x300>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800335b 	.word	0x0800335b
 8003320:	08003345 	.word	0x08003345
 8003324:	0800335b 	.word	0x0800335b
 8003328:	0800334b 	.word	0x0800334b
 800332c:	0800335b 	.word	0x0800335b
 8003330:	0800335b 	.word	0x0800335b
 8003334:	0800335b 	.word	0x0800335b
 8003338:	08003353 	.word	0x08003353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe fc9c 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8003340:	61f8      	str	r0, [r7, #28]
        break;
 8003342:	e010      	b.n	8003366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b8f      	ldr	r3, [pc, #572]	; (8003584 <UART_SetConfig+0x56c>)
 8003346:	61fb      	str	r3, [r7, #28]
        break;
 8003348:	e00d      	b.n	8003366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7fe fbfd 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 800334e:	61f8      	str	r0, [r7, #28]
        break;
 8003350:	e009      	b.n	8003366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e005      	b.n	8003366 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80fb 	beq.w	8003564 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	429a      	cmp	r2, r3
 800337c:	d305      	bcc.n	800338a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	429a      	cmp	r2, r3
 8003388:	d903      	bls.n	8003392 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003390:	e0e8      	b.n	8003564 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2200      	movs	r2, #0
 8003396:	461c      	mov	r4, r3
 8003398:	4615      	mov	r5, r2
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	022b      	lsls	r3, r5, #8
 80033a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033a8:	0222      	lsls	r2, r4, #8
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	6849      	ldr	r1, [r1, #4]
 80033ae:	0849      	lsrs	r1, r1, #1
 80033b0:	2000      	movs	r0, #0
 80033b2:	4688      	mov	r8, r1
 80033b4:	4681      	mov	r9, r0
 80033b6:	eb12 0a08 	adds.w	sl, r2, r8
 80033ba:	eb43 0b09 	adc.w	fp, r3, r9
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033cc:	4650      	mov	r0, sl
 80033ce:	4659      	mov	r1, fp
 80033d0:	f7fc ff06 	bl	80001e0 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e2:	d308      	bcc.n	80033f6 <UART_SetConfig+0x3de>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d204      	bcs.n	80033f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	e0b6      	b.n	8003564 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033fc:	e0b2      	b.n	8003564 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	d15e      	bne.n	80034c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800340c:	2b08      	cmp	r3, #8
 800340e:	d828      	bhi.n	8003462 <UART_SetConfig+0x44a>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <UART_SetConfig+0x400>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	0800343d 	.word	0x0800343d
 800341c:	08003445 	.word	0x08003445
 8003420:	0800344d 	.word	0x0800344d
 8003424:	08003463 	.word	0x08003463
 8003428:	08003453 	.word	0x08003453
 800342c:	08003463 	.word	0x08003463
 8003430:	08003463 	.word	0x08003463
 8003434:	08003463 	.word	0x08003463
 8003438:	0800345b 	.word	0x0800345b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7fe fc1c 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8003440:	61f8      	str	r0, [r7, #28]
        break;
 8003442:	e014      	b.n	800346e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7fe fc2e 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8003448:	61f8      	str	r0, [r7, #28]
        break;
 800344a:	e010      	b.n	800346e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <UART_SetConfig+0x56c>)
 800344e:	61fb      	str	r3, [r7, #28]
        break;
 8003450:	e00d      	b.n	800346e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003452:	f7fe fb79 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8003456:	61f8      	str	r0, [r7, #28]
        break;
 8003458:	e009      	b.n	800346e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345e:	61fb      	str	r3, [r7, #28]
        break;
 8003460:	e005      	b.n	800346e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800346c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d077      	beq.n	8003564 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005a      	lsls	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0f      	cmp	r3, #15
 800348e:	d916      	bls.n	80034be <UART_SetConfig+0x4a6>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003496:	d212      	bcs.n	80034be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f023 030f 	bic.w	r3, r3, #15
 80034a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	8afa      	ldrh	r2, [r7, #22]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e052      	b.n	8003564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034c4:	e04e      	b.n	8003564 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d827      	bhi.n	800351e <UART_SetConfig+0x506>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0x4bc>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	080034f9 	.word	0x080034f9
 80034d8:	08003501 	.word	0x08003501
 80034dc:	08003509 	.word	0x08003509
 80034e0:	0800351f 	.word	0x0800351f
 80034e4:	0800350f 	.word	0x0800350f
 80034e8:	0800351f 	.word	0x0800351f
 80034ec:	0800351f 	.word	0x0800351f
 80034f0:	0800351f 	.word	0x0800351f
 80034f4:	08003517 	.word	0x08003517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f8:	f7fe fbbe 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 80034fc:	61f8      	str	r0, [r7, #28]
        break;
 80034fe:	e014      	b.n	800352a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7fe fbd0 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8003504:	61f8      	str	r0, [r7, #28]
        break;
 8003506:	e010      	b.n	800352a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <UART_SetConfig+0x56c>)
 800350a:	61fb      	str	r3, [r7, #28]
        break;
 800350c:	e00d      	b.n	800352a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350e:	f7fe fb1b 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8003512:	61f8      	str	r0, [r7, #28]
        break;
 8003514:	e009      	b.n	800352a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e005      	b.n	800352a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003528:	bf00      	nop
    }

    if (pclk != 0U)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d019      	beq.n	8003564 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	085a      	lsrs	r2, r3, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	d909      	bls.n	800355e <UART_SetConfig+0x546>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d205      	bcs.n	800355e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	e002      	b.n	8003564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357e:	bf00      	nop
 8003580:	40008000 	.word	0x40008000
 8003584:	00f42400 	.word	0x00f42400

08003588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003686:	d10a      	bne.n	800369e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b098      	sub	sp, #96	; 0x60
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036dc:	f7fd fa2a 	bl	8000b34 <HAL_GetTick>
 80036e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d12e      	bne.n	800374e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f88c 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371e:	653b      	str	r3, [r7, #80]	; 0x50
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
 800372a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800372e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e6      	bne.n	800370a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e062      	b.n	8003814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d149      	bne.n	80037f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f856 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03c      	beq.n	80037f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	623b      	str	r3, [r7, #32]
   return(result);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 8003796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800379a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c8:	61fa      	str	r2, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	617b      	str	r3, [r7, #20]
   return(result);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e011      	b.n	8003814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3758      	adds	r7, #88	; 0x58
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	e049      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d045      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fd f97d 	bl	8000b34 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e048      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d031      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d110      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2208      	movs	r2, #8
 8003872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f838 	bl	80038ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2208      	movs	r2, #8
 800387e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e029      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389c:	d111      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f81e 	bl	80038ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d0a6      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b095      	sub	sp, #84	; 0x54
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003910:	643b      	str	r3, [r7, #64]	; 0x40
 8003912:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	61fb      	str	r3, [r7, #28]
   return(result);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	2b01      	cmp	r3, #1
 800395e:	d118      	bne.n	8003992 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	60bb      	str	r3, [r7, #8]
   return(result);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 0310 	bic.w	r3, r3, #16
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	613b      	str	r3, [r7, #16]
   return(result);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e6      	bne.n	8003960 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039a6:	bf00      	nop
 80039a8:	3754      	adds	r7, #84	; 0x54
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c4:	2b84      	cmp	r3, #132	; 0x84
 80039c6:	d005      	beq.n	80039d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	3303      	adds	r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039e6:	f000 faf5 	bl	8003fd4 <vTaskStartScheduler>
  
  return osOK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af04      	add	r7, sp, #16
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d020      	beq.n	8003a44 <osThreadCreate+0x54>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01c      	beq.n	8003a44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685c      	ldr	r4, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691e      	ldr	r6, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ffc8 	bl	80039b2 <makeFreeRtosPriority>
 8003a22:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a2c:	9202      	str	r2, [sp, #8]
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	9100      	str	r1, [sp, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4629      	mov	r1, r5
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 f8ed 	bl	8003c18 <xTaskCreateStatic>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e01c      	b.n	8003a7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685c      	ldr	r4, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a50:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ffaa 	bl	80039b2 <makeFreeRtosPriority>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	9200      	str	r2, [sp, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f000 f92f 	bl	8003cd2 <xTaskCreate>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <osDelay+0x16>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e000      	b.n	8003aa0 <osDelay+0x18>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fa63 	bl	8003f6c <vTaskDelay>
  
  return osOK;
 8003aa6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f103 0208 	add.w	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f103 0208 	add.w	r2, r3, #8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0208 	add.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d103      	bne.n	8003b72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e00c      	b.n	8003b8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3308      	adds	r3, #8
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e002      	b.n	8003b80 <vListInsert+0x2e>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d2f6      	bcs.n	8003b7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6852      	ldr	r2, [r2, #4]
 8003be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d103      	bne.n	8003bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1e5a      	subs	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af04      	add	r7, sp, #16
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTaskCreateStatic+0x46>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	61fb      	str	r3, [r7, #28]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c5e:	23a0      	movs	r3, #160	; 0xa0
 8003c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2ba0      	cmp	r3, #160	; 0xa0
 8003c66:	d00a      	beq.n	8003c7e <xTaskCreateStatic+0x66>
	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	61bb      	str	r3, [r7, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01e      	beq.n	8003cc4 <xTaskCreateStatic+0xac>
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01b      	beq.n	8003cc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	2202      	movs	r2, #2
 8003c9a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9303      	str	r3, [sp, #12]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	9302      	str	r3, [sp, #8]
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f850 	bl	8003d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cbe:	f000 f8eb 	bl	8003e98 <prvAddNewTaskToReadyList>
 8003cc2:	e001      	b.n	8003cc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cc8:	697b      	ldr	r3, [r7, #20]
	}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b08c      	sub	sp, #48	; 0x30
 8003cd6:	af04      	add	r7, sp, #16
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 feee 	bl	8004ac8 <pvPortMalloc>
 8003cec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cf4:	20a0      	movs	r0, #160	; 0xa0
 8003cf6:	f000 fee7 	bl	8004ac8 <pvPortMalloc>
 8003cfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
 8003d08:	e005      	b.n	8003d16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f000 ffa8 	bl	8004c60 <vPortFree>
 8003d10:	e001      	b.n	8003d16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	9302      	str	r3, [sp, #8]
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f80e 	bl	8003d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d40:	69f8      	ldr	r0, [r7, #28]
 8003d42:	f000 f8a9 	bl	8003e98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e002      	b.n	8003d52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d52:	69bb      	ldr	r3, [r7, #24]
	}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d74:	3b01      	subs	r3, #1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	617b      	str	r3, [r7, #20]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01f      	beq.n	8003dea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e012      	b.n	8003dd6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	7819      	ldrb	r1, [r3, #0]
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3334      	adds	r3, #52	; 0x34
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d9e9      	bls.n	8003db0 <prvInitialiseNewTask+0x54>
 8003ddc:	e000      	b.n	8003de0 <prvInitialiseNewTask+0x84>
			{
				break;
 8003dde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de8:	e003      	b.n	8003df2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d901      	bls.n	8003dfc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003df8:	2306      	movs	r3, #6
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fe6c 	bl	8003af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fe67 	bl	8003af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	f1c3 0207 	rsb	r2, r3, #7
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	334c      	adds	r3, #76	; 0x4c
 8003e4c:	224c      	movs	r2, #76	; 0x4c
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 f823 	bl	8004e9c <memset>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <prvInitialiseNewTask+0x130>)
 8003e5a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <prvInitialiseNewTask+0x134>)
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <prvInitialiseNewTask+0x138>)
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	69b8      	ldr	r0, [r7, #24]
 8003e6e:	f000 fc1f 	bl	80046b0 <pxPortInitialiseStack>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	2000110c 	.word	0x2000110c
 8003e90:	20001174 	.word	0x20001174
 8003e94:	200011dc 	.word	0x200011dc

08003e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ea0:	f000 fd30 	bl	8004904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <prvAddNewTaskToReadyList+0xb8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <prvAddNewTaskToReadyList+0xb8>)
 8003eac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <prvAddNewTaskToReadyList+0xbc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eb6:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <prvAddNewTaskToReadyList+0xbc>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <prvAddNewTaskToReadyList+0xb8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d110      	bne.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ec4:	f000 facc 	bl	8004460 <prvInitialiseTaskLists>
 8003ec8:	e00d      	b.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <prvAddNewTaskToReadyList+0xc0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <prvAddNewTaskToReadyList+0xbc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d802      	bhi.n	8003ee6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <prvAddNewTaskToReadyList+0xbc>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <prvAddNewTaskToReadyList+0xc4>)
 8003eee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <prvAddNewTaskToReadyList+0xc8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <prvAddNewTaskToReadyList+0xc8>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <prvAddNewTaskToReadyList+0xcc>)
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7ff fdf6 	bl	8003b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f1e:	f000 fd21 	bl	8004964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <prvAddNewTaskToReadyList+0xc0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <prvAddNewTaskToReadyList+0xbc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d207      	bcs.n	8003f48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <prvAddNewTaskToReadyList+0xd0>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000500 	.word	0x20000500
 8003f54:	20000400 	.word	0x20000400
 8003f58:	2000050c 	.word	0x2000050c
 8003f5c:	2000051c 	.word	0x2000051c
 8003f60:	20000508 	.word	0x20000508
 8003f64:	20000404 	.word	0x20000404
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <vTaskDelay+0x60>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <vTaskDelay+0x30>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f9c:	f000 f884 	bl	80040a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb1e 	bl	80045e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fa8:	f000 f88c 	bl	80040c4 <xTaskResumeAll>
 8003fac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <vTaskDelay+0x64>)
 8003fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000528 	.word	0x20000528
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fe2:	463a      	mov	r2, r7
 8003fe4:	1d39      	adds	r1, r7, #4
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa76 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	9202      	str	r2, [sp, #8]
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	460a      	mov	r2, r1
 8004002:	4921      	ldr	r1, [pc, #132]	; (8004088 <vTaskStartScheduler+0xb4>)
 8004004:	4821      	ldr	r0, [pc, #132]	; (800408c <vTaskStartScheduler+0xb8>)
 8004006:	f7ff fe07 	bl	8003c18 <xTaskCreateStatic>
 800400a:	4603      	mov	r3, r0
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <vTaskStartScheduler+0xbc>)
 800400e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <vTaskStartScheduler+0xbc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e001      	b.n	8004022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d11b      	bne.n	8004060 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	613b      	str	r3, [r7, #16]
}
 800403a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <vTaskStartScheduler+0xc0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	334c      	adds	r3, #76	; 0x4c
 8004042:	4a15      	ldr	r2, [pc, #84]	; (8004098 <vTaskStartScheduler+0xc4>)
 8004044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <vTaskStartScheduler+0xc8>)
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800404e:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <vTaskStartScheduler+0xcc>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <vTaskStartScheduler+0xd0>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800405a:	f000 fbb1 	bl	80047c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800405e:	e00e      	b.n	800407e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d10a      	bne.n	800407e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <vTaskStartScheduler+0xa8>
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	080050b8 	.word	0x080050b8
 800408c:	08004431 	.word	0x08004431
 8004090:	20000524 	.word	0x20000524
 8004094:	20000400 	.word	0x20000400
 8004098:	2000005c 	.word	0x2000005c
 800409c:	20000520 	.word	0x20000520
 80040a0:	2000050c 	.word	0x2000050c
 80040a4:	20000504 	.word	0x20000504

080040a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <vTaskSuspendAll+0x18>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <vTaskSuspendAll+0x18>)
 80040b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	20000528 	.word	0x20000528

080040c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <xTaskResumeAll+0x114>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	603b      	str	r3, [r7, #0]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040f0:	f000 fc08 	bl	8004904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040f4:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <xTaskResumeAll+0x114>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	4a37      	ldr	r2, [pc, #220]	; (80041d8 <xTaskResumeAll+0x114>)
 80040fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <xTaskResumeAll+0x114>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d161      	bne.n	80041ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004106:	4b35      	ldr	r3, [pc, #212]	; (80041dc <xTaskResumeAll+0x118>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d05d      	beq.n	80041ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800410e:	e02e      	b.n	800416e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004110:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <xTaskResumeAll+0x11c>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3318      	adds	r3, #24
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fd51 	bl	8003bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3304      	adds	r3, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd4c 	bl	8003bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	2201      	movs	r2, #1
 8004132:	409a      	lsls	r2, r3
 8004134:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <xTaskResumeAll+0x120>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <xTaskResumeAll+0x120>)
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <xTaskResumeAll+0x124>)
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7ff fcd8 	bl	8003b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	4b23      	ldr	r3, [pc, #140]	; (80041ec <xTaskResumeAll+0x128>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <xTaskResumeAll+0x12c>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <xTaskResumeAll+0x11c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1cc      	bne.n	8004110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800417c:	f000 fa12 	bl	80045a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004180:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <xTaskResumeAll+0x130>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800418c:	f000 f836 	bl	80041fc <xTaskIncrementTick>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <xTaskResumeAll+0x12c>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f1      	bne.n	800418c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <xTaskResumeAll+0x130>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xTaskResumeAll+0x12c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <xTaskResumeAll+0x134>)
 80041bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ca:	f000 fbcb 	bl	8004964 <vPortExitCritical>

	return xAlreadyYielded;
 80041ce:	68bb      	ldr	r3, [r7, #8]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000528 	.word	0x20000528
 80041dc:	20000500 	.word	0x20000500
 80041e0:	200004c0 	.word	0x200004c0
 80041e4:	20000508 	.word	0x20000508
 80041e8:	20000404 	.word	0x20000404
 80041ec:	20000400 	.word	0x20000400
 80041f0:	20000514 	.word	0x20000514
 80041f4:	20000510 	.word	0x20000510
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <xTaskIncrementTick+0x144>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 808e 	bne.w	800432c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004210:	4b4c      	ldr	r3, [pc, #304]	; (8004344 <xTaskIncrementTick+0x148>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <xTaskIncrementTick+0x148>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d120      	bne.n	8004266 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <xTaskIncrementTick+0x48>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <xTaskIncrementTick+0x46>
 8004244:	4b40      	ldr	r3, [pc, #256]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b40      	ldr	r3, [pc, #256]	; (800434c <xTaskIncrementTick+0x150>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <xTaskIncrementTick+0x150>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <xTaskIncrementTick+0x154>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <xTaskIncrementTick+0x154>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	f000 f99f 	bl	80045a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <xTaskIncrementTick+0x158>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d348      	bcc.n	8004302 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427a:	4b36      	ldr	r3, [pc, #216]	; (8004354 <xTaskIncrementTick+0x158>)
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	601a      	str	r2, [r3, #0]
					break;
 8004282:	e03e      	b.n	8004302 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <xTaskIncrementTick+0x14c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d203      	bcs.n	80042a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <xTaskIncrementTick+0x158>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042a2:	e02e      	b.n	8004302 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fc8b 	bl	8003bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fc82 	bl	8003bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <xTaskIncrementTick+0x15c>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <xTaskIncrementTick+0x160>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7ff fc0e 	bl	8003b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <xTaskIncrementTick+0x164>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3b9      	bcc.n	8004270 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004300:	e7b6      	b.n	8004270 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskIncrementTick+0x164>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <xTaskIncrementTick+0x160>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d901      	bls.n	800431e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <xTaskIncrementTick+0x168>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e004      	b.n	8004336 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <xTaskIncrementTick+0x16c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <xTaskIncrementTick+0x16c>)
 8004334:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000528 	.word	0x20000528
 8004344:	20000504 	.word	0x20000504
 8004348:	200004b8 	.word	0x200004b8
 800434c:	200004bc 	.word	0x200004bc
 8004350:	20000518 	.word	0x20000518
 8004354:	20000520 	.word	0x20000520
 8004358:	20000508 	.word	0x20000508
 800435c:	20000404 	.word	0x20000404
 8004360:	20000400 	.word	0x20000400
 8004364:	20000514 	.word	0x20000514
 8004368:	20000510 	.word	0x20000510

0800436c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <vTaskSwitchContext+0xac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800437a:	4b28      	ldr	r3, [pc, #160]	; (800441c <vTaskSwitchContext+0xb0>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004380:	e044      	b.n	800440c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <vTaskSwitchContext+0xb0>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <vTaskSwitchContext+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004396:	7afb      	ldrb	r3, [r7, #11]
 8004398:	f1c3 031f 	rsb	r3, r3, #31
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	4921      	ldr	r1, [pc, #132]	; (8004424 <vTaskSwitchContext+0xb8>)
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskSwitchContext+0x5a>
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a14      	ldr	r2, [pc, #80]	; (8004424 <vTaskSwitchContext+0xb8>)
 80043d4:	4413      	add	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	3308      	adds	r3, #8
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d104      	bne.n	80043f8 <vTaskSwitchContext+0x8c>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <vTaskSwitchContext+0xbc>)
 8004400:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <vTaskSwitchContext+0xbc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	334c      	adds	r3, #76	; 0x4c
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <vTaskSwitchContext+0xc0>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000528 	.word	0x20000528
 800441c:	20000514 	.word	0x20000514
 8004420:	20000508 	.word	0x20000508
 8004424:	20000404 	.word	0x20000404
 8004428:	20000400 	.word	0x20000400
 800442c:	2000005c 	.word	0x2000005c

08004430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004438:	f000 f852 	bl	80044e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <prvIdleTask+0x28>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d9f9      	bls.n	8004438 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <prvIdleTask+0x2c>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004454:	e7f0      	b.n	8004438 <prvIdleTask+0x8>
 8004456:	bf00      	nop
 8004458:	20000404 	.word	0x20000404
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	e00c      	b.n	8004486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <prvInitialiseTaskLists+0x60>)
 8004478:	4413      	add	r3, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fb18 	bl	8003ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b06      	cmp	r3, #6
 800448a:	d9ef      	bls.n	800446c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800448c:	480d      	ldr	r0, [pc, #52]	; (80044c4 <prvInitialiseTaskLists+0x64>)
 800448e:	f7ff fb0f 	bl	8003ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004492:	480d      	ldr	r0, [pc, #52]	; (80044c8 <prvInitialiseTaskLists+0x68>)
 8004494:	f7ff fb0c 	bl	8003ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004498:	480c      	ldr	r0, [pc, #48]	; (80044cc <prvInitialiseTaskLists+0x6c>)
 800449a:	f7ff fb09 	bl	8003ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800449e:	480c      	ldr	r0, [pc, #48]	; (80044d0 <prvInitialiseTaskLists+0x70>)
 80044a0:	f7ff fb06 	bl	8003ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044a4:	480b      	ldr	r0, [pc, #44]	; (80044d4 <prvInitialiseTaskLists+0x74>)
 80044a6:	f7ff fb03 	bl	8003ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <prvInitialiseTaskLists+0x78>)
 80044ac:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <prvInitialiseTaskLists+0x64>)
 80044ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <prvInitialiseTaskLists+0x7c>)
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <prvInitialiseTaskLists+0x68>)
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000404 	.word	0x20000404
 80044c4:	20000490 	.word	0x20000490
 80044c8:	200004a4 	.word	0x200004a4
 80044cc:	200004c0 	.word	0x200004c0
 80044d0:	200004d4 	.word	0x200004d4
 80044d4:	200004ec 	.word	0x200004ec
 80044d8:	200004b8 	.word	0x200004b8
 80044dc:	200004bc 	.word	0x200004bc

080044e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e6:	e019      	b.n	800451c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044e8:	f000 fa0c 	bl	8004904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <prvCheckTasksWaitingTermination+0x50>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fb63 	bl	8003bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044fe:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <prvCheckTasksWaitingTermination+0x54>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3b01      	subs	r3, #1
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <prvCheckTasksWaitingTermination+0x54>)
 8004506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 8004510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004512:	f000 fa27 	bl	8004964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f810 	bl	800453c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvCheckTasksWaitingTermination+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e1      	bne.n	80044e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200004d4 	.word	0x200004d4
 8004534:	20000500 	.word	0x20000500
 8004538:	200004e8 	.word	0x200004e8

0800453c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	334c      	adds	r3, #76	; 0x4c
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fcaf 	bl	8004eac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fb7f 	bl	8004c60 <vPortFree>
				vPortFree( pxTCB );
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb7c 	bl	8004c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004568:	e018      	b.n	800459c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004570:	2b01      	cmp	r3, #1
 8004572:	d103      	bne.n	800457c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb73 	bl	8004c60 <vPortFree>
	}
 800457a:	e00f      	b.n	800459c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004582:	2b02      	cmp	r3, #2
 8004584:	d00a      	beq.n	800459c <prvDeleteTCB+0x60>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60fb      	str	r3, [r7, #12]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <prvDeleteTCB+0x5e>
	}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <prvResetNextTaskUnblockTime+0x38>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvResetNextTaskUnblockTime+0x3c>)
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045bc:	e008      	b.n	80045d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <prvResetNextTaskUnblockTime+0x38>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <prvResetNextTaskUnblockTime+0x3c>)
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	200004b8 	.word	0x200004b8
 80045e0:	20000520 	.word	0x20000520

080045e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fae2 	bl	8003bc4 <uxListRemove>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2201      	movs	r2, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4013      	ands	r3, r2
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <prvAddCurrentTaskToDelayedList+0xb8>)
 800461c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d10a      	bne.n	800463c <prvAddCurrentTaskToDelayedList+0x58>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	481a      	ldr	r0, [pc, #104]	; (80046a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004636:	f7ff fa68 	bl	8003b0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800463a:	e026      	b.n	800468a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004644:	4b14      	ldr	r3, [pc, #80]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d209      	bcs.n	8004668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7ff fa76 	bl	8003b52 <vListInsert>
}
 8004666:	e010      	b.n	800468a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f7ff fa6c 	bl	8003b52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6013      	str	r3, [r2, #0]
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000504 	.word	0x20000504
 8004698:	20000400 	.word	0x20000400
 800469c:	20000508 	.word	0x20000508
 80046a0:	200004ec 	.word	0x200004ec
 80046a4:	200004bc 	.word	0x200004bc
 80046a8:	200004b8 	.word	0x200004b8
 80046ac:	20000520 	.word	0x20000520

080046b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b04      	subs	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b04      	subs	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b04      	subs	r3, #4
 80046de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <pxPortInitialiseStack+0x64>)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b14      	subs	r3, #20
 80046ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3b04      	subs	r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f06f 0202 	mvn.w	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b20      	subs	r3, #32
 8004704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	08004719 	.word	0x08004719

08004718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <prvTaskExitError+0x54>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d00a      	beq.n	8004742 <prvTaskExitError+0x2a>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <prvTaskExitError+0x28>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004756:	bf00      	nop
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0fc      	beq.n	8004758 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	2000000c 	.word	0x2000000c

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ba:	bf00      	nop
 80047bc:	e000ed08 	.word	0xe000ed08

080047c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <xPortStartScheduler+0x120>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <xPortStartScheduler+0x124>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10a      	bne.n	80047e6 <xPortStartScheduler+0x26>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	613b      	str	r3, [r7, #16]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <xPortStartScheduler+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <xPortStartScheduler+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10a      	bne.n	8004806 <xPortStartScheduler+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <xPortStartScheduler+0x12c>)
 8004808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <xPortStartScheduler+0x130>)
 800482c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <xPortStartScheduler+0x134>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004834:	e009      	b.n	800484a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <xPortStartScheduler+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <xPortStartScheduler+0x134>)
 800483e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d0ef      	beq.n	8004836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <xPortStartScheduler+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1c3 0307 	rsb	r3, r3, #7
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00a      	beq.n	8004878 <xPortStartScheduler+0xb8>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <xPortStartScheduler+0x134>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <xPortStartScheduler+0x134>)
 8004880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <xPortStartScheduler+0x134>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488a:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <xPortStartScheduler+0x134>)
 800488c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004896:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <xPortStartScheduler+0x138>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <xPortStartScheduler+0x138>)
 800489c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048ae:	f000 f8dd 	bl	8004a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <xPortStartScheduler+0x13c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048b8:	f000 f8fc 	bl	8004ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <xPortStartScheduler+0x140>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <xPortStartScheduler+0x140>)
 80048c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c8:	f7ff ff66 	bl	8004798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048cc:	f7ff fd4e 	bl	800436c <vTaskSwitchContext>
	prvTaskExitError();
 80048d0:	f7ff ff22 	bl	8004718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed00 	.word	0xe000ed00
 80048e4:	410fc271 	.word	0x410fc271
 80048e8:	410fc270 	.word	0x410fc270
 80048ec:	e000e400 	.word	0xe000e400
 80048f0:	2000052c 	.word	0x2000052c
 80048f4:	20000530 	.word	0x20000530
 80048f8:	e000ed20 	.word	0xe000ed20
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	e000ef34 	.word	0xe000ef34

08004904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <vPortEnterCritical+0x58>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <vPortEnterCritical+0x58>)
 8004926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <vPortEnterCritical+0x58>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10f      	bne.n	8004950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortEnterCritical+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <vPortEnterCritical+0x4c>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortEnterCritical+0x4a>
	}
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000000c 	.word	0x2000000c
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <vPortExitCritical+0x50>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vPortExitCritical+0x24>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <vPortExitCritical+0x50>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <vPortExitCritical+0x50>)
 8004990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <vPortExitCritical+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <vPortExitCritical+0x42>
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c
	...

080049c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049c0:	f3ef 8009 	mrs	r0, PSP
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <pxCurrentTCBConst>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f01e 0f10 	tst.w	lr, #16
 80049d0:	bf08      	it	eq
 80049d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	6010      	str	r0, [r2, #0]
 80049dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049e4:	f380 8811 	msr	BASEPRI, r0
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f7ff fcbc 	bl	800436c <vTaskSwitchContext>
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f380 8811 	msr	BASEPRI, r0
 80049fc:	bc09      	pop	{r0, r3}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a06:	f01e 0f10 	tst.w	lr, #16
 8004a0a:	bf08      	it	eq
 8004a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a10:	f380 8809 	msr	PSP, r0
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst>:
 8004a20:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a42:	f7ff fbdb 	bl	80041fc <xTaskIncrementTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <SysTick_Handler+0x40>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f383 8811 	msr	BASEPRI, r3
}
 8004a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <vPortSetupTimerInterrupt+0x38>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <vPortSetupTimerInterrupt+0x3c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <vPortSetupTimerInterrupt+0x40>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <vPortSetupTimerInterrupt+0x44>)
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010
 8004aa4:	e000e018 	.word	0xe000e018
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	10624dd3 	.word	0x10624dd3
 8004ab0:	e000e014 	.word	0xe000e014

08004ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ac4 <vPortEnableVFP+0x10>
 8004ab8:	6801      	ldr	r1, [r0, #0]
 8004aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004abe:	6001      	str	r1, [r0, #0]
 8004ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ac2:	bf00      	nop
 8004ac4:	e000ed88 	.word	0xe000ed88

08004ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ad4:	f7ff fae8 	bl	80040a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	; (8004c48 <pvPortMalloc+0x180>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae0:	f000 f920 	bl	8004d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <pvPortMalloc+0x184>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8093 	bne.w	8004c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af8:	2208      	movs	r2, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	3308      	adds	r3, #8
 8004b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <pvPortMalloc+0x6c>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	617b      	str	r3, [r7, #20]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06e      	beq.n	8004c18 <pvPortMalloc+0x150>
 8004b3a:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <pvPortMalloc+0x188>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d869      	bhi.n	8004c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b4e:	e004      	b.n	8004b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d903      	bls.n	8004b6c <pvPortMalloc+0xa4>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b6c:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d050      	beq.n	8004c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	2308      	movs	r3, #8
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d91f      	bls.n	8004bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f000 f908 	bl	8004de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <pvPortMalloc+0x188>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <pvPortMalloc+0x188>)
 8004be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004be6:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <pvPortMalloc+0x188>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <pvPortMalloc+0x190>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d203      	bcs.n	8004bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <pvPortMalloc+0x188>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <pvPortMalloc+0x190>)
 8004bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <pvPortMalloc+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <pvPortMalloc+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <pvPortMalloc+0x194>)
 8004c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c18:	f7ff fa54 	bl	80040c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <pvPortMalloc+0x174>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <pvPortMalloc+0x172>
	return pvReturn;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200010f4 	.word	0x200010f4
 8004c4c:	20001108 	.word	0x20001108
 8004c50:	200010f8 	.word	0x200010f8
 8004c54:	200010ec 	.word	0x200010ec
 8004c58:	200010fc 	.word	0x200010fc
 8004c5c:	20001100 	.word	0x20001100

08004c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04d      	beq.n	8004d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c72:	2308      	movs	r3, #8
 8004c74:	425b      	negs	r3, r3
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <vPortFree+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vPortFree+0x44>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <vPortFree+0x62>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60bb      	str	r3, [r7, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <vPortFree+0xb8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01e      	beq.n	8004d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <vPortFree+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ce8:	f7ff f9de 	bl	80040a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <vPortFree+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <vPortFree+0xbc>)
 8004cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f000 f874 	bl	8004de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <vPortFree+0xc0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vPortFree+0xc0>)
 8004d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d0a:	f7ff f9db 	bl	80040c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20001108 	.word	0x20001108
 8004d1c:	200010f8 	.word	0x200010f8
 8004d20:	20001104 	.word	0x20001104

08004d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <prvHeapInit+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvHeapInit+0xac>)
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvHeapInit+0xb4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvHeapInit+0xb8>)
 8004db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvHeapInit+0xbc>)
 8004dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvHeapInit+0xc0>)
 8004dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000534 	.word	0x20000534
 8004dd4:	200010ec 	.word	0x200010ec
 8004dd8:	200010f4 	.word	0x200010f4
 8004ddc:	200010fc 	.word	0x200010fc
 8004de0:	200010f8 	.word	0x200010f8
 8004de4:	20001108 	.word	0x20001108

08004de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <prvInsertBlockIntoFreeList+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x14>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d8f7      	bhi.n	8004df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d108      	bne.n	8004e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d118      	bne.n	8004e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00d      	beq.n	8004e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e008      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d002      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200010ec 	.word	0x200010ec
 8004e98:	200010f4 	.word	0x200010f4

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <_reclaim_reent>:
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <_reclaim_reent+0xa8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4283      	cmp	r3, r0
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	d04b      	beq.n	8004f50 <_reclaim_reent+0xa4>
 8004eb8:	69c3      	ldr	r3, [r0, #28]
 8004eba:	b143      	cbz	r3, 8004ece <_reclaim_reent+0x22>
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d144      	bne.n	8004f4c <_reclaim_reent+0xa0>
 8004ec2:	69e3      	ldr	r3, [r4, #28]
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	b111      	cbz	r1, 8004ece <_reclaim_reent+0x22>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 f86b 	bl	8004fa4 <_free_r>
 8004ece:	6961      	ldr	r1, [r4, #20]
 8004ed0:	b111      	cbz	r1, 8004ed8 <_reclaim_reent+0x2c>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f866 	bl	8004fa4 <_free_r>
 8004ed8:	69e1      	ldr	r1, [r4, #28]
 8004eda:	b111      	cbz	r1, 8004ee2 <_reclaim_reent+0x36>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 f861 	bl	8004fa4 <_free_r>
 8004ee2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ee4:	b111      	cbz	r1, 8004eec <_reclaim_reent+0x40>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f85c 	bl	8004fa4 <_free_r>
 8004eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eee:	b111      	cbz	r1, 8004ef6 <_reclaim_reent+0x4a>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f857 	bl	8004fa4 <_free_r>
 8004ef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ef8:	b111      	cbz	r1, 8004f00 <_reclaim_reent+0x54>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f852 	bl	8004fa4 <_free_r>
 8004f00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f02:	b111      	cbz	r1, 8004f0a <_reclaim_reent+0x5e>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f84d 	bl	8004fa4 <_free_r>
 8004f0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f0c:	b111      	cbz	r1, 8004f14 <_reclaim_reent+0x68>
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 f848 	bl	8004fa4 <_free_r>
 8004f14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x72>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f843 	bl	8004fa4 <_free_r>
 8004f1e:	6a23      	ldr	r3, [r4, #32]
 8004f20:	b1b3      	cbz	r3, 8004f50 <_reclaim_reent+0xa4>
 8004f22:	4620      	mov	r0, r4
 8004f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f28:	4718      	bx	r3
 8004f2a:	5949      	ldr	r1, [r1, r5]
 8004f2c:	b941      	cbnz	r1, 8004f40 <_reclaim_reent+0x94>
 8004f2e:	3504      	adds	r5, #4
 8004f30:	69e3      	ldr	r3, [r4, #28]
 8004f32:	2d80      	cmp	r5, #128	; 0x80
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	d1f8      	bne.n	8004f2a <_reclaim_reent+0x7e>
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f833 	bl	8004fa4 <_free_r>
 8004f3e:	e7c0      	b.n	8004ec2 <_reclaim_reent+0x16>
 8004f40:	680e      	ldr	r6, [r1, #0]
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f82e 	bl	8004fa4 <_free_r>
 8004f48:	4631      	mov	r1, r6
 8004f4a:	e7ef      	b.n	8004f2c <_reclaim_reent+0x80>
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	e7ef      	b.n	8004f30 <_reclaim_reent+0x84>
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	bf00      	nop
 8004f54:	2000005c 	.word	0x2000005c

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4d0d      	ldr	r5, [pc, #52]	; (8004f90 <__libc_init_array+0x38>)
 8004f5c:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	2600      	movs	r6, #0
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	4d0b      	ldr	r5, [pc, #44]	; (8004f98 <__libc_init_array+0x40>)
 8004f6a:	4c0c      	ldr	r4, [pc, #48]	; (8004f9c <__libc_init_array+0x44>)
 8004f6c:	f000 f872 	bl	8005054 <_init>
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	2600      	movs	r6, #0
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	08005110 	.word	0x08005110
 8004f94:	08005110 	.word	0x08005110
 8004f98:	08005110 	.word	0x08005110
 8004f9c:	08005114 	.word	0x08005114

08004fa0 <__retarget_lock_acquire_recursive>:
 8004fa0:	4770      	bx	lr

08004fa2 <__retarget_lock_release_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <_free_r>:
 8004fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d044      	beq.n	8005034 <_free_r+0x90>
 8004faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb6:	bfb8      	it	lt
 8004fb8:	18e4      	addlt	r4, r4, r3
 8004fba:	f000 f83f 	bl	800503c <__malloc_lock>
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <_free_r+0x94>)
 8004fc0:	9801      	ldr	r0, [sp, #4]
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	b933      	cbnz	r3, 8004fd4 <_free_r+0x30>
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd0:	f000 b83a 	b.w	8005048 <__malloc_unlock>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d908      	bls.n	8004fea <_free_r+0x46>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf01      	itttt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	1949      	addeq	r1, r1, r5
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	e7ed      	b.n	8004fc6 <_free_r+0x22>
 8004fea:	461a      	mov	r2, r3
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b10b      	cbz	r3, 8004ff4 <_free_r+0x50>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d9fa      	bls.n	8004fea <_free_r+0x46>
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	1855      	adds	r5, r2, r1
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d10b      	bne.n	8005014 <_free_r+0x70>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	4421      	add	r1, r4
 8005000:	1854      	adds	r4, r2, r1
 8005002:	42a3      	cmp	r3, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	d1e0      	bne.n	8004fca <_free_r+0x26>
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	440c      	add	r4, r1
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	e7da      	b.n	8004fca <_free_r+0x26>
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	6003      	str	r3, [r0, #0]
 800501a:	e7d6      	b.n	8004fca <_free_r+0x26>
 800501c:	6825      	ldr	r5, [r4, #0]
 800501e:	1961      	adds	r1, r4, r5
 8005020:	428b      	cmp	r3, r1
 8005022:	bf04      	itt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	bf04      	itt	eq
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	6054      	str	r4, [r2, #4]
 8005032:	e7ca      	b.n	8004fca <_free_r+0x26>
 8005034:	b003      	add	sp, #12
 8005036:	bd30      	pop	{r4, r5, pc}
 8005038:	20001248 	.word	0x20001248

0800503c <__malloc_lock>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__malloc_lock+0x8>)
 800503e:	f7ff bfaf 	b.w	8004fa0 <__retarget_lock_acquire_recursive>
 8005042:	bf00      	nop
 8005044:	20001244 	.word	0x20001244

08005048 <__malloc_unlock>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__malloc_unlock+0x8>)
 800504a:	f7ff bfaa 	b.w	8004fa2 <__retarget_lock_release_recursive>
 800504e:	bf00      	nop
 8005050:	20001244 	.word	0x20001244

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
