
Carines.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000691c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  00020454  2**0
                  CONTENTS
  4 .ARM          00000000  08006b28  08006b28  00020454  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b28  08006b28  00020454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  08006b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000454  08006f84  00020454  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08006f84  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e27  00000000  00000000  000204c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002953  00000000  00000000  000342ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dae  00000000  00000000  00037da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d138  00000000  00000000  00038b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001724d  00000000  00000000  00055c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad307  00000000  00000000  0006ced3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f60  00000000  00000000  0011a1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000454 	.word	0x20000454
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a94 	.word	0x08006a94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000458 	.word	0x20000458
 80001cc:	08006a94 	.word	0x08006a94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <ultrasonic_init>:

#define timmer htim15 // reemplazan por el timmer que utilizen

extern TIM_HandleTypeDef timmer;

void ultrasonic_init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&timmer);
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <ultrasonic_init+0x1c>)
 8000a52:	f004 fba5 	bl	80051a0 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // ponggo el trigger en bajo
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f002 fafc 	bl	800305c <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000560 	.word	0x20000560
 8000a6c:	00000000 	.word	0x00000000

08000a70 <ultrasonic_measure_distance>:


uint16_t ultrasonic_measure_distance(void) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
    uint32_t pMillis = HAL_GetTick();
 8000a76:	f001 f8ff 	bl	8001c78 <HAL_GetTick>
 8000a7a:	60f8      	str	r0, [r7, #12]
    uint32_t Value1 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
    uint32_t Value2 = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]

    uint16_t Distance  = 0;  // cm*/
 8000a84:	2300      	movs	r3, #0
 8000a86:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pongo el trigger el alto
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f002 fae3 	bl	800305c <HAL_GPIO_WritePin>
          __HAL_TIM_SET_COUNTER(&timmer, 0);
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <ultrasonic_measure_distance+0xf8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
          while (__HAL_TIM_GET_COUNTER (&timmer) < 10);  // espero 10 us
 8000a9e:	bf00      	nop
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <ultrasonic_measure_distance+0xf8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	d9fa      	bls.n	8000aa0 <ultrasonic_measure_distance+0x30>
          HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pongo el trigger en bajo nuevamente.
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f002 fad2 	bl	800305c <HAL_GPIO_WritePin>

          pMillis = HAL_GetTick();
 8000ab8:	f001 f8de 	bl	8001c78 <HAL_GetTick>
 8000abc:	60f8      	str	r0, [r7, #12]
          // espero que el ecco reciba el 1 del trigger
          while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000abe:	bf00      	nop
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f002 fab0 	bl	800302c <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d107      	bne.n	8000ae2 <ultrasonic_measure_distance+0x72>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f103 040a 	add.w	r4, r3, #10
 8000ad8:	f001 f8ce 	bl	8001c78 <HAL_GetTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	429c      	cmp	r4, r3
 8000ae0:	d8ee      	bhi.n	8000ac0 <ultrasonic_measure_distance+0x50>
          Value1 = __HAL_TIM_GET_COUNTER (&timmer);
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <ultrasonic_measure_distance+0xf8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	60bb      	str	r3, [r7, #8]

          pMillis = HAL_GetTick();
 8000aea:	f001 f8c5 	bl	8001c78 <HAL_GetTick>
 8000aee:	60f8      	str	r0, [r7, #12]
          // espero que el pin ecco este en bajo
          while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000af0:	bf00      	nop
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f002 fa97 	bl	800302c <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <ultrasonic_measure_distance+0xa4>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000b0a:	f001 f8b5 	bl	8001c78 <HAL_GetTick>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	429c      	cmp	r4, r3
 8000b12:	d8ee      	bhi.n	8000af2 <ultrasonic_measure_distance+0x82>
          Value2 = __HAL_TIM_GET_COUNTER (&timmer);
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <ultrasonic_measure_distance+0xf8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1a:	607b      	str	r3, [r7, #4]
          Distance = (Value2-Value1)* 0.034/2;
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fce6 	bl	80004f4 <__aeabi_ui2d>
 8000b28:	a30d      	add	r3, pc, #52	; (adr r3, 8000b60 <ultrasonic_measure_distance+0xf0>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f7ff fd5b 	bl	80005e8 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4610      	mov	r0, r2
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b42:	f7ff fe7b 	bl	800083c <__aeabi_ddiv>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__aeabi_d2uiz>
 8000b52:	4603      	mov	r3, r0
 8000b54:	807b      	strh	r3, [r7, #2]

}
 8000b56:	bf00      	nop
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	b020c49c 	.word	0xb020c49c
 8000b64:	3fa16872 	.word	0x3fa16872
 8000b68:	20000560 	.word	0x20000560

08000b6c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f043 030c 	orr.w	r3, r3, #12
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	f043 030c 	orr.w	r3, r3, #12
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bac:	f107 0208 	add.w	r2, r7, #8
 8000bb0:	2364      	movs	r3, #100	; 0x64
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	214e      	movs	r1, #78	; 0x4e
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <lcd_send_cmd+0x5c>)
 8000bba:	f002 faf7 	bl	80031ac <HAL_I2C_Master_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200004c0 	.word	0x200004c0

08000bcc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f023 030f 	bic.w	r3, r3, #15
 8000bdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 030d 	orr.w	r3, r3, #13
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f043 0309 	orr.w	r3, r3, #9
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	f043 030d 	orr.w	r3, r3, #13
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	f043 0309 	orr.w	r3, r3, #9
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c0c:	f107 0208 	add.w	r2, r7, #8
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2304      	movs	r3, #4
 8000c16:	214e      	movs	r1, #78	; 0x4e
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <lcd_send_data+0x5c>)
 8000c1a:	f002 fac7 	bl	80031ac <HAL_I2C_Master_Transmit>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200004c0 	.word	0x200004c0

08000c2c <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	68b8      	ldr	r0, [r7, #8]
 8000c3c:	f000 f83b 	bl	8000cb6 <lcd_put_cur>
	lcd_send_string(string);
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f894 	bl	8000d6e <lcd_send_string>
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <lcd_enviar_int+0x34>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fa71 	bl	800614c <siprintf>
    lcd_put_cur(row, col);
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f000 f822 	bl	8000cb6 <lcd_put_cur>
    lcd_send_string(buffer);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f879 	bl	8000d6e <lcd_send_string>
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08006aac 	.word	0x08006aac

08000c88 <lcd_clear>:

void lcd_clear (void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c8e:	2080      	movs	r0, #128	; 0x80
 8000c90:	f7ff ff6c 	bl	8000b6c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	e005      	b.n	8000ca6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000c9a:	2020      	movs	r0, #32
 8000c9c:	f7ff ff96 	bl	8000bcc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b45      	cmp	r3, #69	; 0x45
 8000caa:	ddf6      	ble.n	8000c9a <lcd_clear+0x12>
	}
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <lcd_put_cur+0x18>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <lcd_put_cur+0x22>
 8000ccc:	e009      	b.n	8000ce2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	603b      	str	r3, [r7, #0]
            break;
 8000cd6:	e004      	b.n	8000ce2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cde:	603b      	str	r3, [r7, #0]
            break;
 8000ce0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff40 	bl	8000b6c <lcd_send_cmd>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <lcd_init>:


void lcd_init (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f000 ffc9 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cfe:	2030      	movs	r0, #48	; 0x30
 8000d00:	f7ff ff34 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d04:	2005      	movs	r0, #5
 8000d06:	f000 ffc3 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d0a:	2030      	movs	r0, #48	; 0x30
 8000d0c:	f7ff ff2e 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 ffbd 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d16:	2030      	movs	r0, #48	; 0x30
 8000d18:	f7ff ff28 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f000 ffb7 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ff22 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(10);
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f000 ffb1 	bl	8001c90 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d2e:	2028      	movs	r0, #40	; 0x28
 8000d30:	f7ff ff1c 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 ffab 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	f7ff ff16 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 ffa5 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff ff10 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 ff9f 	bl	8001c90 <HAL_Delay>
	HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 ff9c 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d58:	2006      	movs	r0, #6
 8000d5a:	f7ff ff07 	bl	8000b6c <lcd_send_cmd>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 ff96 	bl	8001c90 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d64:	200c      	movs	r0, #12
 8000d66:	f7ff ff01 	bl	8000b6c <lcd_send_cmd>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d76:	e006      	b.n	8000d86 <lcd_send_string+0x18>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff23 	bl	8000bcc <lcd_send_data>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f4      	bne.n	8000d78 <lcd_send_string+0xa>
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Medir_ADC>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t ADC_VALUES;

void Medir_ADC()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <Medir_ADC+0x28>)
 8000d9e:	f001 f921 	bl	8001fe4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000da2:	2164      	movs	r1, #100	; 0x64
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <Medir_ADC+0x28>)
 8000da6:	f001 f9bf 	bl	8002128 <HAL_ADC_PollForConversion>

	ADC_VALUES = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <Medir_ADC+0x28>)
 8000dac:	f001 fa7a 	bl	80022a4 <HAL_ADC_GetValue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <Medir_ADC+0x2c>)
 8000db4:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <Medir_ADC+0x28>)
 8000db8:	f001 f981 	bl	80020be <HAL_ADC_Stop>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000470 	.word	0x20000470
 8000dc4:	20000638 	.word	0x20000638

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	static unsigned int Count_LCD=0,Count_KEY=0,Count_ADC=0,Count_MATRIZ=0,Count_SONIC=0;

	if(htim->Instance==htim2.Instance)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d159      	bne.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

	//LDC
	if(Count_LCD<(Time_LCD/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000ddc:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b31      	cmp	r3, #49	; 0x31
 8000de2:	d805      	bhi.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Count_LCD++;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a2d      	ldr	r2, [pc, #180]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else
	{
		Count_LCD=0;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
		FLAG.LCD2=1;
 8000df6:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000df8:	7813      	ldrb	r3, [r2, #0]
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	7013      	strb	r3, [r2, #0]
	}

	//KEYPAD
	if(Count_KEY<(Time_keypad/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b18      	cmp	r3, #24
 8000e06:	d805      	bhi.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			Count_KEY++;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else
		{
			Count_KEY=0;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
			FLAG.KEYPAD=1;
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000e1c:	7813      	ldrb	r3, [r2, #0]
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	7013      	strb	r3, [r2, #0]
		}



	//ADC
	if(Count_ADC<(Time_ADC/Timer))
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d805      	bhi.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		Count_ADC++;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x80>
	}
	else
	{
		Count_ADC=0;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
		FLAG.ADC=1;
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000e40:	7813      	ldrb	r3, [r2, #0]
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	7013      	strb	r3, [r2, #0]
	}


	//MATRIZ
	if(Count_MATRIZ<(Time_matriz/Timer))
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b68      	cmp	r3, #104	; 0x68
 8000e4e:	d805      	bhi.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Count_MATRIZ++;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0xa4>
	}
	else
	{
		Count_MATRIZ=0;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
		FLAG.MATRIZ=1;
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000e64:	7813      	ldrb	r3, [r2, #0]
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	7013      	strb	r3, [r2, #0]
	}

	//ULTRASONICO
	if(Count_SONIC<(Time_sonic/Timer))
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2bc7      	cmp	r3, #199	; 0xc7
 8000e72:	d805      	bhi.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		Count_SONIC++;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e7c:	6013      	str	r3, [r2, #0]

	}



}
 8000e7e:	e007      	b.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc8>
		Count_SONIC=0;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
		FLAG.SONIC=1;
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000e88:	7813      	ldrb	r3, [r2, #0]
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	7013      	strb	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000514 	.word	0x20000514
 8000ea0:	2000063c 	.word	0x2000063c
 8000ea4:	20000634 	.word	0x20000634
 8000ea8:	20000640 	.word	0x20000640
 8000eac:	20000644 	.word	0x20000644
 8000eb0:	20000648 	.word	0x20000648
 8000eb4:	2000064c 	.word	0x2000064c

08000eb8 <task_ultra>:

void task_ultra(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	uint16_t Distance =  ultrasonic_measure_distance();
 8000ebe:	f7ff fdd7 	bl	8000a70 <ultrasonic_measure_distance>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	lcd_clear();
 8000ec6:	f7ff fedf 	bl	8000c88 <lcd_clear>
		  		  	        lcd_put_cur(1, 6);
 8000eca:	2106      	movs	r1, #6
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fef2 	bl	8000cb6 <lcd_put_cur>
		  		  	        lcd_send_data((Distance/100) + 48);   // 100th pos
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <task_ultra+0x90>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3330      	adds	r3, #48	; 0x30
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe71 	bl	8000bcc <lcd_send_data>
		  		  	        lcd_send_data(((Distance/10)%10) +48);  // 10th pos
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <task_ultra+0x94>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <task_ultra+0x94>)
 8000ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8000efc:	08d9      	lsrs	r1, r3, #3
 8000efe:	460b      	mov	r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3330      	adds	r3, #48	; 0x30
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe5b 	bl	8000bcc <lcd_send_data>
		  		  	        lcd_send_data((Distance%10)+48);  // 1st pos
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <task_ultra+0x94>)
 8000f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f1e:	08d9      	lsrs	r1, r3, #3
 8000f20:	460b      	mov	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	3330      	adds	r3, #48	; 0x30
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe4a 	bl	8000bcc <lcd_send_data>
		  		  	        lcd_send_string(" CM");
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <task_ultra+0x98>)
 8000f3a:	f7ff ff18 	bl	8000d6e <lcd_send_string>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	51eb851f 	.word	0x51eb851f
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	08006ab0 	.word	0x08006ab0

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fe34 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f86c 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 fa3a 	bl	80013d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 fa08 	bl	8001378 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f68:	f000 f8ca 	bl	8001100 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f6c:	f000 f924 	bl	80011b8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f70:	f000 f962 	bl	8001238 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000f74:	f000 f9ae 	bl	80012d4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  max_init(0x03);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fc3f 	bl	80017fc <max_init>
  write_char('j', 1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	206a      	movs	r0, #106	; 0x6a
 8000f82:	f000 fbd3 	bl	800172c <write_char>
    lcd_init();
 8000f86:	f7ff feb5 	bl	8000cf4 <lcd_init>
    HAL_TIM_Base_Start_IT(&htim2);
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <main+0xd4>)
 8000f8c:	f004 f954 	bl	8005238 <HAL_TIM_Base_Start_IT>
   ultrasonic_init();
 8000f90:	f7ff fd5c 	bl	8000a4c <ultrasonic_init>
  {



	  	  //ADC
	  	  if(FLAG.ADC)
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <main+0xd8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <main+0x5c>
	  	  		  {
	  	  			  FLAG.ADC=0;
 8000fa2:	4a22      	ldr	r2, [pc, #136]	; (800102c <main+0xd8>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	f36f 0382 	bfc	r3, #2, #1
 8000faa:	7013      	strb	r3, [r2, #0]
	  	  			  Medir_ADC();
 8000fac:	f7ff fef4 	bl	8000d98 <Medir_ADC>
	  	  		  }
	       // LCD
	  	  if(FLAG.LCD2)
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <main+0xd8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d012      	beq.n	8000fe4 <main+0x90>
	  	  	{
	  		  lcd_clear();
 8000fbe:	f7ff fe63 	bl	8000c88 <lcd_clear>
	  		  lcd_enviar("ADC:", 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <main+0xdc>)
 8000fc8:	f7ff fe30 	bl	8000c2c <lcd_enviar>
	  	      lcd_enviar_int(ADC_VALUES,0,4);
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <main+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe3b 	bl	8000c50 <lcd_enviar_int>

	  	  	  FLAG.LCD2=0;
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <main+0xd8>)
 8000fdc:	7813      	ldrb	r3, [r2, #0]
 8000fde:	f36f 0300 	bfc	r3, #0, #1
 8000fe2:	7013      	strb	r3, [r2, #0]
	  	  	}
	  	  //MAX
	  	  if(FLAG.MATRIZ)
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <main+0xd8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00a      	beq.n	8001008 <main+0xb4>
	  	  	{

	  	      write_char('V', 1);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2056      	movs	r0, #86	; 0x56
 8000ff6:	f000 fb99 	bl	800172c <write_char>
	  	      max_clear();
 8000ffa:	f000 fbd1 	bl	80017a0 <max_clear>

	  	  	  FLAG.MATRIZ=0;
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <main+0xd8>)
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f36f 03c3 	bfc	r3, #3, #1
 8001006:	7013      	strb	r3, [r2, #0]
	  	  	}
	       //ultrasonico
	  	  if(FLAG.SONIC)
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <main+0xd8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0be      	beq.n	8000f94 <main+0x40>
	  	  	  	{

                  task_ultra();
 8001016:	f7ff ff4f 	bl	8000eb8 <task_ultra>
	  	  	  	  FLAG.SONIC=0;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <main+0xd8>)
 800101c:	7813      	ldrb	r3, [r2, #0]
 800101e:	f36f 1304 	bfc	r3, #4, #1
 8001022:	7013      	strb	r3, [r2, #0]
	  	  if(FLAG.ADC)
 8001024:	e7b6      	b.n	8000f94 <main+0x40>
 8001026:	bf00      	nop
 8001028:	20000514 	.word	0x20000514
 800102c:	20000634 	.word	0x20000634
 8001030:	08006ab4 	.word	0x08006ab4
 8001034:	20000638 	.word	0x20000638

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09c      	sub	sp, #112	; 0x70
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001042:	2228      	movs	r2, #40	; 0x28
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f005 f8a0 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2234      	movs	r2, #52	; 0x34
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f005 f892 	bl	800618c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001068:	2303      	movs	r3, #3
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001076:	2301      	movs	r3, #1
 8001078:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107a:	2310      	movs	r3, #16
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001088:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800108c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fc26 	bl	80038e4 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800109e:	f000 fa29 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fc4e 	bl	8004960 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ca:	f000 fa13 	bl	80014f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM15
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <SystemClock_Config+0xc4>)
 80010d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80010da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fe72 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ee:	f000 fa01 	bl	80014f4 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3770      	adds	r7, #112	; 0x70
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	000400a0 	.word	0x000400a0

08001100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800111c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001132:	2200      	movs	r2, #0
 8001134:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001146:	2201      	movs	r2, #1
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001160:	2204      	movs	r2, #4
 8001162:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800116c:	2200      	movs	r2, #0
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_ADC1_Init+0xb4>)
 8001172:	f000 fdb1 	bl	8001cd8 <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800117c:	f000 f9ba 	bl	80014f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001180:	2301      	movs	r3, #1
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800118c:	2307      	movs	r3, #7
 800118e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_ADC1_Init+0xb4>)
 800119e:	f001 f88f 	bl	80022c0 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011a8:	f000 f9a4 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000470 	.word	0x20000470

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_I2C1_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C1_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_I2C1_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_I2C1_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_I2C1_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_I2C1_Init+0x74>)
 80011f4:	f001 ff4a 	bl	800308c <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 f979 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_I2C1_Init+0x74>)
 8001206:	f002 fad5 	bl	80037b4 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 f970 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2C1_Init+0x74>)
 8001218:	f002 fb17 	bl	800384a <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f967 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200004c0 	.word	0x200004c0
 8001230:	40005400 	.word	0x40005400
 8001234:	2000090e 	.word	0x2000090e

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	2247      	movs	r2, #71	; 0x47
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f003 ff36 	bl	80050f0 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 f933 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129c:	f004 f93f 	bl	800551e <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a6:	f000 f925 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012b8:	f004 fb2a 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c2:	f000 f917 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000514 	.word	0x20000514

080012d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM15_Init+0x9c>)
 80012f4:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <MX_TIM15_Init+0xa0>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM15_Init+0x9c>)
 80012fa:	2247      	movs	r2, #71	; 0x47
 80012fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM15_Init+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM15_Init+0x9c>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM15_Init+0x9c>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM15_Init+0x9c>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM15_Init+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM15_Init+0x9c>)
 8001320:	f003 fee6 	bl	80050f0 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800132a:	f000 f8e3 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM15_Init+0x9c>)
 800133c:	f004 f8ef 	bl	800551e <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001346:	f000 f8d5 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM15_Init+0x9c>)
 8001358:	f004 fada 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001362:	f000 f8c7 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000560 	.word	0x20000560
 8001374:	40014000 	.word	0x40014000

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <MX_USART2_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001384:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x58>)
 80013bc:	f004 fb2c 	bl	8005a18 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 f895 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200005ac 	.word	0x200005ac
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_GPIO_Init+0x110>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <MX_GPIO_Init+0x110>)
 80013f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_GPIO_Init+0x110>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <MX_GPIO_Init+0x110>)
 800140c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <MX_GPIO_Init+0x110>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x110>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <MX_GPIO_Init+0x110>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001454:	4825      	ldr	r0, [pc, #148]	; (80014ec <MX_GPIO_Init+0x114>)
 8001456:	f001 fe01 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f001 fdfa 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_GPIO_Init+0x118>)
 8001480:	f001 fc62 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_GPIO_Init+0x114>)
 800149e:	f001 fc53 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f001 fc43 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f001 fc35 	bl	8002d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e01a      	b.n	8001546 <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	4810      	ldr	r0, [pc, #64]	; (8001558 <write_byte+0x58>)
 8001518:	f001 fda0 	bl	800305c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	2120      	movs	r1, #32
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <write_byte+0x58>)
 800152a:	f001 fd97 	bl	800305c <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <write_byte+0x58>)
 800153c:	f001 fd8e 	bl	800305c <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b07      	cmp	r3, #7
 800154a:	dde1      	ble.n	8001510 <write_byte+0x10>
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	48000800 	.word	0x48000800

0800155c <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <write_max_cmd+0x58>)
 8001572:	f001 fd73 	bl	800305c <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e00a      	b.n	8001592 <write_max_cmd+0x36>
	{
		write_byte (address);
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffbe 	bl	8001500 <write_byte>
		write_byte (cmd); 
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ffba 	bl	8001500 <write_byte>
	for (int i=0;i<num; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	ddf1      	ble.n	800157c <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001598:	2200      	movs	r2, #0
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <write_max_cmd+0x58>)
 800159e:	f001 fd5d 	bl	800305c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80015a2:	2201      	movs	r2, #1
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <write_max_cmd+0x58>)
 80015a8:	f001 fd58 	bl	800305c <HAL_GPIO_WritePin>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	48000800 	.word	0x48000800

080015b8 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	460b      	mov	r3, r1
 80015c4:	71bb      	strb	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <setled+0x34>
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <setled+0xcc>)
 80015d4:	5cd1      	ldrb	r1, [r2, r3]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2201      	movs	r2, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	b2d1      	uxtb	r1, r2
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <setled+0xcc>)
 80015e8:	54d1      	strb	r1, [r2, r3]
 80015ea:	e00e      	b.n	800160a <setled+0x52>
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <setled+0xcc>)
 80015f0:	5cd1      	ldrb	r1, [r2, r3]
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2201      	movs	r2, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	400a      	ands	r2, r1
 8001604:	b2d1      	uxtb	r1, r2
 8001606:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <setled+0xcc>)
 8001608:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800161a:	2200      	movs	r2, #0
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	481a      	ldr	r0, [pc, #104]	; (8001688 <setled+0xd0>)
 8001620:	f001 fd1c 	bl	800305c <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e01b      	b.n	8001662 <setled+0xaa>
	{
		if (i == (num-(n+1)))
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	425b      	negs	r3, r3
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d10d      	bne.n	8001650 <setled+0x98>
		{
			write_byte (((c+1)));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <write_byte>
			write_byte (buffer[col]);
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <setled+0xcc>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff59 	bl	8001500 <write_byte>
 800164e:	e005      	b.n	800165c <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff ff55 	bl	8001500 <write_byte>
			write_byte (0);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff52 	bl	8001500 <write_byte>
	for (int i=0; i<num; i++) 
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dde0      	ble.n	800162a <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8001668:	2200      	movs	r2, #0
 800166a:	2140      	movs	r1, #64	; 0x40
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <setled+0xd0>)
 800166e:	f001 fcf5 	bl	800305c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8001672:	2201      	movs	r2, #1
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <setled+0xd0>)
 8001678:	f001 fcf0 	bl	800305c <HAL_GPIO_WritePin>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000650 	.word	0x20000650
 8001688:	48000800 	.word	0x48000800

0800168c <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	460a      	mov	r2, r1
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e02d      	b.n	8001712 <setrow+0x86>
	{
		if (i == ((n)))
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d120      	bne.n	8001700 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	3307      	adds	r3, #7
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	e015      	b.n	80016f4 <setrow+0x68>
			{
				bool b = value&0x80;
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	b2d1      	uxtb	r1, r2
 80016e0:	7bba      	ldrb	r2, [r7, #14]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff68 	bl	80015b8 <setled>
				value<<=1;
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dae4      	bge.n	80016c8 <setrow+0x3c>
 80016fe:	e005      	b.n	800170c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fefd 	bl	8001500 <write_byte>
			write_byte (0);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fefa 	bl	8001500 <write_byte>
	for (int i=0; i<num; i++) 
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	ddce      	ble.n	80016b6 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4903      	ldr	r1, [pc, #12]	; (8001728 <setrow+0x9c>)
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	54ca      	strb	r2, [r1, r3]
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200006a0 	.word	0x200006a0

0800172c <write_char>:
		


void write_char (char c, uint8_t max)  
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <write_char+0x70>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
	int row =6;
 800174e:	2306      	movs	r3, #6
 8001750:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	e016      	b.n	8001786 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	3b01      	subs	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	490c      	ldr	r1, [pc, #48]	; (800179c <write_char+0x70>)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f7ff ff89 	bl	800168c <setrow>
		row--;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3b01      	subs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	3301      	adds	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbe2      	blt.n	8001758 <write_char+0x2c>
	}
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000

080017a0 <max_clear>:
}



void max_clear(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	e008      	b.n	80017be <max_clear+0x1e>
		setrow(i,0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff6a 	bl	800168c <setrow>
	for (int i=0; i<num*8; i++) 
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b07      	cmp	r3, #7
 80017c2:	ddf3      	ble.n	80017ac <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	e00c      	b.n	80017e4 <max_clear+0x44>
	{
		buffer[i] = 0;
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <max_clear+0x54>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80017d4:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <max_clear+0x58>)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b4f      	cmp	r3, #79	; 0x4f
 80017e8:	ddef      	ble.n	80017ca <max_clear+0x2a>
	}
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000650 	.word	0x20000650
 80017f8:	200006a0 	.word	0x200006a0

080017fc <max_init>:
}



void max_init (uint8_t brightness)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8001806:	2100      	movs	r1, #0
 8001808:	2009      	movs	r0, #9
 800180a:	f7ff fea7 	bl	800155c <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800180e:	2107      	movs	r1, #7
 8001810:	200b      	movs	r0, #11
 8001812:	f7ff fea3 	bl	800155c <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001816:	2101      	movs	r1, #1
 8001818:	200c      	movs	r0, #12
 800181a:	f7ff fe9f 	bl	800155c <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 800181e:	2100      	movs	r1, #0
 8001820:	200f      	movs	r0, #15
 8001822:	f7ff fe9b 	bl	800155c <write_max_cmd>
	
	max_clear ();
 8001826:	f7ff ffbb 	bl	80017a0 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4619      	mov	r1, r3
 800182e:	200a      	movs	r0, #10
 8001830:	f7ff fe94 	bl	800155c <write_max_cmd>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_MspInit+0x44>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_MspInit+0x44>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_MspInit+0x44>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x44>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x44>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001872:	2007      	movs	r0, #7
 8001874:	f001 fa26 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a4:	d124      	bne.n	80018f0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_ADC_MspInit+0x74>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f001 fa2c 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_I2C_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d128      	bne.n	8001970 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_I2C_MspInit+0x80>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_I2C_MspInit+0x80>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_I2C_MspInit+0x80>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001948:	2304      	movs	r3, #4
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_I2C_MspInit+0x84>)
 8001954:	f001 f9f8 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_I2C_MspInit+0x80>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_I2C_MspInit+0x80>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001962:	61d3      	str	r3, [r2, #28]
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_I2C_MspInit+0x80>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d114      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201c      	movs	r0, #28
 80019b4:	f001 f991 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b8:	201c      	movs	r0, #28
 80019ba:	f001 f9aa 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019be:	e010      	b.n	80019e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_TIM_Base_MspInit+0x6c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10b      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_TIM_Base_MspInit+0x68>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40014000 	.word	0x40014000

080019f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x7c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d128      	bne.n	8001a68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_UART_MspInit+0x80>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a46:	230c      	movs	r3, #12
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a56:	2307      	movs	r3, #7
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f001 f970 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40004400 	.word	0x40004400
 8001a74:	40021000 	.word	0x40021000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f8c4 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM2_IRQHandler+0x10>)
 8001ad2:	f003 fc05 	bl	80052e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000514 	.word	0x20000514

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f004 fb44 	bl	800619c <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20004000 	.word	0x20004000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200006f0 	.word	0x200006f0
 8001b48:	20000840 	.word	0x20000840

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b74:	f7ff ffea 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <LoopForever+0xe>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b90:	4c0a      	ldr	r4, [pc, #40]	; (8001bbc <LoopForever+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f004 fb03 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba2:	f7ff f9d7 	bl	8000f54 <main>

08001ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 8001bb4:	08006b30 	.word	0x08006b30
  ldr r2, =_sbss
 8001bb8:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 8001bbc:	20000840 	.word	0x20000840

08001bc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x28>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f001 f875 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fe2c 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f88d 	bl	8002d2e <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f001 f855 	bl	8002cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200003f8 	.word	0x200003f8
 8001c48:	20000400 	.word	0x20000400
 8001c4c:	200003fc 	.word	0x200003fc

08001c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000400 	.word	0x20000400
 8001c74:	200006f4 	.word	0x200006f4

08001c78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200006f4 	.word	0x200006f4

08001c90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000400 	.word	0x20000400

08001cd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b09a      	sub	sp, #104	; 0x68
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e169      	b.n	8001fcc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d176      	bne.n	8001df8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d152      	bne.n	8001db8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fda9 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d13b      	bne.n	8001db8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fdd3 	bl	80028ec <ADC_Disable>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d12f      	bne.n	8001db8 <HAL_ADC_Init+0xe0>
 8001d58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d12b      	bne.n	8001db8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d68:	f023 0302 	bic.w	r3, r3, #2
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d82:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d92:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d94:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <HAL_ADC_Init+0x2fc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a8f      	ldr	r2, [pc, #572]	; (8001fd8 <HAL_ADC_Init+0x300>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9a      	lsrs	r2, r3, #18
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd4:	d110      	bne.n	8001df8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f023 0312 	bic.w	r3, r3, #18
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 80d6 	bne.w	8001fb2 <HAL_ADC_Init+0x2da>
 8001e06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80d1 	bne.w	8001fb2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80c9 	bne.w	8001fb2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e28:	f043 0202 	orr.w	r2, r3, #2
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_ADC_Init+0x304>)
 8001e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_ADC_Init+0x180>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_Init+0x180>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_Init+0x182>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11c      	bne.n	8001e98 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_ADC_Init+0x1a8>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_Init+0x1a8>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_Init+0x1aa>
 8001e80:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e96:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e5b      	ldrb	r3, [r3, #25]
 8001e9c:	035b      	lsls	r3, r3, #13
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_Init+0x1d4>
 8001ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eaa:	e000      	b.n	8001eae <HAL_ADC_Init+0x1d6>
 8001eac:	2200      	movs	r2, #0
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11b      	bne.n	8001f04 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e5b      	ldrb	r3, [r3, #25]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	045a      	lsls	r2, r3, #17
 8001edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee6:	e00d      	b.n	8001f04 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	4313      	orrs	r3, r2
 8001f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d114      	bne.n	8001f54 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f38:	f023 0302 	bic.w	r3, r3, #2
 8001f3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	039a      	lsls	r2, r3, #14
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f50:	4313      	orrs	r3, r2
 8001f52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_ADC_Init+0x308>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f64:	430b      	orrs	r3, r1
 8001f66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f023 010f 	bic.w	r1, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020f 	bic.w	r2, r2, #15
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f023 0303 	bic.w	r3, r3, #3
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb0:	e00a      	b.n	8001fc8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f023 0312 	bic.w	r3, r3, #18
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3768      	adds	r7, #104	; 0x68
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003f8 	.word	0x200003f8
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	50000300 	.word	0x50000300
 8001fe0:	fff0c007 	.word	0xfff0c007

08001fe4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d158      	bne.n	80020b0 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_Start+0x28>
 8002008:	2302      	movs	r3, #2
 800200a:	e054      	b.n	80020b6 <HAL_ADC_Start+0xd2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fc05 	bl	8002824 <ADC_Enable>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d140      	bne.n	80020a6 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800205a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206e:	d106      	bne.n	800207e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	221c      	movs	r2, #28
 8002092:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0204 	orr.w	r2, r2, #4
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020ae:	e001      	b.n	80020b4 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
 80020b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_Stop+0x1a>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e023      	b.n	8002120 <HAL_ADC_Stop+0x62>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020e0:	216c      	movs	r1, #108	; 0x6c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fc68 	bl	80029b8 <ADC_ConversionStop>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d111      	bne.n	8002116 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fbfa 	bl	80028ec <ADC_Disable>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d102      	bne.n	8002144 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800213e:	2308      	movs	r3, #8
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e02e      	b.n	80021a2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002144:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_ADC_PollForConversion+0x178>)
 8002146:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b00      	cmp	r3, #0
 8002152:	d112      	bne.n	800217a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11d      	bne.n	800219e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e08d      	b.n	8002296 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07b      	b.n	8002296 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800219e:	230c      	movs	r3, #12
 80021a0:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80021aa:	f7ff fd65 	bl	8001c78 <HAL_GetTick>
 80021ae:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021b0:	e021      	b.n	80021f6 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d01d      	beq.n	80021f6 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
 80021c0:	f7ff fd5a 	bl	8001c78 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d212      	bcs.n	80021f6 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f043 0204 	orr.w	r2, r3, #4
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e04f      	b.n	8002296 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0d6      	beq.n	80021b2 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800221a:	2b00      	cmp	r3, #0
 800221c:	d131      	bne.n	8002282 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002224:	2b00      	cmp	r3, #0
 8002226:	d12c      	bne.n	8002282 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d125      	bne.n	8002282 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d112      	bne.n	800226a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d112      	bne.n	8002282 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	e00b      	b.n	8002282 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	50000300 	.word	0x50000300

080022a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b09b      	sub	sp, #108	; 0x6c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x22>
 80022de:	2302      	movs	r3, #2
 80022e0:	e295      	b.n	800280e <HAL_ADC_ConfigChannel+0x54e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 8279 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d81c      	bhi.n	800233c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	461a      	mov	r2, r3
 8002316:	231f      	movs	r3, #31
 8002318:	4093      	lsls	r3, r2
 800231a:	43db      	mvns	r3, r3
 800231c:	4019      	ands	r1, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
 800233a:	e063      	b.n	8002404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b09      	cmp	r3, #9
 8002342:	d81e      	bhi.n	8002382 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	3b1e      	subs	r3, #30
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	4019      	ands	r1, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3b1e      	subs	r3, #30
 8002374:	fa00 f203 	lsl.w	r2, r0, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	635a      	str	r2, [r3, #52]	; 0x34
 8002380:	e040      	b.n	8002404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b0e      	cmp	r3, #14
 8002388:	d81e      	bhi.n	80023c8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	3b3c      	subs	r3, #60	; 0x3c
 800239e:	221f      	movs	r2, #31
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4019      	ands	r1, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	3b3c      	subs	r3, #60	; 0x3c
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
 80023c6:	e01d      	b.n	8002404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3b5a      	subs	r3, #90	; 0x5a
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	3b5a      	subs	r3, #90	; 0x5a
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80e5 	bne.w	80025de <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b09      	cmp	r3, #9
 800241a:	d91c      	bls.n	8002456 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	3b1e      	subs	r3, #30
 800242e:	2207      	movs	r2, #7
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	4019      	ands	r1, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6898      	ldr	r0, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	3b1e      	subs	r3, #30
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	e019      	b.n	800248a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6959      	ldr	r1, [r3, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4019      	ands	r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	fa00 f203 	lsl.w	r2, r0, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d84f      	bhi.n	800254c <HAL_ADC_ConfigChannel+0x28c>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_ADC_ConfigChannel+0x1f4>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024c5 	.word	0x080024c5
 80024b8:	080024e7 	.word	0x080024e7
 80024bc:	08002509 	.word	0x08002509
 80024c0:	0800252b 	.word	0x0800252b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ca:	4b97      	ldr	r3, [pc, #604]	; (8002728 <HAL_ADC_ConfigChannel+0x468>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	0691      	lsls	r1, r2, #26
 80024d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024d6:	430a      	orrs	r2, r1
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024e4:	e07b      	b.n	80025de <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_ADC_ConfigChannel+0x468>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	0691      	lsls	r1, r2, #26
 80024f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024f8:	430a      	orrs	r2, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002504:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002506:	e06a      	b.n	80025de <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800250e:	4b86      	ldr	r3, [pc, #536]	; (8002728 <HAL_ADC_ConfigChannel+0x468>)
 8002510:	4013      	ands	r3, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	0691      	lsls	r1, r2, #26
 8002518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002526:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002528:	e059      	b.n	80025de <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002530:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <HAL_ADC_ConfigChannel+0x468>)
 8002532:	4013      	ands	r3, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	0691      	lsls	r1, r2, #26
 800253a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253c:	430a      	orrs	r2, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002548:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800254a:	e048      	b.n	80025de <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	429a      	cmp	r2, r3
 800255e:	d107      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800256e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002592:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	069b      	lsls	r3, r3, #26
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025dc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x33e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x33e>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_ADC_ConfigChannel+0x340>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 80fe 	bne.w	8002802 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d00f      	beq.n	800262e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43da      	mvns	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	400a      	ands	r2, r1
 8002628:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800262c:	e049      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d91c      	bls.n	800268a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	3b1b      	subs	r3, #27
 8002662:	2207      	movs	r2, #7
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	4019      	ands	r1, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6898      	ldr	r0, [r3, #8]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	3b1b      	subs	r3, #27
 800267c:	fa00 f203 	lsl.w	r2, r0, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	619a      	str	r2, [r3, #24]
 8002688:	e01b      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6959      	ldr	r1, [r3, #20]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	2207      	movs	r2, #7
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4019      	ands	r1, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6898      	ldr	r0, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_ADC_ConfigChannel+0x46c>)
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d105      	bne.n	80026da <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026de:	2b11      	cmp	r3, #17
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	f040 8085 	bne.w	8002802 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80026f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002700:	2b00      	cmp	r3, #0
 8002702:	d17e      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10c      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x470>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x470>
 8002724:	2301      	movs	r3, #1
 8002726:	e004      	b.n	8002732 <HAL_ADC_ConfigChannel+0x472>
 8002728:	83fff000 	.word	0x83fff000
 800272c:	50000300 	.word	0x50000300
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d150      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002736:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x498>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x498>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_ADC_ConfigChannel+0x49a>
 8002758:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800275a:	2b00      	cmp	r3, #0
 800275c:	d13c      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d11d      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x4e2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276e:	d118      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_ADC_ConfigChannel+0x55c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_ADC_ConfigChannel+0x560>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9a      	lsrs	r2, r3, #18
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002792:	e002      	b.n	800279a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3b01      	subs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027a0:	e02e      	b.n	8002800 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d10b      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x502>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c0:	e01e      	b.n	8002800 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d11a      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027d6:	e013      	b.n	8002800 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027ea:	e00a      	b.n	8002802 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027fe:	e000      	b.n	8002802 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002800:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800280a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800280e:	4618      	mov	r0, r3
 8002810:	376c      	adds	r7, #108	; 0x6c
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	200003f8 	.word	0x200003f8
 8002820:	431bde83 	.word	0x431bde83

08002824 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <ADC_Enable+0x2c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <ADC_Enable+0x2c>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <ADC_Enable+0x2e>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d143      	bne.n	80028de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <ADC_Enable+0xc4>)
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e02f      	b.n	80028e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002890:	f7ff f9f2 	bl	8001c78 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002896:	e01b      	b.n	80028d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002898:	f7ff f9ee 	bl	8001c78 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d914      	bls.n	80028d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00d      	beq.n	80028d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e007      	b.n	80028e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d1dc      	bne.n	8002898 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	8000003f 	.word	0x8000003f

080028ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <ADC_Disable+0x2c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <ADC_Disable+0x2c>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <ADC_Disable+0x2e>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d047      	beq.n	80029ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030d 	and.w	r3, r3, #13
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10f      	bne.n	800294c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0202 	orr.w	r2, r2, #2
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2203      	movs	r2, #3
 8002942:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002944:	f7ff f998 	bl	8001c78 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800294a:	e029      	b.n	80029a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0210 	orr.w	r2, r3, #16
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e023      	b.n	80029b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002968:	f7ff f986 	bl	8001c78 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d914      	bls.n	80029a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10d      	bne.n	80029a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e007      	b.n	80029b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d0dc      	beq.n	8002968 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 809b 	beq.w	8002b14 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ec:	d12a      	bne.n	8002a44 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d126      	bne.n	8002a44 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d122      	bne.n	8002a44 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80029fe:	230c      	movs	r3, #12
 8002a00:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a02:	e014      	b.n	8002a2e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <ADC_ConversionStop+0x168>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d90d      	bls.n	8002a28 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e076      	b.n	8002b16 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d1e3      	bne.n	8002a04 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b60      	cmp	r3, #96	; 0x60
 8002a48:	d015      	beq.n	8002a76 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d10e      	bne.n	8002a76 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0210 	orr.w	r2, r2, #16
 8002a74:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d015      	beq.n	8002aa8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d10e      	bne.n	8002aa8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b60      	cmp	r3, #96	; 0x60
 8002aac:	d005      	beq.n	8002aba <ADC_ConversionStop+0x102>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b6c      	cmp	r3, #108	; 0x6c
 8002ab2:	d105      	bne.n	8002ac0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	617b      	str	r3, [r7, #20]
        break;
 8002ab8:	e005      	b.n	8002ac6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002aba:	2308      	movs	r3, #8
 8002abc:	617b      	str	r3, [r7, #20]
        break;
 8002abe:	e002      	b.n	8002ac6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
        break;
 8002ac4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ac6:	f7ff f8d7 	bl	8001c78 <HAL_GetTick>
 8002aca:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002acc:	e01b      	b.n	8002b06 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ace:	f7ff f8d3 	bl	8001c78 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	d914      	bls.n	8002b06 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e007      	b.n	8002b16 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1dc      	bne.n	8002ace <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	000993ff 	.word	0x000993ff

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d56:	e14e      	b.n	8002ff6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8140 	beq.w	8002ff0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d005      	beq.n	8002d88 <HAL_GPIO_Init+0x40>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d130      	bne.n	8002dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0201 	and.w	r2, r3, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d017      	beq.n	8002e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d123      	bne.n	8002e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	6939      	ldr	r1, [r7, #16]
 8002e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0203 	and.w	r2, r3, #3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 809a 	beq.w	8002ff0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebc:	4b55      	ldr	r3, [pc, #340]	; (8003014 <HAL_GPIO_Init+0x2cc>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a54      	ldr	r2, [pc, #336]	; (8003014 <HAL_GPIO_Init+0x2cc>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b52      	ldr	r3, [pc, #328]	; (8003014 <HAL_GPIO_Init+0x2cc>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002efe:	d013      	beq.n	8002f28 <HAL_GPIO_Init+0x1e0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a46      	ldr	r2, [pc, #280]	; (800301c <HAL_GPIO_Init+0x2d4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00d      	beq.n	8002f24 <HAL_GPIO_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a45      	ldr	r2, [pc, #276]	; (8003020 <HAL_GPIO_Init+0x2d8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <HAL_GPIO_Init+0x1d8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a44      	ldr	r2, [pc, #272]	; (8003024 <HAL_GPIO_Init+0x2dc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_GPIO_Init+0x1d4>
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x1e2>
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	e004      	b.n	8002f2a <HAL_GPIO_Init+0x1e2>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e002      	b.n	8002f2a <HAL_GPIO_Init+0x1e2>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_GPIO_Init+0x1e2>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f3a:	4937      	ldr	r1, [pc, #220]	; (8003018 <HAL_GPIO_Init+0x2d0>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f6c:	4a2e      	ldr	r2, [pc, #184]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f96:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fea:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_GPIO_Init+0x2e0>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f aea9 	bne.w	8002d58 <HAL_GPIO_Init+0x10>
  }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e001      	b.n	800304e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003078:	e002      	b.n	8003080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e081      	b.n	80031a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fc22 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	e006      	b.n	8003114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d104      	bne.n	8003126 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	460b      	mov	r3, r1
 80031ba:	817b      	strh	r3, [r7, #10]
 80031bc:	4613      	mov	r3, r2
 80031be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	f040 80da 	bne.w	8003382 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x30>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0d3      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe fd48 	bl	8001c78 <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2319      	movs	r3, #25
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8f0 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0be      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2221      	movs	r2, #33	; 0x21
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2210      	movs	r2, #16
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	893a      	ldrh	r2, [r7, #8]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2bff      	cmp	r3, #255	; 0xff
 8003236:	d90e      	bls.n	8003256 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	b2da      	uxtb	r2, r3
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_I2C_Master_Transmit+0x1e0>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa7e 	bl	8003750 <I2C_TransferConfig>
 8003254:	e06c      	b.n	8003330 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	b2da      	uxtb	r2, r3
 8003266:	8979      	ldrh	r1, [r7, #10]
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_I2C_Master_Transmit+0x1e0>)
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa6d 	bl	8003750 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003276:	e05b      	b.n	8003330 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6a39      	ldr	r1, [r7, #32]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f8fc 	bl	800347a <I2C_WaitOnTXISFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e07b      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d034      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x184>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d130      	bne.n	8003330 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f87f 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04d      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	; 0xff
 80032f0:	d90e      	bls.n	8003310 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	; 0xff
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	2300      	movs	r3, #0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa21 	bl	8003750 <I2C_TransferConfig>
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	b2da      	uxtb	r2, r3
 8003320:	8979      	ldrh	r1, [r7, #10]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa10 	bl	8003750 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d19e      	bne.n	8003278 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f8e2 	bl	8003508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01a      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2220      	movs	r2, #32
 8003354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_I2C_Master_Transmit+0x1e4>)
 8003362:	400b      	ands	r3, r1
 8003364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	80002000 	.word	0x80002000
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	619a      	str	r2, [r3, #24]
  }
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e031      	b.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d02d      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fc3f 	bl	8001c78 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d122      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d113      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	429a      	cmp	r2, r3
 800346e:	d0be      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003486:	e033      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f87f 	bl	8003590 <I2C_IsErrorOccurred>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e031      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d025      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe fbe8 	bl	8001c78 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11a      	bne.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d013      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d1c4      	bne.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003514:	e02f      	b.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f838 	bl	8003590 <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02d      	b.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fba5 	bl	8001c78 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11a      	bne.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d013      	beq.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d1c8      	bne.n	8003516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d068      	beq.n	800368e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c4:	e049      	b.n	800365a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d045      	beq.n	800365a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fb53 	bl	8001c78 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_IsErrorOccurred+0x54>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13a      	bne.n	800365a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003606:	d121      	bne.n	800364c <I2C_IsErrorOccurred+0xbc>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360e:	d01d      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d01a      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003624:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003626:	f7fe fb27 	bl	8001c78 <HAL_GetTick>
 800362a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e00e      	b.n	800364c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362e:	f7fe fb23 	bl	8001c78 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b19      	cmp	r3, #25
 800363a:	d907      	bls.n	800364c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800364a:	e006      	b.n	800365a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b20      	cmp	r3, #32
 8003658:	d1e9      	bne.n	800362e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d003      	beq.n	8003670 <I2C_IsErrorOccurred+0xe0>
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0aa      	beq.n	80035c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2220      	movs	r2, #32
 800367e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01c      	beq.n	800373e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fe45 	bl	8003394 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <I2C_IsErrorOccurred+0x1bc>)
 8003716:	400b      	ands	r3, r1
 8003718:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003742:	4618      	mov	r0, r3
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	4613      	mov	r3, r2
 8003760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003768:	7a7b      	ldrb	r3, [r7, #9]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003770:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4313      	orrs	r3, r2
 800377a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	0d5b      	lsrs	r3, r3, #21
 800378a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <I2C_TransferConfig+0x60>)
 8003790:	430b      	orrs	r3, r1
 8003792:	43db      	mvns	r3, r3
 8003794:	ea02 0103 	and.w	r1, r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	03ff63ff 	.word	0x03ff63ff

080037b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d138      	bne.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e032      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d139      	bne.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800386a:	2302      	movs	r3, #2
 800386c:	e033      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2224      	movs	r2, #36	; 0x24
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800389c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f001 b823 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 817d 	beq.w	8003c1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003920:	4bbc      	ldr	r3, [pc, #752]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00c      	beq.n	8003946 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800392c:	4bb9      	ldr	r3, [pc, #740]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d15c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x10e>
 8003938:	4bb6      	ldr	r3, [pc, #728]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d155      	bne.n	80039f2 <HAL_RCC_OscConfig+0x10e>
 8003946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800394a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800395a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x94>
 8003972:	4ba8      	ldr	r3, [pc, #672]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e015      	b.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 8003978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800397c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800398c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003990:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003994:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80039a0:	4b9c      	ldr	r3, [pc, #624]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80039ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80039b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80039bc:	fab2 f282 	clz	r2, r2
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f042 0220 	orr.w	r2, r2, #32
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f002 021f 	and.w	r2, r2, #31
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f202 	lsl.w	r2, r1, r2
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 811f 	beq.w	8003c18 <HAL_RCC_OscConfig+0x334>
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 8116 	bne.w	8003c18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f000 bfaf 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12e>
 8003a04:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a82      	ldr	r2, [pc, #520]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e036      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x158>
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7b      	ldr	r2, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b79      	ldr	r3, [pc, #484]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a78      	ldr	r2, [pc, #480]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e021      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x184>
 8003a4e:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6d      	ldr	r2, [pc, #436]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a69      	ldr	r2, [pc, #420]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a66      	ldr	r2, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a80:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f023 020f 	bic.w	r2, r3, #15
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	495f      	ldr	r1, [pc, #380]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d059      	beq.n	8003b5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe f8e5 	bl	8001c78 <HAL_GetTick>
 8003aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fe f8e0 	bl	8001c78 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d902      	bls.n	8003aca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	f000 bf43 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ace:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003ade:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_OscConfig+0x218>
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e015      	b.n	8003b28 <HAL_RCC_OscConfig+0x244>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003b24:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f042 0220 	orr.w	r2, r2, #32
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f002 021f 	and.w	r2, r2, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ab      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x1d0>
 8003b5c:	e05d      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fe f88b 	bl	8001c78 <HAL_GetTick>
 8003b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fe f886 	bl	8001c78 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d902      	bls.n	8003b7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	f000 bee9 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2cc>
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e015      	b.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
 8003bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003bcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003be4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003be8:	fa92 f2a2 	rbit	r2, r2
 8003bec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003bf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f042 0220 	orr.w	r2, r2, #32
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f002 021f 	and.w	r2, r2, #31
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ab      	bne.n	8003b68 <HAL_RCC_OscConfig+0x284>
 8003c10:	e003      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 817d 	beq.w	8003f2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c30:	4ba6      	ldr	r3, [pc, #664]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c3c:	4ba3      	ldr	r3, [pc, #652]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d172      	bne.n	8003d2e <HAL_RCC_OscConfig+0x44a>
 8003c48:	4ba0      	ldr	r3, [pc, #640]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d16c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x44a>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3a0>
 8003c7e:	4b93      	ldr	r3, [pc, #588]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e013      	b.n	8003cac <HAL_RCC_OscConfig+0x3c8>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c96:	2302      	movs	r3, #2
 8003c98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ca8:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2202      	movs	r2, #2
 8003cae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003cb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003cbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x410>
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f000 be2e 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	21f8      	movs	r1, #248	; 0xf8
 8003d0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d12:	fa91 f1a1 	rbit	r1, r1
 8003d16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d1e:	fab1 f181 	clz	r1, r1
 8003d22:	b2c9      	uxtb	r1, r1
 8003d24:	408b      	lsls	r3, r1
 8003d26:	4969      	ldr	r1, [pc, #420]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2c:	e0fd      	b.n	8003f2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8088 	beq.w	8003e50 <HAL_RCC_OscConfig+0x56c>
 8003d40:	2301      	movs	r3, #1
 8003d42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd ff84 	bl	8001c78 <HAL_GetTick>
 8003d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd ff7f 	bl	8001c78 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	f000 bde2 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d102      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
 8003db6:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	e013      	b.n	8003de4 <HAL_RCC_OscConfig+0x500>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003de0:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2202      	movs	r2, #2
 8003de6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003dee:	fa92 f2a2 	rbit	r2, r2
 8003df2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0af      	beq.n	8003d76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	21f8      	movs	r1, #248	; 0xf8
 8003e2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e34:	fa91 f1a1 	rbit	r1, r1
 8003e38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e40:	fab1 f181 	clz	r1, r1
 8003e44:	b2c9      	uxtb	r1, r1
 8003e46:	408b      	lsls	r3, r1
 8003e48:	4920      	ldr	r1, [pc, #128]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
 8003e4e:	e06c      	b.n	8003f2a <HAL_RCC_OscConfig+0x646>
 8003e50:	2301      	movs	r3, #1
 8003e52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fefc 	bl	8001c78 <HAL_GetTick>
 8003e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fef7 	bl	8001c78 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d902      	bls.n	8003e9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f000 bd5a 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d104      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5ec>
 8003ec6:	4b01      	ldr	r3, [pc, #4]	; (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	e015      	b.n	8003ef8 <HAL_RCC_OscConfig+0x614>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ef4:	4bc8      	ldr	r3, [pc, #800]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f02:	fa92 f2a2 	rbit	r2, r2
 8003f06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003f0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f0e:	fab2 f282 	clz	r2, r2
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f042 0220 	orr.w	r2, r2, #32
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f002 021f 	and.w	r2, r2, #31
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ad      	bne.n	8003e86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8110 	beq.w	8004160 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d079      	beq.n	8004044 <HAL_RCC_OscConfig+0x760>
 8003f50:	2301      	movs	r3, #1
 8003f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4bab      	ldr	r3, [pc, #684]	; (800421c <HAL_RCC_OscConfig+0x938>)
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	2301      	movs	r3, #1
 8003f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fe7d 	bl	8001c78 <HAL_GetTick>
 8003f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fd fe78 	bl	8001c78 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d902      	bls.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f000 bcdb 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	fa93 f2a3 	rbit	r2, r3
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd8:	2202      	movs	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ff2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff4:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 8003ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004000:	2102      	movs	r1, #2
 8004002:	6019      	str	r1, [r3, #0]
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f1a3 	rbit	r1, r3
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800401a:	6019      	str	r1, [r3, #0]
  return result;
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0a0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x6a0>
 8004042:	e08d      	b.n	8004160 <HAL_RCC_OscConfig+0x87c>
 8004044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004048:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fa93 f2a3 	rbit	r2, r3
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004066:	601a      	str	r2, [r3, #0]
  return result;
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004070:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_OscConfig+0x938>)
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd fdf7 	bl	8001c78 <HAL_GetTick>
 800408a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd fdf2 	bl	8001c78 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d902      	bls.n	80040a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	f000 bc55 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040ae:	2202      	movs	r2, #2
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040d2:	2202      	movs	r2, #2
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f6:	2202      	movs	r2, #2
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004110:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 8004114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800411e:	2102      	movs	r1, #2
 8004120:	6019      	str	r1, [r3, #0]
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f1a3 	rbit	r1, r3
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004138:	6019      	str	r1, [r3, #0]
  return result;
 800413a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d197      	bne.n	8004090 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 81a1 	beq.w	80044b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80041ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11a      	bne.n	80041f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7fd fd53 	bl	8001c78 <HAL_GetTick>
 80041d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	e009      	b.n	80041ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd fd4e 	bl	8001c78 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	; 0x64
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e3b1      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ef      	beq.n	80041d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <HAL_RCC_OscConfig+0x940>
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4a02      	ldr	r2, [pc, #8]	; (8004218 <HAL_RCC_OscConfig+0x934>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6213      	str	r3, [r2, #32]
 8004214:	e03c      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	10908120 	.word	0x10908120
 8004220:	40007000 	.word	0x40007000
 8004224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x96a>
 8004234:	4bc1      	ldr	r3, [pc, #772]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4ac0      	ldr	r2, [pc, #768]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	4bbe      	ldr	r3, [pc, #760]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4abd      	ldr	r2, [pc, #756]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004246:	f023 0304 	bic.w	r3, r3, #4
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e020      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x994>
 800425e:	4bb7      	ldr	r3, [pc, #732]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4ab6      	ldr	r2, [pc, #728]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004264:	f043 0304 	orr.w	r3, r3, #4
 8004268:	6213      	str	r3, [r2, #32]
 800426a:	4bb4      	ldr	r3, [pc, #720]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4ab3      	ldr	r2, [pc, #716]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 8004278:	4bb0      	ldr	r3, [pc, #704]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4aaf      	ldr	r2, [pc, #700]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	4bad      	ldr	r3, [pc, #692]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4aac      	ldr	r2, [pc, #688]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8081 	beq.w	80043a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fd fce9 	bl	8001c78 <HAL_GetTick>
 80042a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd fce4 	bl	8001c78 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e345      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042f0:	2202      	movs	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800430a:	601a      	str	r2, [r3, #0]
  return result;
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d102      	bne.n	8004330 <HAL_RCC_OscConfig+0xa4c>
 800432a:	4b84      	ldr	r3, [pc, #528]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0xa74>
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b79      	ldr	r3, [pc, #484]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800435c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004360:	2102      	movs	r1, #2
 8004362:	6011      	str	r1, [r2, #0]
 8004364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004368:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	fa92 f1a2 	rbit	r1, r2
 8004372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004376:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800437a:	6011      	str	r1, [r2, #0]
  return result;
 800437c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004380:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f002 021f 	and.w	r2, r2, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d084      	beq.n	80042ac <HAL_RCC_OscConfig+0x9c8>
 80043a2:	e07f      	b.n	80044a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7fd fc68 	bl	8001c78 <HAL_GetTick>
 80043a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fd fc63 	bl	8001c78 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e2c4      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	fa93 f2a3 	rbit	r2, r3
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043f2:	2202      	movs	r2, #2
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f2a3 	rbit	r2, r3
 8004404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004408:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800440c:	601a      	str	r2, [r3, #0]
  return result;
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d102      	bne.n	8004432 <HAL_RCC_OscConfig+0xb4e>
 800442c:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	e013      	b.n	800445a <HAL_RCC_OscConfig+0xb76>
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800443a:	2202      	movs	r2, #2
 800443c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004450:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800445e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004462:	2102      	movs	r1, #2
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800446a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	fa92 f1a2 	rbit	r1, r2
 8004474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004478:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800447c:	6011      	str	r1, [r2, #0]
  return result;
 800447e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004482:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	fab2 f282 	clz	r2, r2
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f002 021f 	and.w	r2, r2, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d184      	bne.n	80043ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8242 	beq.w	800494e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_RCC_OscConfig+0xc58>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	f000 8213 	beq.w	80048fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f040 8162 	bne.w	80047ae <HAL_RCC_OscConfig+0xeca>
 80044ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	fa93 f2a3 	rbit	r2, r3
 8004506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800450e:	601a      	str	r2, [r3, #0]
  return result;
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004518:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fd fba2 	bl	8001c78 <HAL_GetTick>
 8004534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004538:	e00c      	b.n	8004554 <HAL_RCC_OscConfig+0xc70>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fb9a 	bl	8001c78 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1fd      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 8004554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004558:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800455c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004566:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	fa93 f2a3 	rbit	r2, r3
 8004570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004574:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004578:	601a      	str	r2, [r3, #0]
  return result;
 800457a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_RCC_OscConfig+0xcba>
 8004598:	4bb0      	ldr	r3, [pc, #704]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	e027      	b.n	80045ee <HAL_RCC_OscConfig+0xd0a>
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	fa93 f2a3 	rbit	r2, r3
 80045ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	4b9c      	ldr	r3, [pc, #624]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045fa:	6011      	str	r1, [r2, #0]
 80045fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004600:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	fa92 f1a2 	rbit	r1, r2
 800460a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800460e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004612:	6011      	str	r1, [r2, #0]
  return result;
 8004614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004618:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	fab2 f282 	clz	r2, r2
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	f042 0220 	orr.w	r2, r2, #32
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	f002 021f 	and.w	r2, r2, #31
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d182      	bne.n	8004540 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	430b      	orrs	r3, r1
 800465c:	497f      	ldr	r1, [pc, #508]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
 8004662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004666:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800466a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800466e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004674:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004682:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004686:	601a      	str	r2, [r3, #0]
  return result;
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004690:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800469c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd fae6 	bl	8001c78 <HAL_GetTick>
 80046ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b0:	e009      	b.n	80046c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fd fae1 	bl	8001c78 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e144      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046ea:	601a      	str	r2, [r3, #0]
  return result;
 80046ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_RCC_OscConfig+0xe2c>
 800470a:	4b54      	ldr	r3, [pc, #336]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e027      	b.n	8004760 <HAL_RCC_OscConfig+0xe7c>
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	fa93 f2a3 	rbit	r2, r3
 800472c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004730:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800473e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	fa93 f2a3 	rbit	r2, r3
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004764:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004772:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	fa92 f1a2 	rbit	r1, r2
 800477c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004780:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004784:	6011      	str	r1, [r2, #0]
  return result;
 8004786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800478a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	fab2 f282 	clz	r2, r2
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	f002 021f 	and.w	r2, r2, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f202 	lsl.w	r2, r1, r2
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d082      	beq.n	80046b2 <HAL_RCC_OscConfig+0xdce>
 80047ac:	e0cf      	b.n	800494e <HAL_RCC_OscConfig+0x106a>
 80047ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80047b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	fa93 f2a3 	rbit	r2, r3
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047d2:	601a      	str	r2, [r3, #0]
  return result;
 80047d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80047dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fa40 	bl	8001c78 <HAL_GetTick>
 80047f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fc:	e009      	b.n	8004812 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fd fa3b 	bl	8001c78 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e09e      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800481a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	fa93 f2a3 	rbit	r2, r3
 800482e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004832:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004836:	601a      	str	r2, [r3, #0]
  return result;
 8004838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d104      	bne.n	8004860 <HAL_RCC_OscConfig+0xf7c>
 8004856:	4b01      	ldr	r3, [pc, #4]	; (800485c <HAL_RCC_OscConfig+0xf78>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	e029      	b.n	80048b0 <HAL_RCC_OscConfig+0xfcc>
 800485c:	40021000 	.word	0x40021000
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800486c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f2a3 	rbit	r2, r3
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800488e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f2a3 	rbit	r2, r3
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCC_OscConfig+0x1078>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80048b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	fa92 f1a2 	rbit	r1, r2
 80048cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048d4:	6011      	str	r1, [r2, #0]
  return result;
 80048d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	fab2 f282 	clz	r2, r2
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f042 0220 	orr.w	r2, r2, #32
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f202 	lsl.w	r2, r1, r2
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d180      	bne.n	80047fe <HAL_RCC_OscConfig+0xf1a>
 80048fc:	e027      	b.n	800494e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e01e      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCC_OscConfig+0x1078>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800491a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800491e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	429a      	cmp	r2, r3
 8004930:	d10b      	bne.n	800494a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000

08004960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b09e      	sub	sp, #120	; 0x78
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e162      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b90      	ldr	r3, [pc, #576]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b8d      	ldr	r3, [pc, #564]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 0207 	bic.w	r2, r3, #7
 800498e:	498b      	ldr	r1, [pc, #556]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b89      	ldr	r3, [pc, #548]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e14a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b82      	ldr	r3, [pc, #520]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	497f      	ldr	r1, [pc, #508]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80dc 	beq.w	8004b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d13c      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xf6>
 80049dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xa6>
 8004a00:	4b6f      	ldr	r3, [pc, #444]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e00f      	b.n	8004a26 <HAL_RCC_ClockConfig+0xc6>
 8004a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	667b      	str	r3, [r7, #100]	; 0x64
 8004a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a18:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a22:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2e:	fa92 f2a2 	rbit	r2, r2
 8004a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a36:	fab2 f282 	clz	r2, r2
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	f042 0220 	orr.w	r2, r2, #32
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	f002 021f 	and.w	r2, r2, #31
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d17b      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0f3      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d13c      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x178>
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x128>
 8004a82:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	e00f      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x148>
 8004a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
 8004a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa4:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8004aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab0:	fa92 f2a2 	rbit	r2, r2
 8004ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab8:	fab2 f282 	clz	r2, r2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f042 0220 	orr.w	r2, r2, #32
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	f002 021f 	and.w	r2, r2, #31
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f202 	lsl.w	r2, r1, r2
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d13a      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0b2      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d102      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
 8004afa:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	e00d      	b.n	8004b1c <HAL_RCC_ClockConfig+0x1bc>
 8004b00:	2302      	movs	r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	61ba      	str	r2, [r7, #24]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	617a      	str	r2, [r7, #20]
  return result;
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	fab2 f282 	clz	r2, r2
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f002 021f 	and.w	r2, r2, #31
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e079      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	491a      	ldr	r1, [pc, #104]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fd f88c 	bl	8001c78 <HAL_GetTick>
 8004b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fd f888 	bl	8001c78 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e061      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d214      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4906      	ldr	r1, [pc, #24]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e040      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
 8004bbc:	40022000 	.word	0x40022000
 8004bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	491a      	ldr	r1, [pc, #104]	; (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bee:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4912      	ldr	r1, [pc, #72]	; (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c02:	f000 f829 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004c06:	4601      	mov	r1, r0
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c10:	22f0      	movs	r2, #240	; 0xf0
 8004c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fa92 f2a2 	rbit	r2, r2
 8004c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	40d3      	lsrs	r3, r2
 8004c26:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCC_ClockConfig+0x2ec>)
 8004c28:	5cd3      	ldrb	r3, [r2, r3]
 8004c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <HAL_RCC_ClockConfig+0x2f0>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_ClockConfig+0x2f4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc ffda 	bl	8001bf0 <HAL_InitTick>
  
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3778      	adds	r7, #120	; 0x78
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08006abc 	.word	0x08006abc
 8004c50:	200003f8 	.word	0x200003f8
 8004c54:	200003fc 	.word	0x200003fc

08004c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b08b      	sub	sp, #44	; 0x2c
 8004c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x30>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x36>
 8004c86:	e03c      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c8a:	623b      	str	r3, [r7, #32]
      break;
 8004c8c:	e03c      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	fa92 f2a2 	rbit	r2, r2
 8004ca0:	607a      	str	r2, [r7, #4]
  return result;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	fab2 f282 	clz	r2, r2
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	40d3      	lsrs	r3, r2
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004cb2:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	220f      	movs	r2, #15
 8004cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	fa92 f2a2 	rbit	r2, r2
 8004cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	40d3      	lsrs	r3, r2
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e004      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	623b      	str	r3, [r7, #32]
      break;
 8004d00:	e002      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d04:	623b      	str	r3, [r7, #32]
      break;
 8004d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	372c      	adds	r7, #44	; 0x2c
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	007a1200 	.word	0x007a1200
 8004d20:	08006ad4 	.word	0x08006ad4
 8004d24:	08006ae4 	.word	0x08006ae4
 8004d28:	003d0900 	.word	0x003d0900

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	200003f8 	.word	0x200003f8

08004d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d4a:	f7ff ffef 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d4e:	4601      	mov	r1, r0
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	fa92 f2a2 	rbit	r2, r2
 8004d64:	603a      	str	r2, [r7, #0]
  return result;
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	fab2 f282 	clz	r2, r2
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	40d3      	lsrs	r3, r2
 8004d70:	4a04      	ldr	r2, [pc, #16]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d72:	5cd3      	ldrb	r3, [r2, r3]
 8004d74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	08006acc 	.word	0x08006acc

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d8e:	f7ff ffcd 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d92:	4601      	mov	r1, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	fa92 f2a2 	rbit	r2, r2
 8004da8:	603a      	str	r2, [r7, #0]
  return result;
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	fab2 f282 	clz	r2, r2
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	40d3      	lsrs	r3, r2
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	08006acc 	.word	0x08006acc

08004dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b092      	sub	sp, #72	; 0x48
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80d4 	beq.w	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df0:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10e      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	61d3      	str	r3, [r2, #28]
 8004e08:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b45      	ldr	r3, [pc, #276]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b42      	ldr	r3, [pc, #264]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a41      	ldr	r2, [pc, #260]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fc ff21 	bl	8001c78 <HAL_GetTick>
 8004e36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fc ff1d 	bl	8001c78 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	; 0x64
 8004e46:	d901      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e14b      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e58:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8084 	beq.w	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d07c      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e78:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04b      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fc fecd 	bl	8001c78 <HAL_GetTick>
 8004ede:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fc fec9 	bl	8001c78 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0f5      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8004f10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d108      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f26:	4b01      	ldr	r3, [pc, #4]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	e00d      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
 8004f34:	10908100 	.word	0x10908100
 8004f38:	2302      	movs	r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	4b69      	ldr	r3, [pc, #420]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2202      	movs	r2, #2
 8004f4a:	613a      	str	r2, [r7, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	fa92 f2a2 	rbit	r2, r2
 8004f52:	60fa      	str	r2, [r7, #12]
  return result;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	fab2 f282 	clz	r2, r2
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	f002 021f 	and.w	r2, r2, #31
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0b7      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f72:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	495b      	ldr	r1, [pc, #364]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b57      	ldr	r3, [pc, #348]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	4a56      	ldr	r2, [pc, #344]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa4:	4b51      	ldr	r3, [pc, #324]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f023 0203 	bic.w	r2, r3, #3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	494e      	ldr	r1, [pc, #312]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fc2:	4b4a      	ldr	r3, [pc, #296]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4947      	ldr	r1, [pc, #284]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004fe0:	4b42      	ldr	r3, [pc, #264]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	493f      	ldr	r1, [pc, #252]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f023 0220 	bic.w	r2, r3, #32
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4938      	ldr	r1, [pc, #224]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800500c:	4313      	orrs	r3, r2
 800500e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4930      	ldr	r1, [pc, #192]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800502a:	4313      	orrs	r3, r2
 800502c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800503a:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	4929      	ldr	r1, [pc, #164]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	4921      	ldr	r1, [pc, #132]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005066:	4313      	orrs	r3, r2
 8005068:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	491a      	ldr	r1, [pc, #104]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005084:	4313      	orrs	r3, r2
 8005086:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005094:	4b15      	ldr	r3, [pc, #84]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	4912      	ldr	r1, [pc, #72]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	490b      	ldr	r1, [pc, #44]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3748      	adds	r7, #72	; 0x48
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000

080050f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e049      	b.n	8005196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc fc34 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fae6 	bl	8005700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e033      	b.n	8005220 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_TIM_Base_Start+0x8c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIM_Base_Start+0x3e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d004      	beq.n	80051de <HAL_TIM_Base_Start+0x3e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a15      	ldr	r2, [pc, #84]	; (8005230 <HAL_TIM_Base_Start+0x90>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d115      	bne.n	800520a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <HAL_TIM_Base_Start+0x94>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	d015      	beq.n	800521c <HAL_TIM_Base_Start+0x7c>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f6:	d011      	beq.n	800521c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	e008      	b.n	800521c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e000      	b.n	800521e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40014000 	.word	0x40014000
 8005234:	00010007 	.word	0x00010007

08005238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e03b      	b.n	80052c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x4e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d004      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x4e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d115      	bne.n	80052b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_TIM_Base_Start_IT+0xa4>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d015      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x8c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d011      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	e008      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40014000 	.word	0x40014000
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0202 	mvn.w	r2, #2
 800530c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9ce 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9c0 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f9d1 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0204 	mvn.w	r2, #4
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9a4 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f996 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9a7 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b08      	cmp	r3, #8
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0208 	mvn.w	r2, #8
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f97a 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f96c 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f97d 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0210 	mvn.w	r2, #16
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2208      	movs	r2, #8
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f950 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f942 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f953 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10e      	bne.n	8005464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0201 	mvn.w	r2, #1
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fb fcb2 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fab0 	bl	80059f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d10e      	bne.n	80054be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b80      	cmp	r3, #128	; 0x80
 80054ac:	d107      	bne.n	80054be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 faa3 	bl	8005a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d10e      	bne.n	80054ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f901 	bl	80056ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d10e      	bne.n	8005516 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d107      	bne.n	8005516 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0220 	mvn.w	r2, #32
 800550e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa63 	bl	80059dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_TIM_ConfigClockSource+0x1c>
 8005536:	2302      	movs	r3, #2
 8005538:	e0b6      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x18a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005558:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005564:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	d03e      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0xd8>
 8005578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557c:	f200 8087 	bhi.w	800568e <HAL_TIM_ConfigClockSource+0x170>
 8005580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005584:	f000 8086 	beq.w	8005694 <HAL_TIM_ConfigClockSource+0x176>
 8005588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558c:	d87f      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 800558e:	2b70      	cmp	r3, #112	; 0x70
 8005590:	d01a      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0xaa>
 8005592:	2b70      	cmp	r3, #112	; 0x70
 8005594:	d87b      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 8005596:	2b60      	cmp	r3, #96	; 0x60
 8005598:	d050      	beq.n	800563c <HAL_TIM_ConfigClockSource+0x11e>
 800559a:	2b60      	cmp	r3, #96	; 0x60
 800559c:	d877      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 800559e:	2b50      	cmp	r3, #80	; 0x50
 80055a0:	d03c      	beq.n	800561c <HAL_TIM_ConfigClockSource+0xfe>
 80055a2:	2b50      	cmp	r3, #80	; 0x50
 80055a4:	d873      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d058      	beq.n	800565c <HAL_TIM_ConfigClockSource+0x13e>
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d86f      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 80055ae:	2b30      	cmp	r3, #48	; 0x30
 80055b0:	d064      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x15e>
 80055b2:	2b30      	cmp	r3, #48	; 0x30
 80055b4:	d86b      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d060      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x15e>
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d867      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x170>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d05c      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x15e>
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d05a      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x15e>
 80055c6:	e062      	b.n	800568e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055d8:	f000 f97a 	bl	80058d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	609a      	str	r2, [r3, #8]
      break;
 80055f4:	e04f      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005606:	f000 f963 	bl	80058d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005618:	609a      	str	r2, [r3, #8]
      break;
 800561a:	e03c      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005628:	461a      	mov	r2, r3
 800562a:	f000 f8d7 	bl	80057dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2150      	movs	r1, #80	; 0x50
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f930 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 800563a:	e02c      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005648:	461a      	mov	r2, r3
 800564a:	f000 f8f6 	bl	800583a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2160      	movs	r1, #96	; 0x60
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f920 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 800565a:	e01c      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005668:	461a      	mov	r2, r3
 800566a:	f000 f8b7 	bl	80057dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2140      	movs	r1, #64	; 0x40
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f910 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 800567a:	e00c      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f000 f907 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 800568c:	e003      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e000      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005694:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <TIM_Base_SetConfig+0xcc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x20>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d108      	bne.n	8005732 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <TIM_Base_SetConfig+0xcc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00f      	beq.n	800575a <TIM_Base_SetConfig+0x5a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d00b      	beq.n	800575a <TIM_Base_SetConfig+0x5a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <TIM_Base_SetConfig+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <TIM_Base_SetConfig+0x5a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <TIM_Base_SetConfig+0xd4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_Base_SetConfig+0x5a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <TIM_Base_SetConfig+0xd8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d108      	bne.n	800576c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <TIM_Base_SetConfig+0xcc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00b      	beq.n	80057b0 <TIM_Base_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <TIM_Base_SetConfig+0xd0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d007      	beq.n	80057b0 <TIM_Base_SetConfig+0xb0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <TIM_Base_SetConfig+0xd4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0xb0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <TIM_Base_SetConfig+0xd8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 030a 	bic.w	r3, r3, #10
 8005818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583a:	b480      	push	{r7}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0210 	bic.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f043 0307 	orr.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e04f      	b.n	80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d004      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10c      	bne.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40014000 	.word	0x40014000

080059dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e040      	b.n	8005aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb ffda 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f82c 	bl	8005ab4 <UART_SetConfig>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e022      	b.n	8005aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f956 	bl	8005d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f9dd 	bl	8005e64 <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b8a      	ldr	r3, [pc, #552]	; (8005d08 <UART_SetConfig+0x254>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a78      	ldr	r2, [pc, #480]	; (8005d0c <UART_SetConfig+0x258>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d120      	bne.n	8005b72 <UART_SetConfig+0xbe>
 8005b30:	4b77      	ldr	r3, [pc, #476]	; (8005d10 <UART_SetConfig+0x25c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d817      	bhi.n	8005b6c <UART_SetConfig+0xb8>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x90>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b67 	.word	0x08005b67
 8005b50:	08005b5b 	.word	0x08005b5b
 8005b54:	2300      	movs	r3, #0
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e01d      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e01a      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b60:	2304      	movs	r3, #4
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e017      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b66:	2308      	movs	r3, #8
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e014      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e011      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a67      	ldr	r2, [pc, #412]	; (8005d14 <UART_SetConfig+0x260>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d102      	bne.n	8005b82 <UART_SetConfig+0xce>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e009      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a64      	ldr	r2, [pc, #400]	; (8005d18 <UART_SetConfig+0x264>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d102      	bne.n	8005b92 <UART_SetConfig+0xde>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e001      	b.n	8005b96 <UART_SetConfig+0xe2>
 8005b92:	2310      	movs	r3, #16
 8005b94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9e:	d15a      	bne.n	8005c56 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d827      	bhi.n	8005bf6 <UART_SetConfig+0x142>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0xf8>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	08005bf7 	.word	0x08005bf7
 8005bbc:	08005be7 	.word	0x08005be7
 8005bc0:	08005bf7 	.word	0x08005bf7
 8005bc4:	08005bf7 	.word	0x08005bf7
 8005bc8:	08005bf7 	.word	0x08005bf7
 8005bcc:	08005bef 	.word	0x08005bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f7ff f8b8 	bl	8004d44 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	61b8      	str	r0, [r7, #24]
        break;
 8005bd6:	e013      	b.n	8005c00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7ff f8d6 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005bdc:	61b8      	str	r0, [r7, #24]
        break;
 8005bde:	e00f      	b.n	8005c00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b4e      	ldr	r3, [pc, #312]	; (8005d1c <UART_SetConfig+0x268>)
 8005be2:	61bb      	str	r3, [r7, #24]
        break;
 8005be4:	e00c      	b.n	8005c00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7ff f837 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005bea:	61b8      	str	r0, [r7, #24]
        break;
 8005bec:	e008      	b.n	8005c00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf2:	61bb      	str	r3, [r7, #24]
        break;
 8005bf4:	e004      	b.n	8005c00 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	77bb      	strb	r3, [r7, #30]
        break;
 8005bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d074      	beq.n	8005cf0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	005a      	lsls	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	441a      	add	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b0f      	cmp	r3, #15
 8005c20:	d916      	bls.n	8005c50 <UART_SetConfig+0x19c>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d212      	bcs.n	8005c50 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f023 030f 	bic.w	r3, r3, #15
 8005c32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	89fa      	ldrh	r2, [r7, #14]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	e04f      	b.n	8005cf0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	77bb      	strb	r3, [r7, #30]
 8005c54:	e04c      	b.n	8005cf0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c56:	7ffb      	ldrb	r3, [r7, #31]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d828      	bhi.n	8005cae <UART_SetConfig+0x1fa>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0x1b0>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	08005caf 	.word	0x08005caf
 8005c74:	08005c9f 	.word	0x08005c9f
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005caf 	.word	0x08005caf
 8005c80:	08005caf 	.word	0x08005caf
 8005c84:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7ff f85c 	bl	8004d44 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	61b8      	str	r0, [r7, #24]
        break;
 8005c8e:	e013      	b.n	8005cb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7ff f87a 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 8005c94:	61b8      	str	r0, [r7, #24]
        break;
 8005c96:	e00f      	b.n	8005cb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <UART_SetConfig+0x268>)
 8005c9a:	61bb      	str	r3, [r7, #24]
        break;
 8005c9c:	e00c      	b.n	8005cb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9e:	f7fe ffdb 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005ca2:	61b8      	str	r0, [r7, #24]
        break;
 8005ca4:	e008      	b.n	8005cb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e004      	b.n	8005cb8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d018      	beq.n	8005cf0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	085a      	lsrs	r2, r3, #1
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	441a      	add	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b0f      	cmp	r3, #15
 8005cd6:	d909      	bls.n	8005cec <UART_SetConfig+0x238>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cde:	d205      	bcs.n	8005cec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
 8005cea:	e001      	b.n	8005cf0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	efff69f3 	.word	0xefff69f3
 8005d0c:	40013800 	.word	0x40013800
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	007a1200 	.word	0x007a1200

08005d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01a      	beq.n	8005e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1e:	d10a      	bne.n	8005e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b098      	sub	sp, #96	; 0x60
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e74:	f7fb ff00 	bl	8001c78 <HAL_GetTick>
 8005e78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d12e      	bne.n	8005ee6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f88c 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d021      	beq.n	8005ee6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e062      	b.n	8005fac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d149      	bne.n	8005f88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efc:	2200      	movs	r2, #0
 8005efe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f856 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d03c      	beq.n	8005f88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	69b9      	ldr	r1, [r7, #24]
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e011      	b.n	8005fac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3758      	adds	r7, #88	; 0x58
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc4:	e049      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d045      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	f7fb fe53 	bl	8001c78 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e048      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d031      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d110      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2208      	movs	r2, #8
 800600a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f838 	bl	8006082 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2208      	movs	r2, #8
 8006016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e029      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d111      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f81e 	bl	8006082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e00f      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d0a6      	beq.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006082:	b480      	push	{r7}
 8006084:	b095      	sub	sp, #84	; 0x54
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a8:	643b      	str	r3, [r7, #64]	; 0x40
 80060aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e5      	bne.n	80060bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d118      	bne.n	800612a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	60bb      	str	r3, [r7, #8]
   return(result);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 0310 	bic.w	r3, r3, #16
 800610c:	647b      	str	r3, [r7, #68]	; 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e6      	bne.n	80060f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800613e:	bf00      	nop
 8006140:	3754      	adds	r7, #84	; 0x54
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <siprintf>:
 800614c:	b40e      	push	{r1, r2, r3}
 800614e:	b500      	push	{lr}
 8006150:	b09c      	sub	sp, #112	; 0x70
 8006152:	ab1d      	add	r3, sp, #116	; 0x74
 8006154:	9002      	str	r0, [sp, #8]
 8006156:	9006      	str	r0, [sp, #24]
 8006158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800615c:	4809      	ldr	r0, [pc, #36]	; (8006184 <siprintf+0x38>)
 800615e:	9107      	str	r1, [sp, #28]
 8006160:	9104      	str	r1, [sp, #16]
 8006162:	4909      	ldr	r1, [pc, #36]	; (8006188 <siprintf+0x3c>)
 8006164:	f853 2b04 	ldr.w	r2, [r3], #4
 8006168:	9105      	str	r1, [sp, #20]
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	a902      	add	r1, sp, #8
 8006170:	f000 f992 	bl	8006498 <_svfiprintf_r>
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	b01c      	add	sp, #112	; 0x70
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	20000450 	.word	0x20000450
 8006188:	ffff0208 	.word	0xffff0208

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <__errno>:
 800619c:	4b01      	ldr	r3, [pc, #4]	; (80061a4 <__errno+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000450 	.word	0x20000450

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4d0d      	ldr	r5, [pc, #52]	; (80061e0 <__libc_init_array+0x38>)
 80061ac:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061ae:	1b64      	subs	r4, r4, r5
 80061b0:	10a4      	asrs	r4, r4, #2
 80061b2:	2600      	movs	r6, #0
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	4d0b      	ldr	r5, [pc, #44]	; (80061e8 <__libc_init_array+0x40>)
 80061ba:	4c0c      	ldr	r4, [pc, #48]	; (80061ec <__libc_init_array+0x44>)
 80061bc:	f000 fc6a 	bl	8006a94 <_init>
 80061c0:	1b64      	subs	r4, r4, r5
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	2600      	movs	r6, #0
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	08006b28 	.word	0x08006b28
 80061e4:	08006b28 	.word	0x08006b28
 80061e8:	08006b28 	.word	0x08006b28
 80061ec:	08006b2c 	.word	0x08006b2c

080061f0 <__retarget_lock_acquire_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <__retarget_lock_release_recursive>:
 80061f2:	4770      	bx	lr

080061f4 <_free_r>:
 80061f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061f6:	2900      	cmp	r1, #0
 80061f8:	d044      	beq.n	8006284 <_free_r+0x90>
 80061fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061fe:	9001      	str	r0, [sp, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f1a1 0404 	sub.w	r4, r1, #4
 8006206:	bfb8      	it	lt
 8006208:	18e4      	addlt	r4, r4, r3
 800620a:	f000 f8df 	bl	80063cc <__malloc_lock>
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <_free_r+0x94>)
 8006210:	9801      	ldr	r0, [sp, #4]
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	b933      	cbnz	r3, 8006224 <_free_r+0x30>
 8006216:	6063      	str	r3, [r4, #4]
 8006218:	6014      	str	r4, [r2, #0]
 800621a:	b003      	add	sp, #12
 800621c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006220:	f000 b8da 	b.w	80063d8 <__malloc_unlock>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d908      	bls.n	800623a <_free_r+0x46>
 8006228:	6825      	ldr	r5, [r4, #0]
 800622a:	1961      	adds	r1, r4, r5
 800622c:	428b      	cmp	r3, r1
 800622e:	bf01      	itttt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	1949      	addeq	r1, r1, r5
 8006236:	6021      	streq	r1, [r4, #0]
 8006238:	e7ed      	b.n	8006216 <_free_r+0x22>
 800623a:	461a      	mov	r2, r3
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	b10b      	cbz	r3, 8006244 <_free_r+0x50>
 8006240:	42a3      	cmp	r3, r4
 8006242:	d9fa      	bls.n	800623a <_free_r+0x46>
 8006244:	6811      	ldr	r1, [r2, #0]
 8006246:	1855      	adds	r5, r2, r1
 8006248:	42a5      	cmp	r5, r4
 800624a:	d10b      	bne.n	8006264 <_free_r+0x70>
 800624c:	6824      	ldr	r4, [r4, #0]
 800624e:	4421      	add	r1, r4
 8006250:	1854      	adds	r4, r2, r1
 8006252:	42a3      	cmp	r3, r4
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	d1e0      	bne.n	800621a <_free_r+0x26>
 8006258:	681c      	ldr	r4, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	6053      	str	r3, [r2, #4]
 800625e:	440c      	add	r4, r1
 8006260:	6014      	str	r4, [r2, #0]
 8006262:	e7da      	b.n	800621a <_free_r+0x26>
 8006264:	d902      	bls.n	800626c <_free_r+0x78>
 8006266:	230c      	movs	r3, #12
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	e7d6      	b.n	800621a <_free_r+0x26>
 800626c:	6825      	ldr	r5, [r4, #0]
 800626e:	1961      	adds	r1, r4, r5
 8006270:	428b      	cmp	r3, r1
 8006272:	bf04      	itt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	bf04      	itt	eq
 800627c:	1949      	addeq	r1, r1, r5
 800627e:	6021      	streq	r1, [r4, #0]
 8006280:	6054      	str	r4, [r2, #4]
 8006282:	e7ca      	b.n	800621a <_free_r+0x26>
 8006284:	b003      	add	sp, #12
 8006286:	bd30      	pop	{r4, r5, pc}
 8006288:	20000838 	.word	0x20000838

0800628c <sbrk_aligned>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4e0e      	ldr	r6, [pc, #56]	; (80062c8 <sbrk_aligned+0x3c>)
 8006290:	460c      	mov	r4, r1
 8006292:	6831      	ldr	r1, [r6, #0]
 8006294:	4605      	mov	r5, r0
 8006296:	b911      	cbnz	r1, 800629e <sbrk_aligned+0x12>
 8006298:	f000 fba6 	bl	80069e8 <_sbrk_r>
 800629c:	6030      	str	r0, [r6, #0]
 800629e:	4621      	mov	r1, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	f000 fba1 	bl	80069e8 <_sbrk_r>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	d00a      	beq.n	80062c0 <sbrk_aligned+0x34>
 80062aa:	1cc4      	adds	r4, r0, #3
 80062ac:	f024 0403 	bic.w	r4, r4, #3
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	d007      	beq.n	80062c4 <sbrk_aligned+0x38>
 80062b4:	1a21      	subs	r1, r4, r0
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 fb96 	bl	80069e8 <_sbrk_r>
 80062bc:	3001      	adds	r0, #1
 80062be:	d101      	bne.n	80062c4 <sbrk_aligned+0x38>
 80062c0:	f04f 34ff 	mov.w	r4, #4294967295
 80062c4:	4620      	mov	r0, r4
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	2000083c 	.word	0x2000083c

080062cc <_malloc_r>:
 80062cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d0:	1ccd      	adds	r5, r1, #3
 80062d2:	f025 0503 	bic.w	r5, r5, #3
 80062d6:	3508      	adds	r5, #8
 80062d8:	2d0c      	cmp	r5, #12
 80062da:	bf38      	it	cc
 80062dc:	250c      	movcc	r5, #12
 80062de:	2d00      	cmp	r5, #0
 80062e0:	4607      	mov	r7, r0
 80062e2:	db01      	blt.n	80062e8 <_malloc_r+0x1c>
 80062e4:	42a9      	cmp	r1, r5
 80062e6:	d905      	bls.n	80062f4 <_malloc_r+0x28>
 80062e8:	230c      	movs	r3, #12
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	2600      	movs	r6, #0
 80062ee:	4630      	mov	r0, r6
 80062f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063c8 <_malloc_r+0xfc>
 80062f8:	f000 f868 	bl	80063cc <__malloc_lock>
 80062fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006300:	461c      	mov	r4, r3
 8006302:	bb5c      	cbnz	r4, 800635c <_malloc_r+0x90>
 8006304:	4629      	mov	r1, r5
 8006306:	4638      	mov	r0, r7
 8006308:	f7ff ffc0 	bl	800628c <sbrk_aligned>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	4604      	mov	r4, r0
 8006310:	d155      	bne.n	80063be <_malloc_r+0xf2>
 8006312:	f8d8 4000 	ldr.w	r4, [r8]
 8006316:	4626      	mov	r6, r4
 8006318:	2e00      	cmp	r6, #0
 800631a:	d145      	bne.n	80063a8 <_malloc_r+0xdc>
 800631c:	2c00      	cmp	r4, #0
 800631e:	d048      	beq.n	80063b2 <_malloc_r+0xe6>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	4631      	mov	r1, r6
 8006324:	4638      	mov	r0, r7
 8006326:	eb04 0903 	add.w	r9, r4, r3
 800632a:	f000 fb5d 	bl	80069e8 <_sbrk_r>
 800632e:	4581      	cmp	r9, r0
 8006330:	d13f      	bne.n	80063b2 <_malloc_r+0xe6>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	1a6d      	subs	r5, r5, r1
 8006336:	4629      	mov	r1, r5
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ffa7 	bl	800628c <sbrk_aligned>
 800633e:	3001      	adds	r0, #1
 8006340:	d037      	beq.n	80063b2 <_malloc_r+0xe6>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	442b      	add	r3, r5
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	f8d8 3000 	ldr.w	r3, [r8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d038      	beq.n	80063c2 <_malloc_r+0xf6>
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	42a2      	cmp	r2, r4
 8006354:	d12b      	bne.n	80063ae <_malloc_r+0xe2>
 8006356:	2200      	movs	r2, #0
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	e00f      	b.n	800637c <_malloc_r+0xb0>
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	1b52      	subs	r2, r2, r5
 8006360:	d41f      	bmi.n	80063a2 <_malloc_r+0xd6>
 8006362:	2a0b      	cmp	r2, #11
 8006364:	d917      	bls.n	8006396 <_malloc_r+0xca>
 8006366:	1961      	adds	r1, r4, r5
 8006368:	42a3      	cmp	r3, r4
 800636a:	6025      	str	r5, [r4, #0]
 800636c:	bf18      	it	ne
 800636e:	6059      	strne	r1, [r3, #4]
 8006370:	6863      	ldr	r3, [r4, #4]
 8006372:	bf08      	it	eq
 8006374:	f8c8 1000 	streq.w	r1, [r8]
 8006378:	5162      	str	r2, [r4, r5]
 800637a:	604b      	str	r3, [r1, #4]
 800637c:	4638      	mov	r0, r7
 800637e:	f104 060b 	add.w	r6, r4, #11
 8006382:	f000 f829 	bl	80063d8 <__malloc_unlock>
 8006386:	f026 0607 	bic.w	r6, r6, #7
 800638a:	1d23      	adds	r3, r4, #4
 800638c:	1af2      	subs	r2, r6, r3
 800638e:	d0ae      	beq.n	80062ee <_malloc_r+0x22>
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	50a3      	str	r3, [r4, r2]
 8006394:	e7ab      	b.n	80062ee <_malloc_r+0x22>
 8006396:	42a3      	cmp	r3, r4
 8006398:	6862      	ldr	r2, [r4, #4]
 800639a:	d1dd      	bne.n	8006358 <_malloc_r+0x8c>
 800639c:	f8c8 2000 	str.w	r2, [r8]
 80063a0:	e7ec      	b.n	800637c <_malloc_r+0xb0>
 80063a2:	4623      	mov	r3, r4
 80063a4:	6864      	ldr	r4, [r4, #4]
 80063a6:	e7ac      	b.n	8006302 <_malloc_r+0x36>
 80063a8:	4634      	mov	r4, r6
 80063aa:	6876      	ldr	r6, [r6, #4]
 80063ac:	e7b4      	b.n	8006318 <_malloc_r+0x4c>
 80063ae:	4613      	mov	r3, r2
 80063b0:	e7cc      	b.n	800634c <_malloc_r+0x80>
 80063b2:	230c      	movs	r3, #12
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4638      	mov	r0, r7
 80063b8:	f000 f80e 	bl	80063d8 <__malloc_unlock>
 80063bc:	e797      	b.n	80062ee <_malloc_r+0x22>
 80063be:	6025      	str	r5, [r4, #0]
 80063c0:	e7dc      	b.n	800637c <_malloc_r+0xb0>
 80063c2:	605b      	str	r3, [r3, #4]
 80063c4:	deff      	udf	#255	; 0xff
 80063c6:	bf00      	nop
 80063c8:	20000838 	.word	0x20000838

080063cc <__malloc_lock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_lock+0x8>)
 80063ce:	f7ff bf0f 	b.w	80061f0 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	20000834 	.word	0x20000834

080063d8 <__malloc_unlock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__malloc_unlock+0x8>)
 80063da:	f7ff bf0a 	b.w	80061f2 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	20000834 	.word	0x20000834

080063e4 <__ssputs_r>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	688e      	ldr	r6, [r1, #8]
 80063ea:	461f      	mov	r7, r3
 80063ec:	42be      	cmp	r6, r7
 80063ee:	680b      	ldr	r3, [r1, #0]
 80063f0:	4682      	mov	sl, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	4690      	mov	r8, r2
 80063f6:	d82c      	bhi.n	8006452 <__ssputs_r+0x6e>
 80063f8:	898a      	ldrh	r2, [r1, #12]
 80063fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fe:	d026      	beq.n	800644e <__ssputs_r+0x6a>
 8006400:	6965      	ldr	r5, [r4, #20]
 8006402:	6909      	ldr	r1, [r1, #16]
 8006404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006408:	eba3 0901 	sub.w	r9, r3, r1
 800640c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006410:	1c7b      	adds	r3, r7, #1
 8006412:	444b      	add	r3, r9
 8006414:	106d      	asrs	r5, r5, #1
 8006416:	429d      	cmp	r5, r3
 8006418:	bf38      	it	cc
 800641a:	461d      	movcc	r5, r3
 800641c:	0553      	lsls	r3, r2, #21
 800641e:	d527      	bpl.n	8006470 <__ssputs_r+0x8c>
 8006420:	4629      	mov	r1, r5
 8006422:	f7ff ff53 	bl	80062cc <_malloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	b360      	cbz	r0, 8006484 <__ssputs_r+0xa0>
 800642a:	6921      	ldr	r1, [r4, #16]
 800642c:	464a      	mov	r2, r9
 800642e:	f000 faeb 	bl	8006a08 <memcpy>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	6126      	str	r6, [r4, #16]
 8006440:	6165      	str	r5, [r4, #20]
 8006442:	444e      	add	r6, r9
 8006444:	eba5 0509 	sub.w	r5, r5, r9
 8006448:	6026      	str	r6, [r4, #0]
 800644a:	60a5      	str	r5, [r4, #8]
 800644c:	463e      	mov	r6, r7
 800644e:	42be      	cmp	r6, r7
 8006450:	d900      	bls.n	8006454 <__ssputs_r+0x70>
 8006452:	463e      	mov	r6, r7
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4632      	mov	r2, r6
 8006458:	4641      	mov	r1, r8
 800645a:	f000 faab 	bl	80069b4 <memmove>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	1b9b      	subs	r3, r3, r6
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	4433      	add	r3, r6
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	2000      	movs	r0, #0
 800646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006470:	462a      	mov	r2, r5
 8006472:	f000 fad7 	bl	8006a24 <_realloc_r>
 8006476:	4606      	mov	r6, r0
 8006478:	2800      	cmp	r0, #0
 800647a:	d1e0      	bne.n	800643e <__ssputs_r+0x5a>
 800647c:	6921      	ldr	r1, [r4, #16]
 800647e:	4650      	mov	r0, sl
 8006480:	f7ff feb8 	bl	80061f4 <_free_r>
 8006484:	230c      	movs	r3, #12
 8006486:	f8ca 3000 	str.w	r3, [sl]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	e7e9      	b.n	800646c <__ssputs_r+0x88>

08006498 <_svfiprintf_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4698      	mov	r8, r3
 800649e:	898b      	ldrh	r3, [r1, #12]
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	b09d      	sub	sp, #116	; 0x74
 80064a4:	4607      	mov	r7, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	d50e      	bpl.n	80064ca <_svfiprintf_r+0x32>
 80064ac:	690b      	ldr	r3, [r1, #16]
 80064ae:	b963      	cbnz	r3, 80064ca <_svfiprintf_r+0x32>
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	f7ff ff0b 	bl	80062cc <_malloc_r>
 80064b6:	6028      	str	r0, [r5, #0]
 80064b8:	6128      	str	r0, [r5, #16]
 80064ba:	b920      	cbnz	r0, 80064c6 <_svfiprintf_r+0x2e>
 80064bc:	230c      	movs	r3, #12
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e0d0      	b.n	8006668 <_svfiprintf_r+0x1d0>
 80064c6:	2340      	movs	r3, #64	; 0x40
 80064c8:	616b      	str	r3, [r5, #20]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9309      	str	r3, [sp, #36]	; 0x24
 80064ce:	2320      	movs	r3, #32
 80064d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064d8:	2330      	movs	r3, #48	; 0x30
 80064da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006680 <_svfiprintf_r+0x1e8>
 80064de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e2:	f04f 0901 	mov.w	r9, #1
 80064e6:	4623      	mov	r3, r4
 80064e8:	469a      	mov	sl, r3
 80064ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ee:	b10a      	cbz	r2, 80064f4 <_svfiprintf_r+0x5c>
 80064f0:	2a25      	cmp	r2, #37	; 0x25
 80064f2:	d1f9      	bne.n	80064e8 <_svfiprintf_r+0x50>
 80064f4:	ebba 0b04 	subs.w	fp, sl, r4
 80064f8:	d00b      	beq.n	8006512 <_svfiprintf_r+0x7a>
 80064fa:	465b      	mov	r3, fp
 80064fc:	4622      	mov	r2, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	4638      	mov	r0, r7
 8006502:	f7ff ff6f 	bl	80063e4 <__ssputs_r>
 8006506:	3001      	adds	r0, #1
 8006508:	f000 80a9 	beq.w	800665e <_svfiprintf_r+0x1c6>
 800650c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800650e:	445a      	add	r2, fp
 8006510:	9209      	str	r2, [sp, #36]	; 0x24
 8006512:	f89a 3000 	ldrb.w	r3, [sl]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80a1 	beq.w	800665e <_svfiprintf_r+0x1c6>
 800651c:	2300      	movs	r3, #0
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006526:	f10a 0a01 	add.w	sl, sl, #1
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	9307      	str	r3, [sp, #28]
 800652e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006532:	931a      	str	r3, [sp, #104]	; 0x68
 8006534:	4654      	mov	r4, sl
 8006536:	2205      	movs	r2, #5
 8006538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653c:	4850      	ldr	r0, [pc, #320]	; (8006680 <_svfiprintf_r+0x1e8>)
 800653e:	f7f9 fe47 	bl	80001d0 <memchr>
 8006542:	9a04      	ldr	r2, [sp, #16]
 8006544:	b9d8      	cbnz	r0, 800657e <_svfiprintf_r+0xe6>
 8006546:	06d0      	lsls	r0, r2, #27
 8006548:	bf44      	itt	mi
 800654a:	2320      	movmi	r3, #32
 800654c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006550:	0711      	lsls	r1, r2, #28
 8006552:	bf44      	itt	mi
 8006554:	232b      	movmi	r3, #43	; 0x2b
 8006556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655a:	f89a 3000 	ldrb.w	r3, [sl]
 800655e:	2b2a      	cmp	r3, #42	; 0x2a
 8006560:	d015      	beq.n	800658e <_svfiprintf_r+0xf6>
 8006562:	9a07      	ldr	r2, [sp, #28]
 8006564:	4654      	mov	r4, sl
 8006566:	2000      	movs	r0, #0
 8006568:	f04f 0c0a 	mov.w	ip, #10
 800656c:	4621      	mov	r1, r4
 800656e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006572:	3b30      	subs	r3, #48	; 0x30
 8006574:	2b09      	cmp	r3, #9
 8006576:	d94d      	bls.n	8006614 <_svfiprintf_r+0x17c>
 8006578:	b1b0      	cbz	r0, 80065a8 <_svfiprintf_r+0x110>
 800657a:	9207      	str	r2, [sp, #28]
 800657c:	e014      	b.n	80065a8 <_svfiprintf_r+0x110>
 800657e:	eba0 0308 	sub.w	r3, r0, r8
 8006582:	fa09 f303 	lsl.w	r3, r9, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	46a2      	mov	sl, r4
 800658c:	e7d2      	b.n	8006534 <_svfiprintf_r+0x9c>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9103      	str	r1, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfbb      	ittet	lt
 800659a:	425b      	neglt	r3, r3
 800659c:	f042 0202 	orrlt.w	r2, r2, #2
 80065a0:	9307      	strge	r3, [sp, #28]
 80065a2:	9307      	strlt	r3, [sp, #28]
 80065a4:	bfb8      	it	lt
 80065a6:	9204      	strlt	r2, [sp, #16]
 80065a8:	7823      	ldrb	r3, [r4, #0]
 80065aa:	2b2e      	cmp	r3, #46	; 0x2e
 80065ac:	d10c      	bne.n	80065c8 <_svfiprintf_r+0x130>
 80065ae:	7863      	ldrb	r3, [r4, #1]
 80065b0:	2b2a      	cmp	r3, #42	; 0x2a
 80065b2:	d134      	bne.n	800661e <_svfiprintf_r+0x186>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	9203      	str	r2, [sp, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfb8      	it	lt
 80065c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065c4:	3402      	adds	r4, #2
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006690 <_svfiprintf_r+0x1f8>
 80065cc:	7821      	ldrb	r1, [r4, #0]
 80065ce:	2203      	movs	r2, #3
 80065d0:	4650      	mov	r0, sl
 80065d2:	f7f9 fdfd 	bl	80001d0 <memchr>
 80065d6:	b138      	cbz	r0, 80065e8 <_svfiprintf_r+0x150>
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	eba0 000a 	sub.w	r0, r0, sl
 80065de:	2240      	movs	r2, #64	; 0x40
 80065e0:	4082      	lsls	r2, r0
 80065e2:	4313      	orrs	r3, r2
 80065e4:	3401      	adds	r4, #1
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ec:	4825      	ldr	r0, [pc, #148]	; (8006684 <_svfiprintf_r+0x1ec>)
 80065ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065f2:	2206      	movs	r2, #6
 80065f4:	f7f9 fdec 	bl	80001d0 <memchr>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d038      	beq.n	800666e <_svfiprintf_r+0x1d6>
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <_svfiprintf_r+0x1f0>)
 80065fe:	bb1b      	cbnz	r3, 8006648 <_svfiprintf_r+0x1b0>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	3307      	adds	r3, #7
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	3308      	adds	r3, #8
 800660a:	9303      	str	r3, [sp, #12]
 800660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660e:	4433      	add	r3, r6
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	e768      	b.n	80064e6 <_svfiprintf_r+0x4e>
 8006614:	fb0c 3202 	mla	r2, ip, r2, r3
 8006618:	460c      	mov	r4, r1
 800661a:	2001      	movs	r0, #1
 800661c:	e7a6      	b.n	800656c <_svfiprintf_r+0xd4>
 800661e:	2300      	movs	r3, #0
 8006620:	3401      	adds	r4, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	4619      	mov	r1, r3
 8006626:	f04f 0c0a 	mov.w	ip, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006630:	3a30      	subs	r2, #48	; 0x30
 8006632:	2a09      	cmp	r2, #9
 8006634:	d903      	bls.n	800663e <_svfiprintf_r+0x1a6>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0c6      	beq.n	80065c8 <_svfiprintf_r+0x130>
 800663a:	9105      	str	r1, [sp, #20]
 800663c:	e7c4      	b.n	80065c8 <_svfiprintf_r+0x130>
 800663e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006642:	4604      	mov	r4, r0
 8006644:	2301      	movs	r3, #1
 8006646:	e7f0      	b.n	800662a <_svfiprintf_r+0x192>
 8006648:	ab03      	add	r3, sp, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	462a      	mov	r2, r5
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <_svfiprintf_r+0x1f4>)
 8006650:	a904      	add	r1, sp, #16
 8006652:	4638      	mov	r0, r7
 8006654:	f3af 8000 	nop.w
 8006658:	1c42      	adds	r2, r0, #1
 800665a:	4606      	mov	r6, r0
 800665c:	d1d6      	bne.n	800660c <_svfiprintf_r+0x174>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	065b      	lsls	r3, r3, #25
 8006662:	f53f af2d 	bmi.w	80064c0 <_svfiprintf_r+0x28>
 8006666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006668:	b01d      	add	sp, #116	; 0x74
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	ab03      	add	r3, sp, #12
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	462a      	mov	r2, r5
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <_svfiprintf_r+0x1f4>)
 8006676:	a904      	add	r1, sp, #16
 8006678:	4638      	mov	r0, r7
 800667a:	f000 f879 	bl	8006770 <_printf_i>
 800667e:	e7eb      	b.n	8006658 <_svfiprintf_r+0x1c0>
 8006680:	08006af4 	.word	0x08006af4
 8006684:	08006afe 	.word	0x08006afe
 8006688:	00000000 	.word	0x00000000
 800668c:	080063e5 	.word	0x080063e5
 8006690:	08006afa 	.word	0x08006afa

08006694 <_printf_common>:
 8006694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	4616      	mov	r6, r2
 800669a:	4699      	mov	r9, r3
 800669c:	688a      	ldr	r2, [r1, #8]
 800669e:	690b      	ldr	r3, [r1, #16]
 80066a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bfb8      	it	lt
 80066a8:	4613      	movlt	r3, r2
 80066aa:	6033      	str	r3, [r6, #0]
 80066ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066b0:	4607      	mov	r7, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	b10a      	cbz	r2, 80066ba <_printf_common+0x26>
 80066b6:	3301      	adds	r3, #1
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	0699      	lsls	r1, r3, #26
 80066be:	bf42      	ittt	mi
 80066c0:	6833      	ldrmi	r3, [r6, #0]
 80066c2:	3302      	addmi	r3, #2
 80066c4:	6033      	strmi	r3, [r6, #0]
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	f015 0506 	ands.w	r5, r5, #6
 80066cc:	d106      	bne.n	80066dc <_printf_common+0x48>
 80066ce:	f104 0a19 	add.w	sl, r4, #25
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	6832      	ldr	r2, [r6, #0]
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dc26      	bgt.n	800672a <_printf_common+0x96>
 80066dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e0:	1e13      	subs	r3, r2, #0
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	bf18      	it	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	0692      	lsls	r2, r2, #26
 80066ea:	d42b      	bmi.n	8006744 <_printf_common+0xb0>
 80066ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f0:	4649      	mov	r1, r9
 80066f2:	4638      	mov	r0, r7
 80066f4:	47c0      	blx	r8
 80066f6:	3001      	adds	r0, #1
 80066f8:	d01e      	beq.n	8006738 <_printf_common+0xa4>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	6922      	ldr	r2, [r4, #16]
 80066fe:	f003 0306 	and.w	r3, r3, #6
 8006702:	2b04      	cmp	r3, #4
 8006704:	bf02      	ittt	eq
 8006706:	68e5      	ldreq	r5, [r4, #12]
 8006708:	6833      	ldreq	r3, [r6, #0]
 800670a:	1aed      	subeq	r5, r5, r3
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	bf0c      	ite	eq
 8006710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006714:	2500      	movne	r5, #0
 8006716:	4293      	cmp	r3, r2
 8006718:	bfc4      	itt	gt
 800671a:	1a9b      	subgt	r3, r3, r2
 800671c:	18ed      	addgt	r5, r5, r3
 800671e:	2600      	movs	r6, #0
 8006720:	341a      	adds	r4, #26
 8006722:	42b5      	cmp	r5, r6
 8006724:	d11a      	bne.n	800675c <_printf_common+0xc8>
 8006726:	2000      	movs	r0, #0
 8006728:	e008      	b.n	800673c <_printf_common+0xa8>
 800672a:	2301      	movs	r3, #1
 800672c:	4652      	mov	r2, sl
 800672e:	4649      	mov	r1, r9
 8006730:	4638      	mov	r0, r7
 8006732:	47c0      	blx	r8
 8006734:	3001      	adds	r0, #1
 8006736:	d103      	bne.n	8006740 <_printf_common+0xac>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	3501      	adds	r5, #1
 8006742:	e7c6      	b.n	80066d2 <_printf_common+0x3e>
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	2030      	movs	r0, #48	; 0x30
 800674a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674e:	4422      	add	r2, r4
 8006750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006758:	3302      	adds	r3, #2
 800675a:	e7c7      	b.n	80066ec <_printf_common+0x58>
 800675c:	2301      	movs	r3, #1
 800675e:	4622      	mov	r2, r4
 8006760:	4649      	mov	r1, r9
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d0e6      	beq.n	8006738 <_printf_common+0xa4>
 800676a:	3601      	adds	r6, #1
 800676c:	e7d9      	b.n	8006722 <_printf_common+0x8e>
	...

08006770 <_printf_i>:
 8006770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	7e0f      	ldrb	r7, [r1, #24]
 8006776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006778:	2f78      	cmp	r7, #120	; 0x78
 800677a:	4691      	mov	r9, r2
 800677c:	4680      	mov	r8, r0
 800677e:	460c      	mov	r4, r1
 8006780:	469a      	mov	sl, r3
 8006782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006786:	d807      	bhi.n	8006798 <_printf_i+0x28>
 8006788:	2f62      	cmp	r7, #98	; 0x62
 800678a:	d80a      	bhi.n	80067a2 <_printf_i+0x32>
 800678c:	2f00      	cmp	r7, #0
 800678e:	f000 80d4 	beq.w	800693a <_printf_i+0x1ca>
 8006792:	2f58      	cmp	r7, #88	; 0x58
 8006794:	f000 80c0 	beq.w	8006918 <_printf_i+0x1a8>
 8006798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067a0:	e03a      	b.n	8006818 <_printf_i+0xa8>
 80067a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067a6:	2b15      	cmp	r3, #21
 80067a8:	d8f6      	bhi.n	8006798 <_printf_i+0x28>
 80067aa:	a101      	add	r1, pc, #4	; (adr r1, 80067b0 <_printf_i+0x40>)
 80067ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067b0:	08006809 	.word	0x08006809
 80067b4:	0800681d 	.word	0x0800681d
 80067b8:	08006799 	.word	0x08006799
 80067bc:	08006799 	.word	0x08006799
 80067c0:	08006799 	.word	0x08006799
 80067c4:	08006799 	.word	0x08006799
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	08006799 	.word	0x08006799
 80067d0:	08006799 	.word	0x08006799
 80067d4:	08006799 	.word	0x08006799
 80067d8:	08006799 	.word	0x08006799
 80067dc:	08006921 	.word	0x08006921
 80067e0:	08006849 	.word	0x08006849
 80067e4:	080068db 	.word	0x080068db
 80067e8:	08006799 	.word	0x08006799
 80067ec:	08006799 	.word	0x08006799
 80067f0:	08006943 	.word	0x08006943
 80067f4:	08006799 	.word	0x08006799
 80067f8:	08006849 	.word	0x08006849
 80067fc:	08006799 	.word	0x08006799
 8006800:	08006799 	.word	0x08006799
 8006804:	080068e3 	.word	0x080068e3
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	602a      	str	r2, [r5, #0]
 8006810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006818:	2301      	movs	r3, #1
 800681a:	e09f      	b.n	800695c <_printf_i+0x1ec>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	0607      	lsls	r7, r0, #24
 8006822:	f103 0104 	add.w	r1, r3, #4
 8006826:	6029      	str	r1, [r5, #0]
 8006828:	d501      	bpl.n	800682e <_printf_i+0xbe>
 800682a:	681e      	ldr	r6, [r3, #0]
 800682c:	e003      	b.n	8006836 <_printf_i+0xc6>
 800682e:	0646      	lsls	r6, r0, #25
 8006830:	d5fb      	bpl.n	800682a <_printf_i+0xba>
 8006832:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006836:	2e00      	cmp	r6, #0
 8006838:	da03      	bge.n	8006842 <_printf_i+0xd2>
 800683a:	232d      	movs	r3, #45	; 0x2d
 800683c:	4276      	negs	r6, r6
 800683e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006842:	485a      	ldr	r0, [pc, #360]	; (80069ac <_printf_i+0x23c>)
 8006844:	230a      	movs	r3, #10
 8006846:	e012      	b.n	800686e <_printf_i+0xfe>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	1d19      	adds	r1, r3, #4
 800684e:	6029      	str	r1, [r5, #0]
 8006850:	0605      	lsls	r5, r0, #24
 8006852:	d501      	bpl.n	8006858 <_printf_i+0xe8>
 8006854:	681e      	ldr	r6, [r3, #0]
 8006856:	e002      	b.n	800685e <_printf_i+0xee>
 8006858:	0641      	lsls	r1, r0, #25
 800685a:	d5fb      	bpl.n	8006854 <_printf_i+0xe4>
 800685c:	881e      	ldrh	r6, [r3, #0]
 800685e:	4853      	ldr	r0, [pc, #332]	; (80069ac <_printf_i+0x23c>)
 8006860:	2f6f      	cmp	r7, #111	; 0x6f
 8006862:	bf0c      	ite	eq
 8006864:	2308      	moveq	r3, #8
 8006866:	230a      	movne	r3, #10
 8006868:	2100      	movs	r1, #0
 800686a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800686e:	6865      	ldr	r5, [r4, #4]
 8006870:	60a5      	str	r5, [r4, #8]
 8006872:	2d00      	cmp	r5, #0
 8006874:	bfa2      	ittt	ge
 8006876:	6821      	ldrge	r1, [r4, #0]
 8006878:	f021 0104 	bicge.w	r1, r1, #4
 800687c:	6021      	strge	r1, [r4, #0]
 800687e:	b90e      	cbnz	r6, 8006884 <_printf_i+0x114>
 8006880:	2d00      	cmp	r5, #0
 8006882:	d04b      	beq.n	800691c <_printf_i+0x1ac>
 8006884:	4615      	mov	r5, r2
 8006886:	fbb6 f1f3 	udiv	r1, r6, r3
 800688a:	fb03 6711 	mls	r7, r3, r1, r6
 800688e:	5dc7      	ldrb	r7, [r0, r7]
 8006890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006894:	4637      	mov	r7, r6
 8006896:	42bb      	cmp	r3, r7
 8006898:	460e      	mov	r6, r1
 800689a:	d9f4      	bls.n	8006886 <_printf_i+0x116>
 800689c:	2b08      	cmp	r3, #8
 800689e:	d10b      	bne.n	80068b8 <_printf_i+0x148>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	07de      	lsls	r6, r3, #31
 80068a4:	d508      	bpl.n	80068b8 <_printf_i+0x148>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	6861      	ldr	r1, [r4, #4]
 80068aa:	4299      	cmp	r1, r3
 80068ac:	bfde      	ittt	le
 80068ae:	2330      	movle	r3, #48	; 0x30
 80068b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068b8:	1b52      	subs	r2, r2, r5
 80068ba:	6122      	str	r2, [r4, #16]
 80068bc:	f8cd a000 	str.w	sl, [sp]
 80068c0:	464b      	mov	r3, r9
 80068c2:	aa03      	add	r2, sp, #12
 80068c4:	4621      	mov	r1, r4
 80068c6:	4640      	mov	r0, r8
 80068c8:	f7ff fee4 	bl	8006694 <_printf_common>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d14a      	bne.n	8006966 <_printf_i+0x1f6>
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	b004      	add	sp, #16
 80068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f043 0320 	orr.w	r3, r3, #32
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	4833      	ldr	r0, [pc, #204]	; (80069b0 <_printf_i+0x240>)
 80068e4:	2778      	movs	r7, #120	; 0x78
 80068e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	6829      	ldr	r1, [r5, #0]
 80068ee:	061f      	lsls	r7, r3, #24
 80068f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068f4:	d402      	bmi.n	80068fc <_printf_i+0x18c>
 80068f6:	065f      	lsls	r7, r3, #25
 80068f8:	bf48      	it	mi
 80068fa:	b2b6      	uxthmi	r6, r6
 80068fc:	07df      	lsls	r7, r3, #31
 80068fe:	bf48      	it	mi
 8006900:	f043 0320 	orrmi.w	r3, r3, #32
 8006904:	6029      	str	r1, [r5, #0]
 8006906:	bf48      	it	mi
 8006908:	6023      	strmi	r3, [r4, #0]
 800690a:	b91e      	cbnz	r6, 8006914 <_printf_i+0x1a4>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	f023 0320 	bic.w	r3, r3, #32
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	2310      	movs	r3, #16
 8006916:	e7a7      	b.n	8006868 <_printf_i+0xf8>
 8006918:	4824      	ldr	r0, [pc, #144]	; (80069ac <_printf_i+0x23c>)
 800691a:	e7e4      	b.n	80068e6 <_printf_i+0x176>
 800691c:	4615      	mov	r5, r2
 800691e:	e7bd      	b.n	800689c <_printf_i+0x12c>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	6826      	ldr	r6, [r4, #0]
 8006924:	6961      	ldr	r1, [r4, #20]
 8006926:	1d18      	adds	r0, r3, #4
 8006928:	6028      	str	r0, [r5, #0]
 800692a:	0635      	lsls	r5, r6, #24
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	d501      	bpl.n	8006934 <_printf_i+0x1c4>
 8006930:	6019      	str	r1, [r3, #0]
 8006932:	e002      	b.n	800693a <_printf_i+0x1ca>
 8006934:	0670      	lsls	r0, r6, #25
 8006936:	d5fb      	bpl.n	8006930 <_printf_i+0x1c0>
 8006938:	8019      	strh	r1, [r3, #0]
 800693a:	2300      	movs	r3, #0
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	4615      	mov	r5, r2
 8006940:	e7bc      	b.n	80068bc <_printf_i+0x14c>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	1d1a      	adds	r2, r3, #4
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	2100      	movs	r1, #0
 800694e:	4628      	mov	r0, r5
 8006950:	f7f9 fc3e 	bl	80001d0 <memchr>
 8006954:	b108      	cbz	r0, 800695a <_printf_i+0x1ea>
 8006956:	1b40      	subs	r0, r0, r5
 8006958:	6060      	str	r0, [r4, #4]
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	2300      	movs	r3, #0
 8006960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006964:	e7aa      	b.n	80068bc <_printf_i+0x14c>
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	462a      	mov	r2, r5
 800696a:	4649      	mov	r1, r9
 800696c:	4640      	mov	r0, r8
 800696e:	47d0      	blx	sl
 8006970:	3001      	adds	r0, #1
 8006972:	d0ad      	beq.n	80068d0 <_printf_i+0x160>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	d413      	bmi.n	80069a2 <_printf_i+0x232>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	4298      	cmp	r0, r3
 8006980:	bfb8      	it	lt
 8006982:	4618      	movlt	r0, r3
 8006984:	e7a6      	b.n	80068d4 <_printf_i+0x164>
 8006986:	2301      	movs	r3, #1
 8006988:	4632      	mov	r2, r6
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d09d      	beq.n	80068d0 <_printf_i+0x160>
 8006994:	3501      	adds	r5, #1
 8006996:	68e3      	ldr	r3, [r4, #12]
 8006998:	9903      	ldr	r1, [sp, #12]
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	42ab      	cmp	r3, r5
 800699e:	dcf2      	bgt.n	8006986 <_printf_i+0x216>
 80069a0:	e7eb      	b.n	800697a <_printf_i+0x20a>
 80069a2:	2500      	movs	r5, #0
 80069a4:	f104 0619 	add.w	r6, r4, #25
 80069a8:	e7f5      	b.n	8006996 <_printf_i+0x226>
 80069aa:	bf00      	nop
 80069ac:	08006b05 	.word	0x08006b05
 80069b0:	08006b16 	.word	0x08006b16

080069b4 <memmove>:
 80069b4:	4288      	cmp	r0, r1
 80069b6:	b510      	push	{r4, lr}
 80069b8:	eb01 0402 	add.w	r4, r1, r2
 80069bc:	d902      	bls.n	80069c4 <memmove+0x10>
 80069be:	4284      	cmp	r4, r0
 80069c0:	4623      	mov	r3, r4
 80069c2:	d807      	bhi.n	80069d4 <memmove+0x20>
 80069c4:	1e43      	subs	r3, r0, #1
 80069c6:	42a1      	cmp	r1, r4
 80069c8:	d008      	beq.n	80069dc <memmove+0x28>
 80069ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069d2:	e7f8      	b.n	80069c6 <memmove+0x12>
 80069d4:	4402      	add	r2, r0
 80069d6:	4601      	mov	r1, r0
 80069d8:	428a      	cmp	r2, r1
 80069da:	d100      	bne.n	80069de <memmove+0x2a>
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069e6:	e7f7      	b.n	80069d8 <memmove+0x24>

080069e8 <_sbrk_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d06      	ldr	r5, [pc, #24]	; (8006a04 <_sbrk_r+0x1c>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	602b      	str	r3, [r5, #0]
 80069f4:	f7fb f874 	bl	8001ae0 <_sbrk>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_sbrk_r+0x1a>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_sbrk_r+0x1a>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20000830 	.word	0x20000830

08006a08 <memcpy>:
 8006a08:	440a      	add	r2, r1
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a10:	d100      	bne.n	8006a14 <memcpy+0xc>
 8006a12:	4770      	bx	lr
 8006a14:	b510      	push	{r4, lr}
 8006a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	d1f9      	bne.n	8006a16 <memcpy+0xe>
 8006a22:	bd10      	pop	{r4, pc}

08006a24 <_realloc_r>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	b921      	cbnz	r1, 8006a3a <_realloc_r+0x16>
 8006a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a34:	4611      	mov	r1, r2
 8006a36:	f7ff bc49 	b.w	80062cc <_malloc_r>
 8006a3a:	b92a      	cbnz	r2, 8006a48 <_realloc_r+0x24>
 8006a3c:	f7ff fbda 	bl	80061f4 <_free_r>
 8006a40:	4625      	mov	r5, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a48:	f000 f81b 	bl	8006a82 <_malloc_usable_size_r>
 8006a4c:	4284      	cmp	r4, r0
 8006a4e:	4607      	mov	r7, r0
 8006a50:	d802      	bhi.n	8006a58 <_realloc_r+0x34>
 8006a52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a56:	d812      	bhi.n	8006a7e <_realloc_r+0x5a>
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff fc36 	bl	80062cc <_malloc_r>
 8006a60:	4605      	mov	r5, r0
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d0ed      	beq.n	8006a42 <_realloc_r+0x1e>
 8006a66:	42bc      	cmp	r4, r7
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	bf28      	it	cs
 8006a6e:	463a      	movcs	r2, r7
 8006a70:	f7ff ffca 	bl	8006a08 <memcpy>
 8006a74:	4631      	mov	r1, r6
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7ff fbbc 	bl	80061f4 <_free_r>
 8006a7c:	e7e1      	b.n	8006a42 <_realloc_r+0x1e>
 8006a7e:	4635      	mov	r5, r6
 8006a80:	e7df      	b.n	8006a42 <_realloc_r+0x1e>

08006a82 <_malloc_usable_size_r>:
 8006a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a86:	1f18      	subs	r0, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbc      	itt	lt
 8006a8c:	580b      	ldrlt	r3, [r1, r0]
 8006a8e:	18c0      	addlt	r0, r0, r3
 8006a90:	4770      	bx	lr
	...

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
