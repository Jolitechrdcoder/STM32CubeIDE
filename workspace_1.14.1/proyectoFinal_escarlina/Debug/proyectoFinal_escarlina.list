
proyectoFinal_escarlina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004100  08004100  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004100  08004100  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200000a0  080041a8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080041a8  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000938e  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001766  00000000  00000000  000294a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059e  00000000  00000000  0002b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9e3  00000000  00000000  0002b90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a25d  00000000  00000000  000472f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dda3  00000000  00000000  0005154e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002678  00000000  00000000  000ef2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f196c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fb4 	.word	0x08003fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08003fb4 	.word	0x08003fb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <mostrar_pieza>:
 uint8_t limpiar_fila[8] = {
    0b00000000
};

 void mostrar_pieza(uint8_t piezas[8], int fila_inicial, int columna_inicial)
 {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
     for (int i = 0; i < 8; i++)
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]
 8000280:	e014      	b.n	80002ac <mostrar_pieza+0x3c>
     {
         setrow(fila_inicial - i, piezas[i] << columna_inicial);
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	b2d8      	uxtb	r0, r3
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4413      	add	r3, r2
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	461a      	mov	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4619      	mov	r1, r3
 80002a2:	f000 fab1 	bl	8000808 <setrow>
     for (int i = 0; i < 8; i++)
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3301      	adds	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	dde7      	ble.n	8000282 <mostrar_pieza+0x12>
     }
 }
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b5b0      	push	{r4, r5, r7, lr}
 80002be:	b08c      	sub	sp, #48	; 0x30
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand((unsigned int)time(NULL));
 80002c2:	2000      	movs	r0, #0
 80002c4:	f002 ffa8 	bl	8003218 <time>
 80002c8:	4602      	mov	r2, r0
 80002ca:	460b      	mov	r3, r1
 80002cc:	4613      	mov	r3, r2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fe28 	bl	8002f24 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fcda 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f8a0 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f914 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002e0:	f000 f8e2 	bl	80004a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   max_init(0x02);
 80002e4:	2002      	movs	r0, #2
 80002e6:	f000 fb0d 	bl	8000904 <max_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
   {
       // Generaci√≥n aleatoria de piezas, fila inicial y columna inicial
       int piezas_ramdom = rand() % 7;
 80002ea:	f002 fe49 	bl	8002f80 <rand>
 80002ee:	4602      	mov	r2, r0
 80002f0:	4b45      	ldr	r3, [pc, #276]	; (8000408 <main+0x14c>)
 80002f2:	fb83 1302 	smull	r1, r3, r3, r2
 80002f6:	4413      	add	r3, r2
 80002f8:	1099      	asrs	r1, r3, #2
 80002fa:	17d3      	asrs	r3, r2, #31
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	460b      	mov	r3, r1
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	1a5b      	subs	r3, r3, r1
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	623b      	str	r3, [r7, #32]
       const uint8_t *piezas[] = {pieza_1, pieza_2, pieza_3, pieza_4, pieza_5, pieza_6, pieza_7};
 8000308:	4b40      	ldr	r3, [pc, #256]	; (800040c <main+0x150>)
 800030a:	463c      	mov	r4, r7
 800030c:	461d      	mov	r5, r3
 800030e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
       const uint8_t *sel_piezas = piezas[piezas_ramdom];
 800031a:	6a3b      	ldr	r3, [r7, #32]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	3330      	adds	r3, #48	; 0x30
 8000320:	443b      	add	r3, r7
 8000322:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000326:	61fb      	str	r3, [r7, #28]
       int fila_inicial = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	62fb      	str	r3, [r7, #44]	; 0x2c
       int columna_inicial = rand() % 6;
 800032c:	f002 fe28 	bl	8002f80 <rand>
 8000330:	4602      	mov	r2, r0
 8000332:	4b37      	ldr	r3, [pc, #220]	; (8000410 <main+0x154>)
 8000334:	fb83 3102 	smull	r3, r1, r3, r2
 8000338:	17d3      	asrs	r3, r2, #31
 800033a:	1ac9      	subs	r1, r1, r3
 800033c:	460b      	mov	r3, r1
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	440b      	add	r3, r1
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28

       while (fila_inicial < 8)
 8000348:	e056      	b.n	80003f8 <main+0x13c>
       {
           // Muestra la pieza en la posici√≥n actual del tablero
           mostrar_pieza(sel_piezas, fila_inicial, columna_inicial);
 800034a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800034c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800034e:	69f8      	ldr	r0, [r7, #28]
 8000350:	f7ff ff8e 	bl	8000270 <mostrar_pieza>
           HAL_Delay(800);
 8000354:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000358:	f000 fcfe 	bl	8000d58 <HAL_Delay>

           // Verifica si la pieza ha alcanzado el fondo o una posici√≥n ocupada en el tablero
           if (fila_inicial == 7 || matriz_tablero[fila_inicial + 1][columna_inicial] != 0)
 800035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800035e:	2b07      	cmp	r3, #7
 8000360:	d009      	beq.n	8000376 <main+0xba>
 8000362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000364:	3301      	adds	r3, #1
 8000366:	4a2b      	ldr	r2, [pc, #172]	; (8000414 <main+0x158>)
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	441a      	add	r2, r3
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d028      	beq.n	80003c8 <main+0x10c>
           {
               // Agrega la pieza al tablero en la fila actual
               for (int i = 0; i < 8; i++)
 8000376:	2300      	movs	r3, #0
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
 800037a:	e021      	b.n	80003c0 <main+0x104>
               {
                   matriz_tablero[fila_inicial][columna_inicial] |= sel_piezas[i] << columna_inicial;
 800037c:	4a25      	ldr	r2, [pc, #148]	; (8000414 <main+0x158>)
 800037e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	441a      	add	r2, r3
 8000384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000386:	4413      	add	r3, r2
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b25a      	sxtb	r2, r3
 800038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038e:	69f9      	ldr	r1, [r7, #28]
 8000390:	440b      	add	r3, r1
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	b25b      	sxtb	r3, r3
 800039e:	4313      	orrs	r3, r2
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	b2d9      	uxtb	r1, r3
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <main+0x158>)
 80003a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	441a      	add	r2, r3
 80003ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ae:	4413      	add	r3, r2
 80003b0:	460a      	mov	r2, r1
 80003b2:	701a      	strb	r2, [r3, #0]
                   fila_inicial--;
 80003b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b6:	3b01      	subs	r3, #1
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
               for (int i = 0; i < 8; i++)
 80003ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003bc:	3301      	adds	r3, #1
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	ddda      	ble.n	800037c <main+0xc0>
               }
               break; // Sale del bucle
 80003c6:	e01a      	b.n	80003fe <main+0x142>
           }
           else
           {
               fila_inicial++; // Mueve la pieza hacia abajo
 80003c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ca:	3301      	adds	r3, #1
 80003cc:	62fb      	str	r3, [r7, #44]	; 0x2c
           }

           // Verifica si se ha presionado un bot√≥n para mover la pieza hacia la derecha
           if (movimiento_piezas > 0)
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <main+0x15c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	dd06      	ble.n	80003e4 <main+0x128>
           {
               columna_inicial++;
 80003d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d8:	3301      	adds	r3, #1
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
               movimiento_piezas = 0; // Reinicia el movimiento
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <main+0x15c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	e009      	b.n	80003f8 <main+0x13c>
           }
           // Verifica si se ha presionado un bot√≥n para mover la pieza hacia la izquierda
           else if (movimiento_piezas < 0)
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <main+0x15c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	da05      	bge.n	80003f8 <main+0x13c>
           {
               columna_inicial--;
 80003ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ee:	3b01      	subs	r3, #1
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
               movimiento_piezas = 0; // Reinicia el movimiento
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <main+0x15c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
       while (fila_inicial < 8)
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	2b07      	cmp	r3, #7
 80003fc:	dda5      	ble.n	800034a <main+0x8e>
           }
       }

       HAL_Delay(500); // Retardo entre piezas
 80003fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000402:	f000 fca9 	bl	8000d58 <HAL_Delay>
   {
 8000406:	e770      	b.n	80002ea <main+0x2e>
 8000408:	92492493 	.word	0x92492493
 800040c:	08003fcc 	.word	0x08003fcc
 8000410:	2aaaaaab 	.word	0x2aaaaaab
 8000414:	20000144 	.word	0x20000144
 8000418:	20000184 	.word	0x20000184

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	; 0x40
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2228      	movs	r2, #40	; 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 feeb 	bl	8003206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 ff4f 	bl	8001308 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000470:	f000 f900 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 ff78 	bl	8002384 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049a:	f000 f8eb 	bl	8000674 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3740      	adds	r7, #64	; 0x40
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <MX_USART2_UART_Init+0x5c>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ec:	f002 f980 	bl	80027f0 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004f6:	f000 f8bd 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000bc 	.word	0x200000bc
 8000504:	40004400 	.word	0x40004400

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b45      	ldr	r3, [pc, #276]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a44      	ldr	r2, [pc, #272]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b42      	ldr	r3, [pc, #264]	; (8000634 <MX_GPIO_Init+0x12c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a3e      	ldr	r2, [pc, #248]	; (8000634 <MX_GPIO_Init+0x12c>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a38      	ldr	r2, [pc, #224]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b36      	ldr	r3, [pc, #216]	; (8000634 <MX_GPIO_Init+0x12c>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a32      	ldr	r2, [pc, #200]	; (8000634 <MX_GPIO_Init+0x12c>)
 800056c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <MX_GPIO_Init+0x12c>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000584:	482c      	ldr	r0, [pc, #176]	; (8000638 <MX_GPIO_Init+0x130>)
 8000586:	f000 fe8f 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	482a      	ldr	r0, [pc, #168]	; (800063c <MX_GPIO_Init+0x134>)
 8000592:	f000 fe89 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <MX_GPIO_Init+0x130>)
 80005ae:	f000 fd09 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn1_Pin btn2_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn2_Pin;
 80005b2:	2360      	movs	r3, #96	; 0x60
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 fcfb 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005ce:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_GPIO_Init+0x130>)
 80005e8:	f000 fcec 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_GPIO_Init+0x134>)
 8000606:	f000 fcdd 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2017      	movs	r0, #23
 8000610:	f000 fca1 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000614:	2017      	movs	r0, #23
 8000616:	f000 fcba 	bl	8000f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2028      	movs	r0, #40	; 0x28
 8000620:	f000 fc99 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000624:	2028      	movs	r0, #40	; 0x28
 8000626:	f000 fcb2 	bl	8000f8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	48000800 	.word	0x48000800
 800063c:	48000400 	.word	0x48000400

08000640 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn1_Pin){
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	2b20      	cmp	r3, #32
 800064e:	d102      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x16>
		movimiento_piezas = 1;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_GPIO_EXTI_Callback+0x30>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]

	}
	if (GPIO_Pin == btn2_Pin){
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	2b40      	cmp	r3, #64	; 0x40
 800065a:	d103      	bne.n	8000664 <HAL_GPIO_EXTI_Callback+0x24>
		movimiento_piezas = -1;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_GPIO_EXTI_Callback+0x30>)
 800065e:	f04f 32ff 	mov.w	r2, #4294967295
 8000662:	601a      	str	r2, [r3, #0]

		}
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000184 	.word	0x20000184

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <write_byte>:




void write_byte (uint8_t byte)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e019      	b.n	80006c4 <write_byte+0x44>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <write_byte+0x54>)
 8000696:	f000 fe07 	bl	80012a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <write_byte+0x54>)
 80006aa:	f000 fdfd 	bl	80012a8 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <write_byte+0x54>)
 80006ba:	f000 fdf5 	bl	80012a8 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	dde2      	ble.n	8000690 <write_byte+0x10>
	}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	48000800 	.word	0x48000800

080006d8 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	4810      	ldr	r0, [pc, #64]	; (8000730 <write_max_cmd+0x58>)
 80006ee:	f000 fddb 	bl	80012a8 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e00a      	b.n	800070e <write_max_cmd+0x36>
	{
		write_byte (address);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc0 	bl	8000680 <write_byte>
		write_byte (cmd); 
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffbc 	bl	8000680 <write_byte>
	for (int i=0;i<num; i++)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	ddf1      	ble.n	80006f8 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000714:	2200      	movs	r2, #0
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <write_max_cmd+0x58>)
 800071a:	f000 fdc5 	bl	80012a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 800071e:	2201      	movs	r2, #1
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <write_max_cmd+0x58>)
 8000724:	f000 fdc0 	bl	80012a8 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	48000800 	.word	0x48000800

08000734 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000746:	797b      	ldrb	r3, [r7, #5]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00d      	beq.n	8000768 <setled+0x34>
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <setled+0xcc>)
 8000750:	5cd1      	ldrb	r1, [r2, r3]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2201      	movs	r2, #1
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	430a      	orrs	r2, r1
 8000760:	b2d1      	uxtb	r1, r2
 8000762:	4a27      	ldr	r2, [pc, #156]	; (8000800 <setled+0xcc>)
 8000764:	54d1      	strb	r1, [r2, r3]
 8000766:	e00e      	b.n	8000786 <setled+0x52>
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <setled+0xcc>)
 800076c:	5cd1      	ldrb	r1, [r2, r3]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2201      	movs	r2, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	43db      	mvns	r3, r3
 800077a:	b2da      	uxtb	r2, r3
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	400a      	ands	r2, r1
 8000780:	b2d1      	uxtb	r1, r2
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <setled+0xcc>)
 8000784:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	481a      	ldr	r0, [pc, #104]	; (8000804 <setled+0xd0>)
 800079c:	f000 fd84 	bl	80012a8 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e01b      	b.n	80007de <setled+0xaa>
	{
		if (i == (num-(n+1)))
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	425b      	negs	r3, r3
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d10d      	bne.n	80007cc <setled+0x98>
		{
			write_byte (((c+1)));
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff61 	bl	8000680 <write_byte>
			write_byte (buffer[col]);
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <setled+0xcc>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5b 	bl	8000680 <write_byte>
 80007ca:	e005      	b.n	80007d8 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff57 	bl	8000680 <write_byte>
			write_byte (0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff54 	bl	8000680 <write_byte>
	for (int i=0; i<num; i++) 
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dde0      	ble.n	80007a6 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80007e4:	2200      	movs	r2, #0
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <setled+0xd0>)
 80007ea:	f000 fd5d 	bl	80012a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80007ee:	2201      	movs	r2, #1
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <setled+0xd0>)
 80007f4:	f000 fd58 	bl	80012a8 <HAL_GPIO_WritePin>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000188 	.word	0x20000188
 8000804:	48000800 	.word	0x48000800

08000808 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	e02d      	b.n	800088e <setrow+0x86>
	{
		if (i == ((n)))
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	429a      	cmp	r2, r3
 8000838:	d120      	bne.n	800087c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	3307      	adds	r3, #7
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	e015      	b.n	8000870 <setrow+0x68>
			{
				bool b = value&0x80;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	b2d1      	uxtb	r1, r2
 800085c:	7bba      	ldrb	r2, [r7, #14]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff68 	bl	8000734 <setled>
				value<<=1;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	3b01      	subs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	429a      	cmp	r2, r3
 8000878:	dae4      	bge.n	8000844 <setrow+0x3c>
 800087a:	e005      	b.n	8000888 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feff 	bl	8000680 <write_byte>
			write_byte (0);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fefc 	bl	8000680 <write_byte>
	for (int i=0; i<num; i++) 
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	3301      	adds	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	2b00      	cmp	r3, #0
 8000892:	ddce      	ble.n	8000832 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4903      	ldr	r1, [pc, #12]	; (80008a4 <setrow+0x9c>)
 8000898:	7bfa      	ldrb	r2, [r7, #15]
 800089a:	54ca      	strb	r2, [r1, r3]
}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001d8 	.word	0x200001d8

080008a8 <max_clear>:
}



void max_clear(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e008      	b.n	80008c6 <max_clear+0x1e>
		setrow(i,0);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffa4 	bl	8000808 <setrow>
	for (int i=0; i<num*8; i++) 
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	ddf3      	ble.n	80008b4 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	e00c      	b.n	80008ec <max_clear+0x44>
	{
		buffer[i] = 0;
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <max_clear+0x54>)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <max_clear+0x58>)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b4f      	cmp	r3, #79	; 0x4f
 80008f0:	ddef      	ble.n	80008d2 <max_clear+0x2a>
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000188 	.word	0x20000188
 8000900:	200001d8 	.word	0x200001d8

08000904 <max_init>:
}



void max_init (uint8_t brightness)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800090e:	2100      	movs	r1, #0
 8000910:	2009      	movs	r0, #9
 8000912:	f7ff fee1 	bl	80006d8 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000916:	2107      	movs	r1, #7
 8000918:	200b      	movs	r0, #11
 800091a:	f7ff fedd 	bl	80006d8 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800091e:	2101      	movs	r1, #1
 8000920:	200c      	movs	r0, #12
 8000922:	f7ff fed9 	bl	80006d8 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000926:	2100      	movs	r1, #0
 8000928:	200f      	movs	r0, #15
 800092a:	f7ff fed5 	bl	80006d8 <write_max_cmd>
	
	max_clear ();
 800092e:	f7ff ffbb 	bl	80008a8 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4619      	mov	r1, r3
 8000936:	200a      	movs	r0, #10
 8000938:	f7ff fece 	bl	80006d8 <write_max_cmd>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x44>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x44>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x44>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x44>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097a:	2007      	movs	r0, #7
 800097c:	f000 fae0 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009de:	230c      	movs	r3, #12
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ee:	2307      	movs	r3, #7
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fae2 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f95c 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn1_Pin);
 8000a68:	2020      	movs	r0, #32
 8000a6a:	f000 fc35 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(btn2_Pin);
 8000a6e:	2040      	movs	r0, #64	; 0x40
 8000a70:	f000 fc32 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a80:	f000 fc2a 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_kill>:

int _kill(int pid, int sig)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa2:	f002 fc2b 	bl	80032fc <__errno>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2216      	movs	r2, #22
 8000aaa:	601a      	str	r2, [r3, #0]
  return -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_exit>:

void _exit (int status)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffe7 	bl	8000a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aca:	e7fe      	b.n	8000aca <_exit+0x12>

08000acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
  }

  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e009      	b.n	8000b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf1      	blt.n	8000b18 <_write+0x12>
  }
  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_close>:

int _close(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b66:	605a      	str	r2, [r3, #4]
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_isatty>:

int _isatty(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f002 fb90 	bl	80032fc <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20004000 	.word	0x20004000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000228 	.word	0x20000228
 8000c10:	20000380 	.word	0x20000380

08000c14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff ffea 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fb4f 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fb27 	bl	80002bc <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000c7c:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 8000c80:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000c84:	2000037c 	.word	0x2000037c

08000c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe4c 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000038 	.word	0x20000038
 8000d10:	20000040 	.word	0x20000040
 8000d14:	2000003c 	.word	0x2000003c

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	2000022c 	.word	0x2000022c

08000d40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000022c 	.word	0x2000022c

08000d58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000040 	.word	0x20000040

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e14e      	b.n	8001272 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8140 	beq.w	800126c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b03      	cmp	r3, #3
 8001070:	d017      	beq.n	80010a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d123      	bne.n	80010f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	6939      	ldr	r1, [r7, #16]
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0203 	and.w	r2, r3, #3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 809a 	beq.w	800126c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001138:	4b55      	ldr	r3, [pc, #340]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a54      	ldr	r2, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b52      	ldr	r3, [pc, #328]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_GPIO_Init+0x2d0>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1e0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_GPIO_Init+0x2d4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1dc>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a45      	ldr	r2, [pc, #276]	; (800129c <HAL_GPIO_Init+0x2d8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1d8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1d4>
 8001194:	2303      	movs	r3, #3
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1e2>
 8001198:	2305      	movs	r3, #5
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1e2>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1e2>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1e2>
 80011a4:	2300      	movs	r3, #0
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b6:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2d0>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e8:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_GPIO_Init+0x2e0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	f47f aea9 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f9a2 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800130e:	af00      	add	r7, sp, #0
 8001310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001318:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	f001 b823 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 817d 	beq.w	800163e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001344:	4bbc      	ldr	r3, [pc, #752]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4bb9      	ldr	r3, [pc, #740]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d15c      	bne.n	8001416 <HAL_RCC_OscConfig+0x10e>
 800135c:	4bb6      	ldr	r3, [pc, #728]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d155      	bne.n	8001416 <HAL_RCC_OscConfig+0x10e>
 800136a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800137e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <HAL_RCC_OscConfig+0x94>
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	e015      	b.n	80013c8 <HAL_RCC_OscConfig+0xc0>
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013c4:	4b9c      	ldr	r3, [pc, #624]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013d4:	fa92 f2a2 	rbit	r2, r2
 80013d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013e0:	fab2 f282 	clz	r2, r2
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	f042 0220 	orr.w	r2, r2, #32
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f002 021f 	and.w	r2, r2, #31
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 811f 	beq.w	800163c <HAL_RCC_OscConfig+0x334>
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 8116 	bne.w	800163c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f000 bfaf 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x12e>
 8001428:	4b83      	ldr	r3, [pc, #524]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a82      	ldr	r2, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e036      	b.n	80014a4 <HAL_RCC_OscConfig+0x19c>
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x158>
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7b      	ldr	r2, [pc, #492]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b79      	ldr	r3, [pc, #484]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a78      	ldr	r2, [pc, #480]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e021      	b.n	80014a4 <HAL_RCC_OscConfig+0x19c>
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x184>
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a70      	ldr	r2, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x19c>
 800148c:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a69      	ldr	r2, [pc, #420]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b67      	ldr	r3, [pc, #412]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a66      	ldr	r2, [pc, #408]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a4:	4b64      	ldr	r3, [pc, #400]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	f023 020f 	bic.w	r2, r3, #15
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	495f      	ldr	r1, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d059      	beq.n	8001582 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc37 	bl	8000d40 <HAL_GetTick>
 80014d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fc32 	bl	8000d40 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	; 0x64
 80014e6:	d902      	bls.n	80014ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	f000 bf43 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001502:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_RCC_OscConfig+0x218>
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e015      	b.n	800154c <HAL_RCC_OscConfig+0x244>
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001538:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800153c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001548:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001550:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001554:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001558:	fa92 f2a2 	rbit	r2, r2
 800155c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001560:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001564:	fab2 f282 	clz	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ab      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1d0>
 8001580:	e05d      	b.n	800163e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fbdd 	bl	8000d40 <HAL_GetTick>
 8001586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fbd8 	bl	8000d40 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d902      	bls.n	80015a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	f000 bee9 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 80015a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2cc>
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	e015      	b.n	8001600 <HAL_RCC_OscConfig+0x2f8>
 80015d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001604:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001608:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800160c:	fa92 f2a2 	rbit	r2, r2
 8001610:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001614:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001618:	fab2 f282 	clz	r2, r2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	f002 021f 	and.w	r2, r2, #31
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ab      	bne.n	800158c <HAL_RCC_OscConfig+0x284>
 8001634:	e003      	b.n	800163e <HAL_RCC_OscConfig+0x336>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 817d 	beq.w	800194e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001654:	4ba6      	ldr	r3, [pc, #664]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001660:	4ba3      	ldr	r3, [pc, #652]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d172      	bne.n	8001752 <HAL_RCC_OscConfig+0x44a>
 800166c:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d16c      	bne.n	8001752 <HAL_RCC_OscConfig+0x44a>
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800168a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	095b      	lsrs	r3, r3, #5
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d102      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3a0>
 80016a2:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	e013      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c8>
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2202      	movs	r2, #2
 80016d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016da:	fa92 f2a2 	rbit	r2, r2
 80016de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016e6:	fab2 f282 	clz	r2, r2
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f002 021f 	and.w	r2, r2, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <HAL_RCC_OscConfig+0x410>
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d002      	beq.n	8001718 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	f000 be2e 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b75      	ldr	r3, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	21f8      	movs	r1, #248	; 0xf8
 800172e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001736:	fa91 f1a1 	rbit	r1, r1
 800173a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800173e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001742:	fab1 f181 	clz	r1, r1
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	408b      	lsls	r3, r1
 800174a:	4969      	ldr	r1, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001750:	e0fd      	b.n	800194e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8088 	beq.w	8001874 <HAL_RCC_OscConfig+0x56c>
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001776:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	2301      	movs	r3, #1
 800178e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fad6 	bl	8000d40 <HAL_GetTick>
 8001794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fad1 	bl	8000d40 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d902      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f000 bde2 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d8>
 80017da:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e013      	b.n	8001808 <HAL_RCC_OscConfig+0x500>
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001804:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	2202      	movs	r2, #2
 800180a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800180e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001812:	fa92 f2a2 	rbit	r2, r2
 8001816:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800181a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800181e:	fab2 f282 	clz	r2, r2
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f042 0220 	orr.w	r2, r2, #32
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f002 021f 	and.w	r2, r2, #31
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f202 	lsl.w	r2, r1, r2
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0af      	beq.n	800179a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	21f8      	movs	r1, #248	; 0xf8
 8001850:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001858:	fa91 f1a1 	rbit	r1, r1
 800185c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001860:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001864:	fab1 f181 	clz	r1, r1
 8001868:	b2c9      	uxtb	r1, r1
 800186a:	408b      	lsls	r3, r1
 800186c:	4920      	ldr	r1, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
 8001872:	e06c      	b.n	800194e <HAL_RCC_OscConfig+0x646>
 8001874:	2301      	movs	r3, #1
 8001876:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	2300      	movs	r3, #0
 800189e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa4e 	bl	8000d40 <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa49 	bl	8000d40 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d902      	bls.n	80018c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f000 bd5a 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d104      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5ec>
 80018ea:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <HAL_RCC_OscConfig+0x5e8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x614>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800190c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001918:	4bc8      	ldr	r3, [pc, #800]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	2202      	movs	r2, #2
 800191e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001922:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800192e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ad      	bne.n	80018aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8110 	beq.w	8001b84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d079      	beq.n	8001a68 <HAL_RCC_OscConfig+0x760>
 8001974:	2301      	movs	r3, #1
 8001976:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4bab      	ldr	r3, [pc, #684]	; (8001c40 <HAL_RCC_OscConfig+0x938>)
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	461a      	mov	r2, r3
 800199a:	2301      	movs	r3, #1
 800199c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff f9cf 	bl	8000d40 <HAL_GetTick>
 80019a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff f9ca 	bl	8000d40 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d902      	bls.n	80019be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	f000 bcdb 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a18:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a24:	2102      	movs	r1, #2
 8001a26:	6019      	str	r1, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f1a3 	rbit	r1, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a3e:	6019      	str	r1, [r3, #0]
  return result;
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0a0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x6a0>
 8001a66:	e08d      	b.n	8001b84 <HAL_RCC_OscConfig+0x87c>
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a8a:	601a      	str	r2, [r3, #0]
  return result;
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x938>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f949 	bl	8000d40 <HAL_GetTick>
 8001aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f944 	bl	8000d40 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d902      	bls.n	8001aca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f000 bc55 	b.w	8002374 <HAL_RCC_OscConfig+0x106c>
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b42:	2102      	movs	r1, #2
 8001b44:	6019      	str	r1, [r3, #0]
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f1a3 	rbit	r1, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b5c:	6019      	str	r1, [r3, #0]
  return result;
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d197      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 81a1 	beq.w	8001edc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d116      	bne.n	8001bda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	61d3      	str	r3, [r2, #28]
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x93c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11a      	bne.n	8001c1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x93c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_RCC_OscConfig+0x93c>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f8a5 	bl	8000d40 <HAL_GetTick>
 8001bf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	e009      	b.n	8001c10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff f8a0 	bl	8000d40 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e3b1      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_OscConfig+0x93c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_OscConfig+0x940>
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a02      	ldr	r2, [pc, #8]	; (8001c3c <HAL_RCC_OscConfig+0x934>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e03c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x9ac>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	10908120 	.word	0x10908120
 8001c44:	40007000 	.word	0x40007000
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x96a>
 8001c58:	4bc1      	ldr	r3, [pc, #772]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4ac0      	ldr	r2, [pc, #768]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	4bbe      	ldr	r3, [pc, #760]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4abd      	ldr	r2, [pc, #756]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c6a:	f023 0304 	bic.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e020      	b.n	8001cb4 <HAL_RCC_OscConfig+0x9ac>
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x994>
 8001c82:	4bb7      	ldr	r3, [pc, #732]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4ab6      	ldr	r2, [pc, #728]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4bb4      	ldr	r3, [pc, #720]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4ab3      	ldr	r2, [pc, #716]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x9ac>
 8001c9c:	4bb0      	ldr	r3, [pc, #704]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4aaf      	ldr	r2, [pc, #700]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	4bad      	ldr	r3, [pc, #692]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4aac      	ldr	r2, [pc, #688]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8081 	beq.w	8001dc8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f83b 	bl	8000d40 <HAL_GetTick>
 8001cca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f836 	bl	8000d40 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e345      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d14:	2202      	movs	r2, #2
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d2e:	601a      	str	r2, [r3, #0]
  return result;
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_OscConfig+0xa4c>
 8001d4e:	4b84      	ldr	r3, [pc, #528]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	e013      	b.n	8001d7c <HAL_RCC_OscConfig+0xa74>
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d84:	2102      	movs	r1, #2
 8001d86:	6011      	str	r1, [r2, #0]
 8001d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fa92 f1a2 	rbit	r1, r2
 8001d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d9e:	6011      	str	r1, [r2, #0]
  return result;
 8001da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d084      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x9c8>
 8001dc6:	e07f      	b.n	8001ec8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ffba 	bl	8000d40 <HAL_GetTick>
 8001dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7fe ffb5 	bl	8000d40 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e2c4      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001df2:	2202      	movs	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e16:	2202      	movs	r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0xb4e>
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	e013      	b.n	8001e7e <HAL_RCC_OscConfig+0xb76>
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e86:	2102      	movs	r1, #2
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fa92 f1a2 	rbit	r1, r2
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d184      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8242 	beq.w	8002372 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_OscConfig+0xc58>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	f000 8213 	beq.w	8002322 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	f040 8162 	bne.w	80021d2 <HAL_RCC_OscConfig+0xeca>
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f32:	601a      	str	r2, [r3, #0]
  return result;
 8001f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f38:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fef4 	bl	8000d40 <HAL_GetTick>
 8001f58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	e00c      	b.n	8001f78 <HAL_RCC_OscConfig+0xc70>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe feec 	bl	8000d40 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1fd      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f9c:	601a      	str	r2, [r3, #0]
  return result;
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xcba>
 8001fbc:	4bb0      	ldr	r3, [pc, #704]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e027      	b.n	8002012 <HAL_RCC_OscConfig+0xd0a>
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002016:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800201a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800201e:	6011      	str	r1, [r2, #0]
 8002020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002024:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	fa92 f1a2 	rbit	r1, r2
 800202e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002032:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002036:	6011      	str	r1, [r2, #0]
  return result;
 8002038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800203c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f202 	lsl.w	r2, r1, r2
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d182      	bne.n	8001f64 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	430b      	orrs	r3, r1
 8002080:	497f      	ldr	r1, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800208e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020aa:	601a      	str	r2, [r3, #0]
  return result;
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	461a      	mov	r2, r3
 80020c8:	2301      	movs	r3, #1
 80020ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fe38 	bl	8000d40 <HAL_GetTick>
 80020d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe fe33 	bl	8000d40 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e144      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800210e:	601a      	str	r2, [r3, #0]
  return result;
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002118:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0xe2c>
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e027      	b.n	8002184 <HAL_RCC_OscConfig+0xe7c>
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002188:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800218c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002190:	6011      	str	r1, [r2, #0]
 8002192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002196:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	fa92 f1a2 	rbit	r1, r2
 80021a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021a8:	6011      	str	r1, [r2, #0]
  return result;
 80021aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d082      	beq.n	80020d6 <HAL_RCC_OscConfig+0xdce>
 80021d0:	e0cf      	b.n	8002372 <HAL_RCC_OscConfig+0x106a>
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002200:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800220c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	461a      	mov	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fd92 	bl	8000d40 <HAL_GetTick>
 800221c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e009      	b.n	8002236 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fd8d 	bl	8000d40 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e09e      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800223e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800225a:	601a      	str	r2, [r3, #0]
  return result;
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002264:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_RCC_OscConfig+0xf7c>
 800227a:	4b01      	ldr	r3, [pc, #4]	; (8002280 <HAL_RCC_OscConfig+0xf78>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e029      	b.n	80022d4 <HAL_RCC_OscConfig+0xfcc>
 8002280:	40021000 	.word	0x40021000
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x1078>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	fa92 f1a2 	rbit	r1, r2
 80022f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022f8:	6011      	str	r1, [r2, #0]
  return result;
 80022fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d180      	bne.n	8002222 <HAL_RCC_OscConfig+0xf1a>
 8002320:	e027      	b.n	8002372 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e01e      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_OscConfig+0x1078>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800233e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002342:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	429a      	cmp	r2, r3
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002356:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800235a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b09e      	sub	sp, #120	; 0x78
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e162      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b90      	ldr	r3, [pc, #576]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d910      	bls.n	80023cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b8d      	ldr	r3, [pc, #564]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	498b      	ldr	r1, [pc, #556]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e14a      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	497f      	ldr	r1, [pc, #508]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80dc 	beq.w	80025b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d13c      	bne.n	800247a <HAL_RCC_ClockConfig+0xf6>
 8002400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002404:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d102      	bne.n	800242a <HAL_RCC_ClockConfig+0xa6>
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e00f      	b.n	800244a <HAL_RCC_ClockConfig+0xc6>
 800242a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	667b      	str	r3, [r7, #100]	; 0x64
 8002438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243c:	663b      	str	r3, [r7, #96]	; 0x60
 800243e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800244e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800245a:	fab2 f282 	clz	r2, r2
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f002 021f 	and.w	r2, r2, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d17b      	bne.n	800256e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0f3      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d13c      	bne.n	80024fc <HAL_RCC_ClockConfig+0x178>
 8002482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002486:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_ClockConfig+0x128>
 80024a6:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e00f      	b.n	80024cc <HAL_RCC_ClockConfig+0x148>
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d4:	fa92 f2a2 	rbit	r2, r2
 80024d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d13a      	bne.n	800256e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b2      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
 80024fc:	2302      	movs	r3, #2
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_ClockConfig+0x1a0>
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e00d      	b.n	8002540 <HAL_RCC_ClockConfig+0x1bc>
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2202      	movs	r2, #2
 8002542:	61ba      	str	r2, [r7, #24]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	617a      	str	r2, [r7, #20]
  return result;
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e079      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	491a      	ldr	r1, [pc, #104]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe fbde 	bl	8000d40 <HAL_GetTick>
 8002584:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fbda 	bl	8000d40 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e061      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d214      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4906      	ldr	r1, [pc, #24]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_ClockConfig+0x25c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e040      	b.n	8002662 <HAL_RCC_ClockConfig+0x2de>
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_ClockConfig+0x2e8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	491a      	ldr	r1, [pc, #104]	; (800266c <HAL_RCC_ClockConfig+0x2e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_RCC_ClockConfig+0x2e8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4912      	ldr	r1, [pc, #72]	; (800266c <HAL_RCC_ClockConfig+0x2e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002626:	f000 f829 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_ClockConfig+0x2e8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002634:	22f0      	movs	r2, #240	; 0xf0
 8002636:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	fa92 f2a2 	rbit	r2, r2
 800263e:	60fa      	str	r2, [r7, #12]
  return result;
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	fab2 f282 	clz	r2, r2
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	40d3      	lsrs	r3, r2
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x2ec>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	fa21 f303 	lsr.w	r3, r1, r3
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCC_ClockConfig+0x2f0>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_ClockConfig+0x2f4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fb2c 	bl	8000cb8 <HAL_InitTick>
  
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3778      	adds	r7, #120	; 0x78
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	08003fe8 	.word	0x08003fe8
 8002674:	20000038 	.word	0x20000038
 8002678:	2000003c 	.word	0x2000003c

0800267c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b08b      	sub	sp, #44	; 0x2c
 8002680:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x30>
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x36>
 80026aa:	e03c      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026ae:	623b      	str	r3, [r7, #32]
      break;
 80026b0:	e03c      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	607a      	str	r2, [r7, #4]
  return result;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	40d3      	lsrs	r3, r2
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	220f      	movs	r2, #15
 80026e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	60fa      	str	r2, [r7, #12]
  return result;
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	40d3      	lsrs	r3, r2
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	fbb2 f2f3 	udiv	r2, r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	e004      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_RCC_GetSysClockFreq+0xd0>)
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002728:	623b      	str	r3, [r7, #32]
      break;
 800272a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272c:	6a3b      	ldr	r3, [r7, #32]
}
 800272e:	4618      	mov	r0, r3
 8002730:	372c      	adds	r7, #44	; 0x2c
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	007a1200 	.word	0x007a1200
 8002744:	08004000 	.word	0x08004000
 8002748:	08004010 	.word	0x08004010
 800274c:	003d0900 	.word	0x003d0900

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000038 	.word	0x20000038

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800276e:	f7ff ffef 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800277c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002780:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	fa92 f2a2 	rbit	r2, r2
 8002788:	603a      	str	r2, [r7, #0]
  return result;
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	40d3      	lsrs	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08003ff8 	.word	0x08003ff8

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027b2:	f7ff ffcd 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	603a      	str	r2, [r7, #0]
  return result;
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08003ff8 	.word	0x08003ff8

080027f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e040      	b.n	8002884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f8ba 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f82c 	bl	800288c <UART_SetConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e022      	b.n	8002884 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f956 	bl	8002af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f9dd 	bl	8002c3c <UART_CheckIdleState>
 8002882:	4603      	mov	r3, r0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <UART_SetConfig+0x254>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a78      	ldr	r2, [pc, #480]	; (8002ae4 <UART_SetConfig+0x258>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d120      	bne.n	800294a <UART_SetConfig+0xbe>
 8002908:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <UART_SetConfig+0x25c>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d817      	bhi.n	8002944 <UART_SetConfig+0xb8>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <UART_SetConfig+0x90>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002939 	.word	0x08002939
 8002924:	0800293f 	.word	0x0800293f
 8002928:	08002933 	.word	0x08002933
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	e01d      	b.n	800296e <UART_SetConfig+0xe2>
 8002932:	2302      	movs	r3, #2
 8002934:	77fb      	strb	r3, [r7, #31]
 8002936:	e01a      	b.n	800296e <UART_SetConfig+0xe2>
 8002938:	2304      	movs	r3, #4
 800293a:	77fb      	strb	r3, [r7, #31]
 800293c:	e017      	b.n	800296e <UART_SetConfig+0xe2>
 800293e:	2308      	movs	r3, #8
 8002940:	77fb      	strb	r3, [r7, #31]
 8002942:	e014      	b.n	800296e <UART_SetConfig+0xe2>
 8002944:	2310      	movs	r3, #16
 8002946:	77fb      	strb	r3, [r7, #31]
 8002948:	e011      	b.n	800296e <UART_SetConfig+0xe2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a67      	ldr	r2, [pc, #412]	; (8002aec <UART_SetConfig+0x260>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d102      	bne.n	800295a <UART_SetConfig+0xce>
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e009      	b.n	800296e <UART_SetConfig+0xe2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a64      	ldr	r2, [pc, #400]	; (8002af0 <UART_SetConfig+0x264>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <UART_SetConfig+0xde>
 8002964:	2300      	movs	r3, #0
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e001      	b.n	800296e <UART_SetConfig+0xe2>
 800296a:	2310      	movs	r3, #16
 800296c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002976:	d15a      	bne.n	8002a2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d827      	bhi.n	80029ce <UART_SetConfig+0x142>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <UART_SetConfig+0xf8>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	080029a9 	.word	0x080029a9
 8002988:	080029b1 	.word	0x080029b1
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029cf 	.word	0x080029cf
 8002994:	080029bf 	.word	0x080029bf
 8002998:	080029cf 	.word	0x080029cf
 800299c:	080029cf 	.word	0x080029cf
 80029a0:	080029cf 	.word	0x080029cf
 80029a4:	080029c7 	.word	0x080029c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a8:	f7ff fede 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80029ac:	61b8      	str	r0, [r7, #24]
        break;
 80029ae:	e013      	b.n	80029d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b0:	f7ff fefc 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 80029b4:	61b8      	str	r0, [r7, #24]
        break;
 80029b6:	e00f      	b.n	80029d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b8:	4b4e      	ldr	r3, [pc, #312]	; (8002af4 <UART_SetConfig+0x268>)
 80029ba:	61bb      	str	r3, [r7, #24]
        break;
 80029bc:	e00c      	b.n	80029d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029be:	f7ff fe5d 	bl	800267c <HAL_RCC_GetSysClockFreq>
 80029c2:	61b8      	str	r0, [r7, #24]
        break;
 80029c4:	e008      	b.n	80029d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	61bb      	str	r3, [r7, #24]
        break;
 80029cc:	e004      	b.n	80029d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	77bb      	strb	r3, [r7, #30]
        break;
 80029d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d074      	beq.n	8002ac8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	005a      	lsls	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	441a      	add	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d916      	bls.n	8002a28 <UART_SetConfig+0x19c>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d212      	bcs.n	8002a28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f023 030f 	bic.w	r3, r3, #15
 8002a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	89fa      	ldrh	r2, [r7, #14]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e04f      	b.n	8002ac8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	77bb      	strb	r3, [r7, #30]
 8002a2c:	e04c      	b.n	8002ac8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d828      	bhi.n	8002a86 <UART_SetConfig+0x1fa>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <UART_SetConfig+0x1b0>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002a69 	.word	0x08002a69
 8002a44:	08002a71 	.word	0x08002a71
 8002a48:	08002a87 	.word	0x08002a87
 8002a4c:	08002a77 	.word	0x08002a77
 8002a50:	08002a87 	.word	0x08002a87
 8002a54:	08002a87 	.word	0x08002a87
 8002a58:	08002a87 	.word	0x08002a87
 8002a5c:	08002a7f 	.word	0x08002a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a60:	f7ff fe82 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8002a64:	61b8      	str	r0, [r7, #24]
        break;
 8002a66:	e013      	b.n	8002a90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff fea0 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8002a6c:	61b8      	str	r0, [r7, #24]
        break;
 8002a6e:	e00f      	b.n	8002a90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <UART_SetConfig+0x268>)
 8002a72:	61bb      	str	r3, [r7, #24]
        break;
 8002a74:	e00c      	b.n	8002a90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a76:	f7ff fe01 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002a7a:	61b8      	str	r0, [r7, #24]
        break;
 8002a7c:	e008      	b.n	8002a90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	61bb      	str	r3, [r7, #24]
        break;
 8002a84:	e004      	b.n	8002a90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a8e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	085a      	lsrs	r2, r3, #1
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d909      	bls.n	8002ac4 <UART_SetConfig+0x238>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d205      	bcs.n	8002ac4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	e001      	b.n	8002ac8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ad4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	efff69f3 	.word	0xefff69f3
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40004400 	.word	0x40004400
 8002af0:	40004800 	.word	0x40004800
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01a      	beq.n	8002c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf6:	d10a      	bne.n	8002c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b098      	sub	sp, #96	; 0x60
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c4c:	f7fe f878 	bl	8000d40 <HAL_GetTick>
 8002c50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d12e      	bne.n	8002cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f88c 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d021      	beq.n	8002cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e6      	bne.n	8002c7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e062      	b.n	8002d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d149      	bne.n	8002d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f856 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
 8002d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e6      	bne.n	8002ce6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3308      	adds	r3, #8
 8002d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d38:	61fa      	str	r2, [r7, #28]
 8002d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	617b      	str	r3, [r7, #20]
   return(result);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e011      	b.n	8002d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3758      	adds	r7, #88	; 0x58
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	e049      	b.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d045      	beq.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fd ffcb 	bl	8000d40 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e048      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d031      	beq.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d110      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2208      	movs	r2, #8
 8002de2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f838 	bl	8002e5a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2208      	movs	r2, #8
 8002dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e029      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0c:	d111      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f81e 	bl	8002e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e00f      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d0a6      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b095      	sub	sp, #84	; 0x54
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
 8002e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e6      	bne.n	8002e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d118      	bne.n	8002f02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f023 0310 	bic.w	r3, r3, #16
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	613b      	str	r3, [r7, #16]
   return(result);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e6      	bne.n	8002ed0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f16:	bf00      	nop
 8002f18:	3754      	adds	r7, #84	; 0x54
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <srand>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <srand+0x44>)
 8002f28:	681d      	ldr	r5, [r3, #0]
 8002f2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	b9b3      	cbnz	r3, 8002f5e <srand+0x3a>
 8002f30:	2018      	movs	r0, #24
 8002f32:	f000 fa7b 	bl	800342c <malloc>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6328      	str	r0, [r5, #48]	; 0x30
 8002f3a:	b920      	cbnz	r0, 8002f46 <srand+0x22>
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <srand+0x48>)
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <srand+0x4c>)
 8002f40:	2146      	movs	r1, #70	; 0x46
 8002f42:	f000 fa09 	bl	8003358 <__assert_func>
 8002f46:	490b      	ldr	r1, [pc, #44]	; (8002f74 <srand+0x50>)
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <srand+0x54>)
 8002f4a:	e9c0 1300 	strd	r1, r3, [r0]
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <srand+0x58>)
 8002f50:	6083      	str	r3, [r0, #8]
 8002f52:	230b      	movs	r3, #11
 8002f54:	8183      	strh	r3, [r0, #12]
 8002f56:	2100      	movs	r1, #0
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002f5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	611c      	str	r4, [r3, #16]
 8002f64:	615a      	str	r2, [r3, #20]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	2000009c 	.word	0x2000009c
 8002f6c:	08004020 	.word	0x08004020
 8002f70:	08004037 	.word	0x08004037
 8002f74:	abcd330e 	.word	0xabcd330e
 8002f78:	e66d1234 	.word	0xe66d1234
 8002f7c:	0005deec 	.word	0x0005deec

08002f80 <rand>:
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <rand+0x5c>)
 8002f82:	b510      	push	{r4, lr}
 8002f84:	681c      	ldr	r4, [r3, #0]
 8002f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f88:	b9b3      	cbnz	r3, 8002fb8 <rand+0x38>
 8002f8a:	2018      	movs	r0, #24
 8002f8c:	f000 fa4e 	bl	800342c <malloc>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6320      	str	r0, [r4, #48]	; 0x30
 8002f94:	b920      	cbnz	r0, 8002fa0 <rand+0x20>
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <rand+0x60>)
 8002f98:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <rand+0x64>)
 8002f9a:	2152      	movs	r1, #82	; 0x52
 8002f9c:	f000 f9dc 	bl	8003358 <__assert_func>
 8002fa0:	4911      	ldr	r1, [pc, #68]	; (8002fe8 <rand+0x68>)
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <rand+0x6c>)
 8002fa4:	e9c0 1300 	strd	r1, r3, [r0]
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <rand+0x70>)
 8002faa:	6083      	str	r3, [r0, #8]
 8002fac:	230b      	movs	r3, #11
 8002fae:	8183      	strh	r3, [r0, #12]
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002fb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002fba:	480e      	ldr	r0, [pc, #56]	; (8002ff4 <rand+0x74>)
 8002fbc:	690b      	ldr	r3, [r1, #16]
 8002fbe:	694c      	ldr	r4, [r1, #20]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <rand+0x78>)
 8002fc2:	4358      	muls	r0, r3
 8002fc4:	fb02 0004 	mla	r0, r2, r4, r0
 8002fc8:	fba3 3202 	umull	r3, r2, r3, r2
 8002fcc:	3301      	adds	r3, #1
 8002fce:	eb40 0002 	adc.w	r0, r0, r2
 8002fd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002fd6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	2000009c 	.word	0x2000009c
 8002fe0:	08004020 	.word	0x08004020
 8002fe4:	08004037 	.word	0x08004037
 8002fe8:	abcd330e 	.word	0xabcd330e
 8002fec:	e66d1234 	.word	0xe66d1234
 8002ff0:	0005deec 	.word	0x0005deec
 8002ff4:	5851f42d 	.word	0x5851f42d
 8002ff8:	4c957f2d 	.word	0x4c957f2d

08002ffc <std>:
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	b510      	push	{r4, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	e9c0 3300 	strd	r3, r3, [r0]
 8003006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800300a:	6083      	str	r3, [r0, #8]
 800300c:	8181      	strh	r1, [r0, #12]
 800300e:	6643      	str	r3, [r0, #100]	; 0x64
 8003010:	81c2      	strh	r2, [r0, #14]
 8003012:	6183      	str	r3, [r0, #24]
 8003014:	4619      	mov	r1, r3
 8003016:	2208      	movs	r2, #8
 8003018:	305c      	adds	r0, #92	; 0x5c
 800301a:	f000 f8f4 	bl	8003206 <memset>
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <std+0x58>)
 8003020:	6263      	str	r3, [r4, #36]	; 0x24
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <std+0x5c>)
 8003024:	62a3      	str	r3, [r4, #40]	; 0x28
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <std+0x60>)
 8003028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <std+0x64>)
 800302c:	6323      	str	r3, [r4, #48]	; 0x30
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <std+0x68>)
 8003030:	6224      	str	r4, [r4, #32]
 8003032:	429c      	cmp	r4, r3
 8003034:	d006      	beq.n	8003044 <std+0x48>
 8003036:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800303a:	4294      	cmp	r4, r2
 800303c:	d002      	beq.n	8003044 <std+0x48>
 800303e:	33d0      	adds	r3, #208	; 0xd0
 8003040:	429c      	cmp	r4, r3
 8003042:	d105      	bne.n	8003050 <std+0x54>
 8003044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800304c:	f000 b980 	b.w	8003350 <__retarget_lock_init_recursive>
 8003050:	bd10      	pop	{r4, pc}
 8003052:	bf00      	nop
 8003054:	08003181 	.word	0x08003181
 8003058:	080031a3 	.word	0x080031a3
 800305c:	080031db 	.word	0x080031db
 8003060:	080031ff 	.word	0x080031ff
 8003064:	20000230 	.word	0x20000230

08003068 <stdio_exit_handler>:
 8003068:	4a02      	ldr	r2, [pc, #8]	; (8003074 <stdio_exit_handler+0xc>)
 800306a:	4903      	ldr	r1, [pc, #12]	; (8003078 <stdio_exit_handler+0x10>)
 800306c:	4803      	ldr	r0, [pc, #12]	; (800307c <stdio_exit_handler+0x14>)
 800306e:	f000 b869 	b.w	8003144 <_fwalk_sglue>
 8003072:	bf00      	nop
 8003074:	20000044 	.word	0x20000044
 8003078:	080036a1 	.word	0x080036a1
 800307c:	20000050 	.word	0x20000050

08003080 <cleanup_stdio>:
 8003080:	6841      	ldr	r1, [r0, #4]
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <cleanup_stdio+0x34>)
 8003084:	4299      	cmp	r1, r3
 8003086:	b510      	push	{r4, lr}
 8003088:	4604      	mov	r4, r0
 800308a:	d001      	beq.n	8003090 <cleanup_stdio+0x10>
 800308c:	f000 fb08 	bl	80036a0 <_fflush_r>
 8003090:	68a1      	ldr	r1, [r4, #8]
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <cleanup_stdio+0x38>)
 8003094:	4299      	cmp	r1, r3
 8003096:	d002      	beq.n	800309e <cleanup_stdio+0x1e>
 8003098:	4620      	mov	r0, r4
 800309a:	f000 fb01 	bl	80036a0 <_fflush_r>
 800309e:	68e1      	ldr	r1, [r4, #12]
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <cleanup_stdio+0x3c>)
 80030a2:	4299      	cmp	r1, r3
 80030a4:	d004      	beq.n	80030b0 <cleanup_stdio+0x30>
 80030a6:	4620      	mov	r0, r4
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ac:	f000 baf8 	b.w	80036a0 <_fflush_r>
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	bf00      	nop
 80030b4:	20000230 	.word	0x20000230
 80030b8:	20000298 	.word	0x20000298
 80030bc:	20000300 	.word	0x20000300

080030c0 <global_stdio_init.part.0>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <global_stdio_init.part.0+0x30>)
 80030c4:	4c0b      	ldr	r4, [pc, #44]	; (80030f4 <global_stdio_init.part.0+0x34>)
 80030c6:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <global_stdio_init.part.0+0x38>)
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	4620      	mov	r0, r4
 80030cc:	2200      	movs	r2, #0
 80030ce:	2104      	movs	r1, #4
 80030d0:	f7ff ff94 	bl	8002ffc <std>
 80030d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80030d8:	2201      	movs	r2, #1
 80030da:	2109      	movs	r1, #9
 80030dc:	f7ff ff8e 	bl	8002ffc <std>
 80030e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80030e4:	2202      	movs	r2, #2
 80030e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ea:	2112      	movs	r1, #18
 80030ec:	f7ff bf86 	b.w	8002ffc <std>
 80030f0:	20000368 	.word	0x20000368
 80030f4:	20000230 	.word	0x20000230
 80030f8:	08003069 	.word	0x08003069

080030fc <__sfp_lock_acquire>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__sfp_lock_acquire+0x8>)
 80030fe:	f000 b928 	b.w	8003352 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	20000371 	.word	0x20000371

08003108 <__sfp_lock_release>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__sfp_lock_release+0x8>)
 800310a:	f000 b923 	b.w	8003354 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	20000371 	.word	0x20000371

08003114 <__sinit>:
 8003114:	b510      	push	{r4, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	f7ff fff0 	bl	80030fc <__sfp_lock_acquire>
 800311c:	6a23      	ldr	r3, [r4, #32]
 800311e:	b11b      	cbz	r3, 8003128 <__sinit+0x14>
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f7ff bff0 	b.w	8003108 <__sfp_lock_release>
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__sinit+0x28>)
 800312a:	6223      	str	r3, [r4, #32]
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__sinit+0x2c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f5      	bne.n	8003120 <__sinit+0xc>
 8003134:	f7ff ffc4 	bl	80030c0 <global_stdio_init.part.0>
 8003138:	e7f2      	b.n	8003120 <__sinit+0xc>
 800313a:	bf00      	nop
 800313c:	08003081 	.word	0x08003081
 8003140:	20000368 	.word	0x20000368

08003144 <_fwalk_sglue>:
 8003144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003148:	4607      	mov	r7, r0
 800314a:	4688      	mov	r8, r1
 800314c:	4614      	mov	r4, r2
 800314e:	2600      	movs	r6, #0
 8003150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003154:	f1b9 0901 	subs.w	r9, r9, #1
 8003158:	d505      	bpl.n	8003166 <_fwalk_sglue+0x22>
 800315a:	6824      	ldr	r4, [r4, #0]
 800315c:	2c00      	cmp	r4, #0
 800315e:	d1f7      	bne.n	8003150 <_fwalk_sglue+0xc>
 8003160:	4630      	mov	r0, r6
 8003162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d907      	bls.n	800317c <_fwalk_sglue+0x38>
 800316c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003170:	3301      	adds	r3, #1
 8003172:	d003      	beq.n	800317c <_fwalk_sglue+0x38>
 8003174:	4629      	mov	r1, r5
 8003176:	4638      	mov	r0, r7
 8003178:	47c0      	blx	r8
 800317a:	4306      	orrs	r6, r0
 800317c:	3568      	adds	r5, #104	; 0x68
 800317e:	e7e9      	b.n	8003154 <_fwalk_sglue+0x10>

08003180 <__sread>:
 8003180:	b510      	push	{r4, lr}
 8003182:	460c      	mov	r4, r1
 8003184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003188:	f000 f894 	bl	80032b4 <_read_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	bfab      	itete	ge
 8003190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003192:	89a3      	ldrhlt	r3, [r4, #12]
 8003194:	181b      	addge	r3, r3, r0
 8003196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800319a:	bfac      	ite	ge
 800319c:	6563      	strge	r3, [r4, #84]	; 0x54
 800319e:	81a3      	strhlt	r3, [r4, #12]
 80031a0:	bd10      	pop	{r4, pc}

080031a2 <__swrite>:
 80031a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a6:	461f      	mov	r7, r3
 80031a8:	898b      	ldrh	r3, [r1, #12]
 80031aa:	05db      	lsls	r3, r3, #23
 80031ac:	4605      	mov	r5, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	4616      	mov	r6, r2
 80031b2:	d505      	bpl.n	80031c0 <__swrite+0x1e>
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	2302      	movs	r3, #2
 80031ba:	2200      	movs	r2, #0
 80031bc:	f000 f868 	bl	8003290 <_lseek_r>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ca:	81a3      	strh	r3, [r4, #12]
 80031cc:	4632      	mov	r2, r6
 80031ce:	463b      	mov	r3, r7
 80031d0:	4628      	mov	r0, r5
 80031d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	f000 b87f 	b.w	80032d8 <_write_r>

080031da <__sseek>:
 80031da:	b510      	push	{r4, lr}
 80031dc:	460c      	mov	r4, r1
 80031de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e2:	f000 f855 	bl	8003290 <_lseek_r>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	89a3      	ldrh	r3, [r4, #12]
 80031ea:	bf15      	itete	ne
 80031ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80031ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031f6:	81a3      	strheq	r3, [r4, #12]
 80031f8:	bf18      	it	ne
 80031fa:	81a3      	strhne	r3, [r4, #12]
 80031fc:	bd10      	pop	{r4, pc}

080031fe <__sclose>:
 80031fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003202:	f000 b823 	b.w	800324c <_close_r>

08003206 <memset>:
 8003206:	4402      	add	r2, r0
 8003208:	4603      	mov	r3, r0
 800320a:	4293      	cmp	r3, r2
 800320c:	d100      	bne.n	8003210 <memset+0xa>
 800320e:	4770      	bx	lr
 8003210:	f803 1b01 	strb.w	r1, [r3], #1
 8003214:	e7f9      	b.n	800320a <memset+0x4>
	...

08003218 <time>:
 8003218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <time+0x30>)
 800321c:	2200      	movs	r2, #0
 800321e:	4669      	mov	r1, sp
 8003220:	4604      	mov	r4, r0
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	f000 f822 	bl	800326c <_gettimeofday_r>
 8003228:	2800      	cmp	r0, #0
 800322a:	bfbe      	ittt	lt
 800322c:	f04f 32ff 	movlt.w	r2, #4294967295
 8003230:	f04f 33ff 	movlt.w	r3, #4294967295
 8003234:	e9cd 2300 	strdlt	r2, r3, [sp]
 8003238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800323c:	b10c      	cbz	r4, 8003242 <time+0x2a>
 800323e:	e9c4 0100 	strd	r0, r1, [r4]
 8003242:	b004      	add	sp, #16
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	2000009c 	.word	0x2000009c

0800324c <_close_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4d06      	ldr	r5, [pc, #24]	; (8003268 <_close_r+0x1c>)
 8003250:	2300      	movs	r3, #0
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f7fd fc71 	bl	8000b3e <_close>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_close_r+0x1a>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_close_r+0x1a>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	2000036c 	.word	0x2000036c

0800326c <_gettimeofday_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4d07      	ldr	r5, [pc, #28]	; (800328c <_gettimeofday_r+0x20>)
 8003270:	2300      	movs	r3, #0
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	f000 fe93 	bl	8003fa4 <_gettimeofday>
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	d102      	bne.n	8003288 <_gettimeofday_r+0x1c>
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	b103      	cbz	r3, 8003288 <_gettimeofday_r+0x1c>
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	bd38      	pop	{r3, r4, r5, pc}
 800328a:	bf00      	nop
 800328c:	2000036c 	.word	0x2000036c

08003290 <_lseek_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4d07      	ldr	r5, [pc, #28]	; (80032b0 <_lseek_r+0x20>)
 8003294:	4604      	mov	r4, r0
 8003296:	4608      	mov	r0, r1
 8003298:	4611      	mov	r1, r2
 800329a:	2200      	movs	r2, #0
 800329c:	602a      	str	r2, [r5, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	f7fd fc74 	bl	8000b8c <_lseek>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_lseek_r+0x1e>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_lseek_r+0x1e>
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	2000036c 	.word	0x2000036c

080032b4 <_read_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4d07      	ldr	r5, [pc, #28]	; (80032d4 <_read_r+0x20>)
 80032b8:	4604      	mov	r4, r0
 80032ba:	4608      	mov	r0, r1
 80032bc:	4611      	mov	r1, r2
 80032be:	2200      	movs	r2, #0
 80032c0:	602a      	str	r2, [r5, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f7fd fc02 	bl	8000acc <_read>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_read_r+0x1e>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_read_r+0x1e>
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	2000036c 	.word	0x2000036c

080032d8 <_write_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4d07      	ldr	r5, [pc, #28]	; (80032f8 <_write_r+0x20>)
 80032dc:	4604      	mov	r4, r0
 80032de:	4608      	mov	r0, r1
 80032e0:	4611      	mov	r1, r2
 80032e2:	2200      	movs	r2, #0
 80032e4:	602a      	str	r2, [r5, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7fd fc0d 	bl	8000b06 <_write>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_write_r+0x1e>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_write_r+0x1e>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	2000036c 	.word	0x2000036c

080032fc <__errno>:
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <__errno+0x8>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000009c 	.word	0x2000009c

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	4d0d      	ldr	r5, [pc, #52]	; (8003340 <__libc_init_array+0x38>)
 800330c:	4c0d      	ldr	r4, [pc, #52]	; (8003344 <__libc_init_array+0x3c>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	2600      	movs	r6, #0
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	4d0b      	ldr	r5, [pc, #44]	; (8003348 <__libc_init_array+0x40>)
 800331a:	4c0c      	ldr	r4, [pc, #48]	; (800334c <__libc_init_array+0x44>)
 800331c:	f000 fe4a 	bl	8003fb4 <_init>
 8003320:	1b64      	subs	r4, r4, r5
 8003322:	10a4      	asrs	r4, r4, #2
 8003324:	2600      	movs	r6, #0
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	08004100 	.word	0x08004100
 8003344:	08004100 	.word	0x08004100
 8003348:	08004100 	.word	0x08004100
 800334c:	08004104 	.word	0x08004104

08003350 <__retarget_lock_init_recursive>:
 8003350:	4770      	bx	lr

08003352 <__retarget_lock_acquire_recursive>:
 8003352:	4770      	bx	lr

08003354 <__retarget_lock_release_recursive>:
 8003354:	4770      	bx	lr
	...

08003358 <__assert_func>:
 8003358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800335a:	4614      	mov	r4, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <__assert_func+0x2c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4605      	mov	r5, r0
 8003364:	68d8      	ldr	r0, [r3, #12]
 8003366:	b14c      	cbz	r4, 800337c <__assert_func+0x24>
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <__assert_func+0x30>)
 800336a:	9100      	str	r1, [sp, #0]
 800336c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003370:	4906      	ldr	r1, [pc, #24]	; (800338c <__assert_func+0x34>)
 8003372:	462b      	mov	r3, r5
 8003374:	f000 f9bc 	bl	80036f0 <fiprintf>
 8003378:	f000 f9dc 	bl	8003734 <abort>
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <__assert_func+0x38>)
 800337e:	461c      	mov	r4, r3
 8003380:	e7f3      	b.n	800336a <__assert_func+0x12>
 8003382:	bf00      	nop
 8003384:	2000009c 	.word	0x2000009c
 8003388:	0800408f 	.word	0x0800408f
 800338c:	0800409c 	.word	0x0800409c
 8003390:	080040ca 	.word	0x080040ca

08003394 <_free_r>:
 8003394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003396:	2900      	cmp	r1, #0
 8003398:	d044      	beq.n	8003424 <_free_r+0x90>
 800339a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339e:	9001      	str	r0, [sp, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f1a1 0404 	sub.w	r4, r1, #4
 80033a6:	bfb8      	it	lt
 80033a8:	18e4      	addlt	r4, r4, r3
 80033aa:	f000 f8e7 	bl	800357c <__malloc_lock>
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <_free_r+0x94>)
 80033b0:	9801      	ldr	r0, [sp, #4]
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	b933      	cbnz	r3, 80033c4 <_free_r+0x30>
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	6014      	str	r4, [r2, #0]
 80033ba:	b003      	add	sp, #12
 80033bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033c0:	f000 b8e2 	b.w	8003588 <__malloc_unlock>
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d908      	bls.n	80033da <_free_r+0x46>
 80033c8:	6825      	ldr	r5, [r4, #0]
 80033ca:	1961      	adds	r1, r4, r5
 80033cc:	428b      	cmp	r3, r1
 80033ce:	bf01      	itttt	eq
 80033d0:	6819      	ldreq	r1, [r3, #0]
 80033d2:	685b      	ldreq	r3, [r3, #4]
 80033d4:	1949      	addeq	r1, r1, r5
 80033d6:	6021      	streq	r1, [r4, #0]
 80033d8:	e7ed      	b.n	80033b6 <_free_r+0x22>
 80033da:	461a      	mov	r2, r3
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	b10b      	cbz	r3, 80033e4 <_free_r+0x50>
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	d9fa      	bls.n	80033da <_free_r+0x46>
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	1855      	adds	r5, r2, r1
 80033e8:	42a5      	cmp	r5, r4
 80033ea:	d10b      	bne.n	8003404 <_free_r+0x70>
 80033ec:	6824      	ldr	r4, [r4, #0]
 80033ee:	4421      	add	r1, r4
 80033f0:	1854      	adds	r4, r2, r1
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	d1e0      	bne.n	80033ba <_free_r+0x26>
 80033f8:	681c      	ldr	r4, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	6053      	str	r3, [r2, #4]
 80033fe:	440c      	add	r4, r1
 8003400:	6014      	str	r4, [r2, #0]
 8003402:	e7da      	b.n	80033ba <_free_r+0x26>
 8003404:	d902      	bls.n	800340c <_free_r+0x78>
 8003406:	230c      	movs	r3, #12
 8003408:	6003      	str	r3, [r0, #0]
 800340a:	e7d6      	b.n	80033ba <_free_r+0x26>
 800340c:	6825      	ldr	r5, [r4, #0]
 800340e:	1961      	adds	r1, r4, r5
 8003410:	428b      	cmp	r3, r1
 8003412:	bf04      	itt	eq
 8003414:	6819      	ldreq	r1, [r3, #0]
 8003416:	685b      	ldreq	r3, [r3, #4]
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	bf04      	itt	eq
 800341c:	1949      	addeq	r1, r1, r5
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	6054      	str	r4, [r2, #4]
 8003422:	e7ca      	b.n	80033ba <_free_r+0x26>
 8003424:	b003      	add	sp, #12
 8003426:	bd30      	pop	{r4, r5, pc}
 8003428:	20000374 	.word	0x20000374

0800342c <malloc>:
 800342c:	4b02      	ldr	r3, [pc, #8]	; (8003438 <malloc+0xc>)
 800342e:	4601      	mov	r1, r0
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f000 b823 	b.w	800347c <_malloc_r>
 8003436:	bf00      	nop
 8003438:	2000009c 	.word	0x2000009c

0800343c <sbrk_aligned>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4e0e      	ldr	r6, [pc, #56]	; (8003478 <sbrk_aligned+0x3c>)
 8003440:	460c      	mov	r4, r1
 8003442:	6831      	ldr	r1, [r6, #0]
 8003444:	4605      	mov	r5, r0
 8003446:	b911      	cbnz	r1, 800344e <sbrk_aligned+0x12>
 8003448:	f000 f964 	bl	8003714 <_sbrk_r>
 800344c:	6030      	str	r0, [r6, #0]
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f000 f95f 	bl	8003714 <_sbrk_r>
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d00a      	beq.n	8003470 <sbrk_aligned+0x34>
 800345a:	1cc4      	adds	r4, r0, #3
 800345c:	f024 0403 	bic.w	r4, r4, #3
 8003460:	42a0      	cmp	r0, r4
 8003462:	d007      	beq.n	8003474 <sbrk_aligned+0x38>
 8003464:	1a21      	subs	r1, r4, r0
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f954 	bl	8003714 <_sbrk_r>
 800346c:	3001      	adds	r0, #1
 800346e:	d101      	bne.n	8003474 <sbrk_aligned+0x38>
 8003470:	f04f 34ff 	mov.w	r4, #4294967295
 8003474:	4620      	mov	r0, r4
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	20000378 	.word	0x20000378

0800347c <_malloc_r>:
 800347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003480:	1ccd      	adds	r5, r1, #3
 8003482:	f025 0503 	bic.w	r5, r5, #3
 8003486:	3508      	adds	r5, #8
 8003488:	2d0c      	cmp	r5, #12
 800348a:	bf38      	it	cc
 800348c:	250c      	movcc	r5, #12
 800348e:	2d00      	cmp	r5, #0
 8003490:	4607      	mov	r7, r0
 8003492:	db01      	blt.n	8003498 <_malloc_r+0x1c>
 8003494:	42a9      	cmp	r1, r5
 8003496:	d905      	bls.n	80034a4 <_malloc_r+0x28>
 8003498:	230c      	movs	r3, #12
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	2600      	movs	r6, #0
 800349e:	4630      	mov	r0, r6
 80034a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003578 <_malloc_r+0xfc>
 80034a8:	f000 f868 	bl	800357c <__malloc_lock>
 80034ac:	f8d8 3000 	ldr.w	r3, [r8]
 80034b0:	461c      	mov	r4, r3
 80034b2:	bb5c      	cbnz	r4, 800350c <_malloc_r+0x90>
 80034b4:	4629      	mov	r1, r5
 80034b6:	4638      	mov	r0, r7
 80034b8:	f7ff ffc0 	bl	800343c <sbrk_aligned>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	4604      	mov	r4, r0
 80034c0:	d155      	bne.n	800356e <_malloc_r+0xf2>
 80034c2:	f8d8 4000 	ldr.w	r4, [r8]
 80034c6:	4626      	mov	r6, r4
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	d145      	bne.n	8003558 <_malloc_r+0xdc>
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	d048      	beq.n	8003562 <_malloc_r+0xe6>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	4631      	mov	r1, r6
 80034d4:	4638      	mov	r0, r7
 80034d6:	eb04 0903 	add.w	r9, r4, r3
 80034da:	f000 f91b 	bl	8003714 <_sbrk_r>
 80034de:	4581      	cmp	r9, r0
 80034e0:	d13f      	bne.n	8003562 <_malloc_r+0xe6>
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	1a6d      	subs	r5, r5, r1
 80034e6:	4629      	mov	r1, r5
 80034e8:	4638      	mov	r0, r7
 80034ea:	f7ff ffa7 	bl	800343c <sbrk_aligned>
 80034ee:	3001      	adds	r0, #1
 80034f0:	d037      	beq.n	8003562 <_malloc_r+0xe6>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	442b      	add	r3, r5
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	f8d8 3000 	ldr.w	r3, [r8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d038      	beq.n	8003572 <_malloc_r+0xf6>
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	42a2      	cmp	r2, r4
 8003504:	d12b      	bne.n	800355e <_malloc_r+0xe2>
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e00f      	b.n	800352c <_malloc_r+0xb0>
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	1b52      	subs	r2, r2, r5
 8003510:	d41f      	bmi.n	8003552 <_malloc_r+0xd6>
 8003512:	2a0b      	cmp	r2, #11
 8003514:	d917      	bls.n	8003546 <_malloc_r+0xca>
 8003516:	1961      	adds	r1, r4, r5
 8003518:	42a3      	cmp	r3, r4
 800351a:	6025      	str	r5, [r4, #0]
 800351c:	bf18      	it	ne
 800351e:	6059      	strne	r1, [r3, #4]
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	bf08      	it	eq
 8003524:	f8c8 1000 	streq.w	r1, [r8]
 8003528:	5162      	str	r2, [r4, r5]
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	4638      	mov	r0, r7
 800352e:	f104 060b 	add.w	r6, r4, #11
 8003532:	f000 f829 	bl	8003588 <__malloc_unlock>
 8003536:	f026 0607 	bic.w	r6, r6, #7
 800353a:	1d23      	adds	r3, r4, #4
 800353c:	1af2      	subs	r2, r6, r3
 800353e:	d0ae      	beq.n	800349e <_malloc_r+0x22>
 8003540:	1b9b      	subs	r3, r3, r6
 8003542:	50a3      	str	r3, [r4, r2]
 8003544:	e7ab      	b.n	800349e <_malloc_r+0x22>
 8003546:	42a3      	cmp	r3, r4
 8003548:	6862      	ldr	r2, [r4, #4]
 800354a:	d1dd      	bne.n	8003508 <_malloc_r+0x8c>
 800354c:	f8c8 2000 	str.w	r2, [r8]
 8003550:	e7ec      	b.n	800352c <_malloc_r+0xb0>
 8003552:	4623      	mov	r3, r4
 8003554:	6864      	ldr	r4, [r4, #4]
 8003556:	e7ac      	b.n	80034b2 <_malloc_r+0x36>
 8003558:	4634      	mov	r4, r6
 800355a:	6876      	ldr	r6, [r6, #4]
 800355c:	e7b4      	b.n	80034c8 <_malloc_r+0x4c>
 800355e:	4613      	mov	r3, r2
 8003560:	e7cc      	b.n	80034fc <_malloc_r+0x80>
 8003562:	230c      	movs	r3, #12
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4638      	mov	r0, r7
 8003568:	f000 f80e 	bl	8003588 <__malloc_unlock>
 800356c:	e797      	b.n	800349e <_malloc_r+0x22>
 800356e:	6025      	str	r5, [r4, #0]
 8003570:	e7dc      	b.n	800352c <_malloc_r+0xb0>
 8003572:	605b      	str	r3, [r3, #4]
 8003574:	deff      	udf	#255	; 0xff
 8003576:	bf00      	nop
 8003578:	20000374 	.word	0x20000374

0800357c <__malloc_lock>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__malloc_lock+0x8>)
 800357e:	f7ff bee8 	b.w	8003352 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	20000370 	.word	0x20000370

08003588 <__malloc_unlock>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__malloc_unlock+0x8>)
 800358a:	f7ff bee3 	b.w	8003354 <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	20000370 	.word	0x20000370

08003594 <__sflush_r>:
 8003594:	898a      	ldrh	r2, [r1, #12]
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	0710      	lsls	r0, r2, #28
 800359e:	460c      	mov	r4, r1
 80035a0:	d458      	bmi.n	8003654 <__sflush_r+0xc0>
 80035a2:	684b      	ldr	r3, [r1, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dc05      	bgt.n	80035b4 <__sflush_r+0x20>
 80035a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	dc02      	bgt.n	80035b4 <__sflush_r+0x20>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d0f9      	beq.n	80035ae <__sflush_r+0x1a>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035c0:	682f      	ldr	r7, [r5, #0]
 80035c2:	6a21      	ldr	r1, [r4, #32]
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	d032      	beq.n	800362e <__sflush_r+0x9a>
 80035c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	075a      	lsls	r2, r3, #29
 80035ce:	d505      	bpl.n	80035dc <__sflush_r+0x48>
 80035d0:	6863      	ldr	r3, [r4, #4]
 80035d2:	1ac0      	subs	r0, r0, r3
 80035d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035d6:	b10b      	cbz	r3, 80035dc <__sflush_r+0x48>
 80035d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035da:	1ac0      	subs	r0, r0, r3
 80035dc:	2300      	movs	r3, #0
 80035de:	4602      	mov	r2, r0
 80035e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e2:	6a21      	ldr	r1, [r4, #32]
 80035e4:	4628      	mov	r0, r5
 80035e6:	47b0      	blx	r6
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	d106      	bne.n	80035fc <__sflush_r+0x68>
 80035ee:	6829      	ldr	r1, [r5, #0]
 80035f0:	291d      	cmp	r1, #29
 80035f2:	d82b      	bhi.n	800364c <__sflush_r+0xb8>
 80035f4:	4a29      	ldr	r2, [pc, #164]	; (800369c <__sflush_r+0x108>)
 80035f6:	410a      	asrs	r2, r1
 80035f8:	07d6      	lsls	r6, r2, #31
 80035fa:	d427      	bmi.n	800364c <__sflush_r+0xb8>
 80035fc:	2200      	movs	r2, #0
 80035fe:	6062      	str	r2, [r4, #4]
 8003600:	04d9      	lsls	r1, r3, #19
 8003602:	6922      	ldr	r2, [r4, #16]
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	d504      	bpl.n	8003612 <__sflush_r+0x7e>
 8003608:	1c42      	adds	r2, r0, #1
 800360a:	d101      	bne.n	8003610 <__sflush_r+0x7c>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	b903      	cbnz	r3, 8003612 <__sflush_r+0x7e>
 8003610:	6560      	str	r0, [r4, #84]	; 0x54
 8003612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003614:	602f      	str	r7, [r5, #0]
 8003616:	2900      	cmp	r1, #0
 8003618:	d0c9      	beq.n	80035ae <__sflush_r+0x1a>
 800361a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361e:	4299      	cmp	r1, r3
 8003620:	d002      	beq.n	8003628 <__sflush_r+0x94>
 8003622:	4628      	mov	r0, r5
 8003624:	f7ff feb6 	bl	8003394 <_free_r>
 8003628:	2000      	movs	r0, #0
 800362a:	6360      	str	r0, [r4, #52]	; 0x34
 800362c:	e7c0      	b.n	80035b0 <__sflush_r+0x1c>
 800362e:	2301      	movs	r3, #1
 8003630:	4628      	mov	r0, r5
 8003632:	47b0      	blx	r6
 8003634:	1c41      	adds	r1, r0, #1
 8003636:	d1c8      	bne.n	80035ca <__sflush_r+0x36>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c5      	beq.n	80035ca <__sflush_r+0x36>
 800363e:	2b1d      	cmp	r3, #29
 8003640:	d001      	beq.n	8003646 <__sflush_r+0xb2>
 8003642:	2b16      	cmp	r3, #22
 8003644:	d101      	bne.n	800364a <__sflush_r+0xb6>
 8003646:	602f      	str	r7, [r5, #0]
 8003648:	e7b1      	b.n	80035ae <__sflush_r+0x1a>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7ad      	b.n	80035b0 <__sflush_r+0x1c>
 8003654:	690f      	ldr	r7, [r1, #16]
 8003656:	2f00      	cmp	r7, #0
 8003658:	d0a9      	beq.n	80035ae <__sflush_r+0x1a>
 800365a:	0793      	lsls	r3, r2, #30
 800365c:	680e      	ldr	r6, [r1, #0]
 800365e:	bf08      	it	eq
 8003660:	694b      	ldreq	r3, [r1, #20]
 8003662:	600f      	str	r7, [r1, #0]
 8003664:	bf18      	it	ne
 8003666:	2300      	movne	r3, #0
 8003668:	eba6 0807 	sub.w	r8, r6, r7
 800366c:	608b      	str	r3, [r1, #8]
 800366e:	f1b8 0f00 	cmp.w	r8, #0
 8003672:	dd9c      	ble.n	80035ae <__sflush_r+0x1a>
 8003674:	6a21      	ldr	r1, [r4, #32]
 8003676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003678:	4643      	mov	r3, r8
 800367a:	463a      	mov	r2, r7
 800367c:	4628      	mov	r0, r5
 800367e:	47b0      	blx	r6
 8003680:	2800      	cmp	r0, #0
 8003682:	dc06      	bgt.n	8003692 <__sflush_r+0xfe>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	e78e      	b.n	80035b0 <__sflush_r+0x1c>
 8003692:	4407      	add	r7, r0
 8003694:	eba8 0800 	sub.w	r8, r8, r0
 8003698:	e7e9      	b.n	800366e <__sflush_r+0xda>
 800369a:	bf00      	nop
 800369c:	dfbffffe 	.word	0xdfbffffe

080036a0 <_fflush_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	4605      	mov	r5, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	b913      	cbnz	r3, 80036b0 <_fflush_r+0x10>
 80036aa:	2500      	movs	r5, #0
 80036ac:	4628      	mov	r0, r5
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	b118      	cbz	r0, 80036ba <_fflush_r+0x1a>
 80036b2:	6a03      	ldr	r3, [r0, #32]
 80036b4:	b90b      	cbnz	r3, 80036ba <_fflush_r+0x1a>
 80036b6:	f7ff fd2d 	bl	8003114 <__sinit>
 80036ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f3      	beq.n	80036aa <_fflush_r+0xa>
 80036c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036c4:	07d0      	lsls	r0, r2, #31
 80036c6:	d404      	bmi.n	80036d2 <_fflush_r+0x32>
 80036c8:	0599      	lsls	r1, r3, #22
 80036ca:	d402      	bmi.n	80036d2 <_fflush_r+0x32>
 80036cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ce:	f7ff fe40 	bl	8003352 <__retarget_lock_acquire_recursive>
 80036d2:	4628      	mov	r0, r5
 80036d4:	4621      	mov	r1, r4
 80036d6:	f7ff ff5d 	bl	8003594 <__sflush_r>
 80036da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036dc:	07da      	lsls	r2, r3, #31
 80036de:	4605      	mov	r5, r0
 80036e0:	d4e4      	bmi.n	80036ac <_fflush_r+0xc>
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	059b      	lsls	r3, r3, #22
 80036e6:	d4e1      	bmi.n	80036ac <_fflush_r+0xc>
 80036e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ea:	f7ff fe33 	bl	8003354 <__retarget_lock_release_recursive>
 80036ee:	e7dd      	b.n	80036ac <_fflush_r+0xc>

080036f0 <fiprintf>:
 80036f0:	b40e      	push	{r1, r2, r3}
 80036f2:	b503      	push	{r0, r1, lr}
 80036f4:	4601      	mov	r1, r0
 80036f6:	ab03      	add	r3, sp, #12
 80036f8:	4805      	ldr	r0, [pc, #20]	; (8003710 <fiprintf+0x20>)
 80036fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80036fe:	6800      	ldr	r0, [r0, #0]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f000 f847 	bl	8003794 <_vfiprintf_r>
 8003706:	b002      	add	sp, #8
 8003708:	f85d eb04 	ldr.w	lr, [sp], #4
 800370c:	b003      	add	sp, #12
 800370e:	4770      	bx	lr
 8003710:	2000009c 	.word	0x2000009c

08003714 <_sbrk_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d06      	ldr	r5, [pc, #24]	; (8003730 <_sbrk_r+0x1c>)
 8003718:	2300      	movs	r3, #0
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	602b      	str	r3, [r5, #0]
 8003720:	f7fd fa42 	bl	8000ba8 <_sbrk>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_sbrk_r+0x1a>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_sbrk_r+0x1a>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	2000036c 	.word	0x2000036c

08003734 <abort>:
 8003734:	b508      	push	{r3, lr}
 8003736:	2006      	movs	r0, #6
 8003738:	f000 fb94 	bl	8003e64 <raise>
 800373c:	2001      	movs	r0, #1
 800373e:	f7fd f9bb 	bl	8000ab8 <_exit>

08003742 <__sfputc_r>:
 8003742:	6893      	ldr	r3, [r2, #8]
 8003744:	3b01      	subs	r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	b410      	push	{r4}
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	da08      	bge.n	8003760 <__sfputc_r+0x1e>
 800374e:	6994      	ldr	r4, [r2, #24]
 8003750:	42a3      	cmp	r3, r4
 8003752:	db01      	blt.n	8003758 <__sfputc_r+0x16>
 8003754:	290a      	cmp	r1, #10
 8003756:	d103      	bne.n	8003760 <__sfputc_r+0x1e>
 8003758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800375c:	f000 bac4 	b.w	8003ce8 <__swbuf_r>
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	1c58      	adds	r0, r3, #1
 8003764:	6010      	str	r0, [r2, #0]
 8003766:	7019      	strb	r1, [r3, #0]
 8003768:	4608      	mov	r0, r1
 800376a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800376e:	4770      	bx	lr

08003770 <__sfputs_r>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	4606      	mov	r6, r0
 8003774:	460f      	mov	r7, r1
 8003776:	4614      	mov	r4, r2
 8003778:	18d5      	adds	r5, r2, r3
 800377a:	42ac      	cmp	r4, r5
 800377c:	d101      	bne.n	8003782 <__sfputs_r+0x12>
 800377e:	2000      	movs	r0, #0
 8003780:	e007      	b.n	8003792 <__sfputs_r+0x22>
 8003782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003786:	463a      	mov	r2, r7
 8003788:	4630      	mov	r0, r6
 800378a:	f7ff ffda 	bl	8003742 <__sfputc_r>
 800378e:	1c43      	adds	r3, r0, #1
 8003790:	d1f3      	bne.n	800377a <__sfputs_r+0xa>
 8003792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003794 <_vfiprintf_r>:
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003798:	460d      	mov	r5, r1
 800379a:	b09d      	sub	sp, #116	; 0x74
 800379c:	4614      	mov	r4, r2
 800379e:	4698      	mov	r8, r3
 80037a0:	4606      	mov	r6, r0
 80037a2:	b118      	cbz	r0, 80037ac <_vfiprintf_r+0x18>
 80037a4:	6a03      	ldr	r3, [r0, #32]
 80037a6:	b90b      	cbnz	r3, 80037ac <_vfiprintf_r+0x18>
 80037a8:	f7ff fcb4 	bl	8003114 <__sinit>
 80037ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037ae:	07d9      	lsls	r1, r3, #31
 80037b0:	d405      	bmi.n	80037be <_vfiprintf_r+0x2a>
 80037b2:	89ab      	ldrh	r3, [r5, #12]
 80037b4:	059a      	lsls	r2, r3, #22
 80037b6:	d402      	bmi.n	80037be <_vfiprintf_r+0x2a>
 80037b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ba:	f7ff fdca 	bl	8003352 <__retarget_lock_acquire_recursive>
 80037be:	89ab      	ldrh	r3, [r5, #12]
 80037c0:	071b      	lsls	r3, r3, #28
 80037c2:	d501      	bpl.n	80037c8 <_vfiprintf_r+0x34>
 80037c4:	692b      	ldr	r3, [r5, #16]
 80037c6:	b99b      	cbnz	r3, 80037f0 <_vfiprintf_r+0x5c>
 80037c8:	4629      	mov	r1, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	f000 faca 	bl	8003d64 <__swsetup_r>
 80037d0:	b170      	cbz	r0, 80037f0 <_vfiprintf_r+0x5c>
 80037d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037d4:	07dc      	lsls	r4, r3, #31
 80037d6:	d504      	bpl.n	80037e2 <_vfiprintf_r+0x4e>
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	b01d      	add	sp, #116	; 0x74
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e2:	89ab      	ldrh	r3, [r5, #12]
 80037e4:	0598      	lsls	r0, r3, #22
 80037e6:	d4f7      	bmi.n	80037d8 <_vfiprintf_r+0x44>
 80037e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ea:	f7ff fdb3 	bl	8003354 <__retarget_lock_release_recursive>
 80037ee:	e7f3      	b.n	80037d8 <_vfiprintf_r+0x44>
 80037f0:	2300      	movs	r3, #0
 80037f2:	9309      	str	r3, [sp, #36]	; 0x24
 80037f4:	2320      	movs	r3, #32
 80037f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80037fe:	2330      	movs	r3, #48	; 0x30
 8003800:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80039b4 <_vfiprintf_r+0x220>
 8003804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003808:	f04f 0901 	mov.w	r9, #1
 800380c:	4623      	mov	r3, r4
 800380e:	469a      	mov	sl, r3
 8003810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003814:	b10a      	cbz	r2, 800381a <_vfiprintf_r+0x86>
 8003816:	2a25      	cmp	r2, #37	; 0x25
 8003818:	d1f9      	bne.n	800380e <_vfiprintf_r+0x7a>
 800381a:	ebba 0b04 	subs.w	fp, sl, r4
 800381e:	d00b      	beq.n	8003838 <_vfiprintf_r+0xa4>
 8003820:	465b      	mov	r3, fp
 8003822:	4622      	mov	r2, r4
 8003824:	4629      	mov	r1, r5
 8003826:	4630      	mov	r0, r6
 8003828:	f7ff ffa2 	bl	8003770 <__sfputs_r>
 800382c:	3001      	adds	r0, #1
 800382e:	f000 80a9 	beq.w	8003984 <_vfiprintf_r+0x1f0>
 8003832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003834:	445a      	add	r2, fp
 8003836:	9209      	str	r2, [sp, #36]	; 0x24
 8003838:	f89a 3000 	ldrb.w	r3, [sl]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a1 	beq.w	8003984 <_vfiprintf_r+0x1f0>
 8003842:	2300      	movs	r3, #0
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800384c:	f10a 0a01 	add.w	sl, sl, #1
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	9307      	str	r3, [sp, #28]
 8003854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003858:	931a      	str	r3, [sp, #104]	; 0x68
 800385a:	4654      	mov	r4, sl
 800385c:	2205      	movs	r2, #5
 800385e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003862:	4854      	ldr	r0, [pc, #336]	; (80039b4 <_vfiprintf_r+0x220>)
 8003864:	f7fc fcb4 	bl	80001d0 <memchr>
 8003868:	9a04      	ldr	r2, [sp, #16]
 800386a:	b9d8      	cbnz	r0, 80038a4 <_vfiprintf_r+0x110>
 800386c:	06d1      	lsls	r1, r2, #27
 800386e:	bf44      	itt	mi
 8003870:	2320      	movmi	r3, #32
 8003872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003876:	0713      	lsls	r3, r2, #28
 8003878:	bf44      	itt	mi
 800387a:	232b      	movmi	r3, #43	; 0x2b
 800387c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003880:	f89a 3000 	ldrb.w	r3, [sl]
 8003884:	2b2a      	cmp	r3, #42	; 0x2a
 8003886:	d015      	beq.n	80038b4 <_vfiprintf_r+0x120>
 8003888:	9a07      	ldr	r2, [sp, #28]
 800388a:	4654      	mov	r4, sl
 800388c:	2000      	movs	r0, #0
 800388e:	f04f 0c0a 	mov.w	ip, #10
 8003892:	4621      	mov	r1, r4
 8003894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003898:	3b30      	subs	r3, #48	; 0x30
 800389a:	2b09      	cmp	r3, #9
 800389c:	d94d      	bls.n	800393a <_vfiprintf_r+0x1a6>
 800389e:	b1b0      	cbz	r0, 80038ce <_vfiprintf_r+0x13a>
 80038a0:	9207      	str	r2, [sp, #28]
 80038a2:	e014      	b.n	80038ce <_vfiprintf_r+0x13a>
 80038a4:	eba0 0308 	sub.w	r3, r0, r8
 80038a8:	fa09 f303 	lsl.w	r3, r9, r3
 80038ac:	4313      	orrs	r3, r2
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	46a2      	mov	sl, r4
 80038b2:	e7d2      	b.n	800385a <_vfiprintf_r+0xc6>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	1d19      	adds	r1, r3, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	9103      	str	r1, [sp, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bfbb      	ittet	lt
 80038c0:	425b      	neglt	r3, r3
 80038c2:	f042 0202 	orrlt.w	r2, r2, #2
 80038c6:	9307      	strge	r3, [sp, #28]
 80038c8:	9307      	strlt	r3, [sp, #28]
 80038ca:	bfb8      	it	lt
 80038cc:	9204      	strlt	r2, [sp, #16]
 80038ce:	7823      	ldrb	r3, [r4, #0]
 80038d0:	2b2e      	cmp	r3, #46	; 0x2e
 80038d2:	d10c      	bne.n	80038ee <_vfiprintf_r+0x15a>
 80038d4:	7863      	ldrb	r3, [r4, #1]
 80038d6:	2b2a      	cmp	r3, #42	; 0x2a
 80038d8:	d134      	bne.n	8003944 <_vfiprintf_r+0x1b0>
 80038da:	9b03      	ldr	r3, [sp, #12]
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	9203      	str	r2, [sp, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ea:	3402      	adds	r4, #2
 80038ec:	9305      	str	r3, [sp, #20]
 80038ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80039c4 <_vfiprintf_r+0x230>
 80038f2:	7821      	ldrb	r1, [r4, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	4650      	mov	r0, sl
 80038f8:	f7fc fc6a 	bl	80001d0 <memchr>
 80038fc:	b138      	cbz	r0, 800390e <_vfiprintf_r+0x17a>
 80038fe:	9b04      	ldr	r3, [sp, #16]
 8003900:	eba0 000a 	sub.w	r0, r0, sl
 8003904:	2240      	movs	r2, #64	; 0x40
 8003906:	4082      	lsls	r2, r0
 8003908:	4313      	orrs	r3, r2
 800390a:	3401      	adds	r4, #1
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003912:	4829      	ldr	r0, [pc, #164]	; (80039b8 <_vfiprintf_r+0x224>)
 8003914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003918:	2206      	movs	r2, #6
 800391a:	f7fc fc59 	bl	80001d0 <memchr>
 800391e:	2800      	cmp	r0, #0
 8003920:	d03f      	beq.n	80039a2 <_vfiprintf_r+0x20e>
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <_vfiprintf_r+0x228>)
 8003924:	bb1b      	cbnz	r3, 800396e <_vfiprintf_r+0x1da>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3307      	adds	r3, #7
 800392a:	f023 0307 	bic.w	r3, r3, #7
 800392e:	3308      	adds	r3, #8
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	443b      	add	r3, r7
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	e768      	b.n	800380c <_vfiprintf_r+0x78>
 800393a:	fb0c 3202 	mla	r2, ip, r2, r3
 800393e:	460c      	mov	r4, r1
 8003940:	2001      	movs	r0, #1
 8003942:	e7a6      	b.n	8003892 <_vfiprintf_r+0xfe>
 8003944:	2300      	movs	r3, #0
 8003946:	3401      	adds	r4, #1
 8003948:	9305      	str	r3, [sp, #20]
 800394a:	4619      	mov	r1, r3
 800394c:	f04f 0c0a 	mov.w	ip, #10
 8003950:	4620      	mov	r0, r4
 8003952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003956:	3a30      	subs	r2, #48	; 0x30
 8003958:	2a09      	cmp	r2, #9
 800395a:	d903      	bls.n	8003964 <_vfiprintf_r+0x1d0>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0c6      	beq.n	80038ee <_vfiprintf_r+0x15a>
 8003960:	9105      	str	r1, [sp, #20]
 8003962:	e7c4      	b.n	80038ee <_vfiprintf_r+0x15a>
 8003964:	fb0c 2101 	mla	r1, ip, r1, r2
 8003968:	4604      	mov	r4, r0
 800396a:	2301      	movs	r3, #1
 800396c:	e7f0      	b.n	8003950 <_vfiprintf_r+0x1bc>
 800396e:	ab03      	add	r3, sp, #12
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462a      	mov	r2, r5
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <_vfiprintf_r+0x22c>)
 8003976:	a904      	add	r1, sp, #16
 8003978:	4630      	mov	r0, r6
 800397a:	f3af 8000 	nop.w
 800397e:	4607      	mov	r7, r0
 8003980:	1c78      	adds	r0, r7, #1
 8003982:	d1d6      	bne.n	8003932 <_vfiprintf_r+0x19e>
 8003984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003986:	07d9      	lsls	r1, r3, #31
 8003988:	d405      	bmi.n	8003996 <_vfiprintf_r+0x202>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	059a      	lsls	r2, r3, #22
 800398e:	d402      	bmi.n	8003996 <_vfiprintf_r+0x202>
 8003990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003992:	f7ff fcdf 	bl	8003354 <__retarget_lock_release_recursive>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	065b      	lsls	r3, r3, #25
 800399a:	f53f af1d 	bmi.w	80037d8 <_vfiprintf_r+0x44>
 800399e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039a0:	e71c      	b.n	80037dc <_vfiprintf_r+0x48>
 80039a2:	ab03      	add	r3, sp, #12
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	462a      	mov	r2, r5
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <_vfiprintf_r+0x22c>)
 80039aa:	a904      	add	r1, sp, #16
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f879 	bl	8003aa4 <_printf_i>
 80039b2:	e7e4      	b.n	800397e <_vfiprintf_r+0x1ea>
 80039b4:	080040cb 	.word	0x080040cb
 80039b8:	080040d5 	.word	0x080040d5
 80039bc:	00000000 	.word	0x00000000
 80039c0:	08003771 	.word	0x08003771
 80039c4:	080040d1 	.word	0x080040d1

080039c8 <_printf_common>:
 80039c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039cc:	4616      	mov	r6, r2
 80039ce:	4699      	mov	r9, r3
 80039d0:	688a      	ldr	r2, [r1, #8]
 80039d2:	690b      	ldr	r3, [r1, #16]
 80039d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfb8      	it	lt
 80039dc:	4613      	movlt	r3, r2
 80039de:	6033      	str	r3, [r6, #0]
 80039e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039e4:	4607      	mov	r7, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	b10a      	cbz	r2, 80039ee <_printf_common+0x26>
 80039ea:	3301      	adds	r3, #1
 80039ec:	6033      	str	r3, [r6, #0]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	0699      	lsls	r1, r3, #26
 80039f2:	bf42      	ittt	mi
 80039f4:	6833      	ldrmi	r3, [r6, #0]
 80039f6:	3302      	addmi	r3, #2
 80039f8:	6033      	strmi	r3, [r6, #0]
 80039fa:	6825      	ldr	r5, [r4, #0]
 80039fc:	f015 0506 	ands.w	r5, r5, #6
 8003a00:	d106      	bne.n	8003a10 <_printf_common+0x48>
 8003a02:	f104 0a19 	add.w	sl, r4, #25
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	6832      	ldr	r2, [r6, #0]
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	dc26      	bgt.n	8003a5e <_printf_common+0x96>
 8003a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a14:	1e13      	subs	r3, r2, #0
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	bf18      	it	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	0692      	lsls	r2, r2, #26
 8003a1e:	d42b      	bmi.n	8003a78 <_printf_common+0xb0>
 8003a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a24:	4649      	mov	r1, r9
 8003a26:	4638      	mov	r0, r7
 8003a28:	47c0      	blx	r8
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d01e      	beq.n	8003a6c <_printf_common+0xa4>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	6922      	ldr	r2, [r4, #16]
 8003a32:	f003 0306 	and.w	r3, r3, #6
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf02      	ittt	eq
 8003a3a:	68e5      	ldreq	r5, [r4, #12]
 8003a3c:	6833      	ldreq	r3, [r6, #0]
 8003a3e:	1aed      	subeq	r5, r5, r3
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	bf0c      	ite	eq
 8003a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a48:	2500      	movne	r5, #0
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	bfc4      	itt	gt
 8003a4e:	1a9b      	subgt	r3, r3, r2
 8003a50:	18ed      	addgt	r5, r5, r3
 8003a52:	2600      	movs	r6, #0
 8003a54:	341a      	adds	r4, #26
 8003a56:	42b5      	cmp	r5, r6
 8003a58:	d11a      	bne.n	8003a90 <_printf_common+0xc8>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e008      	b.n	8003a70 <_printf_common+0xa8>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4652      	mov	r2, sl
 8003a62:	4649      	mov	r1, r9
 8003a64:	4638      	mov	r0, r7
 8003a66:	47c0      	blx	r8
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d103      	bne.n	8003a74 <_printf_common+0xac>
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	3501      	adds	r5, #1
 8003a76:	e7c6      	b.n	8003a06 <_printf_common+0x3e>
 8003a78:	18e1      	adds	r1, r4, r3
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	2030      	movs	r0, #48	; 0x30
 8003a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a82:	4422      	add	r2, r4
 8003a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	e7c7      	b.n	8003a20 <_printf_common+0x58>
 8003a90:	2301      	movs	r3, #1
 8003a92:	4622      	mov	r2, r4
 8003a94:	4649      	mov	r1, r9
 8003a96:	4638      	mov	r0, r7
 8003a98:	47c0      	blx	r8
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d0e6      	beq.n	8003a6c <_printf_common+0xa4>
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7d9      	b.n	8003a56 <_printf_common+0x8e>
	...

08003aa4 <_printf_i>:
 8003aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	7e0f      	ldrb	r7, [r1, #24]
 8003aaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003aac:	2f78      	cmp	r7, #120	; 0x78
 8003aae:	4691      	mov	r9, r2
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	469a      	mov	sl, r3
 8003ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aba:	d807      	bhi.n	8003acc <_printf_i+0x28>
 8003abc:	2f62      	cmp	r7, #98	; 0x62
 8003abe:	d80a      	bhi.n	8003ad6 <_printf_i+0x32>
 8003ac0:	2f00      	cmp	r7, #0
 8003ac2:	f000 80d4 	beq.w	8003c6e <_printf_i+0x1ca>
 8003ac6:	2f58      	cmp	r7, #88	; 0x58
 8003ac8:	f000 80c0 	beq.w	8003c4c <_printf_i+0x1a8>
 8003acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ad4:	e03a      	b.n	8003b4c <_printf_i+0xa8>
 8003ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ada:	2b15      	cmp	r3, #21
 8003adc:	d8f6      	bhi.n	8003acc <_printf_i+0x28>
 8003ade:	a101      	add	r1, pc, #4	; (adr r1, 8003ae4 <_printf_i+0x40>)
 8003ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ae4:	08003b3d 	.word	0x08003b3d
 8003ae8:	08003b51 	.word	0x08003b51
 8003aec:	08003acd 	.word	0x08003acd
 8003af0:	08003acd 	.word	0x08003acd
 8003af4:	08003acd 	.word	0x08003acd
 8003af8:	08003acd 	.word	0x08003acd
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003acd 	.word	0x08003acd
 8003b04:	08003acd 	.word	0x08003acd
 8003b08:	08003acd 	.word	0x08003acd
 8003b0c:	08003acd 	.word	0x08003acd
 8003b10:	08003c55 	.word	0x08003c55
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003c0f 	.word	0x08003c0f
 8003b1c:	08003acd 	.word	0x08003acd
 8003b20:	08003acd 	.word	0x08003acd
 8003b24:	08003c77 	.word	0x08003c77
 8003b28:	08003acd 	.word	0x08003acd
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003acd 	.word	0x08003acd
 8003b34:	08003acd 	.word	0x08003acd
 8003b38:	08003c17 	.word	0x08003c17
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	602a      	str	r2, [r5, #0]
 8003b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e09f      	b.n	8003c90 <_printf_i+0x1ec>
 8003b50:	6820      	ldr	r0, [r4, #0]
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	0607      	lsls	r7, r0, #24
 8003b56:	f103 0104 	add.w	r1, r3, #4
 8003b5a:	6029      	str	r1, [r5, #0]
 8003b5c:	d501      	bpl.n	8003b62 <_printf_i+0xbe>
 8003b5e:	681e      	ldr	r6, [r3, #0]
 8003b60:	e003      	b.n	8003b6a <_printf_i+0xc6>
 8003b62:	0646      	lsls	r6, r0, #25
 8003b64:	d5fb      	bpl.n	8003b5e <_printf_i+0xba>
 8003b66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b6a:	2e00      	cmp	r6, #0
 8003b6c:	da03      	bge.n	8003b76 <_printf_i+0xd2>
 8003b6e:	232d      	movs	r3, #45	; 0x2d
 8003b70:	4276      	negs	r6, r6
 8003b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b76:	485a      	ldr	r0, [pc, #360]	; (8003ce0 <_printf_i+0x23c>)
 8003b78:	230a      	movs	r3, #10
 8003b7a:	e012      	b.n	8003ba2 <_printf_i+0xfe>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	1d19      	adds	r1, r3, #4
 8003b82:	6029      	str	r1, [r5, #0]
 8003b84:	0605      	lsls	r5, r0, #24
 8003b86:	d501      	bpl.n	8003b8c <_printf_i+0xe8>
 8003b88:	681e      	ldr	r6, [r3, #0]
 8003b8a:	e002      	b.n	8003b92 <_printf_i+0xee>
 8003b8c:	0641      	lsls	r1, r0, #25
 8003b8e:	d5fb      	bpl.n	8003b88 <_printf_i+0xe4>
 8003b90:	881e      	ldrh	r6, [r3, #0]
 8003b92:	4853      	ldr	r0, [pc, #332]	; (8003ce0 <_printf_i+0x23c>)
 8003b94:	2f6f      	cmp	r7, #111	; 0x6f
 8003b96:	bf0c      	ite	eq
 8003b98:	2308      	moveq	r3, #8
 8003b9a:	230a      	movne	r3, #10
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ba2:	6865      	ldr	r5, [r4, #4]
 8003ba4:	60a5      	str	r5, [r4, #8]
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	bfa2      	ittt	ge
 8003baa:	6821      	ldrge	r1, [r4, #0]
 8003bac:	f021 0104 	bicge.w	r1, r1, #4
 8003bb0:	6021      	strge	r1, [r4, #0]
 8003bb2:	b90e      	cbnz	r6, 8003bb8 <_printf_i+0x114>
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	d04b      	beq.n	8003c50 <_printf_i+0x1ac>
 8003bb8:	4615      	mov	r5, r2
 8003bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8003bc2:	5dc7      	ldrb	r7, [r0, r7]
 8003bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bc8:	4637      	mov	r7, r6
 8003bca:	42bb      	cmp	r3, r7
 8003bcc:	460e      	mov	r6, r1
 8003bce:	d9f4      	bls.n	8003bba <_printf_i+0x116>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d10b      	bne.n	8003bec <_printf_i+0x148>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	07de      	lsls	r6, r3, #31
 8003bd8:	d508      	bpl.n	8003bec <_printf_i+0x148>
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	4299      	cmp	r1, r3
 8003be0:	bfde      	ittt	le
 8003be2:	2330      	movle	r3, #48	; 0x30
 8003be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bec:	1b52      	subs	r2, r2, r5
 8003bee:	6122      	str	r2, [r4, #16]
 8003bf0:	f8cd a000 	str.w	sl, [sp]
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	aa03      	add	r2, sp, #12
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f7ff fee4 	bl	80039c8 <_printf_common>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d14a      	bne.n	8003c9a <_printf_i+0x1f6>
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	b004      	add	sp, #16
 8003c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	4833      	ldr	r0, [pc, #204]	; (8003ce4 <_printf_i+0x240>)
 8003c18:	2778      	movs	r7, #120	; 0x78
 8003c1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	6829      	ldr	r1, [r5, #0]
 8003c22:	061f      	lsls	r7, r3, #24
 8003c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0x18c>
 8003c2a:	065f      	lsls	r7, r3, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2b6      	uxthmi	r6, r6
 8003c30:	07df      	lsls	r7, r3, #31
 8003c32:	bf48      	it	mi
 8003c34:	f043 0320 	orrmi.w	r3, r3, #32
 8003c38:	6029      	str	r1, [r5, #0]
 8003c3a:	bf48      	it	mi
 8003c3c:	6023      	strmi	r3, [r4, #0]
 8003c3e:	b91e      	cbnz	r6, 8003c48 <_printf_i+0x1a4>
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	f023 0320 	bic.w	r3, r3, #32
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	2310      	movs	r3, #16
 8003c4a:	e7a7      	b.n	8003b9c <_printf_i+0xf8>
 8003c4c:	4824      	ldr	r0, [pc, #144]	; (8003ce0 <_printf_i+0x23c>)
 8003c4e:	e7e4      	b.n	8003c1a <_printf_i+0x176>
 8003c50:	4615      	mov	r5, r2
 8003c52:	e7bd      	b.n	8003bd0 <_printf_i+0x12c>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	6826      	ldr	r6, [r4, #0]
 8003c58:	6961      	ldr	r1, [r4, #20]
 8003c5a:	1d18      	adds	r0, r3, #4
 8003c5c:	6028      	str	r0, [r5, #0]
 8003c5e:	0635      	lsls	r5, r6, #24
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	d501      	bpl.n	8003c68 <_printf_i+0x1c4>
 8003c64:	6019      	str	r1, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <_printf_i+0x1ca>
 8003c68:	0670      	lsls	r0, r6, #25
 8003c6a:	d5fb      	bpl.n	8003c64 <_printf_i+0x1c0>
 8003c6c:	8019      	strh	r1, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	4615      	mov	r5, r2
 8003c74:	e7bc      	b.n	8003bf0 <_printf_i+0x14c>
 8003c76:	682b      	ldr	r3, [r5, #0]
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	6862      	ldr	r2, [r4, #4]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4628      	mov	r0, r5
 8003c84:	f7fc faa4 	bl	80001d0 <memchr>
 8003c88:	b108      	cbz	r0, 8003c8e <_printf_i+0x1ea>
 8003c8a:	1b40      	subs	r0, r0, r5
 8003c8c:	6060      	str	r0, [r4, #4]
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	2300      	movs	r3, #0
 8003c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c98:	e7aa      	b.n	8003bf0 <_printf_i+0x14c>
 8003c9a:	6923      	ldr	r3, [r4, #16]
 8003c9c:	462a      	mov	r2, r5
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	47d0      	blx	sl
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d0ad      	beq.n	8003c04 <_printf_i+0x160>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	079b      	lsls	r3, r3, #30
 8003cac:	d413      	bmi.n	8003cd6 <_printf_i+0x232>
 8003cae:	68e0      	ldr	r0, [r4, #12]
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	4298      	cmp	r0, r3
 8003cb4:	bfb8      	it	lt
 8003cb6:	4618      	movlt	r0, r3
 8003cb8:	e7a6      	b.n	8003c08 <_printf_i+0x164>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	47d0      	blx	sl
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d09d      	beq.n	8003c04 <_printf_i+0x160>
 8003cc8:	3501      	adds	r5, #1
 8003cca:	68e3      	ldr	r3, [r4, #12]
 8003ccc:	9903      	ldr	r1, [sp, #12]
 8003cce:	1a5b      	subs	r3, r3, r1
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	dcf2      	bgt.n	8003cba <_printf_i+0x216>
 8003cd4:	e7eb      	b.n	8003cae <_printf_i+0x20a>
 8003cd6:	2500      	movs	r5, #0
 8003cd8:	f104 0619 	add.w	r6, r4, #25
 8003cdc:	e7f5      	b.n	8003cca <_printf_i+0x226>
 8003cde:	bf00      	nop
 8003ce0:	080040dc 	.word	0x080040dc
 8003ce4:	080040ed 	.word	0x080040ed

08003ce8 <__swbuf_r>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	460e      	mov	r6, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	4605      	mov	r5, r0
 8003cf0:	b118      	cbz	r0, 8003cfa <__swbuf_r+0x12>
 8003cf2:	6a03      	ldr	r3, [r0, #32]
 8003cf4:	b90b      	cbnz	r3, 8003cfa <__swbuf_r+0x12>
 8003cf6:	f7ff fa0d 	bl	8003114 <__sinit>
 8003cfa:	69a3      	ldr	r3, [r4, #24]
 8003cfc:	60a3      	str	r3, [r4, #8]
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	071a      	lsls	r2, r3, #28
 8003d02:	d525      	bpl.n	8003d50 <__swbuf_r+0x68>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	b31b      	cbz	r3, 8003d50 <__swbuf_r+0x68>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	6922      	ldr	r2, [r4, #16]
 8003d0c:	1a98      	subs	r0, r3, r2
 8003d0e:	6963      	ldr	r3, [r4, #20]
 8003d10:	b2f6      	uxtb	r6, r6
 8003d12:	4283      	cmp	r3, r0
 8003d14:	4637      	mov	r7, r6
 8003d16:	dc04      	bgt.n	8003d22 <__swbuf_r+0x3a>
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7ff fcc0 	bl	80036a0 <_fflush_r>
 8003d20:	b9e0      	cbnz	r0, 8003d5c <__swbuf_r+0x74>
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60a3      	str	r3, [r4, #8]
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	701e      	strb	r6, [r3, #0]
 8003d30:	6962      	ldr	r2, [r4, #20]
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d004      	beq.n	8003d42 <__swbuf_r+0x5a>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	07db      	lsls	r3, r3, #31
 8003d3c:	d506      	bpl.n	8003d4c <__swbuf_r+0x64>
 8003d3e:	2e0a      	cmp	r6, #10
 8003d40:	d104      	bne.n	8003d4c <__swbuf_r+0x64>
 8003d42:	4621      	mov	r1, r4
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7ff fcab 	bl	80036a0 <_fflush_r>
 8003d4a:	b938      	cbnz	r0, 8003d5c <__swbuf_r+0x74>
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	4621      	mov	r1, r4
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 f806 	bl	8003d64 <__swsetup_r>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d0d5      	beq.n	8003d08 <__swbuf_r+0x20>
 8003d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d60:	e7f4      	b.n	8003d4c <__swbuf_r+0x64>
	...

08003d64 <__swsetup_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <__swsetup_r+0xac>)
 8003d68:	4605      	mov	r5, r0
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	b118      	cbz	r0, 8003d78 <__swsetup_r+0x14>
 8003d70:	6a03      	ldr	r3, [r0, #32]
 8003d72:	b90b      	cbnz	r3, 8003d78 <__swsetup_r+0x14>
 8003d74:	f7ff f9ce 	bl	8003114 <__sinit>
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d7e:	0718      	lsls	r0, r3, #28
 8003d80:	d422      	bmi.n	8003dc8 <__swsetup_r+0x64>
 8003d82:	06d9      	lsls	r1, r3, #27
 8003d84:	d407      	bmi.n	8003d96 <__swsetup_r+0x32>
 8003d86:	2309      	movs	r3, #9
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	e034      	b.n	8003e00 <__swsetup_r+0x9c>
 8003d96:	0758      	lsls	r0, r3, #29
 8003d98:	d512      	bpl.n	8003dc0 <__swsetup_r+0x5c>
 8003d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d9c:	b141      	cbz	r1, 8003db0 <__swsetup_r+0x4c>
 8003d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003da2:	4299      	cmp	r1, r3
 8003da4:	d002      	beq.n	8003dac <__swsetup_r+0x48>
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7ff faf4 	bl	8003394 <_free_r>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6363      	str	r3, [r4, #52]	; 0x34
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	2300      	movs	r3, #0
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	6023      	str	r3, [r4, #0]
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f043 0308 	orr.w	r3, r3, #8
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	6923      	ldr	r3, [r4, #16]
 8003dca:	b94b      	cbnz	r3, 8003de0 <__swsetup_r+0x7c>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d003      	beq.n	8003de0 <__swsetup_r+0x7c>
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f884 	bl	8003ee8 <__smakebuf_r>
 8003de0:	89a0      	ldrh	r0, [r4, #12]
 8003de2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003de6:	f010 0301 	ands.w	r3, r0, #1
 8003dea:	d00a      	beq.n	8003e02 <__swsetup_r+0x9e>
 8003dec:	2300      	movs	r3, #0
 8003dee:	60a3      	str	r3, [r4, #8]
 8003df0:	6963      	ldr	r3, [r4, #20]
 8003df2:	425b      	negs	r3, r3
 8003df4:	61a3      	str	r3, [r4, #24]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	b943      	cbnz	r3, 8003e0c <__swsetup_r+0xa8>
 8003dfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dfe:	d1c4      	bne.n	8003d8a <__swsetup_r+0x26>
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	0781      	lsls	r1, r0, #30
 8003e04:	bf58      	it	pl
 8003e06:	6963      	ldrpl	r3, [r4, #20]
 8003e08:	60a3      	str	r3, [r4, #8]
 8003e0a:	e7f4      	b.n	8003df6 <__swsetup_r+0x92>
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e7f7      	b.n	8003e00 <__swsetup_r+0x9c>
 8003e10:	2000009c 	.word	0x2000009c

08003e14 <_raise_r>:
 8003e14:	291f      	cmp	r1, #31
 8003e16:	b538      	push	{r3, r4, r5, lr}
 8003e18:	4604      	mov	r4, r0
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	d904      	bls.n	8003e28 <_raise_r+0x14>
 8003e1e:	2316      	movs	r3, #22
 8003e20:	6003      	str	r3, [r0, #0]
 8003e22:	f04f 30ff 	mov.w	r0, #4294967295
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003e2a:	b112      	cbz	r2, 8003e32 <_raise_r+0x1e>
 8003e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e30:	b94b      	cbnz	r3, 8003e46 <_raise_r+0x32>
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 f830 	bl	8003e98 <_getpid_r>
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e42:	f000 b817 	b.w	8003e74 <_kill_r>
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d00a      	beq.n	8003e60 <_raise_r+0x4c>
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	d103      	bne.n	8003e56 <_raise_r+0x42>
 8003e4e:	2316      	movs	r3, #22
 8003e50:	6003      	str	r3, [r0, #0]
 8003e52:	2001      	movs	r0, #1
 8003e54:	e7e7      	b.n	8003e26 <_raise_r+0x12>
 8003e56:	2400      	movs	r4, #0
 8003e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	4798      	blx	r3
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7e0      	b.n	8003e26 <_raise_r+0x12>

08003e64 <raise>:
 8003e64:	4b02      	ldr	r3, [pc, #8]	; (8003e70 <raise+0xc>)
 8003e66:	4601      	mov	r1, r0
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	f7ff bfd3 	b.w	8003e14 <_raise_r>
 8003e6e:	bf00      	nop
 8003e70:	2000009c 	.word	0x2000009c

08003e74 <_kill_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d07      	ldr	r5, [pc, #28]	; (8003e94 <_kill_r+0x20>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	f7fc fe09 	bl	8000a98 <_kill>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d102      	bne.n	8003e90 <_kill_r+0x1c>
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	b103      	cbz	r3, 8003e90 <_kill_r+0x1c>
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
 8003e92:	bf00      	nop
 8003e94:	2000036c 	.word	0x2000036c

08003e98 <_getpid_r>:
 8003e98:	f7fc bdf6 	b.w	8000a88 <_getpid>

08003e9c <__swhatbuf_r>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	b096      	sub	sp, #88	; 0x58
 8003ea8:	4615      	mov	r5, r2
 8003eaa:	461e      	mov	r6, r3
 8003eac:	da0d      	bge.n	8003eca <__swhatbuf_r+0x2e>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003ebe:	2340      	movne	r3, #64	; 0x40
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	6031      	str	r1, [r6, #0]
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	b016      	add	sp, #88	; 0x58
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	466a      	mov	r2, sp
 8003ecc:	f000 f848 	bl	8003f60 <_fstat_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	dbec      	blt.n	8003eae <__swhatbuf_r+0x12>
 8003ed4:	9901      	ldr	r1, [sp, #4]
 8003ed6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003eda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003ede:	4259      	negs	r1, r3
 8003ee0:	4159      	adcs	r1, r3
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	e7eb      	b.n	8003ec0 <__swhatbuf_r+0x24>

08003ee8 <__smakebuf_r>:
 8003ee8:	898b      	ldrh	r3, [r1, #12]
 8003eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eec:	079d      	lsls	r5, r3, #30
 8003eee:	4606      	mov	r6, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	d507      	bpl.n	8003f04 <__smakebuf_r+0x1c>
 8003ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	6123      	str	r3, [r4, #16]
 8003efc:	2301      	movs	r3, #1
 8003efe:	6163      	str	r3, [r4, #20]
 8003f00:	b002      	add	sp, #8
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	ab01      	add	r3, sp, #4
 8003f06:	466a      	mov	r2, sp
 8003f08:	f7ff ffc8 	bl	8003e9c <__swhatbuf_r>
 8003f0c:	9900      	ldr	r1, [sp, #0]
 8003f0e:	4605      	mov	r5, r0
 8003f10:	4630      	mov	r0, r6
 8003f12:	f7ff fab3 	bl	800347c <_malloc_r>
 8003f16:	b948      	cbnz	r0, 8003f2c <__smakebuf_r+0x44>
 8003f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1c:	059a      	lsls	r2, r3, #22
 8003f1e:	d4ef      	bmi.n	8003f00 <__smakebuf_r+0x18>
 8003f20:	f023 0303 	bic.w	r3, r3, #3
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	e7e3      	b.n	8003ef4 <__smakebuf_r+0xc>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	6020      	str	r0, [r4, #0]
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	9b00      	ldr	r3, [sp, #0]
 8003f38:	6163      	str	r3, [r4, #20]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	6120      	str	r0, [r4, #16]
 8003f3e:	b15b      	cbz	r3, 8003f58 <__smakebuf_r+0x70>
 8003f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f44:	4630      	mov	r0, r6
 8003f46:	f000 f81d 	bl	8003f84 <_isatty_r>
 8003f4a:	b128      	cbz	r0, 8003f58 <__smakebuf_r+0x70>
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	431d      	orrs	r5, r3
 8003f5c:	81a5      	strh	r5, [r4, #12]
 8003f5e:	e7cf      	b.n	8003f00 <__smakebuf_r+0x18>

08003f60 <_fstat_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4d07      	ldr	r5, [pc, #28]	; (8003f80 <_fstat_r+0x20>)
 8003f64:	2300      	movs	r3, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	f7fc fdf2 	bl	8000b56 <_fstat>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d102      	bne.n	8003f7c <_fstat_r+0x1c>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	b103      	cbz	r3, 8003f7c <_fstat_r+0x1c>
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	bf00      	nop
 8003f80:	2000036c 	.word	0x2000036c

08003f84 <_isatty_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d06      	ldr	r5, [pc, #24]	; (8003fa0 <_isatty_r+0x1c>)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fc fdf1 	bl	8000b76 <_isatty>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_isatty_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_isatty_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	2000036c 	.word	0x2000036c

08003fa4 <_gettimeofday>:
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <_gettimeofday+0xc>)
 8003fa6:	2258      	movs	r2, #88	; 0x58
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	4770      	bx	lr
 8003fb0:	2000036c 	.word	0x2000036c

08003fb4 <_init>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr

08003fc0 <_fini>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr
