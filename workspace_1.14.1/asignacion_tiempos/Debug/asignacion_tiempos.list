
asignacion_tiempos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc8  08006bc8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd0  08006bd0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000005c  08006c34  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006c34  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172c5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b69  00000000  00000000  00037394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00039f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f2  00000000  00000000  0003b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029486  00000000  00000000  0003c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019932  00000000  00000000  00065a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010878c  00000000  00000000  0007f332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006244  00000000  00000000  00187ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0018dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b30 	.word	0x08006b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006b30 	.word	0x08006b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ac:	f107 0208 	add.w	r2, r7, #8
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2304      	movs	r3, #4
 80005b6:	214e      	movs	r1, #78	; 0x4e
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <lcd_send_cmd+0x5c>)
 80005ba:	f002 fd83 	bl	80030c4 <HAL_I2C_Master_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000dc 	.word	0x200000dc

080005cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800060c:	f107 0208 	add.w	r2, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2304      	movs	r3, #4
 8000616:	214e      	movs	r1, #78	; 0x4e
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <lcd_send_data+0x5c>)
 800061a:	f002 fd53 	bl	80030c4 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000dc 	.word	0x200000dc

0800062c <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <lcd_enviar_int+0x34>)
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fdd1 	bl	80061e8 <siprintf>
    lcd_put_cur(row, col);
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	68b8      	ldr	r0, [r7, #8]
 800064a:	f000 f822 	bl	8000692 <lcd_put_cur>
    lcd_send_string(buffer);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f879 	bl	800074a <lcd_send_string>
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08006b48 	.word	0x08006b48

08000664 <lcd_clear>:

void lcd_clear (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f7ff ff7e 	bl	800056c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e005      	b.n	8000682 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000676:	2020      	movs	r0, #32
 8000678:	f7ff ffa8 	bl	80005cc <lcd_send_data>
	for (int i=0; i<70; i++)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b45      	cmp	r3, #69	; 0x45
 8000686:	ddf6      	ble.n	8000676 <lcd_clear+0x12>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    switch (row)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <lcd_put_cur+0x18>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d005      	beq.n	80006b4 <lcd_put_cur+0x22>
 80006a8:	e009      	b.n	80006be <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	603b      	str	r3, [r7, #0]
            break;
 80006b2:	e004      	b.n	80006be <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ba:	603b      	str	r3, [r7, #0]
            break;
 80006bc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff52 	bl	800056c <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_init>:


void lcd_init (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006d4:	2032      	movs	r0, #50	; 0x32
 80006d6:	f000 fda1 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006da:	2030      	movs	r0, #48	; 0x30
 80006dc:	f7ff ff46 	bl	800056c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 fd9b 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006e6:	2030      	movs	r0, #48	; 0x30
 80006e8:	f7ff ff40 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fd95 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff ff3a 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 fd8f 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff ff34 	bl	800056c <lcd_send_cmd>
	HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f000 fd89 	bl	800121c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f7ff ff2e 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fd83 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000716:	2008      	movs	r0, #8
 8000718:	f7ff ff28 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fd7d 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff22 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fd77 	bl	800121c <HAL_Delay>
	HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fd74 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ff19 	bl	800056c <lcd_send_cmd>
	HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 fd6e 	bl	800121c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff13 	bl	800056c <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000752:	e006      	b.n	8000762 <lcd_send_string+0x18>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff35 	bl	80005cc <lcd_send_data>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <lcd_send_string+0xa>
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	static unsigned int Count_LCD=0,Count_KEY=0,Count_ADC=0,Count_MATRIZ=0,Count_SONIC=0;

	if(htim->Instance==htim3.Instance)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d159      	bne.n	800083c <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

	//LDC
	if(Count_LCD<(Time_LCD/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b31      	cmp	r3, #49	; 0x31
 800078e:	d805      	bhi.n	800079c <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Count_LCD++;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a2d      	ldr	r2, [pc, #180]	; (800084c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	e007      	b.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else
	{
		Count_LCD=0;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
		FLAG.LCD2=1;
 80007a2:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80007a4:	7813      	ldrb	r3, [r2, #0]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	7013      	strb	r3, [r2, #0]
	}

	//KEYPAD
	if(Count_KEY<(Time_keypad/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b18      	cmp	r3, #24
 80007b2:	d805      	bhi.n	80007c0 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			Count_KEY++;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e007      	b.n	80007d0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else
		{
			Count_KEY=0;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			FLAG.KEYPAD=1;
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80007c8:	7813      	ldrb	r3, [r2, #0]
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	7013      	strb	r3, [r2, #0]
		}



	//ADC
	if(Count_ADC<(Time_ADC/Timer))
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b09      	cmp	r3, #9
 80007d6:	d805      	bhi.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		Count_ADC++;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x80>
	}
	else
	{
		Count_ADC=0;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
		FLAG.ADC=1;
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80007ec:	7813      	ldrb	r3, [r2, #0]
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	7013      	strb	r3, [r2, #0]
	}


	//MATRIZ
	if(Count_MATRIZ<(Time_matriz/Timer))
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b4a      	cmp	r3, #74	; 0x4a
 80007fa:	d805      	bhi.n	8000808 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Count_MATRIZ++;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e007      	b.n	8000818 <HAL_TIM_PeriodElapsedCallback+0xa4>
	}
	else
	{
		Count_MATRIZ=0;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		FLAG.MATRIZ=1;
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	7013      	strb	r3, [r2, #0]
	}

	//ULTRASONICO
	if(Count_SONIC<(Time_sonic/Timer))
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	d805      	bhi.n	800082c <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		Count_SONIC++;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000828:	6013      	str	r3, [r2, #0]

	}



}
 800082a:	e007      	b.n	800083c <HAL_TIM_PeriodElapsedCallback+0xc8>
		Count_SONIC=0;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
		FLAG.SONIC=1;
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000834:	7813      	ldrb	r3, [r2, #0]
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	7013      	strb	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000130 	.word	0x20000130
 800084c:	2000020c 	.word	0x2000020c
 8000850:	20000204 	.word	0x20000204
 8000854:	20000210 	.word	0x20000210
 8000858:	20000214 	.word	0x20000214
 800085c:	20000218 	.word	0x20000218
 8000860:	2000021c 	.word	0x2000021c

08000864 <Medir_ADC>:

void Medir_ADC()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <Medir_ADC+0x28>)
 800086a:	f001 f87d 	bl	8001968 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800086e:	2164      	movs	r1, #100	; 0x64
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <Medir_ADC+0x28>)
 8000872:	f001 f967 	bl	8001b44 <HAL_ADC_PollForConversion>

	Medida_ADC = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <Medir_ADC+0x28>)
 8000878:	f001 fa3c 	bl	8001cf4 <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <Medir_ADC+0x2c>)
 8000880:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <Medir_ADC+0x28>)
 8000884:	f001 f92a 	bl	8001adc <HAL_ADC_Stop>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078
 8000890:	20000208 	.word	0x20000208

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fc44 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f83a 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f000 f9c0 	bl	8000c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a4:	f000 f98e 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80008a8:	f000 f93c 	bl	8000b24 <MX_TIM3_Init>
  MX_ADC1_Init();
 80008ac:	f000 f884 	bl	80009b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008b0:	f000 f8f8 	bl	8000aa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <main+0x74>)
 80008b6:	f004 fb3d 	bl	8004f34 <HAL_TIM_Base_Start_IT>

  lcd_init();
 80008ba:	f7ff ff09 	bl	80006d0 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FLAG.ADC)
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <main+0x78>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <main+0x46>
	  {
		  FLAG.ADC=0;
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <main+0x78>)
 80008ce:	7813      	ldrb	r3, [r2, #0]
 80008d0:	f36f 0382 	bfc	r3, #2, #1
 80008d4:	7013      	strb	r3, [r2, #0]
		  Medir_ADC();
 80008d6:	f7ff ffc5 	bl	8000864 <Medir_ADC>
	  }

	  if(FLAG.LCD2)
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <main+0x78>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0ea      	beq.n	80008be <main+0x2a>
	  {
		  lcd_clear();
 80008e8:	f7ff febc 	bl	8000664 <lcd_clear>
		  lcd_enviar_int(Medida_ADC,0,0);
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <main+0x7c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe99 	bl	800062c <lcd_enviar_int>
		  FLAG.LCD2=0;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <main+0x78>)
 80008fc:	7813      	ldrb	r3, [r2, #0]
 80008fe:	f36f 0300 	bfc	r3, #0, #1
 8000902:	7013      	strb	r3, [r2, #0]
	  if(FLAG.ADC)
 8000904:	e7db      	b.n	80008be <main+0x2a>
 8000906:	bf00      	nop
 8000908:	20000130 	.word	0x20000130
 800090c:	20000204 	.word	0x20000204
 8000910:	20000208 	.word	0x20000208

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	; 0x58
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2244      	movs	r2, #68	; 0x44
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f005 fc80 	bl	8006228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000936:	f44f 7000 	mov.w	r0, #512	; 0x200
 800093a:	f002 ff91 	bl	8003860 <HAL_PWREx_ControlVoltageScaling>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000944:	f000 f9d4 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000952:	2310      	movs	r3, #16
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800095a:	2302      	movs	r3, #2
 800095c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000962:	230a      	movs	r3, #10
 8000964:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000966:	2307      	movs	r3, #7
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ffc8 	bl	800390c <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000982:	f000 f9b5 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2303      	movs	r3, #3
 800098c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2104      	movs	r1, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fb90 	bl	80040c4 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009aa:	f000 f9a1 	bl	8000cf0 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3758      	adds	r7, #88	; 0x58
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <MX_ADC1_Init+0xe4>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_ADC1_Init+0xe0>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3a:	4817      	ldr	r0, [pc, #92]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a3c:	f000 fe44 	bl	80016c8 <HAL_ADC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a46:	f000 f953 	bl	8000cf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a56:	f001 ff15 	bl	8002884 <HAL_ADCEx_MultiModeConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a60:	f000 f946 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_ADC1_Init+0xe8>)
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a70:	237f      	movs	r3, #127	; 0x7f
 8000a72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a74:	2304      	movs	r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_ADC1_Init+0xe0>)
 8000a82:	f001 f945 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a8c:	f000 f930 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	50040000 	.word	0x50040000
 8000aa0:	04300002 	.word	0x04300002

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000ae0:	f002 fa54 	bl	8002f8c <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 f901 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000af2:	f002 fe0f 	bl	8003714 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 f8f8 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2C1_Init+0x74>)
 8000b04:	f002 fe51 	bl	80037aa <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 f8ef 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000dc 	.word	0x200000dc
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	10909cec 	.word	0x10909cec

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b44:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <MX_TIM3_Init+0x9c>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b4a:	f240 321f 	movw	r2, #799	; 0x31f
 8000b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b6a:	4814      	ldr	r0, [pc, #80]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b6c:	f004 f98a 	bl	8004e84 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b76:	f000 f8bb 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000b88:	f004 fb46 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b92:	f000 f8ad 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_TIM3_Init+0x98>)
 8000ba4:	f004 fd5e 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000bae:	f000 f89f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000130 	.word	0x20000130
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <MX_USART2_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c08:	f004 fdd2 	bl	80057b0 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f86d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000017c 	.word	0x2000017c
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_GPIO_Init+0xc4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f002 f95b 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0xc8>)
 8000cbe:	f001 ffa3 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f001 ff94 	bl	8002c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000800 	.word	0x48000800

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x44>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ac      	sub	sp, #176	; 0xb0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2288      	movs	r2, #136	; 0x88
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 fa5f 	bl	8006228 <memset>
  if(hadc->Instance==ADC1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d146      	bne.n	8000e02 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d78:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fbb1 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000db0:	f7ff ff9e 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000dba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dea:	230b      	movs	r3, #11
 8000dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_ADC_MspInit+0xd0>)
 8000dfe:	f001 ff03 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	37b0      	adds	r7, #176	; 0xb0
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	50040000 	.word	0x50040000
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800

08000e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ac      	sub	sp, #176	; 0xb0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2288      	movs	r2, #136	; 0x88
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 f9f5 	bl	8006228 <memset>
  if(hi2c->Instance==I2C1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_I2C_MspInit+0xb0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13b      	bne.n	8000ec0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fb59 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e60:	f7ff ff46 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_I2C_MspInit+0xb8>)
 8000ea4:	f001 feb0 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_I2C_MspInit+0xb4>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	37b0      	adds	r7, #176	; 0xb0
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_TIM_Base_MspInit+0x44>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d113      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	201d      	movs	r0, #29
 8000f04:	f001 fe49 	bl	8002b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f08:	201d      	movs	r0, #29
 8000f0a:	f001 fe62 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ac      	sub	sp, #176	; 0xb0
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2288      	movs	r2, #136	; 0x88
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 f971 	bl	8006228 <memset>
  if(huart->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_UART_MspInit+0xb0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13b      	bne.n	8000fc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fad5 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff fec2 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f76:	6593      	str	r3, [r2, #88]	; 0x58
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_UART_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 fe20 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	37b0      	adds	r7, #176	; 0xb0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40004400 	.word	0x40004400
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f8da 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM3_IRQHandler+0x10>)
 8001032:	f003 ffef 	bl	8005014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000130 	.word	0x20000130

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f005 f8e2 	bl	8006238 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20018000 	.word	0x20018000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000220 	.word	0x20000220
 80010a8:	20000370 	.word	0x20000370

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopForever+0x6>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopForever+0xe>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopForever+0x16>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f005 f8a1 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fbc7 	bl	8000894 <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001114:	08006bd8 	.word	0x08006bd8
  ldr r2, =_sbss
 8001118:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800111c:	20000370 	.word	0x20000370

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_Init+0x3c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f001 fd22 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f80f 	bl	8001164 <HAL_InitTick>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	e001      	b.n	8001156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001152:	f7ff fdd3 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fd2d 	bl	8002bee <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f001 fcf7 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000224 	.word	0x20000224

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000224 	.word	0x20000224

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3360      	adds	r3, #96	; 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LL_ADC_SetOffset+0x44>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	03fff000 	.word	0x03fff000

08001314 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	211f      	movs	r1, #31
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0e9b      	lsrs	r3, r3, #26
 80013d4:	f003 011f 	and.w	r1, r3, #31
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	431a      	orrs	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3314      	adds	r3, #20
 8001404:	461a      	mov	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0e5b      	lsrs	r3, r3, #25
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0d1b      	lsrs	r3, r3, #20
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2107      	movs	r1, #7
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0d1b      	lsrs	r3, r3, #20
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0318 	and.w	r3, r3, #24
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001470:	40d9      	lsrs	r1, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	400b      	ands	r3, r1
 8001476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147a:	431a      	orrs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	0007ffff 	.word	0x0007ffff

08001494 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6093      	str	r3, [r2, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001554:	d101      	bne.n	800155a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_IsEnabled+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_IsEnabled+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d101      	bne.n	80015f6 <LL_ADC_IsDisableOngoing+0x18>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_ADC_IsDisableOngoing+0x1a>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	f043 0210 	orr.w	r2, r3, #16
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b04      	cmp	r3, #4
 8001666:	d101      	bne.n	800166c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800168a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d101      	bne.n	80016ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e130      	b.n	8001944 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fb27 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fef1 	bl	80014f0 <LL_ADC_IsDeepPowerDownEnabled>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fed7 	bl	80014cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff0c 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d115      	bne.n	800175a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fef0 	bl	8001518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_ADC_Init+0x284>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	4a84      	ldr	r2, [pc, #528]	; (8001950 <HAL_ADC_Init+0x288>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800174c:	e002      	b.n	8001754 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3b01      	subs	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f9      	bne.n	800174e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff feee 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff62 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 8001790:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80c9 	bne.w	8001932 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 80c5 	bne.w	8001932 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017b0:	f043 0202 	orr.w	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fefb 	bl	80015b8 <LL_ADC_IsEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d115      	bne.n	80017f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c8:	4862      	ldr	r0, [pc, #392]	; (8001954 <HAL_ADC_Init+0x28c>)
 80017ca:	f7ff fef5 	bl	80015b8 <LL_ADC_IsEnabled>
 80017ce:	4604      	mov	r4, r0
 80017d0:	4861      	ldr	r0, [pc, #388]	; (8001958 <HAL_ADC_Init+0x290>)
 80017d2:	f7ff fef1 	bl	80015b8 <LL_ADC_IsEnabled>
 80017d6:	4603      	mov	r3, r0
 80017d8:	431c      	orrs	r4, r3
 80017da:	4860      	ldr	r0, [pc, #384]	; (800195c <HAL_ADC_Init+0x294>)
 80017dc:	f7ff feec 	bl	80015b8 <LL_ADC_IsEnabled>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4323      	orrs	r3, r4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4619      	mov	r1, r3
 80017ee:	485c      	ldr	r0, [pc, #368]	; (8001960 <HAL_ADC_Init+0x298>)
 80017f0:	f7ff fd38 	bl	8001264 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e5b      	ldrb	r3, [r3, #25]
 80017f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001804:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800180a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	3b01      	subs	r3, #1
 8001828:	045b      	lsls	r3, r3, #17
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <HAL_ADC_Init+0x29c>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	430b      	orrs	r3, r1
 800185e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff1c 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 800186a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d13d      	bne.n	80018ee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d13a      	bne.n	80018ee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800187c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001884:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	69b9      	ldr	r1, [r7, #24]
 800189e:	430b      	orrs	r3, r1
 80018a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d118      	bne.n	80018de <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018b6:	f023 0304 	bic.w	r3, r3, #4
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	e007      	b.n	80018ee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10c      	bne.n	8001910 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	f023 010f 	bic.w	r1, r3, #15
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
 800190e:	e007      	b.n	8001920 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 020f 	bic.w	r2, r2, #15
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f023 0303 	bic.w	r3, r3, #3
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
 8001930:	e007      	b.n	8001942 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001942:	7ffb      	ldrb	r3, [r7, #31]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3724      	adds	r7, #36	; 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	053e2d63 	.word	0x053e2d63
 8001954:	50040000 	.word	0x50040000
 8001958:	50040100 	.word	0x50040100
 800195c:	50040200 	.word	0x50040200
 8001960:	50040300 	.word	0x50040300
 8001964:	fff0c007 	.word	0xfff0c007

08001968 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001970:	4857      	ldr	r0, [pc, #348]	; (8001ad0 <HAL_ADC_Start+0x168>)
 8001972:	f7ff fd8f 	bl	8001494 <LL_ADC_GetMultimode>
 8001976:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe69 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 809c 	bne.w	8001ac2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_Start+0x30>
 8001994:	2302      	movs	r3, #2
 8001996:	e097      	b.n	8001ac8 <HAL_ADC_Start+0x160>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fe63 	bl	800266c <ADC_Enable>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 8083 	bne.w	8001ab8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <HAL_ADC_Start+0x16c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d002      	beq.n	80019d6 <HAL_ADC_Start+0x6e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e000      	b.n	80019d8 <HAL_ADC_Start+0x70>
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_ADC_Start+0x170>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4293      	cmp	r3, r2
 80019de:	d002      	beq.n	80019e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019fe:	d106      	bne.n	8001a0e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f023 0206 	bic.w	r2, r3, #6
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	221c      	movs	r2, #28
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <HAL_ADC_Start+0x16c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d002      	beq.n	8001a34 <HAL_ADC_Start+0xcc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e000      	b.n	8001a36 <HAL_ADC_Start+0xce>
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_ADC_Start+0x170>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d008      	beq.n	8001a50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d002      	beq.n	8001a50 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d114      	bne.n	8001a7a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdc6 	bl	8001604 <LL_ADC_REG_StartConversion>
 8001a78:	e025      	b.n	8001ac6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <HAL_ADC_Start+0x16c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_Start+0x12e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e000      	b.n	8001a98 <HAL_ADC_Start+0x130>
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_Start+0x170>)
 8001a98:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00f      	beq.n	8001ac6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ab6:	e006      	b.n	8001ac6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ac0:	e001      	b.n	8001ac6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	50040300 	.word	0x50040300
 8001ad4:	50040100 	.word	0x50040100
 8001ad8:	50040000 	.word	0x50040000

08001adc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Stop+0x16>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e023      	b.n	8001b3a <HAL_ADC_Stop+0x5e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001afa:	2103      	movs	r1, #3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fcf9 	bl	80024f4 <ADC_ConversionStop>
 8001b02:	4603      	mov	r3, r0
 8001b04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fe33 	bl	8002778 <ADC_Disable>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b4e:	4866      	ldr	r0, [pc, #408]	; (8001ce8 <HAL_ADC_PollForConversion+0x1a4>)
 8001b50:	f7ff fca0 	bl	8001494 <LL_ADC_GetMultimode>
 8001b54:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d102      	bne.n	8001b64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e02a      	b.n	8001bba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d002      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b09      	cmp	r3, #9
 8001b74:	d111      	bne.n	8001b9a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0a4      	b.n	8001cde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b94:	2304      	movs	r3, #4
 8001b96:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b98:	e00f      	b.n	8001bba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b9a:	4853      	ldr	r0, [pc, #332]	; (8001ce8 <HAL_ADC_PollForConversion+0x1a4>)
 8001b9c:	f7ff fc88 	bl	80014b0 <LL_ADC_GetMultiDMATransfer>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e093      	b.n	8001cde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bba:	f7ff fb23 	bl	8001204 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bc0:	e021      	b.n	8001c06 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d01d      	beq.n	8001c06 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bca:	f7ff fb1b 	bl	8001204 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <HAL_ADC_PollForConversion+0x9c>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d112      	bne.n	8001c06 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06b      	b.n	8001cde <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0d6      	beq.n	8001bc2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fba6 	bl	8001376 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01c      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7e5b      	ldrb	r3, [r3, #25]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d118      	bne.n	8001c6a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d111      	bne.n	8001c6a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_ADC_PollForConversion+0x1a8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d002      	beq.n	8001c7a <HAL_ADC_PollForConversion+0x136>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e000      	b.n	8001c7c <HAL_ADC_PollForConversion+0x138>
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_ADC_PollForConversion+0x1ac>)
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d008      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d104      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	e00c      	b.n	8001cba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_ADC_PollForConversion+0x1a8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_ADC_PollForConversion+0x16c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e000      	b.n	8001cb2 <HAL_ADC_PollForConversion+0x16e>
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_ADC_PollForConversion+0x1ac>)
 8001cb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d104      	bne.n	8001cca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e008      	b.n	8001cdc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	50040300 	.word	0x50040300
 8001cec:	50040100 	.word	0x50040100
 8001cf0:	50040000 	.word	0x50040000

08001cf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0b6      	sub	sp, #216	; 0xd8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x22>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e3c9      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x7b6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fc88 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 83aa 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d824      	bhi.n	8001da6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	3b02      	subs	r3, #2
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d81b      	bhi.n	8001d9e <HAL_ADC_ConfigChannel+0x8e>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_ADC_ConfigChannel+0x5c>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d85 	.word	0x08001d85
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001d95 	.word	0x08001d95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d82:	e010      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d84:	2312      	movs	r3, #18
 8001d86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d8a:	e00c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d8c:	2318      	movs	r3, #24
 8001d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d92:	e008      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d9e:	2306      	movs	r3, #6
 8001da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001da4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001db4:	f7ff faf2 	bl	800139c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc49 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 8001dc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fc69 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 8001dd0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 81a4 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 819f 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	461a      	mov	r2, r3
 8001df6:	f7ff fafd 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d00a      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6919      	ldr	r1, [r3, #16]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e2c:	f7ff fa4e 	bl	80012cc <LL_ADC_SetOffset>
 8001e30:	e179      	b.n	8002126 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa6b 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x14e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fa60 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	e01e      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x18c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fa55 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e004      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1a4>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	e018      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x1d6>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e004      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fa24 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa08 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x214>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f9fd 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 021f 	and.w	r2, r3, #31
 8001f22:	e01e      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x252>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f9f2 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e004      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x26a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	e018      	b.n	8001fac <HAL_ADC_ConfigChannel+0x29c>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	e004      	b.n	8001fac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f9c1 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f9a5 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x2da>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f99a 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	e01e      	b.n	8002028 <HAL_ADC_ConfigChannel+0x318>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f98f 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e004      	b.n	8002026 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800201c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x330>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	e014      	b.n	800206a <HAL_ADC_ConfigChannel+0x35a>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800204e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002054:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e004      	b.n	800206a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206a:	429a      	cmp	r2, r3
 800206c:	d106      	bne.n	800207c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	2102      	movs	r1, #2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f962 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2103      	movs	r1, #3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f946 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x398>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2103      	movs	r1, #3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f93b 	bl	8001314 <LL_ADC_GetOffsetChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	e017      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x3c8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f930 	bl	8001314 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80020c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80020ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x3e0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	e011      	b.n	8002114 <HAL_ADC_ConfigChannel+0x404>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80020fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002100:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800210c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f90d 	bl	8001340 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fa44 	bl	80015b8 <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 8140 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff f981 	bl	800144c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4a8f      	ldr	r2, [pc, #572]	; (800238c <HAL_ADC_ConfigChannel+0x67c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 8131 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_ADC_ConfigChannel+0x46e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	3301      	adds	r3, #1
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2b09      	cmp	r3, #9
 8002174:	bf94      	ite	ls
 8002176:	2301      	movls	r3, #1
 8002178:	2300      	movhi	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	e019      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x4a2>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e003      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800219a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d079      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x4c2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	3301      	adds	r3, #1
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d0:	e015      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4ee>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80021ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_ConfigChannel+0x50e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	3301      	adds	r3, #1
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	e017      	b.n	800224e <HAL_ADC_ConfigChannel+0x53e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800222c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	ea42 0103 	orr.w	r1, r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x564>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	3301      	adds	r3, #1
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	e018      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x596>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e003      	b.n	8002298 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a6:	430b      	orrs	r3, r1
 80022a8:	e081      	b.n	80023ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d107      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5b6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c4:	e015      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5e2>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e003      	b.n	80022ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x602>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	e017      	b.n	8002342 <HAL_ADC_ConfigChannel+0x632>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	61bb      	str	r3, [r7, #24]
  return result;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	ea42 0103 	orr.w	r1, r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_ADC_ConfigChannel+0x65e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 021f 	and.w	r2, r3, #31
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	3b1e      	subs	r3, #30
 8002366:	051b      	lsls	r3, r3, #20
 8002368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800236c:	e01e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x69c>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	60fb      	str	r3, [r7, #12]
  return result;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e006      	b.n	8002398 <HAL_ADC_ConfigChannel+0x688>
 800238a:	bf00      	nop
 800238c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	051b      	lsls	r3, r3, #20
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7ff f81e 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07a      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c4:	4843      	ldr	r0, [pc, #268]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023c6:	f7fe ff73 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 80023ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d12c      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d126      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a3c      	ldr	r2, [pc, #240]	; (80024dc <HAL_ADC_ConfigChannel+0x7cc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x6e8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <HAL_ADC_ConfigChannel+0x7d0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d15d      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002400:	4619      	mov	r1, r3
 8002402:	4834      	ldr	r0, [pc, #208]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002404:	f7fe ff41 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	4a36      	ldr	r2, [pc, #216]	; (80024e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002422:	e002      	b.n	800242a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3b01      	subs	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	e040      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d118      	bne.n	800246e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d112      	bne.n	800246e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a23      	ldr	r2, [pc, #140]	; (80024dc <HAL_ADC_ConfigChannel+0x7cc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_ADC_ConfigChannel+0x74c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d12d      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002464:	4619      	mov	r1, r3
 8002466:	481b      	ldr	r0, [pc, #108]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002468:	f7fe ff0f 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246c:	e024      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d120      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800247c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11a      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_ADC_ConfigChannel+0x7cc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d115      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800248e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002496:	4619      	mov	r1, r3
 8002498:	480e      	ldr	r0, [pc, #56]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800249a:	f7fe fef6 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
 800249e:	e00c      	b.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024b2:	e002      	b.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	37d8      	adds	r7, #216	; 0xd8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	80080000 	.word	0x80080000
 80024d4:	50040300 	.word	0x50040300
 80024d8:	c7520000 	.word	0xc7520000
 80024dc:	50040000 	.word	0x50040000
 80024e0:	50040200 	.word	0x50040200
 80024e4:	20000000 	.word	0x20000000
 80024e8:	053e2d63 	.word	0x053e2d63
 80024ec:	cb840000 	.word	0xcb840000
 80024f0:	80000001 	.word	0x80000001

080024f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f8a2 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 8002510:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f8c3 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 800251c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8098 	beq.w	800265c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02a      	beq.n	8002590 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7e5b      	ldrb	r3, [r3, #25]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d126      	bne.n	8002590 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7e1b      	ldrb	r3, [r3, #24]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d122      	bne.n	8002590 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800254a:	2301      	movs	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800254e:	e014      	b.n	800257a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4a45      	ldr	r2, [pc, #276]	; (8002668 <ADC_ConversionStop+0x174>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d90d      	bls.n	8002574 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e074      	b.n	800265e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d1e3      	bne.n	8002550 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d014      	beq.n	80025c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f85a 	bl	8001654 <LL_ADC_REG_IsConversionOngoing>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f817 	bl	80015de <LL_ADC_IsDisableOngoing>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f836 	bl	800162c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d014      	beq.n	80025f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f869 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffff 	bl	80015de <LL_ADC_IsDisableOngoing>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f845 	bl	800167a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d005      	beq.n	8002602 <ADC_ConversionStop+0x10e>
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d105      	bne.n	8002608 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025fc:	230c      	movs	r3, #12
 80025fe:	617b      	str	r3, [r7, #20]
        break;
 8002600:	e005      	b.n	800260e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002602:	2308      	movs	r3, #8
 8002604:	617b      	str	r3, [r7, #20]
        break;
 8002606:	e002      	b.n	800260e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002608:	2304      	movs	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
        break;
 800260c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800260e:	f7fe fdf9 	bl	8001204 <HAL_GetTick>
 8002612:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002614:	e01b      	b.n	800264e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002616:	f7fe fdf5 	bl	8001204 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b05      	cmp	r3, #5
 8002622:	d914      	bls.n	800264e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1dc      	bne.n	8002616 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	a33fffff 	.word	0xa33fffff

0800266c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe ff9b 	bl	80015b8 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d169      	bne.n	800275c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <ADC_Enable+0xfc>)
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e055      	b.n	800275e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe ff56 	bl	8001568 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026bc:	482b      	ldr	r0, [pc, #172]	; (800276c <ADC_Enable+0x100>)
 80026be:	f7fe fdf7 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 80026c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <ADC_Enable+0x104>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	4a28      	ldr	r2, [pc, #160]	; (8002774 <ADC_Enable+0x108>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e6:	e002      	b.n	80026ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fd86 	bl	8001204 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026fa:	e028      	b.n	800274e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe ff59 	bl	80015b8 <LL_ADC_IsEnabled>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe ff29 	bl	8001568 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002716:	f7fe fd75 	bl	8001204 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d914      	bls.n	800274e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d00d      	beq.n	800274e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d1cf      	bne.n	80026fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	8000003f 	.word	0x8000003f
 800276c:	50040300 	.word	0x50040300
 8002770:	20000000 	.word	0x20000000
 8002774:	053e2d63 	.word	0x053e2d63

08002778 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ff2a 	bl	80015de <LL_ADC_IsDisableOngoing>
 800278a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ff11 	bl	80015b8 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d047      	beq.n	800282c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d144      	bne.n	800282c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030d 	and.w	r3, r3, #13
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10c      	bne.n	80027ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe feeb 	bl	8001590 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2203      	movs	r2, #3
 80027c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fd1f 	bl	8001204 <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c8:	e029      	b.n	800281e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e023      	b.n	800282e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027e6:	f7fe fd0d 	bl	8001204 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d914      	bls.n	800281e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1dc      	bne.n	80027e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <LL_ADC_IsEnabled>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <LL_ADC_IsEnabled+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_IsEnabled+0x1a>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_REG_IsConversionOngoing>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d101      	bne.n	8002874 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b09f      	sub	sp, #124	; 0x7c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800289e:	2302      	movs	r3, #2
 80028a0:	e093      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028aa:	2300      	movs	r3, #0
 80028ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ae:	2300      	movs	r3, #0
 80028b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a47      	ldr	r2, [pc, #284]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028bc:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e001      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e072      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ffb8 	bl	800285c <LL_ADC_REG_IsConversionOngoing>
 80028ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffb2 	bl	800285c <LL_ADC_REG_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d154      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002900:	2b00      	cmp	r3, #0
 8002902:	d151      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002906:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d02c      	beq.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002922:	035b      	lsls	r3, r3, #13
 8002924:	430b      	orrs	r3, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292c:	4829      	ldr	r0, [pc, #164]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800292e:	f7ff ff82 	bl	8002836 <LL_ADC_IsEnabled>
 8002932:	4604      	mov	r4, r0
 8002934:	4828      	ldr	r0, [pc, #160]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002936:	f7ff ff7e 	bl	8002836 <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	431c      	orrs	r4, r3
 800293e:	4828      	ldr	r0, [pc, #160]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002940:	f7ff ff79 	bl	8002836 <LL_ADC_IsEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	4323      	orrs	r3, r4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d137      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800294c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002954:	f023 030f 	bic.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6811      	ldr	r1, [r2, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	430a      	orrs	r2, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002968:	e028      	b.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002976:	4817      	ldr	r0, [pc, #92]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002978:	f7ff ff5d 	bl	8002836 <LL_ADC_IsEnabled>
 800297c:	4604      	mov	r4, r0
 800297e:	4816      	ldr	r0, [pc, #88]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002980:	f7ff ff59 	bl	8002836 <LL_ADC_IsEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	431c      	orrs	r4, r3
 8002988:	4815      	ldr	r0, [pc, #84]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800298a:	f7ff ff54 	bl	8002836 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	4323      	orrs	r3, r4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d112      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800299e:	f023 030f 	bic.w	r3, r3, #15
 80029a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029a6:	e009      	b.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029ba:	e000      	b.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	377c      	adds	r7, #124	; 0x7c
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	50040000 	.word	0x50040000
 80029d8:	50040100 	.word	0x50040100
 80029dc:	50040300 	.word	0x50040300
 80029e0:	50040200 	.word	0x50040200

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	; (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff3e 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff31 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffa2 	bl	8002b40 <SysTick_Config>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c16:	e17f      	b.n	8002f18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8171 	beq.w	8002f12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d005      	beq.n	8002c48 <HAL_GPIO_Init+0x40>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d130      	bne.n	8002caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c7e:	2201      	movs	r2, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0201 	and.w	r2, r3, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d118      	bne.n	8002ce8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d017      	beq.n	8002d24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d123      	bne.n	8002d78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	6939      	ldr	r1, [r7, #16]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80ac 	beq.w	8002f12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dfc:	d025      	beq.n	8002e4a <HAL_GPIO_Init+0x242>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_GPIO_Init+0x338>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01f      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_GPIO_Init+0x33c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_GPIO_Init+0x340>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_GPIO_Init+0x344>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_GPIO_Init+0x348>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00c      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e00a      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x244>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8e:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e94:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f47f ae78 	bne.w	8002c18 <HAL_GPIO_Init+0x10>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	48000400 	.word	0x48000400
 8002f44:	48000800 	.word	0x48000800
 8002f48:	48000c00 	.word	0x48000c00
 8002f4c:	48001000 	.word	0x48001000
 8002f50:	48001400 	.word	0x48001400
 8002f54:	48001800 	.word	0x48001800
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f78:	e002      	b.n	8002f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e08d      	b.n	80030ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd ff30 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e006      	b.n	8003014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d108      	bne.n	800302e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e007      	b.n	800303e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800304c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69d9      	ldr	r1, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
 80030d4:	4613      	mov	r3, r2
 80030d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	f040 80fd 	bne.w	80032e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2C_Master_Transmit+0x30>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0f6      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe f882 	bl	8001204 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2319      	movs	r3, #25
 8003108:	2201      	movs	r2, #1
 800310a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f914 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e1      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2bff      	cmp	r3, #255	; 0xff
 800314e:	d906      	bls.n	800315e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e007      	b.n	800316e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_I2C_Master_Transmit+0x228>)
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa79 	bl	80036b0 <I2C_TransferConfig>
 80031be:	e066      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_I2C_Master_Transmit+0x228>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa6e 	bl	80036b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031d4:	e05b      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f8fd 	bl	80033da <I2C_WaitOnTXISFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07b      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d034      	beq.n	800328e <HAL_I2C_Master_Transmit+0x1ca>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d130      	bne.n	800328e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	2200      	movs	r2, #0
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f880 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e04d      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2bff      	cmp	r3, #255	; 0xff
 800324e:	d90e      	bls.n	800326e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	b2da      	uxtb	r2, r3
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fa22 	bl	80036b0 <I2C_TransferConfig>
 800326c:	e00f      	b.n	800328e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	b2da      	uxtb	r2, r3
 800327e:	8979      	ldrh	r1, [r7, #10]
 8003280:	2300      	movs	r3, #0
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fa11 	bl	80036b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d19e      	bne.n	80031d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	6a39      	ldr	r1, [r7, #32]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f8e3 	bl	8003468 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e01a      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2220      	movs	r2, #32
 80032b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_I2C_Master_Transmit+0x22c>)
 80032c0:	400b      	ands	r3, r1
 80032c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	80002000 	.word	0x80002000
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d103      	bne.n	8003312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d007      	beq.n	8003330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	619a      	str	r2, [r3, #24]
  }
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334c:	e031      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d02d      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fd ff55 	bl	8001204 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d122      	bne.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	429a      	cmp	r2, r3
 8003388:	d113      	bne.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d0be      	beq.n	800334e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e6:	e033      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f87f 	bl	80034f0 <I2C_IsErrorOccurred>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e031      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d025      	beq.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fd fefe 	bl	8001204 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11a      	bne.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d013      	beq.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d1c4      	bne.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003474:	e02f      	b.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f838 	bl	80034f0 <I2C_IsErrorOccurred>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02d      	b.n	80034e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fd febb 	bl	8001204 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11a      	bne.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d013      	beq.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e007      	b.n	80034e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d1c8      	bne.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d068      	beq.n	80035ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2210      	movs	r2, #16
 8003522:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003524:	e049      	b.n	80035ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d045      	beq.n	80035ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fd fe69 	bl	8001204 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_IsErrorOccurred+0x54>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13a      	bne.n	80035ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003556:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d121      	bne.n	80035ac <I2C_IsErrorOccurred+0xbc>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356e:	d01d      	beq.n	80035ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b20      	cmp	r3, #32
 8003574:	d01a      	beq.n	80035ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003584:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003586:	f7fd fe3d 	bl	8001204 <HAL_GetTick>
 800358a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800358c:	e00e      	b.n	80035ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800358e:	f7fd fe39 	bl	8001204 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b19      	cmp	r3, #25
 800359a:	d907      	bls.n	80035ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f043 0320 	orr.w	r3, r3, #32
 80035a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035aa:	e006      	b.n	80035ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d1e9      	bne.n	800358e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d003      	beq.n	80035d0 <I2C_IsErrorOccurred+0xe0>
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0aa      	beq.n	8003526 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2220      	movs	r2, #32
 80035de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f043 0308 	orr.w	r3, r3, #8
 8003628:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01c      	beq.n	800369e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff fe45 	bl	80032f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <I2C_IsErrorOccurred+0x1bc>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800369e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	fe00e800 	.word	0xfe00e800

080036b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	817b      	strh	r3, [r7, #10]
 80036be:	4613      	mov	r3, r2
 80036c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c8:	7a7b      	ldrb	r3, [r7, #9]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	4313      	orrs	r3, r2
 80036da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	0d5b      	lsrs	r3, r3, #21
 80036ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <I2C_TransferConfig+0x60>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	43db      	mvns	r3, r3
 80036f4:	ea02 0103 	and.w	r1, r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	03ff63ff 	.word	0x03ff63ff

08003714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	d138      	bne.n	800379c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003734:	2302      	movs	r3, #2
 8003736:	e032      	b.n	800379e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003766:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d139      	bne.n	8003834 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e033      	b.n	8003836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2224      	movs	r2, #36	; 0x24
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_PWREx_GetVoltageRange+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386e:	d130      	bne.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003870:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d038      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2232      	movs	r2, #50	; 0x32
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a4:	e002      	b.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d102      	bne.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f2      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d110      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d007      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83

0800390c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e3ca      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4b97      	ldr	r3, [pc, #604]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003928:	4b94      	ldr	r3, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80e4 	beq.w	8003b08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_RCC_OscConfig+0x4a>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f040 808b 	bne.w	8003a64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 8087 	bne.w	8003a64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003956:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_RCC_OscConfig+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e3a2      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_RCC_OscConfig+0x7c>
 800397e:	4b7f      	ldr	r3, [pc, #508]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003986:	e005      	b.n	8003994 <HAL_RCC_OscConfig+0x88>
 8003988:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003994:	4293      	cmp	r3, r2
 8003996:	d223      	bcs.n	80039e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fd55 	bl	800444c <RCC_SetFlashLatencyFromMSIRange>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e383      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ac:	4b73      	ldr	r3, [pc, #460]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a72      	ldr	r2, [pc, #456]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b2:	f043 0308 	orr.w	r3, r3, #8
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	496d      	ldr	r1, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	4968      	ldr	r1, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
 80039de:	e025      	b.n	8003a2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e0:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4960      	ldr	r1, [pc, #384]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	495b      	ldr	r1, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd15 	bl	800444c <RCC_SetFlashLatencyFromMSIRange>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e343      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2c:	f000 fc4a 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	4950      	ldr	r1, [pc, #320]	; (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x27c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd fb87 	bl	8001164 <HAL_InitTick>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d052      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	e327      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d032      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a42      	ldr	r2, [pc, #264]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a78:	f7fd fbc4 	bl	8001204 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a80:	f7fd fbc0 	bl	8001204 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e310      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a92:	4b3a      	ldr	r3, [pc, #232]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a36      	ldr	r2, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4931      	ldr	r1, [pc, #196]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	492c      	ldr	r1, [pc, #176]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	e01a      	b.n	8003b08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ade:	f7fd fb91 	bl	8001204 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae6:	f7fd fb8d 	bl	8001204 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e2dd      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x1da>
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d074      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x21a>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d10e      	bne.n	8003b3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d10b      	bne.n	8003b3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d064      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d160      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e2ba      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x24a>
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e026      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5e:	d115      	bne.n	8003b8c <HAL_RCC_OscConfig+0x280>
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a02      	ldr	r2, [pc, #8]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e014      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08006b4c 	.word	0x08006b4c
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b9d      	ldr	r3, [pc, #628]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9c      	ldr	r2, [pc, #624]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fb2a 	bl	8001204 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fb26 	bl	8001204 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e276      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2a8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fb16 	bl	8001204 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fb12 	bl	8001204 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e262      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d0>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d060      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x310>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d116      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_OscConfig+0x328>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e23f      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4973      	ldr	r1, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e040      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fad1 	bl	8001204 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd facd 	bl	8001204 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e21d      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	495f      	ldr	r1, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	e018      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd faad 	bl	8001204 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fd faa9 	bl	8001204 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1f9      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fa88 	bl	8001204 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fa84 	bl	8001204 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1d4      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3ec>
 8003d18:	e01b      	b.n	8003d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fa6b 	bl	8001204 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd fa67 	bl	8001204 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1b7      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ef      	bne.n	8003d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a6 	beq.w	8003eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d118      	bne.n	8003dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da4:	f7fd fa2e 	bl	8001204 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd fa2a 	bl	8001204 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e17a      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4d8>
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de2:	e029      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x50c>
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	4b9c      	ldr	r3, [pc, #624]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a9b      	ldr	r2, [pc, #620]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e28:	4b98      	ldr	r3, [pc, #608]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a97      	ldr	r2, [pc, #604]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd f9e0 	bl	8001204 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd f9dc 	bl	8001204 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e12a      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4b8b      	ldr	r3, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_RCC_OscConfig+0x53c>
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd f9c9 	bl	8001204 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f9c5 	bl	8001204 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e113      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b7f      	ldr	r3, [pc, #508]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ed      	bne.n	8003e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	4a79      	ldr	r2, [pc, #484]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80fe 	beq.w	80040b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 80d0 	bne.w	8004060 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec0:	4b72      	ldr	r3, [pc, #456]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0203 	and.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d130      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d127      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d11f      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f00:	2a07      	cmp	r2, #7
 8003f02:	bf14      	ite	ne
 8003f04:	2201      	movne	r2, #1
 8003f06:	2200      	moveq	r2, #0
 8003f08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d113      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d06e      	beq.n	8004014 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d069      	beq.n	8004010 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f3c:	4b53      	ldr	r3, [pc, #332]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0ad      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f64:	f7fd f94e 	bl	8001204 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd f94a 	bl	8001204 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e09a      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8a:	4b40      	ldr	r3, [pc, #256]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x784>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa4:	0212      	lsls	r2, r2, #8
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fac:	0852      	lsrs	r2, r2, #1
 8003fae:	3a01      	subs	r2, #1
 8003fb0:	0552      	lsls	r2, r2, #21
 8003fb2:	4311      	orrs	r1, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fb8:	0852      	lsrs	r2, r2, #1
 8003fba:	3a01      	subs	r2, #1
 8003fbc:	0652      	lsls	r2, r2, #25
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc4:	0912      	lsrs	r2, r2, #4
 8003fc6:	0452      	lsls	r2, r2, #17
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	4930      	ldr	r1, [pc, #192]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2d      	ldr	r2, [pc, #180]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe8:	f7fd f90c 	bl	8001204 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd f908 	bl	8001204 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e058      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800400e:	e050      	b.n	80040b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e04f      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d148      	bne.n	80040b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <HAL_RCC_OscConfig+0x780>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004038:	f7fd f8e4 	bl	8001204 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd f8e0 	bl	8001204 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e030      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x734>
 800405e:	e028      	b.n	80040b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d023      	beq.n	80040ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_OscConfig+0x780>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x780>)
 800406c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd f8c7 	bl	8001204 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	e00c      	b.n	8004094 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407a:	f7fd f8c3 	bl	8001204 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d905      	bls.n	8004094 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e013      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
 800408c:	40021000 	.word	0x40021000
 8004090:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x7b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ec      	bne.n	800407a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_OscConfig+0x7b0>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	4905      	ldr	r1, [pc, #20]	; (80040bc <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x7b4>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
 80040ac:	e001      	b.n	80040b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	feeefffc 	.word	0xfeeefffc

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0e7      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 0207 	bic.w	r2, r3, #7
 80040ee:	4970      	ldr	r1, [pc, #448]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b6e      	ldr	r3, [pc, #440]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0cf      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004120:	429a      	cmp	r2, r3
 8004122:	d908      	bls.n	8004136 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4960      	ldr	r1, [pc, #384]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d04c      	beq.n	80041dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0a6      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e09a      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08e      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e086      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4943      	ldr	r1, [pc, #268]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fd f82a 	bl	8001204 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fd f826 	bl	8001204 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e06e      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d208      	bcs.n	800420a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	492b      	ldr	r1, [pc, #172]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420a:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d210      	bcs.n	800423a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0207 	bic.w	r2, r3, #7
 8004220:	4923      	ldr	r1, [pc, #140]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e036      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4918      	ldr	r1, [pc, #96]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4910      	ldr	r1, [pc, #64]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004278:	f000 f824 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1f4>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1f8>)
 8004296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1fc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc ff61 	bl	8001164 <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80042a6:	7afb      	ldrb	r3, [r7, #11]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08006b4c 	.word	0x08006b4c
 80042bc:	20000000 	.word	0x20000000
 80042c0:	20000004 	.word	0x20000004

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d121      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d11e      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042f8:	4b34      	ldr	r3, [pc, #208]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004304:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e005      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004320:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004334:	e00a      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d102      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	e004      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d101      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800434a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d134      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0xa6>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d003      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0xac>
 8004368:	e005      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800436c:	617b      	str	r3, [r7, #20]
      break;
 800436e:	e005      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004372:	617b      	str	r3, [r7, #20]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	617b      	str	r3, [r7, #20]
      break;
 800437a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	3301      	adds	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	0e5b      	lsrs	r3, r3, #25
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	3301      	adds	r3, #1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043bc:	69bb      	ldr	r3, [r7, #24]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3724      	adds	r7, #36	; 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	08006b64 	.word	0x08006b64
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	007a1200 	.word	0x007a1200

080043dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043f8:	f7ff fff0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4904      	ldr	r1, [pc, #16]	; (800441c <HAL_RCC_GetPCLK1Freq+0x28>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	08006b5c 	.word	0x08006b5c

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004424:	f7ff ffda 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0adb      	lsrs	r3, r3, #11
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	08006b5c 	.word	0x08006b5c

0800444c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004464:	f7ff f9ee 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 8004468:	6178      	str	r0, [r7, #20]
 800446a:	e014      	b.n	8004496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	4a24      	ldr	r2, [pc, #144]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004476:	6593      	str	r3, [r2, #88]	; 0x58
 8004478:	4b22      	ldr	r3, [pc, #136]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004484:	f7ff f9de 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 8004488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449c:	d10b      	bne.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d919      	bls.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2ba0      	cmp	r3, #160	; 0xa0
 80044a8:	d902      	bls.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044aa:	2302      	movs	r3, #2
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e013      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b0:	2301      	movs	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e010      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d902      	bls.n	80044c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044bc:	2303      	movs	r3, #3
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	e00a      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d102      	bne.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044c8:	2302      	movs	r3, #2
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e004      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b70      	cmp	r3, #112	; 0x70
 80044d2:	d101      	bne.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 0207 	bic.w	r2, r3, #7
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	40022000 	.word	0x40022000

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004514:	2300      	movs	r3, #0
 8004516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004518:	2300      	movs	r3, #0
 800451a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	2b00      	cmp	r3, #0
 8004526:	d041      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004530:	d02a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004536:	d824      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800453c:	d008      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800453e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004542:	d81e      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454c:	d010      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800454e:	e018      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004550:	4b86      	ldr	r3, [pc, #536]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a85      	ldr	r2, [pc, #532]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800455c:	e015      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fabb 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800456e:	e00c      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3320      	adds	r3, #32
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fba6 	bl	8004cc8 <RCCEx_PLLSAI2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	74fb      	strb	r3, [r7, #19]
      break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004590:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459e:	4973      	ldr	r1, [pc, #460]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045a6:	e001      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d041      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045c0:	d02a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045c6:	d824      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d2:	d81e      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045dc:	d010      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045de:	e018      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e0:	4b62      	ldr	r3, [pc, #392]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a61      	ldr	r2, [pc, #388]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ec:	e015      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fa73 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045fe:	e00c      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3320      	adds	r3, #32
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb5e 	bl	8004cc8 <RCCEx_PLLSAI2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004610:	e003      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	74fb      	strb	r3, [r7, #19]
      break;
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004620:	4b52      	ldr	r3, [pc, #328]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462e:	494f      	ldr	r1, [pc, #316]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004636:	e001      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a0 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004664:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	4a40      	ldr	r2, [pc, #256]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466e:	6593      	str	r3, [r2, #88]	; 0x58
 8004670:	4b3e      	ldr	r3, [pc, #248]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467c:	2301      	movs	r3, #1
 800467e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004680:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800468c:	f7fc fdba 	bl	8001204 <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004692:	e009      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fc fdb6 	bl	8001204 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	74fb      	strb	r3, [r7, #19]
        break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046a8:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ef      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01f      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d019      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	4a20      	ldr	r2, [pc, #128]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fc fd75 	bl	8001204 <HAL_GetTick>
 800471a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471c:	e00b      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fc fd71 	bl	8001204 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d902      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	74fb      	strb	r3, [r7, #19]
            break;
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ec      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004762:	e009      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
 8004768:	e006      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004778:	7c7b      	ldrb	r3, [r7, #17]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b9e      	ldr	r3, [pc, #632]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	4a9d      	ldr	r2, [pc, #628]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004796:	4b98      	ldr	r3, [pc, #608]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f023 0203 	bic.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	4994      	ldr	r1, [pc, #592]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b8:	4b8f      	ldr	r3, [pc, #572]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f023 020c 	bic.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	498c      	ldr	r1, [pc, #560]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047da:	4b87      	ldr	r3, [pc, #540]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	4983      	ldr	r1, [pc, #524]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047fc:	4b7e      	ldr	r3, [pc, #504]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	497b      	ldr	r1, [pc, #492]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800481e:	4b76      	ldr	r3, [pc, #472]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482c:	4972      	ldr	r1, [pc, #456]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004840:	4b6d      	ldr	r3, [pc, #436]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	496a      	ldr	r1, [pc, #424]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004862:	4b65      	ldr	r3, [pc, #404]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	4961      	ldr	r1, [pc, #388]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004884:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	4959      	ldr	r1, [pc, #356]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a6:	4b54      	ldr	r3, [pc, #336]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	4950      	ldr	r1, [pc, #320]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048c8:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	4948      	ldr	r1, [pc, #288]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ea:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	493f      	ldr	r1, [pc, #252]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d028      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800490c:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491a:	4937      	ldr	r1, [pc, #220]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492a:	d106      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
 8004938:	e011      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004942:	d10c      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f8c8 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d028      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	491f      	ldr	r1, [pc, #124]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004988:	d106      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4a1a      	ldr	r2, [pc, #104]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004994:	60d3      	str	r3, [r2, #12]
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f899 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02b      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d6:	4908      	ldr	r1, [pc, #32]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e6:	d109      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a02      	ldr	r2, [pc, #8]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f2:	60d3      	str	r3, [r2, #12]
 80049f4:	e014      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f867 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02f      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3a:	4928      	ldr	r1, [pc, #160]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4a:	d10d      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	2102      	movs	r1, #2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f844 	bl	8004ae0 <RCCEx_PLLSAI1_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d014      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	74bb      	strb	r3, [r7, #18]
 8004a66:	e011      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3320      	adds	r3, #32
 8004a76:	2102      	movs	r1, #2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f925 	bl	8004cc8 <RCCEx_PLLSAI2_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa6:	490d      	ldr	r1, [pc, #52]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aca:	4904      	ldr	r1, [pc, #16]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ad2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aee:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004afa:	4b72      	ldr	r3, [pc, #456]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0203 	and.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10d      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b12:	4b6c      	ldr	r3, [pc, #432]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
       ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d047      	beq.n	8004bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	e044      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d018      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0x86>
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d825      	bhi.n	8004b84 <RCCEx_PLLSAI1_Config+0xa4>
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d002      	beq.n	8004b42 <RCCEx_PLLSAI1_Config+0x62>
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d009      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x74>
 8004b40:	e020      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b42:	4b60      	ldr	r3, [pc, #384]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d11d      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b52:	e01a      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b54:	4b5b      	ldr	r3, [pc, #364]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d116      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b64:	e013      	b.n	8004b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b66:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b72:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b82:	e006      	b.n	8004b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      break;
 8004b88:	e004      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10d      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b9a:	4b4a      	ldr	r3, [pc, #296]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6819      	ldr	r1, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	4944      	ldr	r1, [pc, #272]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d17d      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bbc:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fc fb1c 	bl	8001204 <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bce:	e009      	b.n	8004be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd0:	f7fc fb18 	bl	8001204 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	73fb      	strb	r3, [r7, #15]
        break;
 8004be2:	e005      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004be4:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ef      	bne.n	8004bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d160      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d111      	bne.n	8004c20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bfc:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6892      	ldr	r2, [r2, #8]
 8004c0c:	0211      	lsls	r1, r2, #8
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68d2      	ldr	r2, [r2, #12]
 8004c12:	0912      	lsrs	r2, r2, #4
 8004c14:	0452      	lsls	r2, r2, #17
 8004c16:	430a      	orrs	r2, r1
 8004c18:	492a      	ldr	r1, [pc, #168]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	610b      	str	r3, [r1, #16]
 8004c1e:	e027      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d112      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6892      	ldr	r2, [r2, #8]
 8004c36:	0211      	lsls	r1, r2, #8
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6912      	ldr	r2, [r2, #16]
 8004c3c:	0852      	lsrs	r2, r2, #1
 8004c3e:	3a01      	subs	r2, #1
 8004c40:	0552      	lsls	r2, r2, #21
 8004c42:	430a      	orrs	r2, r1
 8004c44:	491f      	ldr	r1, [pc, #124]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	610b      	str	r3, [r1, #16]
 8004c4a:	e011      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6892      	ldr	r2, [r2, #8]
 8004c5c:	0211      	lsls	r1, r2, #8
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6952      	ldr	r2, [r2, #20]
 8004c62:	0852      	lsrs	r2, r2, #1
 8004c64:	3a01      	subs	r2, #1
 8004c66:	0652      	lsls	r2, r2, #25
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	4916      	ldr	r1, [pc, #88]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fc fac2 	bl	8001204 <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c82:	e009      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c84:	f7fc fabe 	bl	8001204 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
          break;
 8004c96:	e005      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ef      	beq.n	8004c84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cd6:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d018      	beq.n	8004d14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ce2:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0203 	and.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d10d      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cfa:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
       ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d047      	beq.n	8004d9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
 8004d12:	e044      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d018      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0x86>
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d825      	bhi.n	8004d6c <RCCEx_PLLSAI2_Config+0xa4>
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d002      	beq.n	8004d2a <RCCEx_PLLSAI2_Config+0x62>
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d009      	beq.n	8004d3c <RCCEx_PLLSAI2_Config+0x74>
 8004d28:	e020      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d2a:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11d      	bne.n	8004d72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3a:	e01a      	b.n	8004d72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d3c:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d116      	bne.n	8004d76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d4c:	e013      	b.n	8004d76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d4e:	4b4c      	ldr	r3, [pc, #304]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d6a:	e006      	b.n	8004d7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d70:	e004      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d72:	bf00      	nop
 8004d74:	e002      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	430b      	orrs	r3, r1
 8004d98:	4939      	ldr	r1, [pc, #228]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d167      	bne.n	8004e74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a35      	ldr	r2, [pc, #212]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db0:	f7fc fa28 	bl	8001204 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db6:	e009      	b.n	8004dcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db8:	f7fc fa24 	bl	8001204 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d902      	bls.n	8004dcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dca:	e005      	b.n	8004dd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ef      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d14a      	bne.n	8004e74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d111      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6892      	ldr	r2, [r2, #8]
 8004df4:	0211      	lsls	r1, r2, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	0912      	lsrs	r2, r2, #4
 8004dfc:	0452      	lsls	r2, r2, #17
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	491f      	ldr	r1, [pc, #124]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	614b      	str	r3, [r1, #20]
 8004e06:	e011      	b.n	8004e2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6912      	ldr	r2, [r2, #16]
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	430a      	orrs	r2, r1
 8004e26:	4916      	ldr	r1, [pc, #88]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fc f9e4 	bl	8001204 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e3e:	e009      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e40:	f7fc f9e0 	bl	8001204 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d902      	bls.n	8004e54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	73fb      	strb	r3, [r7, #15]
          break;
 8004e52:	e005      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ef      	beq.n	8004e40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4904      	ldr	r1, [pc, #16]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e049      	b.n	8004f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc f812 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fa9a 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e04f      	b.n	8004fec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01d      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d018      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d115      	bne.n	8004fd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d015      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d011      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	e008      	b.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	00010007 	.word	0x00010007

08005014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d020      	beq.n	8005078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0202 	mvn.w	r2, #2
 8005048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9ad 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f99f 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9b0 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d020      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0204 	mvn.w	r2, #4
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f987 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f979 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f98a 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d020      	beq.n	8005110 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0208 	mvn.w	r2, #8
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f961 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f953 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f964 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0210 	mvn.w	r2, #16
 800512c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2208      	movs	r2, #8
 8005132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f93b 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f92d 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f93e 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0201 	mvn.w	r2, #1
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fafa 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faf2 	bl	8005788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 faea 	bl	800579c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8fd 	bl	80053e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0220 	mvn.w	r2, #32
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fab2 	bl	8005774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIM_ConfigClockSource+0x1c>
 8005230:	2302      	movs	r3, #2
 8005232:	e0b6      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd8>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x170>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x176>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xaa>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11e>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfe>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13e>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	f000 f9a7 	bl	8005624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	f000 f990 	bl	8005624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f904 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	; 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f95d 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f923 	bl	800558e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	; 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f94d 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	461a      	mov	r2, r3
 8005364:	f000 f8e4 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f93d 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 f934 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00f      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3d      	ldr	r2, [pc, #244]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00b      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3b      	ldr	r2, [pc, #236]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01f      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d01b      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2a      	ldr	r2, [pc, #168]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a29      	ldr	r2, [pc, #164]	; (8005520 <TIM_Base_SetConfig+0x124>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a28      	ldr	r2, [pc, #160]	; (8005524 <TIM_Base_SetConfig+0x128>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a27      	ldr	r2, [pc, #156]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a26      	ldr	r2, [pc, #152]	; (800552c <TIM_Base_SetConfig+0x130>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <TIM_Base_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <TIM_Base_SetConfig+0x128>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a10      	ldr	r2, [pc, #64]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0f      	ldr	r2, [pc, #60]	; (800552c <TIM_Base_SetConfig+0x130>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d103      	bne.n	80054fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	615a      	str	r2, [r3, #20]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0201 	bic.w	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 030a 	bic.w	r3, r3, #10
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 0210 	bic.w	r2, r3, #16
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	031b      	lsls	r3, r3, #12
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	f043 0307 	orr.w	r3, r3, #7
 8005610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	431a      	orrs	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4313      	orrs	r3, r2
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e068      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2e      	ldr	r2, [pc, #184]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1e      	ldr	r2, [pc, #120]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ee:	d018      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a13      	ldr	r2, [pc, #76]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40014000 	.word	0x40014000

08005774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e040      	b.n	8005844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb fba4 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0201 	bic.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fae0 	bl	8005dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f825 	bl	800584c <UART_SetConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e01b      	b.n	8005844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fb5f 	bl	8005f00 <UART_CheckIdleState>
 8005842:	4603      	mov	r3, r0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b08a      	sub	sp, #40	; 0x28
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	431a      	orrs	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4313      	orrs	r3, r2
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4ba4      	ldr	r3, [pc, #656]	; (8005b0c <UART_SetConfig+0x2c0>)
 800587c:	4013      	ands	r3, r2
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005884:	430b      	orrs	r3, r1
 8005886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a99      	ldr	r2, [pc, #612]	; (8005b10 <UART_SetConfig+0x2c4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	4313      	orrs	r3, r2
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a90      	ldr	r2, [pc, #576]	; (8005b14 <UART_SetConfig+0x2c8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d126      	bne.n	8005924 <UART_SetConfig+0xd8>
 80058d6:	4b90      	ldr	r3, [pc, #576]	; (8005b18 <UART_SetConfig+0x2cc>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d81b      	bhi.n	800591c <UART_SetConfig+0xd0>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0xa0>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	080058fd 	.word	0x080058fd
 80058f0:	0800590d 	.word	0x0800590d
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005915 	.word	0x08005915
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e116      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e112      	b.n	8005b32 <UART_SetConfig+0x2e6>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e10e      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e10a      	b.n	8005b32 <UART_SetConfig+0x2e6>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e106      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7c      	ldr	r2, [pc, #496]	; (8005b1c <UART_SetConfig+0x2d0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d138      	bne.n	80059a0 <UART_SetConfig+0x154>
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <UART_SetConfig+0x2cc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d82d      	bhi.n	8005998 <UART_SetConfig+0x14c>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0xf8>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005979 	.word	0x08005979
 8005948:	08005999 	.word	0x08005999
 800594c:	08005999 	.word	0x08005999
 8005950:	08005999 	.word	0x08005999
 8005954:	08005989 	.word	0x08005989
 8005958:	08005999 	.word	0x08005999
 800595c:	08005999 	.word	0x08005999
 8005960:	08005999 	.word	0x08005999
 8005964:	08005981 	.word	0x08005981
 8005968:	08005999 	.word	0x08005999
 800596c:	08005999 	.word	0x08005999
 8005970:	08005999 	.word	0x08005999
 8005974:	08005991 	.word	0x08005991
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597e:	e0d8      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005986:	e0d4      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598e:	e0d0      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005996:	e0cc      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599e:	e0c8      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <UART_SetConfig+0x2d4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d125      	bne.n	80059f6 <UART_SetConfig+0x1aa>
 80059aa:	4b5b      	ldr	r3, [pc, #364]	; (8005b18 <UART_SetConfig+0x2cc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d016      	beq.n	80059e6 <UART_SetConfig+0x19a>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d818      	bhi.n	80059ee <UART_SetConfig+0x1a2>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d00a      	beq.n	80059d6 <UART_SetConfig+0x18a>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d814      	bhi.n	80059ee <UART_SetConfig+0x1a2>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <UART_SetConfig+0x182>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d008      	beq.n	80059de <UART_SetConfig+0x192>
 80059cc:	e00f      	b.n	80059ee <UART_SetConfig+0x1a2>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d4:	e0ad      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059d6:	2302      	movs	r3, #2
 80059d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059dc:	e0a9      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059de:	2304      	movs	r3, #4
 80059e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e4:	e0a5      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059e6:	2308      	movs	r3, #8
 80059e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ec:	e0a1      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059ee:	2310      	movs	r3, #16
 80059f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f4:	e09d      	b.n	8005b32 <UART_SetConfig+0x2e6>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a4a      	ldr	r2, [pc, #296]	; (8005b24 <UART_SetConfig+0x2d8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d125      	bne.n	8005a4c <UART_SetConfig+0x200>
 8005a00:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <UART_SetConfig+0x2cc>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a0c:	d016      	beq.n	8005a3c <UART_SetConfig+0x1f0>
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d818      	bhi.n	8005a44 <UART_SetConfig+0x1f8>
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d00a      	beq.n	8005a2c <UART_SetConfig+0x1e0>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d814      	bhi.n	8005a44 <UART_SetConfig+0x1f8>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <UART_SetConfig+0x1d8>
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x1e8>
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x1f8>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e082      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a32:	e07e      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3a:	e07a      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e076      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e072      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a35      	ldr	r2, [pc, #212]	; (8005b28 <UART_SetConfig+0x2dc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d12a      	bne.n	8005aac <UART_SetConfig+0x260>
 8005a56:	4b30      	ldr	r3, [pc, #192]	; (8005b18 <UART_SetConfig+0x2cc>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a64:	d01a      	beq.n	8005a9c <UART_SetConfig+0x250>
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6a:	d81b      	bhi.n	8005aa4 <UART_SetConfig+0x258>
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d00c      	beq.n	8005a8c <UART_SetConfig+0x240>
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a76:	d815      	bhi.n	8005aa4 <UART_SetConfig+0x258>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <UART_SetConfig+0x238>
 8005a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a80:	d008      	beq.n	8005a94 <UART_SetConfig+0x248>
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x258>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e052      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a92:	e04e      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e04a      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e046      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e042      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <UART_SetConfig+0x2c4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d13a      	bne.n	8005b2c <UART_SetConfig+0x2e0>
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <UART_SetConfig+0x2cc>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac4:	d01a      	beq.n	8005afc <UART_SetConfig+0x2b0>
 8005ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aca:	d81b      	bhi.n	8005b04 <UART_SetConfig+0x2b8>
 8005acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad0:	d00c      	beq.n	8005aec <UART_SetConfig+0x2a0>
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d815      	bhi.n	8005b04 <UART_SetConfig+0x2b8>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <UART_SetConfig+0x298>
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d008      	beq.n	8005af4 <UART_SetConfig+0x2a8>
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x2b8>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aea:	e022      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af2:	e01e      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afa:	e01a      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b02:	e016      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0a:	e012      	b.n	8005b32 <UART_SetConfig+0x2e6>
 8005b0c:	efff69f3 	.word	0xefff69f3
 8005b10:	40008000 	.word	0x40008000
 8005b14:	40013800 	.word	0x40013800
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40004400 	.word	0x40004400
 8005b20:	40004800 	.word	0x40004800
 8005b24:	40004c00 	.word	0x40004c00
 8005b28:	40005000 	.word	0x40005000
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a9f      	ldr	r2, [pc, #636]	; (8005db4 <UART_SetConfig+0x568>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d17a      	bne.n	8005c32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d824      	bhi.n	8005b8e <UART_SetConfig+0x342>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x300>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b8f 	.word	0x08005b8f
 8005b6c:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe fc40 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005b74:	61f8      	str	r0, [r7, #28]
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b8f      	ldr	r3, [pc, #572]	; (8005db8 <UART_SetConfig+0x56c>)
 8005b7a:	61fb      	str	r3, [r7, #28]
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fe fba1 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8005b82:	61f8      	str	r0, [r7, #28]
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	61fb      	str	r3, [r7, #28]
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80fb 	beq.w	8005d98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4413      	add	r3, r2
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d305      	bcc.n	8005bbe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d903      	bls.n	8005bc6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bc4:	e0e8      	b.n	8005d98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	461c      	mov	r4, r3
 8005bcc:	4615      	mov	r5, r2
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	022b      	lsls	r3, r5, #8
 8005bd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bdc:	0222      	lsls	r2, r4, #8
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	6849      	ldr	r1, [r1, #4]
 8005be2:	0849      	lsrs	r1, r1, #1
 8005be4:	2000      	movs	r0, #0
 8005be6:	4688      	mov	r8, r1
 8005be8:	4681      	mov	r9, r0
 8005bea:	eb12 0a08 	adds.w	sl, r2, r8
 8005bee:	eb43 0b09 	adc.w	fp, r3, r9
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	f7fa fb34 	bl	8000270 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c16:	d308      	bcc.n	8005c2a <UART_SetConfig+0x3de>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1e:	d204      	bcs.n	8005c2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	60da      	str	r2, [r3, #12]
 8005c28:	e0b6      	b.n	8005d98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c30:	e0b2      	b.n	8005d98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d15e      	bne.n	8005cfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d828      	bhi.n	8005c96 <UART_SetConfig+0x44a>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x400>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe fbc0 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
        break;
 8005c76:	e014      	b.n	8005ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fe fbd2 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe fb1d 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d077      	beq.n	8005d98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	005a      	lsls	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	441a      	add	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d916      	bls.n	8005cf2 <UART_SetConfig+0x4a6>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d212      	bcs.n	8005cf2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f023 030f 	bic.w	r3, r3, #15
 8005cd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	085b      	lsrs	r3, r3, #1
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	8afa      	ldrh	r2, [r7, #22]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e052      	b.n	8005d98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cf8:	e04e      	b.n	8005d98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d827      	bhi.n	8005d52 <UART_SetConfig+0x506>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x4bc>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe fb62 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005d30:	61f8      	str	r0, [r7, #28]
        break;
 8005d32:	e014      	b.n	8005d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fe fb74 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8005d38:	61f8      	str	r0, [r7, #28]
        break;
 8005d3a:	e010      	b.n	8005d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <UART_SetConfig+0x56c>)
 8005d3e:	61fb      	str	r3, [r7, #28]
        break;
 8005d40:	e00d      	b.n	8005d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fe fabf 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8005d46:	61f8      	str	r0, [r7, #28]
        break;
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	61fb      	str	r3, [r7, #28]
        break;
 8005d50:	e005      	b.n	8005d5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d019      	beq.n	8005d98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	085a      	lsrs	r2, r3, #1
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d909      	bls.n	8005d92 <UART_SetConfig+0x546>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d205      	bcs.n	8005d92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	e002      	b.n	8005d98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005da4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db2:	bf00      	nop
 8005db4:	40008000 	.word	0x40008000
 8005db8:	00f42400 	.word	0x00f42400

08005dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eba:	d10a      	bne.n	8005ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b098      	sub	sp, #96	; 0x60
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f10:	f7fb f978 	bl	8001204 <HAL_GetTick>
 8005f14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d12e      	bne.n	8005f82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f88c 	bl	8006050 <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d021      	beq.n	8005f82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f52:	653b      	str	r3, [r7, #80]	; 0x50
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e062      	b.n	8006048 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d149      	bne.n	8006024 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f856 	bl	8006050 <UART_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03c      	beq.n	8006024 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e6      	bne.n	8005faa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	69b9      	ldr	r1, [r7, #24]
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	617b      	str	r3, [r7, #20]
   return(result);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e011      	b.n	8006048 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3758      	adds	r7, #88	; 0x58
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006060:	e049      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d045      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606a:	f7fb f8cb 	bl	8001204 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <UART_WaitOnFlagUntilTimeout+0x30>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e048      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d031      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d110      	bne.n	80060c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2208      	movs	r2, #8
 80060a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f838 	bl	800611e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2208      	movs	r2, #8
 80060b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e029      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d0:	d111      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f81e 	bl	800611e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e00f      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	429a      	cmp	r2, r3
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	429a      	cmp	r2, r3
 8006112:	d0a6      	beq.n	8006062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800611e:	b480      	push	{r7}
 8006120:	b095      	sub	sp, #84	; 0x54
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
 8006146:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800614a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	61fb      	str	r3, [r7, #28]
   return(result);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800617e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006190:	2b01      	cmp	r3, #1
 8006192:	d118      	bne.n	80061c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f023 0310 	bic.w	r3, r3, #16
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6979      	ldr	r1, [r7, #20]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	613b      	str	r3, [r7, #16]
   return(result);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e6      	bne.n	8006194 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061da:	bf00      	nop
 80061dc:	3754      	adds	r7, #84	; 0x54
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <siprintf>:
 80061e8:	b40e      	push	{r1, r2, r3}
 80061ea:	b500      	push	{lr}
 80061ec:	b09c      	sub	sp, #112	; 0x70
 80061ee:	ab1d      	add	r3, sp, #116	; 0x74
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	9006      	str	r0, [sp, #24]
 80061f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061f8:	4809      	ldr	r0, [pc, #36]	; (8006220 <siprintf+0x38>)
 80061fa:	9107      	str	r1, [sp, #28]
 80061fc:	9104      	str	r1, [sp, #16]
 80061fe:	4909      	ldr	r1, [pc, #36]	; (8006224 <siprintf+0x3c>)
 8006200:	f853 2b04 	ldr.w	r2, [r3], #4
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	a902      	add	r1, sp, #8
 800620c:	f000 f992 	bl	8006534 <_svfiprintf_r>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	b01c      	add	sp, #112	; 0x70
 8006218:	f85d eb04 	ldr.w	lr, [sp], #4
 800621c:	b003      	add	sp, #12
 800621e:	4770      	bx	lr
 8006220:	20000058 	.word	0x20000058
 8006224:	ffff0208 	.word	0xffff0208

08006228 <memset>:
 8006228:	4402      	add	r2, r0
 800622a:	4603      	mov	r3, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	d100      	bne.n	8006232 <memset+0xa>
 8006230:	4770      	bx	lr
 8006232:	f803 1b01 	strb.w	r1, [r3], #1
 8006236:	e7f9      	b.n	800622c <memset+0x4>

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000058 	.word	0x20000058

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4d0d      	ldr	r5, [pc, #52]	; (800627c <__libc_init_array+0x38>)
 8006248:	4c0d      	ldr	r4, [pc, #52]	; (8006280 <__libc_init_array+0x3c>)
 800624a:	1b64      	subs	r4, r4, r5
 800624c:	10a4      	asrs	r4, r4, #2
 800624e:	2600      	movs	r6, #0
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	4d0b      	ldr	r5, [pc, #44]	; (8006284 <__libc_init_array+0x40>)
 8006256:	4c0c      	ldr	r4, [pc, #48]	; (8006288 <__libc_init_array+0x44>)
 8006258:	f000 fc6a 	bl	8006b30 <_init>
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	2600      	movs	r6, #0
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	08006bd0 	.word	0x08006bd0
 8006280:	08006bd0 	.word	0x08006bd0
 8006284:	08006bd0 	.word	0x08006bd0
 8006288:	08006bd4 	.word	0x08006bd4

0800628c <__retarget_lock_acquire_recursive>:
 800628c:	4770      	bx	lr

0800628e <__retarget_lock_release_recursive>:
 800628e:	4770      	bx	lr

08006290 <_free_r>:
 8006290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006292:	2900      	cmp	r1, #0
 8006294:	d044      	beq.n	8006320 <_free_r+0x90>
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	9001      	str	r0, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f1a1 0404 	sub.w	r4, r1, #4
 80062a2:	bfb8      	it	lt
 80062a4:	18e4      	addlt	r4, r4, r3
 80062a6:	f000 f8df 	bl	8006468 <__malloc_lock>
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <_free_r+0x94>)
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x30>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062bc:	f000 b8da 	b.w	8006474 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x46>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1961      	adds	r1, r4, r5
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1949      	addeq	r1, r1, r5
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x22>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x50>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x46>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1855      	adds	r5, r2, r1
 80062e4:	42a5      	cmp	r5, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x70>
 80062e8:	6824      	ldr	r4, [r4, #0]
 80062ea:	4421      	add	r1, r4
 80062ec:	1854      	adds	r4, r2, r1
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x26>
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	440c      	add	r4, r1
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x26>
 8006300:	d902      	bls.n	8006308 <_free_r+0x78>
 8006302:	230c      	movs	r3, #12
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x26>
 8006308:	6825      	ldr	r5, [r4, #0]
 800630a:	1961      	adds	r1, r4, r5
 800630c:	428b      	cmp	r3, r1
 800630e:	bf04      	itt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	bf04      	itt	eq
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	6054      	str	r4, [r2, #4]
 800631e:	e7ca      	b.n	80062b6 <_free_r+0x26>
 8006320:	b003      	add	sp, #12
 8006322:	bd30      	pop	{r4, r5, pc}
 8006324:	20000368 	.word	0x20000368

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0e      	ldr	r6, [pc, #56]	; (8006364 <sbrk_aligned+0x3c>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 fba6 	bl	8006a84 <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fba1 	bl	8006a84 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d00a      	beq.n	800635c <sbrk_aligned+0x34>
 8006346:	1cc4      	adds	r4, r0, #3
 8006348:	f024 0403 	bic.w	r4, r4, #3
 800634c:	42a0      	cmp	r0, r4
 800634e:	d007      	beq.n	8006360 <sbrk_aligned+0x38>
 8006350:	1a21      	subs	r1, r4, r0
 8006352:	4628      	mov	r0, r5
 8006354:	f000 fb96 	bl	8006a84 <_sbrk_r>
 8006358:	3001      	adds	r0, #1
 800635a:	d101      	bne.n	8006360 <sbrk_aligned+0x38>
 800635c:	f04f 34ff 	mov.w	r4, #4294967295
 8006360:	4620      	mov	r0, r4
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	2000036c 	.word	0x2000036c

08006368 <_malloc_r>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	1ccd      	adds	r5, r1, #3
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	3508      	adds	r5, #8
 8006374:	2d0c      	cmp	r5, #12
 8006376:	bf38      	it	cc
 8006378:	250c      	movcc	r5, #12
 800637a:	2d00      	cmp	r5, #0
 800637c:	4607      	mov	r7, r0
 800637e:	db01      	blt.n	8006384 <_malloc_r+0x1c>
 8006380:	42a9      	cmp	r1, r5
 8006382:	d905      	bls.n	8006390 <_malloc_r+0x28>
 8006384:	230c      	movs	r3, #12
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	2600      	movs	r6, #0
 800638a:	4630      	mov	r0, r6
 800638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006464 <_malloc_r+0xfc>
 8006394:	f000 f868 	bl	8006468 <__malloc_lock>
 8006398:	f8d8 3000 	ldr.w	r3, [r8]
 800639c:	461c      	mov	r4, r3
 800639e:	bb5c      	cbnz	r4, 80063f8 <_malloc_r+0x90>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	f7ff ffc0 	bl	8006328 <sbrk_aligned>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	4604      	mov	r4, r0
 80063ac:	d155      	bne.n	800645a <_malloc_r+0xf2>
 80063ae:	f8d8 4000 	ldr.w	r4, [r8]
 80063b2:	4626      	mov	r6, r4
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	d145      	bne.n	8006444 <_malloc_r+0xdc>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d048      	beq.n	800644e <_malloc_r+0xe6>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	4631      	mov	r1, r6
 80063c0:	4638      	mov	r0, r7
 80063c2:	eb04 0903 	add.w	r9, r4, r3
 80063c6:	f000 fb5d 	bl	8006a84 <_sbrk_r>
 80063ca:	4581      	cmp	r9, r0
 80063cc:	d13f      	bne.n	800644e <_malloc_r+0xe6>
 80063ce:	6821      	ldr	r1, [r4, #0]
 80063d0:	1a6d      	subs	r5, r5, r1
 80063d2:	4629      	mov	r1, r5
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff ffa7 	bl	8006328 <sbrk_aligned>
 80063da:	3001      	adds	r0, #1
 80063dc:	d037      	beq.n	800644e <_malloc_r+0xe6>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	442b      	add	r3, r5
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	f8d8 3000 	ldr.w	r3, [r8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d038      	beq.n	800645e <_malloc_r+0xf6>
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	42a2      	cmp	r2, r4
 80063f0:	d12b      	bne.n	800644a <_malloc_r+0xe2>
 80063f2:	2200      	movs	r2, #0
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	e00f      	b.n	8006418 <_malloc_r+0xb0>
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	1b52      	subs	r2, r2, r5
 80063fc:	d41f      	bmi.n	800643e <_malloc_r+0xd6>
 80063fe:	2a0b      	cmp	r2, #11
 8006400:	d917      	bls.n	8006432 <_malloc_r+0xca>
 8006402:	1961      	adds	r1, r4, r5
 8006404:	42a3      	cmp	r3, r4
 8006406:	6025      	str	r5, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	6059      	strne	r1, [r3, #4]
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	bf08      	it	eq
 8006410:	f8c8 1000 	streq.w	r1, [r8]
 8006414:	5162      	str	r2, [r4, r5]
 8006416:	604b      	str	r3, [r1, #4]
 8006418:	4638      	mov	r0, r7
 800641a:	f104 060b 	add.w	r6, r4, #11
 800641e:	f000 f829 	bl	8006474 <__malloc_unlock>
 8006422:	f026 0607 	bic.w	r6, r6, #7
 8006426:	1d23      	adds	r3, r4, #4
 8006428:	1af2      	subs	r2, r6, r3
 800642a:	d0ae      	beq.n	800638a <_malloc_r+0x22>
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	50a3      	str	r3, [r4, r2]
 8006430:	e7ab      	b.n	800638a <_malloc_r+0x22>
 8006432:	42a3      	cmp	r3, r4
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	d1dd      	bne.n	80063f4 <_malloc_r+0x8c>
 8006438:	f8c8 2000 	str.w	r2, [r8]
 800643c:	e7ec      	b.n	8006418 <_malloc_r+0xb0>
 800643e:	4623      	mov	r3, r4
 8006440:	6864      	ldr	r4, [r4, #4]
 8006442:	e7ac      	b.n	800639e <_malloc_r+0x36>
 8006444:	4634      	mov	r4, r6
 8006446:	6876      	ldr	r6, [r6, #4]
 8006448:	e7b4      	b.n	80063b4 <_malloc_r+0x4c>
 800644a:	4613      	mov	r3, r2
 800644c:	e7cc      	b.n	80063e8 <_malloc_r+0x80>
 800644e:	230c      	movs	r3, #12
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4638      	mov	r0, r7
 8006454:	f000 f80e 	bl	8006474 <__malloc_unlock>
 8006458:	e797      	b.n	800638a <_malloc_r+0x22>
 800645a:	6025      	str	r5, [r4, #0]
 800645c:	e7dc      	b.n	8006418 <_malloc_r+0xb0>
 800645e:	605b      	str	r3, [r3, #4]
 8006460:	deff      	udf	#255	; 0xff
 8006462:	bf00      	nop
 8006464:	20000368 	.word	0x20000368

08006468 <__malloc_lock>:
 8006468:	4801      	ldr	r0, [pc, #4]	; (8006470 <__malloc_lock+0x8>)
 800646a:	f7ff bf0f 	b.w	800628c <__retarget_lock_acquire_recursive>
 800646e:	bf00      	nop
 8006470:	20000364 	.word	0x20000364

08006474 <__malloc_unlock>:
 8006474:	4801      	ldr	r0, [pc, #4]	; (800647c <__malloc_unlock+0x8>)
 8006476:	f7ff bf0a 	b.w	800628e <__retarget_lock_release_recursive>
 800647a:	bf00      	nop
 800647c:	20000364 	.word	0x20000364

08006480 <__ssputs_r>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	688e      	ldr	r6, [r1, #8]
 8006486:	461f      	mov	r7, r3
 8006488:	42be      	cmp	r6, r7
 800648a:	680b      	ldr	r3, [r1, #0]
 800648c:	4682      	mov	sl, r0
 800648e:	460c      	mov	r4, r1
 8006490:	4690      	mov	r8, r2
 8006492:	d82c      	bhi.n	80064ee <__ssputs_r+0x6e>
 8006494:	898a      	ldrh	r2, [r1, #12]
 8006496:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800649a:	d026      	beq.n	80064ea <__ssputs_r+0x6a>
 800649c:	6965      	ldr	r5, [r4, #20]
 800649e:	6909      	ldr	r1, [r1, #16]
 80064a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a4:	eba3 0901 	sub.w	r9, r3, r1
 80064a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064ac:	1c7b      	adds	r3, r7, #1
 80064ae:	444b      	add	r3, r9
 80064b0:	106d      	asrs	r5, r5, #1
 80064b2:	429d      	cmp	r5, r3
 80064b4:	bf38      	it	cc
 80064b6:	461d      	movcc	r5, r3
 80064b8:	0553      	lsls	r3, r2, #21
 80064ba:	d527      	bpl.n	800650c <__ssputs_r+0x8c>
 80064bc:	4629      	mov	r1, r5
 80064be:	f7ff ff53 	bl	8006368 <_malloc_r>
 80064c2:	4606      	mov	r6, r0
 80064c4:	b360      	cbz	r0, 8006520 <__ssputs_r+0xa0>
 80064c6:	6921      	ldr	r1, [r4, #16]
 80064c8:	464a      	mov	r2, r9
 80064ca:	f000 faeb 	bl	8006aa4 <memcpy>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	6126      	str	r6, [r4, #16]
 80064dc:	6165      	str	r5, [r4, #20]
 80064de:	444e      	add	r6, r9
 80064e0:	eba5 0509 	sub.w	r5, r5, r9
 80064e4:	6026      	str	r6, [r4, #0]
 80064e6:	60a5      	str	r5, [r4, #8]
 80064e8:	463e      	mov	r6, r7
 80064ea:	42be      	cmp	r6, r7
 80064ec:	d900      	bls.n	80064f0 <__ssputs_r+0x70>
 80064ee:	463e      	mov	r6, r7
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	4632      	mov	r2, r6
 80064f4:	4641      	mov	r1, r8
 80064f6:	f000 faab 	bl	8006a50 <memmove>
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	1b9b      	subs	r3, r3, r6
 80064fe:	60a3      	str	r3, [r4, #8]
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	4433      	add	r3, r6
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	2000      	movs	r0, #0
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	462a      	mov	r2, r5
 800650e:	f000 fad7 	bl	8006ac0 <_realloc_r>
 8006512:	4606      	mov	r6, r0
 8006514:	2800      	cmp	r0, #0
 8006516:	d1e0      	bne.n	80064da <__ssputs_r+0x5a>
 8006518:	6921      	ldr	r1, [r4, #16]
 800651a:	4650      	mov	r0, sl
 800651c:	f7ff feb8 	bl	8006290 <_free_r>
 8006520:	230c      	movs	r3, #12
 8006522:	f8ca 3000 	str.w	r3, [sl]
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	e7e9      	b.n	8006508 <__ssputs_r+0x88>

08006534 <_svfiprintf_r>:
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	4698      	mov	r8, r3
 800653a:	898b      	ldrh	r3, [r1, #12]
 800653c:	061b      	lsls	r3, r3, #24
 800653e:	b09d      	sub	sp, #116	; 0x74
 8006540:	4607      	mov	r7, r0
 8006542:	460d      	mov	r5, r1
 8006544:	4614      	mov	r4, r2
 8006546:	d50e      	bpl.n	8006566 <_svfiprintf_r+0x32>
 8006548:	690b      	ldr	r3, [r1, #16]
 800654a:	b963      	cbnz	r3, 8006566 <_svfiprintf_r+0x32>
 800654c:	2140      	movs	r1, #64	; 0x40
 800654e:	f7ff ff0b 	bl	8006368 <_malloc_r>
 8006552:	6028      	str	r0, [r5, #0]
 8006554:	6128      	str	r0, [r5, #16]
 8006556:	b920      	cbnz	r0, 8006562 <_svfiprintf_r+0x2e>
 8006558:	230c      	movs	r3, #12
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e0d0      	b.n	8006704 <_svfiprintf_r+0x1d0>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	616b      	str	r3, [r5, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	9309      	str	r3, [sp, #36]	; 0x24
 800656a:	2320      	movs	r3, #32
 800656c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006570:	f8cd 800c 	str.w	r8, [sp, #12]
 8006574:	2330      	movs	r3, #48	; 0x30
 8006576:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800671c <_svfiprintf_r+0x1e8>
 800657a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	4623      	mov	r3, r4
 8006584:	469a      	mov	sl, r3
 8006586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800658a:	b10a      	cbz	r2, 8006590 <_svfiprintf_r+0x5c>
 800658c:	2a25      	cmp	r2, #37	; 0x25
 800658e:	d1f9      	bne.n	8006584 <_svfiprintf_r+0x50>
 8006590:	ebba 0b04 	subs.w	fp, sl, r4
 8006594:	d00b      	beq.n	80065ae <_svfiprintf_r+0x7a>
 8006596:	465b      	mov	r3, fp
 8006598:	4622      	mov	r2, r4
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ff6f 	bl	8006480 <__ssputs_r>
 80065a2:	3001      	adds	r0, #1
 80065a4:	f000 80a9 	beq.w	80066fa <_svfiprintf_r+0x1c6>
 80065a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065aa:	445a      	add	r2, fp
 80065ac:	9209      	str	r2, [sp, #36]	; 0x24
 80065ae:	f89a 3000 	ldrb.w	r3, [sl]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80a1 	beq.w	80066fa <_svfiprintf_r+0x1c6>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c2:	f10a 0a01 	add.w	sl, sl, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ce:	931a      	str	r3, [sp, #104]	; 0x68
 80065d0:	4654      	mov	r4, sl
 80065d2:	2205      	movs	r2, #5
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	4850      	ldr	r0, [pc, #320]	; (800671c <_svfiprintf_r+0x1e8>)
 80065da:	f7f9 fdf9 	bl	80001d0 <memchr>
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	b9d8      	cbnz	r0, 800661a <_svfiprintf_r+0xe6>
 80065e2:	06d0      	lsls	r0, r2, #27
 80065e4:	bf44      	itt	mi
 80065e6:	2320      	movmi	r3, #32
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ec:	0711      	lsls	r1, r2, #28
 80065ee:	bf44      	itt	mi
 80065f0:	232b      	movmi	r3, #43	; 0x2b
 80065f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b2a      	cmp	r3, #42	; 0x2a
 80065fc:	d015      	beq.n	800662a <_svfiprintf_r+0xf6>
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4654      	mov	r4, sl
 8006602:	2000      	movs	r0, #0
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4621      	mov	r1, r4
 800660a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660e:	3b30      	subs	r3, #48	; 0x30
 8006610:	2b09      	cmp	r3, #9
 8006612:	d94d      	bls.n	80066b0 <_svfiprintf_r+0x17c>
 8006614:	b1b0      	cbz	r0, 8006644 <_svfiprintf_r+0x110>
 8006616:	9207      	str	r2, [sp, #28]
 8006618:	e014      	b.n	8006644 <_svfiprintf_r+0x110>
 800661a:	eba0 0308 	sub.w	r3, r0, r8
 800661e:	fa09 f303 	lsl.w	r3, r9, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	46a2      	mov	sl, r4
 8006628:	e7d2      	b.n	80065d0 <_svfiprintf_r+0x9c>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbb      	ittet	lt
 8006636:	425b      	neglt	r3, r3
 8006638:	f042 0202 	orrlt.w	r2, r2, #2
 800663c:	9307      	strge	r3, [sp, #28]
 800663e:	9307      	strlt	r3, [sp, #28]
 8006640:	bfb8      	it	lt
 8006642:	9204      	strlt	r2, [sp, #16]
 8006644:	7823      	ldrb	r3, [r4, #0]
 8006646:	2b2e      	cmp	r3, #46	; 0x2e
 8006648:	d10c      	bne.n	8006664 <_svfiprintf_r+0x130>
 800664a:	7863      	ldrb	r3, [r4, #1]
 800664c:	2b2a      	cmp	r3, #42	; 0x2a
 800664e:	d134      	bne.n	80066ba <_svfiprintf_r+0x186>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9203      	str	r2, [sp, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfb8      	it	lt
 800665c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006660:	3402      	adds	r4, #2
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800672c <_svfiprintf_r+0x1f8>
 8006668:	7821      	ldrb	r1, [r4, #0]
 800666a:	2203      	movs	r2, #3
 800666c:	4650      	mov	r0, sl
 800666e:	f7f9 fdaf 	bl	80001d0 <memchr>
 8006672:	b138      	cbz	r0, 8006684 <_svfiprintf_r+0x150>
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	eba0 000a 	sub.w	r0, r0, sl
 800667a:	2240      	movs	r2, #64	; 0x40
 800667c:	4082      	lsls	r2, r0
 800667e:	4313      	orrs	r3, r2
 8006680:	3401      	adds	r4, #1
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006688:	4825      	ldr	r0, [pc, #148]	; (8006720 <_svfiprintf_r+0x1ec>)
 800668a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800668e:	2206      	movs	r2, #6
 8006690:	f7f9 fd9e 	bl	80001d0 <memchr>
 8006694:	2800      	cmp	r0, #0
 8006696:	d038      	beq.n	800670a <_svfiprintf_r+0x1d6>
 8006698:	4b22      	ldr	r3, [pc, #136]	; (8006724 <_svfiprintf_r+0x1f0>)
 800669a:	bb1b      	cbnz	r3, 80066e4 <_svfiprintf_r+0x1b0>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	3307      	adds	r3, #7
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	3308      	adds	r3, #8
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	4433      	add	r3, r6
 80066ac:	9309      	str	r3, [sp, #36]	; 0x24
 80066ae:	e768      	b.n	8006582 <_svfiprintf_r+0x4e>
 80066b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b4:	460c      	mov	r4, r1
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7a6      	b.n	8006608 <_svfiprintf_r+0xd4>
 80066ba:	2300      	movs	r3, #0
 80066bc:	3401      	adds	r4, #1
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f04f 0c0a 	mov.w	ip, #10
 80066c6:	4620      	mov	r0, r4
 80066c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066cc:	3a30      	subs	r2, #48	; 0x30
 80066ce:	2a09      	cmp	r2, #9
 80066d0:	d903      	bls.n	80066da <_svfiprintf_r+0x1a6>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c6      	beq.n	8006664 <_svfiprintf_r+0x130>
 80066d6:	9105      	str	r1, [sp, #20]
 80066d8:	e7c4      	b.n	8006664 <_svfiprintf_r+0x130>
 80066da:	fb0c 2101 	mla	r1, ip, r1, r2
 80066de:	4604      	mov	r4, r0
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f0      	b.n	80066c6 <_svfiprintf_r+0x192>
 80066e4:	ab03      	add	r3, sp, #12
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	462a      	mov	r2, r5
 80066ea:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <_svfiprintf_r+0x1f4>)
 80066ec:	a904      	add	r1, sp, #16
 80066ee:	4638      	mov	r0, r7
 80066f0:	f3af 8000 	nop.w
 80066f4:	1c42      	adds	r2, r0, #1
 80066f6:	4606      	mov	r6, r0
 80066f8:	d1d6      	bne.n	80066a8 <_svfiprintf_r+0x174>
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	065b      	lsls	r3, r3, #25
 80066fe:	f53f af2d 	bmi.w	800655c <_svfiprintf_r+0x28>
 8006702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006704:	b01d      	add	sp, #116	; 0x74
 8006706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670a:	ab03      	add	r3, sp, #12
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	462a      	mov	r2, r5
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <_svfiprintf_r+0x1f4>)
 8006712:	a904      	add	r1, sp, #16
 8006714:	4638      	mov	r0, r7
 8006716:	f000 f879 	bl	800680c <_printf_i>
 800671a:	e7eb      	b.n	80066f4 <_svfiprintf_r+0x1c0>
 800671c:	08006b94 	.word	0x08006b94
 8006720:	08006b9e 	.word	0x08006b9e
 8006724:	00000000 	.word	0x00000000
 8006728:	08006481 	.word	0x08006481
 800672c:	08006b9a 	.word	0x08006b9a

08006730 <_printf_common>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4616      	mov	r6, r2
 8006736:	4699      	mov	r9, r3
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006740:	4293      	cmp	r3, r2
 8006742:	bfb8      	it	lt
 8006744:	4613      	movlt	r3, r2
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800674c:	4607      	mov	r7, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b10a      	cbz	r2, 8006756 <_printf_common+0x26>
 8006752:	3301      	adds	r3, #1
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0699      	lsls	r1, r3, #26
 800675a:	bf42      	ittt	mi
 800675c:	6833      	ldrmi	r3, [r6, #0]
 800675e:	3302      	addmi	r3, #2
 8006760:	6033      	strmi	r3, [r6, #0]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d106      	bne.n	8006778 <_printf_common+0x48>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc26      	bgt.n	80067c6 <_printf_common+0x96>
 8006778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800677c:	1e13      	subs	r3, r2, #0
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	bf18      	it	ne
 8006782:	2301      	movne	r3, #1
 8006784:	0692      	lsls	r2, r2, #26
 8006786:	d42b      	bmi.n	80067e0 <_printf_common+0xb0>
 8006788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d01e      	beq.n	80067d4 <_printf_common+0xa4>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	f003 0306 	and.w	r3, r3, #6
 800679e:	2b04      	cmp	r3, #4
 80067a0:	bf02      	ittt	eq
 80067a2:	68e5      	ldreq	r5, [r4, #12]
 80067a4:	6833      	ldreq	r3, [r6, #0]
 80067a6:	1aed      	subeq	r5, r5, r3
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	bf0c      	ite	eq
 80067ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b0:	2500      	movne	r5, #0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	bfc4      	itt	gt
 80067b6:	1a9b      	subgt	r3, r3, r2
 80067b8:	18ed      	addgt	r5, r5, r3
 80067ba:	2600      	movs	r6, #0
 80067bc:	341a      	adds	r4, #26
 80067be:	42b5      	cmp	r5, r6
 80067c0:	d11a      	bne.n	80067f8 <_printf_common+0xc8>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e008      	b.n	80067d8 <_printf_common+0xa8>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4649      	mov	r1, r9
 80067cc:	4638      	mov	r0, r7
 80067ce:	47c0      	blx	r8
 80067d0:	3001      	adds	r0, #1
 80067d2:	d103      	bne.n	80067dc <_printf_common+0xac>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	3501      	adds	r5, #1
 80067de:	e7c6      	b.n	800676e <_printf_common+0x3e>
 80067e0:	18e1      	adds	r1, r4, r3
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	2030      	movs	r0, #48	; 0x30
 80067e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ea:	4422      	add	r2, r4
 80067ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f4:	3302      	adds	r3, #2
 80067f6:	e7c7      	b.n	8006788 <_printf_common+0x58>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4622      	mov	r2, r4
 80067fc:	4649      	mov	r1, r9
 80067fe:	4638      	mov	r0, r7
 8006800:	47c0      	blx	r8
 8006802:	3001      	adds	r0, #1
 8006804:	d0e6      	beq.n	80067d4 <_printf_common+0xa4>
 8006806:	3601      	adds	r6, #1
 8006808:	e7d9      	b.n	80067be <_printf_common+0x8e>
	...

0800680c <_printf_i>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	7e0f      	ldrb	r7, [r1, #24]
 8006812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006814:	2f78      	cmp	r7, #120	; 0x78
 8006816:	4691      	mov	r9, r2
 8006818:	4680      	mov	r8, r0
 800681a:	460c      	mov	r4, r1
 800681c:	469a      	mov	sl, r3
 800681e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006822:	d807      	bhi.n	8006834 <_printf_i+0x28>
 8006824:	2f62      	cmp	r7, #98	; 0x62
 8006826:	d80a      	bhi.n	800683e <_printf_i+0x32>
 8006828:	2f00      	cmp	r7, #0
 800682a:	f000 80d4 	beq.w	80069d6 <_printf_i+0x1ca>
 800682e:	2f58      	cmp	r7, #88	; 0x58
 8006830:	f000 80c0 	beq.w	80069b4 <_printf_i+0x1a8>
 8006834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800683c:	e03a      	b.n	80068b4 <_printf_i+0xa8>
 800683e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006842:	2b15      	cmp	r3, #21
 8006844:	d8f6      	bhi.n	8006834 <_printf_i+0x28>
 8006846:	a101      	add	r1, pc, #4	; (adr r1, 800684c <_printf_i+0x40>)
 8006848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068b9 	.word	0x080068b9
 8006854:	08006835 	.word	0x08006835
 8006858:	08006835 	.word	0x08006835
 800685c:	08006835 	.word	0x08006835
 8006860:	08006835 	.word	0x08006835
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006835 	.word	0x08006835
 800686c:	08006835 	.word	0x08006835
 8006870:	08006835 	.word	0x08006835
 8006874:	08006835 	.word	0x08006835
 8006878:	080069bd 	.word	0x080069bd
 800687c:	080068e5 	.word	0x080068e5
 8006880:	08006977 	.word	0x08006977
 8006884:	08006835 	.word	0x08006835
 8006888:	08006835 	.word	0x08006835
 800688c:	080069df 	.word	0x080069df
 8006890:	08006835 	.word	0x08006835
 8006894:	080068e5 	.word	0x080068e5
 8006898:	08006835 	.word	0x08006835
 800689c:	08006835 	.word	0x08006835
 80068a0:	0800697f 	.word	0x0800697f
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	602a      	str	r2, [r5, #0]
 80068ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b4:	2301      	movs	r3, #1
 80068b6:	e09f      	b.n	80069f8 <_printf_i+0x1ec>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	0607      	lsls	r7, r0, #24
 80068be:	f103 0104 	add.w	r1, r3, #4
 80068c2:	6029      	str	r1, [r5, #0]
 80068c4:	d501      	bpl.n	80068ca <_printf_i+0xbe>
 80068c6:	681e      	ldr	r6, [r3, #0]
 80068c8:	e003      	b.n	80068d2 <_printf_i+0xc6>
 80068ca:	0646      	lsls	r6, r0, #25
 80068cc:	d5fb      	bpl.n	80068c6 <_printf_i+0xba>
 80068ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	da03      	bge.n	80068de <_printf_i+0xd2>
 80068d6:	232d      	movs	r3, #45	; 0x2d
 80068d8:	4276      	negs	r6, r6
 80068da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068de:	485a      	ldr	r0, [pc, #360]	; (8006a48 <_printf_i+0x23c>)
 80068e0:	230a      	movs	r3, #10
 80068e2:	e012      	b.n	800690a <_printf_i+0xfe>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	6029      	str	r1, [r5, #0]
 80068ec:	0605      	lsls	r5, r0, #24
 80068ee:	d501      	bpl.n	80068f4 <_printf_i+0xe8>
 80068f0:	681e      	ldr	r6, [r3, #0]
 80068f2:	e002      	b.n	80068fa <_printf_i+0xee>
 80068f4:	0641      	lsls	r1, r0, #25
 80068f6:	d5fb      	bpl.n	80068f0 <_printf_i+0xe4>
 80068f8:	881e      	ldrh	r6, [r3, #0]
 80068fa:	4853      	ldr	r0, [pc, #332]	; (8006a48 <_printf_i+0x23c>)
 80068fc:	2f6f      	cmp	r7, #111	; 0x6f
 80068fe:	bf0c      	ite	eq
 8006900:	2308      	moveq	r3, #8
 8006902:	230a      	movne	r3, #10
 8006904:	2100      	movs	r1, #0
 8006906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800690a:	6865      	ldr	r5, [r4, #4]
 800690c:	60a5      	str	r5, [r4, #8]
 800690e:	2d00      	cmp	r5, #0
 8006910:	bfa2      	ittt	ge
 8006912:	6821      	ldrge	r1, [r4, #0]
 8006914:	f021 0104 	bicge.w	r1, r1, #4
 8006918:	6021      	strge	r1, [r4, #0]
 800691a:	b90e      	cbnz	r6, 8006920 <_printf_i+0x114>
 800691c:	2d00      	cmp	r5, #0
 800691e:	d04b      	beq.n	80069b8 <_printf_i+0x1ac>
 8006920:	4615      	mov	r5, r2
 8006922:	fbb6 f1f3 	udiv	r1, r6, r3
 8006926:	fb03 6711 	mls	r7, r3, r1, r6
 800692a:	5dc7      	ldrb	r7, [r0, r7]
 800692c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006930:	4637      	mov	r7, r6
 8006932:	42bb      	cmp	r3, r7
 8006934:	460e      	mov	r6, r1
 8006936:	d9f4      	bls.n	8006922 <_printf_i+0x116>
 8006938:	2b08      	cmp	r3, #8
 800693a:	d10b      	bne.n	8006954 <_printf_i+0x148>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	07de      	lsls	r6, r3, #31
 8006940:	d508      	bpl.n	8006954 <_printf_i+0x148>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	6861      	ldr	r1, [r4, #4]
 8006946:	4299      	cmp	r1, r3
 8006948:	bfde      	ittt	le
 800694a:	2330      	movle	r3, #48	; 0x30
 800694c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006954:	1b52      	subs	r2, r2, r5
 8006956:	6122      	str	r2, [r4, #16]
 8006958:	f8cd a000 	str.w	sl, [sp]
 800695c:	464b      	mov	r3, r9
 800695e:	aa03      	add	r2, sp, #12
 8006960:	4621      	mov	r1, r4
 8006962:	4640      	mov	r0, r8
 8006964:	f7ff fee4 	bl	8006730 <_printf_common>
 8006968:	3001      	adds	r0, #1
 800696a:	d14a      	bne.n	8006a02 <_printf_i+0x1f6>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	b004      	add	sp, #16
 8006972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	4833      	ldr	r0, [pc, #204]	; (8006a4c <_printf_i+0x240>)
 8006980:	2778      	movs	r7, #120	; 0x78
 8006982:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	6829      	ldr	r1, [r5, #0]
 800698a:	061f      	lsls	r7, r3, #24
 800698c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006990:	d402      	bmi.n	8006998 <_printf_i+0x18c>
 8006992:	065f      	lsls	r7, r3, #25
 8006994:	bf48      	it	mi
 8006996:	b2b6      	uxthmi	r6, r6
 8006998:	07df      	lsls	r7, r3, #31
 800699a:	bf48      	it	mi
 800699c:	f043 0320 	orrmi.w	r3, r3, #32
 80069a0:	6029      	str	r1, [r5, #0]
 80069a2:	bf48      	it	mi
 80069a4:	6023      	strmi	r3, [r4, #0]
 80069a6:	b91e      	cbnz	r6, 80069b0 <_printf_i+0x1a4>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	f023 0320 	bic.w	r3, r3, #32
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	2310      	movs	r3, #16
 80069b2:	e7a7      	b.n	8006904 <_printf_i+0xf8>
 80069b4:	4824      	ldr	r0, [pc, #144]	; (8006a48 <_printf_i+0x23c>)
 80069b6:	e7e4      	b.n	8006982 <_printf_i+0x176>
 80069b8:	4615      	mov	r5, r2
 80069ba:	e7bd      	b.n	8006938 <_printf_i+0x12c>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	6826      	ldr	r6, [r4, #0]
 80069c0:	6961      	ldr	r1, [r4, #20]
 80069c2:	1d18      	adds	r0, r3, #4
 80069c4:	6028      	str	r0, [r5, #0]
 80069c6:	0635      	lsls	r5, r6, #24
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	d501      	bpl.n	80069d0 <_printf_i+0x1c4>
 80069cc:	6019      	str	r1, [r3, #0]
 80069ce:	e002      	b.n	80069d6 <_printf_i+0x1ca>
 80069d0:	0670      	lsls	r0, r6, #25
 80069d2:	d5fb      	bpl.n	80069cc <_printf_i+0x1c0>
 80069d4:	8019      	strh	r1, [r3, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	4615      	mov	r5, r2
 80069dc:	e7bc      	b.n	8006958 <_printf_i+0x14c>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	1d1a      	adds	r2, r3, #4
 80069e2:	602a      	str	r2, [r5, #0]
 80069e4:	681d      	ldr	r5, [r3, #0]
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7f9 fbf0 	bl	80001d0 <memchr>
 80069f0:	b108      	cbz	r0, 80069f6 <_printf_i+0x1ea>
 80069f2:	1b40      	subs	r0, r0, r5
 80069f4:	6060      	str	r0, [r4, #4]
 80069f6:	6863      	ldr	r3, [r4, #4]
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	2300      	movs	r3, #0
 80069fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a00:	e7aa      	b.n	8006958 <_printf_i+0x14c>
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	462a      	mov	r2, r5
 8006a06:	4649      	mov	r1, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	47d0      	blx	sl
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d0ad      	beq.n	800696c <_printf_i+0x160>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	079b      	lsls	r3, r3, #30
 8006a14:	d413      	bmi.n	8006a3e <_printf_i+0x232>
 8006a16:	68e0      	ldr	r0, [r4, #12]
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	bfb8      	it	lt
 8006a1e:	4618      	movlt	r0, r3
 8006a20:	e7a6      	b.n	8006970 <_printf_i+0x164>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4632      	mov	r2, r6
 8006a26:	4649      	mov	r1, r9
 8006a28:	4640      	mov	r0, r8
 8006a2a:	47d0      	blx	sl
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d09d      	beq.n	800696c <_printf_i+0x160>
 8006a30:	3501      	adds	r5, #1
 8006a32:	68e3      	ldr	r3, [r4, #12]
 8006a34:	9903      	ldr	r1, [sp, #12]
 8006a36:	1a5b      	subs	r3, r3, r1
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dcf2      	bgt.n	8006a22 <_printf_i+0x216>
 8006a3c:	e7eb      	b.n	8006a16 <_printf_i+0x20a>
 8006a3e:	2500      	movs	r5, #0
 8006a40:	f104 0619 	add.w	r6, r4, #25
 8006a44:	e7f5      	b.n	8006a32 <_printf_i+0x226>
 8006a46:	bf00      	nop
 8006a48:	08006ba5 	.word	0x08006ba5
 8006a4c:	08006bb6 	.word	0x08006bb6

08006a50 <memmove>:
 8006a50:	4288      	cmp	r0, r1
 8006a52:	b510      	push	{r4, lr}
 8006a54:	eb01 0402 	add.w	r4, r1, r2
 8006a58:	d902      	bls.n	8006a60 <memmove+0x10>
 8006a5a:	4284      	cmp	r4, r0
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	d807      	bhi.n	8006a70 <memmove+0x20>
 8006a60:	1e43      	subs	r3, r0, #1
 8006a62:	42a1      	cmp	r1, r4
 8006a64:	d008      	beq.n	8006a78 <memmove+0x28>
 8006a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a6e:	e7f8      	b.n	8006a62 <memmove+0x12>
 8006a70:	4402      	add	r2, r0
 8006a72:	4601      	mov	r1, r0
 8006a74:	428a      	cmp	r2, r1
 8006a76:	d100      	bne.n	8006a7a <memmove+0x2a>
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a82:	e7f7      	b.n	8006a74 <memmove+0x24>

08006a84 <_sbrk_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4d06      	ldr	r5, [pc, #24]	; (8006aa0 <_sbrk_r+0x1c>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	602b      	str	r3, [r5, #0]
 8006a90:	f7fa fad6 	bl	8001040 <_sbrk>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_sbrk_r+0x1a>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_sbrk_r+0x1a>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	20000360 	.word	0x20000360

08006aa4 <memcpy>:
 8006aa4:	440a      	add	r2, r1
 8006aa6:	4291      	cmp	r1, r2
 8006aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aac:	d100      	bne.n	8006ab0 <memcpy+0xc>
 8006aae:	4770      	bx	lr
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aba:	4291      	cmp	r1, r2
 8006abc:	d1f9      	bne.n	8006ab2 <memcpy+0xe>
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <_realloc_r>:
 8006ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	460e      	mov	r6, r1
 8006aca:	b921      	cbnz	r1, 8006ad6 <_realloc_r+0x16>
 8006acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	f7ff bc49 	b.w	8006368 <_malloc_r>
 8006ad6:	b92a      	cbnz	r2, 8006ae4 <_realloc_r+0x24>
 8006ad8:	f7ff fbda 	bl	8006290 <_free_r>
 8006adc:	4625      	mov	r5, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae4:	f000 f81b 	bl	8006b1e <_malloc_usable_size_r>
 8006ae8:	4284      	cmp	r4, r0
 8006aea:	4607      	mov	r7, r0
 8006aec:	d802      	bhi.n	8006af4 <_realloc_r+0x34>
 8006aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006af2:	d812      	bhi.n	8006b1a <_realloc_r+0x5a>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4640      	mov	r0, r8
 8006af8:	f7ff fc36 	bl	8006368 <_malloc_r>
 8006afc:	4605      	mov	r5, r0
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d0ed      	beq.n	8006ade <_realloc_r+0x1e>
 8006b02:	42bc      	cmp	r4, r7
 8006b04:	4622      	mov	r2, r4
 8006b06:	4631      	mov	r1, r6
 8006b08:	bf28      	it	cs
 8006b0a:	463a      	movcs	r2, r7
 8006b0c:	f7ff ffca 	bl	8006aa4 <memcpy>
 8006b10:	4631      	mov	r1, r6
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7ff fbbc 	bl	8006290 <_free_r>
 8006b18:	e7e1      	b.n	8006ade <_realloc_r+0x1e>
 8006b1a:	4635      	mov	r5, r6
 8006b1c:	e7df      	b.n	8006ade <_realloc_r+0x1e>

08006b1e <_malloc_usable_size_r>:
 8006b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b22:	1f18      	subs	r0, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfbc      	itt	lt
 8006b28:	580b      	ldrlt	r3, [r1, r0]
 8006b2a:	18c0      	addlt	r0, r0, r3
 8006b2c:	4770      	bx	lr
	...

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
