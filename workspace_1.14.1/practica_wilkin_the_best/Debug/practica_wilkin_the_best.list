
practica_wilkin_the_best.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000592c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b30  08005b30  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b30  08005b30  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08005b94  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005b94  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ddb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002560  00000000  00000000  00032eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00035410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d26  00000000  00000000  000364b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c28d  00000000  00000000  000371d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b74  00000000  00000000  00053463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab9ab  00000000  00000000  00068fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bc8  00000000  00000000  00114984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0011954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aa4 	.word	0x08005aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005aa4 	.word	0x08005aa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b0:	f107 0208 	add.w	r2, r7, #8
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	214e      	movs	r1, #78	; 0x4e
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <lcd_send_cmd+0x5c>)
 80002be:	f001 ffbf 	bl	8002240 <HAL_I2C_Master_Transmit>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000c8 	.word	0x200000c8

080002d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 030d 	orr.w	r3, r3, #13
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0309 	orr.w	r3, r3, #9
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	f043 030d 	orr.w	r3, r3, #13
 8000302:	b2db      	uxtb	r3, r3
 8000304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f043 0309 	orr.w	r3, r3, #9
 800030c:	b2db      	uxtb	r3, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	f107 0208 	add.w	r2, r7, #8
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <lcd_send_data+0x5c>)
 800031e:	f001 ff8f 	bl	8002240 <HAL_I2C_Master_Transmit>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000c8 	.word	0x200000c8

08000330 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	68b8      	ldr	r0, [r7, #8]
 8000340:	f000 f83b 	bl	80003ba <lcd_put_cur>
	lcd_send_string(string);
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f894 	bl	8000472 <lcd_send_string>
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <lcd_enviar_int+0x34>)
 8000368:	4618      	mov	r0, r3
 800036a:	f004 fef7 	bl	800515c <siprintf>
    lcd_put_cur(row, col);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	68b8      	ldr	r0, [r7, #8]
 8000372:	f000 f822 	bl	80003ba <lcd_put_cur>
    lcd_send_string(buffer);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f879 	bl	8000472 <lcd_send_string>
}
 8000380:	bf00      	nop
 8000382:	3720      	adds	r7, #32
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	08005abc 	.word	0x08005abc

0800038c <lcd_clear>:

void lcd_clear (void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000392:	2080      	movs	r0, #128	; 0x80
 8000394:	f7ff ff6c 	bl	8000270 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e005      	b.n	80003aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800039e:	2020      	movs	r0, #32
 80003a0:	f7ff ff96 	bl	80002d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b45      	cmp	r3, #69	; 0x45
 80003ae:	ddf6      	ble.n	800039e <lcd_clear+0x12>
	}
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d003      	beq.n	80003d2 <lcd_put_cur+0x18>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d005      	beq.n	80003dc <lcd_put_cur+0x22>
 80003d0:	e009      	b.n	80003e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	603b      	str	r3, [r7, #0]
            break;
 80003da:	e004      	b.n	80003e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003e2:	603b      	str	r3, [r7, #0]
            break;
 80003e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff40 	bl	8000270 <lcd_send_cmd>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <lcd_init>:


void lcd_init (void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003fc:	2032      	movs	r0, #50	; 0x32
 80003fe:	f000 fca9 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000402:	2030      	movs	r0, #48	; 0x30
 8000404:	f7ff ff34 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000408:	2005      	movs	r0, #5
 800040a:	f000 fca3 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 800040e:	2030      	movs	r0, #48	; 0x30
 8000410:	f7ff ff2e 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000414:	2001      	movs	r0, #1
 8000416:	f000 fc9d 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x30);
 800041a:	2030      	movs	r0, #48	; 0x30
 800041c:	f7ff ff28 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f000 fc97 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000426:	2020      	movs	r0, #32
 8000428:	f7ff ff22 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f000 fc91 	bl	8000d54 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f7ff ff1c 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f000 fc8b 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff16 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f000 fc85 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800044a:	2001      	movs	r0, #1
 800044c:	f7ff ff10 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fc7f 	bl	8000d54 <HAL_Delay>
	HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fc7c 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800045c:	2006      	movs	r0, #6
 800045e:	f7ff ff07 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 fc76 	bl	8000d54 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000468:	200c      	movs	r0, #12
 800046a:	f7ff ff01 	bl	8000270 <lcd_send_cmd>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800047a:	e006      	b.n	800048a <lcd_send_string+0x18>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	607a      	str	r2, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff23 	bl	80002d0 <lcd_send_data>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1f4      	bne.n	800047c <lcd_send_string+0xa>
}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MEDIR_ADC>:
//				}

	}
}

void MEDIR_ADC(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80004a0:	4808      	ldr	r0, [pc, #32]	; (80004c4 <MEDIR_ADC+0x28>)
 80004a2:	f000 fe01 	bl	80010a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80004a6:	2164      	movs	r1, #100	; 0x64
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <MEDIR_ADC+0x28>)
 80004aa:	f000 fe9f 	bl	80011ec <HAL_ADC_PollForConversion>
	MEDIDA_ADC = HAL_ADC_GetValue(&hadc1);
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MEDIR_ADC+0x28>)
 80004b0:	f000 ff5a 	bl	8001368 <HAL_ADC_GetValue>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <MEDIR_ADC+0x2c>)
 80004b8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 80004ba:	4802      	ldr	r0, [pc, #8]	; (80004c4 <MEDIR_ADC+0x28>)
 80004bc:	f000 fe61 	bl	8001182 <HAL_ADC_Stop>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000078 	.word	0x20000078
 80004c8:	200001f4 	.word	0x200001f4

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fbda 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f840 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9b8 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f986 	bl	80007ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e0:	f000 f89a 	bl	8000618 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8f4 	bl	80006d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f932 	bl	8000750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x7c>)
 80004ee:	f003 fea1 	bl	8004234 <HAL_TIM_Base_Start_IT>
    lcd_init();
 80004f2:	f7ff ff81 	bl	80003f8 <lcd_init>
    lcd_enviar("ok", 0,2);
 80004f6:	2202      	movs	r2, #2
 80004f8:	2100      	movs	r1, #0
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <main+0x80>)
 80004fc:	f7ff ff18 	bl	8000330 <lcd_enviar>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //adc code here
	  if (FLAG.ADC)
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x84>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d006      	beq.n	800051c <main+0x50>
	  {
		FLAG.ADC=0;
 800050e:	4a10      	ldr	r2, [pc, #64]	; (8000550 <main+0x84>)
 8000510:	7813      	ldrb	r3, [r2, #0]
 8000512:	f36f 0341 	bfc	r3, #1, #1
 8000516:	7013      	strb	r3, [r2, #0]
		MEDIR_ADC();
 8000518:	f7ff ffc0 	bl	800049c <MEDIR_ADC>
	}

	  //lcd code here
	  if (FLAG.LCD2)
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <main+0x84>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0ea      	beq.n	8000500 <main+0x34>
	  	  {

	  		lcd_clear();
 800052a:	f7ff ff2f 	bl	800038c <lcd_clear>
	  		lcd_enviar_int(MEDIDA_ADC, 0, 0);
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x88>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff0c 	bl	8000354 <lcd_enviar_int>
	  		FLAG.LCD2=0;
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <main+0x84>)
 800053e:	7813      	ldrb	r3, [r2, #0]
 8000540:	f36f 0300 	bfc	r3, #0, #1
 8000544:	7013      	strb	r3, [r2, #0]
	  if (FLAG.ADC)
 8000546:	e7db      	b.n	8000500 <main+0x34>
 8000548:	2000011c 	.word	0x2000011c
 800054c:	08005ac0 	.word	0x08005ac0
 8000550:	200001f0 	.word	0x200001f0
 8000554:	200001f4 	.word	0x200001f4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b09c      	sub	sp, #112	; 0x70
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fe18 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fe0a 	bl	800519c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000588:	2303      	movs	r3, #3
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f9e0 	bl	8002978 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005be:	f000 f9ad 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fa08 	bl	80039f4 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 f997 	bl	800091c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80005f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fc2e 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800060a:	f000 f987 	bl	800091c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3770      	adds	r7, #112	; 0x70
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xb4>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xb4>)
 800064a:	2200      	movs	r2, #0
 800064c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xb4>)
 800065e:	2201      	movs	r2, #1
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC1_Init+0xb4>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000678:	2204      	movs	r2, #4
 800067a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC1_Init+0xb4>)
 800067e:	2200      	movs	r2, #0
 8000680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_ADC1_Init+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_ADC1_Init+0xb4>)
 800068a:	f000 fb87 	bl	8000d9c <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000694:	f000 f942 	bl	800091c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000698:	2301      	movs	r3, #1
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80006a4:	2307      	movs	r3, #7
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_ADC1_Init+0xb4>)
 80006b6:	f000 fe65 	bl	8001384 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c0:	f000 f92c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000078 	.word	0x20000078

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_I2C1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_I2C1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_I2C1_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_I2C1_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <MX_I2C1_Init+0x74>)
 800070c:	f001 fd08 	bl	8002120 <HAL_I2C_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000716:	f000 f901 	bl	800091c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <MX_I2C1_Init+0x74>)
 800071e:	f002 f893 	bl	8002848 <HAL_I2CEx_ConfigAnalogFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 f8f8 	bl	800091c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2C1_Init+0x74>)
 8000730:	f002 f8d5 	bl	80028de <HAL_I2CEx_ConfigDigitalFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f8ef 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000c8 	.word	0x200000c8
 8000748:	40005400 	.word	0x40005400
 800074c:	2000090e 	.word	0x2000090e

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000774:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000778:	f240 22cf 	movw	r2, #719	; 0x2cf
 800077c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000786:	f242 720f 	movw	r2, #9999	; 0x270f
 800078a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_TIM2_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_TIM2_Init+0x98>)
 800079a:	f003 fcf3 	bl	8004184 <HAL_TIM_Base_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f8ba 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007b6:	f003 feb0 	bl	800451a <HAL_TIM_ConfigClockSource>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007c0:	f000 f8ac 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007d2:	f004 f8a5 	bl	8004920 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007dc:	f000 f89e 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000011c 	.word	0x2000011c

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	f004 f8fa 	bl	8004a28 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f86f 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000168 	.word	0x20000168
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a2a      	ldr	r2, [pc, #168]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MX_GPIO_Init+0xc4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_GPIO_Init+0xc4>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xc4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xc4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_GPIO_Init+0xc4>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_GPIO_Init+0xc4>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0xc8>)
 80008ca:	f001 fc11 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0xcc>)
 80008e6:	f001 fa91 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xc8>)
 8000904:	f001 fa82 	bl	8001e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400
 8000918:	48000800 	.word	0x48000800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095e:	2007      	movs	r0, #7
 8000960:	f001 fa12 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000990:	d124      	bne.n	80009dc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_ADC_MspInit+0x74>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009c2:	2301      	movs	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f001 fa18 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_I2C_MspInit+0x7c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d128      	bne.n	8000a5c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a40:	f001 f9e4 	bl	8001e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_I2C_MspInit+0x80>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d113      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_TIM_Base_MspInit+0x44>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_TIM_Base_MspInit+0x44>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_TIM_Base_MspInit+0x44>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	201c      	movs	r0, #28
 8000aa0:	f001 f97d 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aa4:	201c      	movs	r0, #28
 8000aa6:	f001 f996 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x7c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d128      	bne.n	8000b2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f001 f970 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f8c4 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM2_IRQHandler+0x10>)
 8000b96:	f003 fba1 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000011c 	.word	0x2000011c

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f004 faea 	bl	80051ac <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20004000 	.word	0x20004000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	200001f8 	.word	0x200001f8
 8000c0c:	20000348 	.word	0x20000348

08000c10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	; (8000c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f004 faa9 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c66:	f7ff fc31 	bl	80004cc <main>

08000c6a <LoopForever>:

LoopForever:
    b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c6c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c78:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 8000c7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c80:	20000348 	.word	0x20000348

08000c84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f001 f875 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe40 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f88d 	bl	8001df2 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f001 f855 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	200001fc 	.word	0x200001fc

08000d3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200001fc 	.word	0x200001fc

08000d54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b09a      	sub	sp, #104	; 0x68
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e169      	b.n	8001090 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d176      	bne.n	8000ebc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d152      	bne.n	8000e7c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fdbd 	bl	8000970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d13b      	bne.n	8000e7c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 fdd3 	bl	80019b0 <ADC_Disable>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12f      	bne.n	8000e7c <HAL_ADC_Init+0xe0>
 8000e1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d12b      	bne.n	8000e7c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e2c:	f023 0302 	bic.w	r3, r3, #2
 8000e30:	f043 0202 	orr.w	r2, r3, #2
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e46:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e56:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e58:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <HAL_ADC_Init+0x2fc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a8f      	ldr	r2, [pc, #572]	; (800109c <HAL_ADC_Init+0x300>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9a      	lsrs	r2, r3, #18
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e6e:	e002      	b.n	8000e76 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f9      	bne.n	8000e70 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e98:	d110      	bne.n	8000ebc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f023 0312 	bic.w	r3, r3, #18
 8000ea2:	f043 0210 	orr.w	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80d6 	bne.w	8001076 <HAL_ADC_Init+0x2da>
 8000eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 80d1 	bne.w	8001076 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 80c9 	bne.w	8001076 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000eec:	f043 0202 	orr.w	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_ADC_Init+0x304>)
 8000ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_ADC_Init+0x180>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_ADC_Init+0x180>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_ADC_Init+0x182>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11c      	bne.n	8000f5c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f22:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d010      	beq.n	8000f4a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d107      	bne.n	8000f44 <HAL_ADC_Init+0x1a8>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_Init+0x1a8>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_ADC_Init+0x1aa>
 8000f44:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d108      	bne.n	8000f5c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f5a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7e5b      	ldrb	r3, [r3, #25]
 8000f60:	035b      	lsls	r3, r3, #13
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d002      	beq.n	8000f70 <HAL_ADC_Init+0x1d4>
 8000f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6e:	e000      	b.n	8000f72 <HAL_ADC_Init+0x1d6>
 8000f70:	2200      	movs	r2, #0
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	4313      	orrs	r3, r2
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d11b      	bne.n	8000fc8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7e5b      	ldrb	r3, [r3, #25]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	045a      	lsls	r2, r3, #17
 8000fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8000faa:	e00d      	b.n	8000fc8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fb4:	f043 0220 	orr.w	r2, r3, #32
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d007      	beq.n	8000fe0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d114      	bne.n	8001018 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7e1b      	ldrb	r3, [r3, #24]
 8001006:	039a      	lsls	r2, r3, #14
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4313      	orrs	r3, r2
 8001012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001014:	4313      	orrs	r3, r2
 8001016:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_ADC_Init+0x308>)
 8001020:	4013      	ands	r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001028:	430b      	orrs	r3, r1
 800102a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10c      	bne.n	800104e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f023 010f 	bic.w	r1, r3, #15
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	631a      	str	r2, [r3, #48]	; 0x30
 800104c:	e007      	b.n	800105e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020f 	bic.w	r2, r2, #15
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f023 0303 	bic.w	r3, r3, #3
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
 8001074:	e00a      	b.n	800108c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f023 0312 	bic.w	r3, r3, #18
 800107e:	f043 0210 	orr.w	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001086:	2301      	movs	r3, #1
 8001088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800108c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001090:	4618      	mov	r0, r3
 8001092:	3768      	adds	r7, #104	; 0x68
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	50000300 	.word	0x50000300
 80010a4:	fff0c007 	.word	0xfff0c007

080010a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d158      	bne.n	8001174 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_Start+0x28>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e054      	b.n	800117a <HAL_ADC_Start+0xd2>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fc05 	bl	80018e8 <ADC_Enable>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d140      	bne.n	800116a <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001132:	d106      	bne.n	8001142 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f023 0206 	bic.w	r2, r3, #6
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	645a      	str	r2, [r3, #68]	; 0x44
 8001140:	e002      	b.n	8001148 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	221c      	movs	r2, #28
 8001156:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0204 	orr.w	r2, r2, #4
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	e006      	b.n	8001178 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001172:	e001      	b.n	8001178 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001174:	2302      	movs	r3, #2
 8001176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_ADC_Stop+0x1a>
 8001198:	2302      	movs	r3, #2
 800119a:	e023      	b.n	80011e4 <HAL_ADC_Stop+0x62>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80011a4:	216c      	movs	r1, #108	; 0x6c
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fc68 	bl	8001a7c <ADC_ConversionStop>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fbfa 	bl	80019b0 <ADC_Disable>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d102      	bne.n	8001208 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001202:	2308      	movs	r3, #8
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e02e      	b.n	8001266 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001208:	4b56      	ldr	r3, [pc, #344]	; (8001364 <HAL_ADC_PollForConversion+0x178>)
 800120a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d112      	bne.n	800123e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d11d      	bne.n	8001262 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f043 0220 	orr.w	r2, r3, #32
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e08d      	b.n	800135a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f043 0220 	orr.w	r2, r3, #32
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07b      	b.n	800135a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001262:	230c      	movs	r3, #12
 8001264:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800126e:	f7ff fd65 	bl	8000d3c <HAL_GetTick>
 8001272:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001274:	e021      	b.n	80012ba <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d01d      	beq.n	80012ba <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <HAL_ADC_PollForConversion+0xa8>
 8001284:	f7ff fd5a 	bl	8000d3c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d212      	bcs.n	80012ba <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e04f      	b.n	800135a <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0d6      	beq.n	8001276 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d131      	bne.n	8001346 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d12c      	bne.n	8001346 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d125      	bne.n	8001346 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d112      	bne.n	800132e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d112      	bne.n	8001346 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
 800132c:	e00b      	b.n	8001346 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f043 0220 	orr.w	r2, r3, #32
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	50000300 	.word	0x50000300

08001368 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001384:	b480      	push	{r7}
 8001386:	b09b      	sub	sp, #108	; 0x6c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x22>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e295      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x54e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 8279 	bne.w	80018b0 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d81c      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	461a      	mov	r2, r3
 80013da:	231f      	movs	r3, #31
 80013dc:	4093      	lsls	r3, r2
 80013de:	43db      	mvns	r3, r3
 80013e0:	4019      	ands	r1, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	e063      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b09      	cmp	r3, #9
 8001406:	d81e      	bhi.n	8001446 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	3b1e      	subs	r3, #30
 800141c:	221f      	movs	r2, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	4019      	ands	r1, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	3b1e      	subs	r3, #30
 8001438:	fa00 f203 	lsl.w	r2, r0, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
 8001444:	e040      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b0e      	cmp	r3, #14
 800144c:	d81e      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	3b3c      	subs	r3, #60	; 0x3c
 8001462:	221f      	movs	r2, #31
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4019      	ands	r1, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	3b3c      	subs	r3, #60	; 0x3c
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
 800148a:	e01d      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3b5a      	subs	r3, #90	; 0x5a
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4019      	ands	r1, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3b5a      	subs	r3, #90	; 0x5a
 80014bc:	fa00 f203 	lsl.w	r2, r0, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80e5 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d91c      	bls.n	800151a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6999      	ldr	r1, [r3, #24]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3b1e      	subs	r3, #30
 80014f2:	2207      	movs	r2, #7
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4019      	ands	r1, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6898      	ldr	r0, [r3, #8]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	3b1e      	subs	r3, #30
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	e019      	b.n	800154e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	2207      	movs	r2, #7
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	4019      	ands	r1, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6898      	ldr	r0, [r3, #8]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	fa00 f203 	lsl.w	r2, r0, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	2b03      	cmp	r3, #3
 800156e:	d84f      	bhi.n	8001610 <HAL_ADC_ConfigChannel+0x28c>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_ADC_ConfigChannel+0x1f4>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001589 	.word	0x08001589
 800157c:	080015ab 	.word	0x080015ab
 8001580:	080015cd 	.word	0x080015cd
 8001584:	080015ef 	.word	0x080015ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <HAL_ADC_ConfigChannel+0x468>)
 8001590:	4013      	ands	r3, r2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	0691      	lsls	r1, r2, #26
 8001598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800159a:	430a      	orrs	r2, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015a8:	e07b      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b0:	4b8e      	ldr	r3, [pc, #568]	; (80017ec <HAL_ADC_ConfigChannel+0x468>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	0691      	lsls	r1, r2, #26
 80015ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015bc:	430a      	orrs	r2, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015ca:	e06a      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015d2:	4b86      	ldr	r3, [pc, #536]	; (80017ec <HAL_ADC_ConfigChannel+0x468>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	0691      	lsls	r1, r2, #26
 80015dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015de:	430a      	orrs	r2, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015ec:	e059      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015f4:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_ADC_ConfigChannel+0x468>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	0691      	lsls	r1, r2, #26
 80015fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001600:	430a      	orrs	r2, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800160c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800160e:	e048      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	069b      	lsls	r3, r3, #26
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001632:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800163a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	069b      	lsls	r3, r3, #26
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001656:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800165e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	069b      	lsls	r3, r3, #26
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800167a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	069b      	lsls	r3, r3, #26
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800169e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016a0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x33e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x33e>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x340>
 80016c2:	2300      	movs	r3, #0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 80fe 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d00f      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43da      	mvns	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	400a      	ands	r2, r1
 80016ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016f0:	e049      	b.n	8001786 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d91c      	bls.n	800174e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6999      	ldr	r1, [r3, #24]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	3b1b      	subs	r3, #27
 8001726:	2207      	movs	r2, #7
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	4019      	ands	r1, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6898      	ldr	r0, [r3, #8]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	3b1b      	subs	r3, #27
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	e01b      	b.n	8001786 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6959      	ldr	r1, [r3, #20]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	2207      	movs	r2, #7
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	4019      	ands	r1, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6898      	ldr	r0, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	fa00 f203 	lsl.w	r2, r0, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_ADC_ConfigChannel+0x46c>)
 8001788:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d105      	bne.n	800179e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d014      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017a2:	2b11      	cmp	r3, #17
 80017a4:	d105      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	f040 8085 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d17e      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10c      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x470>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x470>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e004      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x472>
 80017ec:	83fff000 	.word	0x83fff000
 80017f0:	50000300 	.word	0x50000300
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d150      	bne.n	800189c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_ADC_ConfigChannel+0x498>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x498>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_ADC_ConfigChannel+0x49a>
 800181c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800181e:	2b00      	cmp	r3, #0
 8001820:	d13c      	bne.n	800189c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d11d      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x4e2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001832:	d118      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_ADC_ConfigChannel+0x55c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <HAL_ADC_ConfigChannel+0x560>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9a      	lsrs	r2, r3, #18
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001856:	e002      	b.n	800185e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f9      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001864:	e02e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b11      	cmp	r3, #17
 800186c:	d10b      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x502>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001876:	d106      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001882:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001884:	e01e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b12      	cmp	r3, #18
 800188c:	d11a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800188e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001898:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800189a:	e013      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018ae:	e00a      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	376c      	adds	r7, #108	; 0x6c
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <ADC_Enable+0x2c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <ADC_Enable+0x2c>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <ADC_Enable+0x2e>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d143      	bne.n	80019a2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <ADC_Enable+0xc4>)
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00d      	beq.n	8001944 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0210 	orr.w	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e02f      	b.n	80019a4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001954:	f7ff f9f2 	bl	8000d3c <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800195a:	e01b      	b.n	8001994 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800195c:	f7ff f9ee 	bl	8000d3c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d914      	bls.n	8001994 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d00d      	beq.n	8001994 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1dc      	bne.n	800195c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	8000003f 	.word	0x8000003f

080019b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <ADC_Disable+0x2c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <ADC_Disable+0x2c>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <ADC_Disable+0x2e>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d047      	beq.n	8001a72 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030d 	and.w	r3, r3, #13
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10f      	bne.n	8001a10 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0202 	orr.w	r2, r2, #2
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2203      	movs	r2, #3
 8001a06:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f998 	bl	8000d3c <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a0e:	e029      	b.n	8001a64 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e023      	b.n	8001a74 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a2c:	f7ff f986 	bl	8000d3c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d914      	bls.n	8001a64 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10d      	bne.n	8001a64 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e007      	b.n	8001a74 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d0dc      	beq.n	8001a2c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 809b 	beq.w	8001bd8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ab0:	d12a      	bne.n	8001b08 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d126      	bne.n	8001b08 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d122      	bne.n	8001b08 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ac6:	e014      	b.n	8001af2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <ADC_ConversionStop+0x168>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d90d      	bls.n	8001aec <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f043 0210 	orr.w	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e076      	b.n	8001bda <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	3301      	adds	r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d1e3      	bne.n	8001ac8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b60      	cmp	r3, #96	; 0x60
 8001b0c:	d015      	beq.n	8001b3a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d10e      	bne.n	8001b3a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0210 	orr.w	r2, r2, #16
 8001b38:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d015      	beq.n	8001b6c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d10e      	bne.n	8001b6c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b60      	cmp	r3, #96	; 0x60
 8001b70:	d005      	beq.n	8001b7e <ADC_ConversionStop+0x102>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b6c      	cmp	r3, #108	; 0x6c
 8001b76:	d105      	bne.n	8001b84 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001b78:	230c      	movs	r3, #12
 8001b7a:	617b      	str	r3, [r7, #20]
        break;
 8001b7c:	e005      	b.n	8001b8a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	617b      	str	r3, [r7, #20]
        break;
 8001b82:	e002      	b.n	8001b8a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001b84:	2304      	movs	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
        break;
 8001b88:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001b8a:	f7ff f8d7 	bl	8000d3c <HAL_GetTick>
 8001b8e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001b90:	e01b      	b.n	8001bca <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b92:	f7ff f8d3 	bl	8000d3c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b0b      	cmp	r3, #11
 8001b9e:	d914      	bls.n	8001bca <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0210 	orr.w	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e007      	b.n	8001bda <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1dc      	bne.n	8001b92 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	000993ff 	.word	0x000993ff

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e14e      	b.n	80020ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8140 	beq.w	80020b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x40>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	6939      	ldr	r1, [r7, #16]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 809a 	beq.w	80020b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x1e0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <HAL_GPIO_Init+0x2d4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a45      	ldr	r2, [pc, #276]	; (80020e4 <HAL_GPIO_Init+0x2d8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_GPIO_Init+0x2dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1d4>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fec:	2300      	movs	r3, #0
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ffe:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200c:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002030:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_GPIO_Init+0x2e0>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f aea9 	bne.w	8001e1c <HAL_GPIO_Init+0x10>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000
 80020e0:	48000400 	.word	0x48000400
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000c00 	.word	0x48000c00
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e081      	b.n	8002236 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fc4e 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e006      	b.n	80021a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d104      	bne.n	80021ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69d9      	ldr	r1, [r3, #28]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1a      	ldr	r2, [r3, #32]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
 8002250:	4613      	mov	r3, r2
 8002252:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b20      	cmp	r3, #32
 800225e:	f040 80da 	bne.w	8002416 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x30>
 800226c:	2302      	movs	r3, #2
 800226e:	e0d3      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002278:	f7fe fd60 	bl	8000d3c <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2319      	movs	r3, #25
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8f0 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0be      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2210      	movs	r2, #16
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	893a      	ldrh	r2, [r7, #8]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2bff      	cmp	r3, #255	; 0xff
 80022ca:	d90e      	bls.n	80022ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_I2C_Master_Transmit+0x1e0>)
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa7e 	bl	80027e4 <I2C_TransferConfig>
 80022e8:	e06c      	b.n	80023c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	8979      	ldrh	r1, [r7, #10]
 80022fc:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_I2C_Master_Transmit+0x1e0>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fa6d 	bl	80027e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800230a:	e05b      	b.n	80023c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6a39      	ldr	r1, [r7, #32]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f8fc 	bl	800250e <I2C_WaitOnTXISFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e07b      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d034      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0x184>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d130      	bne.n	80023c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f87f 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e04d      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d90e      	bls.n	80023a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	22ff      	movs	r2, #255	; 0xff
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	8979      	ldrh	r1, [r7, #10]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa21 	bl	80027e4 <I2C_TransferConfig>
 80023a2:	e00f      	b.n	80023c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fa10 	bl	80027e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d19e      	bne.n	800230c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6a39      	ldr	r1, [r7, #32]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8e2 	bl	800259c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e01a      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2220      	movs	r2, #32
 80023e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_I2C_Master_Transmit+0x1e4>)
 80023f6:	400b      	ands	r3, r1
 80023f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	80002000 	.word	0x80002000
 8002424:	fe00e800 	.word	0xfe00e800

08002428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d103      	bne.n	8002446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d007      	beq.n	8002464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	619a      	str	r2, [r3, #24]
  }
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002480:	e031      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d02d      	beq.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe fc57 	bl	8000d3c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d122      	bne.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d113      	bne.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	429a      	cmp	r2, r3
 8002502:	d0be      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800251a:	e033      	b.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f87f 	bl	8002624 <I2C_IsErrorOccurred>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e031      	b.n	8002594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d025      	beq.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe fc00 	bl	8000d3c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11a      	bne.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d013      	beq.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d1c4      	bne.n	800251c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a8:	e02f      	b.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f838 	bl	8002624 <I2C_IsErrorOccurred>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e02d      	b.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7fe fbbd 	bl	8000d3c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11a      	bne.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d013      	beq.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e007      	b.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d1c8      	bne.n	80025aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d068      	beq.n	8002722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002658:	e049      	b.n	80026ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d045      	beq.n	80026ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7fe fb6b 	bl	8000d3c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_IsErrorOccurred+0x54>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d13a      	bne.n	80026ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269a:	d121      	bne.n	80026e0 <I2C_IsErrorOccurred+0xbc>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a2:	d01d      	beq.n	80026e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d01a      	beq.n	80026e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026ba:	f7fe fb3f 	bl	8000d3c <HAL_GetTick>
 80026be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c0:	e00e      	b.n	80026e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c2:	f7fe fb3b 	bl	8000d3c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b19      	cmp	r3, #25
 80026ce:	d907      	bls.n	80026e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026de:	e006      	b.n	80026ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d1e9      	bne.n	80026c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d003      	beq.n	8002704 <I2C_IsErrorOccurred+0xe0>
 80026fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0aa      	beq.n	800265a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fe45 	bl	8002428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <I2C_IsErrorOccurred+0x1bc>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	fe00e800 	.word	0xfe00e800

080027e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	4613      	mov	r3, r2
 80027f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027fc:	7a7b      	ldrb	r3, [r7, #9]
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	4313      	orrs	r3, r2
 800280e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	0d5b      	lsrs	r3, r3, #21
 800281e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <I2C_TransferConfig+0x60>)
 8002824:	430b      	orrs	r3, r1
 8002826:	43db      	mvns	r3, r3
 8002828:	ea02 0103 	and.w	r1, r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	03ff63ff 	.word	0x03ff63ff

08002848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d138      	bne.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002868:	2302      	movs	r3, #2
 800286a:	e032      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d139      	bne.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028fe:	2302      	movs	r3, #2
 8002900:	e033      	b.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2224      	movs	r2, #36	; 0x24
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800297e:	af00      	add	r7, sp, #0
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002988:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f001 b823 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 817d 	beq.w	8002cae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029b4:	4bbc      	ldr	r3, [pc, #752]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4bb9      	ldr	r3, [pc, #740]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d15c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x10e>
 80029cc:	4bb6      	ldr	r3, [pc, #728]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d155      	bne.n	8002a86 <HAL_RCC_OscConfig+0x10e>
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x94>
 8002a06:	4ba8      	ldr	r3, [pc, #672]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e015      	b.n	8002a38 <HAL_RCC_OscConfig+0xc0>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a34:	4b9c      	ldr	r3, [pc, #624]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0220 	orr.w	r2, r2, #32
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 811f 	beq.w	8002cac <HAL_RCC_OscConfig+0x334>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8116 	bne.w	8002cac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f000 bfaf 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12e>
 8002a98:	4b83      	ldr	r3, [pc, #524]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a82      	ldr	r2, [pc, #520]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e036      	b.n	8002b14 <HAL_RCC_OscConfig+0x19c>
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x158>
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a78      	ldr	r2, [pc, #480]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e021      	b.n	8002b14 <HAL_RCC_OscConfig+0x19c>
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x184>
 8002ae2:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a70      	ldr	r2, [pc, #448]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6d      	ldr	r2, [pc, #436]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x19c>
 8002afc:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a69      	ldr	r2, [pc, #420]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a66      	ldr	r2, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b14:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f023 020f 	bic.w	r2, r3, #15
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	495f      	ldr	r1, [pc, #380]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d059      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe f8fd 	bl	8000d3c <HAL_GetTick>
 8002b42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe f8f8 	bl	8000d3c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d902      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	f000 bf43 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 8002b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0x218>
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0x244>
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bc4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bc8:	fa92 f2a2 	rbit	r2, r2
 8002bcc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bd0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f042 0220 	orr.w	r2, r2, #32
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f002 021f 	and.w	r2, r2, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ab      	beq.n	8002b48 <HAL_RCC_OscConfig+0x1d0>
 8002bf0:	e05d      	b.n	8002cae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f8a3 	bl	8000d3c <HAL_GetTick>
 8002bf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe f89e 	bl	8000d3c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d902      	bls.n	8002c12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f000 bee9 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 8002c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2cc>
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e015      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f8>
 8002c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ab      	bne.n	8002bfc <HAL_RCC_OscConfig+0x284>
 8002ca4:	e003      	b.n	8002cae <HAL_RCC_OscConfig+0x336>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 817d 	beq.w	8002fbe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cc4:	4ba6      	ldr	r3, [pc, #664]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cd0:	4ba3      	ldr	r3, [pc, #652]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d172      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x44a>
 8002cdc:	4ba0      	ldr	r3, [pc, #640]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d16c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x44a>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3a0>
 8002d12:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e013      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c8>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d3c:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2202      	movs	r2, #2
 8002d42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d4a:	fa92 f2a2 	rbit	r2, r2
 8002d4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCC_OscConfig+0x410>
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d002      	beq.n	8002d88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f000 be2e 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	21f8      	movs	r1, #248	; 0xf8
 8002d9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002da6:	fa91 f1a1 	rbit	r1, r1
 8002daa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002db2:	fab1 f181 	clz	r1, r1
 8002db6:	b2c9      	uxtb	r1, r1
 8002db8:	408b      	lsls	r3, r1
 8002dba:	4969      	ldr	r1, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc0:	e0fd      	b.n	8002fbe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8088 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x56c>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002de6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fd ff9c 	bl	8000d3c <HAL_GetTick>
 8002e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fd ff97 	bl	8000d3c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f000 bde2 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4d8>
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0x500>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0af      	beq.n	8002e0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	21f8      	movs	r1, #248	; 0xf8
 8002ec0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ec8:	fa91 f1a1 	rbit	r1, r1
 8002ecc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ed0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ed4:	fab1 f181 	clz	r1, r1
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	408b      	lsls	r3, r1
 8002edc:	4920      	ldr	r1, [pc, #128]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
 8002ee2:	e06c      	b.n	8002fbe <HAL_RCC_OscConfig+0x646>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd ff14 	bl	8000d3c <HAL_GetTick>
 8002f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fd ff0f 	bl	8000d3c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d902      	bls.n	8002f30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	f000 bd5a 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5ec>
 8002f5a:	4b01      	ldr	r3, [pc, #4]	; (8002f60 <HAL_RCC_OscConfig+0x5e8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e015      	b.n	8002f8c <HAL_RCC_OscConfig+0x614>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	2302      	movs	r3, #2
 8002f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f88:	4bc8      	ldr	r3, [pc, #800]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f042 0220 	orr.w	r2, r2, #32
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ad      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8110 	beq.w	80031f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d079      	beq.n	80030d8 <HAL_RCC_OscConfig+0x760>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4bab      	ldr	r3, [pc, #684]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	461a      	mov	r2, r3
 800300a:	2301      	movs	r3, #1
 800300c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fd fe95 	bl	8000d3c <HAL_GetTick>
 8003012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003018:	f7fd fe90 	bl	8000d3c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d902      	bls.n	800302e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	f000 bcdb 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003048:	2202      	movs	r2, #2
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800306c:	2202      	movs	r2, #2
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003086:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003088:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 800308a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003094:	2102      	movs	r1, #2
 8003096:	6019      	str	r1, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f1a3 	rbit	r1, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030ae:	6019      	str	r1, [r3, #0]
  return result;
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0a0      	beq.n	8003018 <HAL_RCC_OscConfig+0x6a0>
 80030d6:	e08d      	b.n	80031f4 <HAL_RCC_OscConfig+0x87c>
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003104:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x938>)
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	461a      	mov	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7fd fe0f 	bl	8000d3c <HAL_GetTick>
 800311e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7fd fe0a 	bl	8000d3c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d902      	bls.n	800313a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	f000 bc55 	b.w	80039e4 <HAL_RCC_OscConfig+0x106c>
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003142:	2202      	movs	r2, #2
 8003144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	fa93 f2a3 	rbit	r2, r3
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003166:	2202      	movs	r2, #2
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 80031a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031b2:	2102      	movs	r1, #2
 80031b4:	6019      	str	r1, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f1a3 	rbit	r1, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031cc:	6019      	str	r1, [r3, #0]
  return result;
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d197      	bne.n	8003124 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 81a1 	beq.w	800354c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003226:	61d3      	str	r3, [r2, #28]
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003242:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_RCC_OscConfig+0x93c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_RCC_OscConfig+0x93c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_RCC_OscConfig+0x93c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fd fd6b 	bl	8000d3c <HAL_GetTick>
 8003266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	e009      	b.n	8003280 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fd fd66 	bl	8000d3c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b64      	cmp	r3, #100	; 0x64
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e3b1      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_RCC_OscConfig+0x93c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ef      	beq.n	800326c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10d      	bne.n	80032b8 <HAL_RCC_OscConfig+0x940>
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a02      	ldr	r2, [pc, #8]	; (80032ac <HAL_RCC_OscConfig+0x934>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e03c      	b.n	8003324 <HAL_RCC_OscConfig+0x9ac>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	10908120 	.word	0x10908120
 80032b4:	40007000 	.word	0x40007000
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x96a>
 80032c8:	4bc1      	ldr	r3, [pc, #772]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4ac0      	ldr	r2, [pc, #768]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	4bbe      	ldr	r3, [pc, #760]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4abd      	ldr	r2, [pc, #756]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6213      	str	r3, [r2, #32]
 80032e0:	e020      	b.n	8003324 <HAL_RCC_OscConfig+0x9ac>
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x994>
 80032f2:	4bb7      	ldr	r3, [pc, #732]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4ab6      	ldr	r2, [pc, #728]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	4bb4      	ldr	r3, [pc, #720]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4ab3      	ldr	r2, [pc, #716]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6213      	str	r3, [r2, #32]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x9ac>
 800330c:	4bb0      	ldr	r3, [pc, #704]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4aaf      	ldr	r2, [pc, #700]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	4bad      	ldr	r3, [pc, #692]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4aac      	ldr	r2, [pc, #688]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8081 	beq.w	8003438 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7fd fd01 	bl	8000d3c <HAL_GetTick>
 800333a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fd fcfc 	bl	8000d3c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e345      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003360:	2202      	movs	r2, #2
 8003362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003384:	2202      	movs	r2, #2
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fa93 f2a3 	rbit	r2, r3
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800339e:	601a      	str	r2, [r3, #0]
  return result;
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_OscConfig+0xa4c>
 80033be:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0xa74>
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033f4:	2102      	movs	r1, #2
 80033f6:	6011      	str	r1, [r2, #0]
 80033f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	fa92 f1a2 	rbit	r1, r2
 8003406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800340e:	6011      	str	r1, [r2, #0]
  return result;
 8003410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003414:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d084      	beq.n	8003340 <HAL_RCC_OscConfig+0x9c8>
 8003436:	e07f      	b.n	8003538 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fd fc80 	bl	8000d3c <HAL_GetTick>
 800343c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fc7b 	bl	8000d3c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e2c4      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003462:	2202      	movs	r2, #2
 8003464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	fa93 f2a3 	rbit	r2, r3
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003486:	2202      	movs	r2, #2
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034a0:	601a      	str	r2, [r3, #0]
  return result;
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0xb4e>
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	e013      	b.n	80034ee <HAL_RCC_OscConfig+0xb76>
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034f6:	2102      	movs	r1, #2
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	fa92 f1a2 	rbit	r1, r2
 8003508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003510:	6011      	str	r1, [r2, #0]
  return result;
 8003512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003516:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d184      	bne.n	8003442 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003538:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8242 	beq.w	80039e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355e:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <HAL_RCC_OscConfig+0xc58>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	f000 8213 	beq.w	8003992 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	2b02      	cmp	r3, #2
 800357a:	f040 8162 	bne.w	8003842 <HAL_RCC_OscConfig+0xeca>
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003586:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035a2:	601a      	str	r2, [r3, #0]
  return result;
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fbba 	bl	8000d3c <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e00c      	b.n	80035e8 <HAL_RCC_OscConfig+0xc70>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fbb2 	bl	8000d3c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1fd      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800360c:	601a      	str	r2, [r3, #0]
  return result;
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <HAL_RCC_OscConfig+0xcba>
 800362c:	4bb0      	ldr	r3, [pc, #704]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e027      	b.n	8003682 <HAL_RCC_OscConfig+0xd0a>
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	4b9c      	ldr	r3, [pc, #624]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003686:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800368a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800368e:	6011      	str	r1, [r2, #0]
 8003690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003694:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	fa92 f1a2 	rbit	r1, r2
 800369e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036a6:	6011      	str	r1, [r2, #0]
  return result;
 80036a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d182      	bne.n	80035d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	430b      	orrs	r3, r1
 80036f0:	497f      	ldr	r1, [pc, #508]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003724:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	2301      	movs	r3, #1
 800373a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fafe 	bl	8000d3c <HAL_GetTick>
 8003740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	e009      	b.n	800375a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd faf9 	bl	8000d3c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e144      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	fa93 f2a3 	rbit	r2, r3
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800377e:	601a      	str	r2, [r3, #0]
  return result;
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_OscConfig+0xe2c>
 800379e:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	e027      	b.n	80037f4 <HAL_RCC_OscConfig+0xe7c>
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	fa93 f2a3 	rbit	r2, r3
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003800:	6011      	str	r1, [r2, #0]
 8003802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003806:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	fa92 f1a2 	rbit	r1, r2
 8003810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003814:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003818:	6011      	str	r1, [r2, #0]
  return result;
 800381a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f042 0220 	orr.w	r2, r2, #32
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f002 021f 	and.w	r2, r2, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d082      	beq.n	8003746 <HAL_RCC_OscConfig+0xdce>
 8003840:	e0cf      	b.n	80039e2 <HAL_RCC_OscConfig+0x106a>
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800384a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800384e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003866:	601a      	str	r2, [r3, #0]
  return result;
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003870:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800387c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd fa58 	bl	8000d3c <HAL_GetTick>
 800388c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003890:	e009      	b.n	80038a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd fa53 	bl	8000d3c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e09e      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038ca:	601a      	str	r2, [r3, #0]
  return result;
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d104      	bne.n	80038f4 <HAL_RCC_OscConfig+0xf7c>
 80038ea:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <HAL_RCC_OscConfig+0xf78>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	e029      	b.n	8003944 <HAL_RCC_OscConfig+0xfcc>
 80038f0:	40021000 	.word	0x40021000
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_OscConfig+0x1078>)
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003948:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800394c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003956:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	fa92 f1a2 	rbit	r1, r2
 8003960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003964:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003968:	6011      	str	r1, [r2, #0]
  return result;
 800396a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800396e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	f042 0220 	orr.w	r2, r2, #32
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	f002 021f 	and.w	r2, r2, #31
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d180      	bne.n	8003892 <HAL_RCC_OscConfig+0xf1a>
 8003990:	e027      	b.n	80039e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e01e      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_OscConfig+0x1078>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10b      	bne.n	80039de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b09e      	sub	sp, #120	; 0x78
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e162      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b90      	ldr	r3, [pc, #576]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d910      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 0207 	bic.w	r2, r3, #7
 8003a22:	498b      	ldr	r1, [pc, #556]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b89      	ldr	r3, [pc, #548]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e14a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b82      	ldr	r3, [pc, #520]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	497f      	ldr	r1, [pc, #508]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80dc 	beq.w	8003c20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d13c      	bne.n	8003aea <HAL_RCC_ClockConfig+0xf6>
 8003a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xa6>
 8003a94:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	e00f      	b.n	8003aba <HAL_RCC_ClockConfig+0xc6>
 8003a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aac:	663b      	str	r3, [r7, #96]	; 0x60
 8003aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab6:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003abe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac2:	fa92 f2a2 	rbit	r2, r2
 8003ac6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d17b      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0f3      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d13c      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x178>
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x128>
 8003b16:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCC_ClockConfig+0x148>
 8003b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	647b      	str	r3, [r7, #68]	; 0x44
 8003b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f042 0220 	orr.w	r2, r2, #32
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f002 021f 	and.w	r2, r2, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d13a      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0b2      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x1a0>
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	e00d      	b.n	8003bb0 <HAL_RCC_ClockConfig+0x1bc>
 8003b94:	2302      	movs	r3, #2
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	61ba      	str	r2, [r7, #24]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	fa92 f2a2 	rbit	r2, r2
 8003bba:	617a      	str	r2, [r7, #20]
  return result;
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	fab2 f282 	clz	r2, r2
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	f042 0220 	orr.w	r2, r2, #32
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f002 021f 	and.w	r2, r2, #31
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e079      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	491a      	ldr	r1, [pc, #104]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf0:	f7fd f8a4 	bl	8000d3c <HAL_GetTick>
 8003bf4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fd f8a0 	bl	8000d3c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e061      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d214      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0207 	bic.w	r2, r3, #7
 8003c36:	4906      	ldr	r1, [pc, #24]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_RCC_ClockConfig+0x25c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e040      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2de>
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCC_ClockConfig+0x2e8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	491a      	ldr	r1, [pc, #104]	; (8003cdc <HAL_RCC_ClockConfig+0x2e8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <HAL_RCC_ClockConfig+0x2e8>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4912      	ldr	r1, [pc, #72]	; (8003cdc <HAL_RCC_ClockConfig+0x2e8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c96:	f000 f829 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_RCC_ClockConfig+0x2e8>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca4:	22f0      	movs	r2, #240	; 0xf0
 8003ca6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	fa92 f2a2 	rbit	r2, r2
 8003cae:	60fa      	str	r2, [r7, #12]
  return result;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	fab2 f282 	clz	r2, r2
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	40d3      	lsrs	r3, r2
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x2ec>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_RCC_ClockConfig+0x2f0>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_RCC_ClockConfig+0x2f4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fff2 	bl	8000cb4 <HAL_InitTick>
  
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3778      	adds	r7, #120	; 0x78
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	08005ac4 	.word	0x08005ac4
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000004 	.word	0x20000004

08003cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b08b      	sub	sp, #44	; 0x2c
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x30>
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x36>
 8003d1a:	e03c      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d1e:	623b      	str	r3, [r7, #32]
      break;
 8003d20:	e03c      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	fa92 f2a2 	rbit	r2, r2
 8003d34:	607a      	str	r2, [r7, #4]
  return result;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	fab2 f282 	clz	r2, r2
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	40d3      	lsrs	r3, r2
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d46:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	220f      	movs	r2, #15
 8003d50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	fa92 f2a2 	rbit	r2, r2
 8003d58:	60fa      	str	r2, [r7, #12]
  return result;
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	fab2 f282 	clz	r2, r2
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	40d3      	lsrs	r3, r2
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d66:	5cd3      	ldrb	r3, [r2, r3]
 8003d68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	e004      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	623b      	str	r3, [r7, #32]
      break;
 8003d94:	e002      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d98:	623b      	str	r3, [r7, #32]
      break;
 8003d9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	372c      	adds	r7, #44	; 0x2c
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	007a1200 	.word	0x007a1200
 8003db4:	08005adc 	.word	0x08005adc
 8003db8:	08005aec 	.word	0x08005aec
 8003dbc:	003d0900 	.word	0x003d0900

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003dde:	f7ff ffef 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de2:	4601      	mov	r1, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	fa92 f2a2 	rbit	r2, r2
 8003df8:	603a      	str	r2, [r7, #0]
  return result;
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	40d3      	lsrs	r3, r2
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	08005ad4 	.word	0x08005ad4

08003e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e22:	f7ff ffcd 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e26:	4601      	mov	r1, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	603a      	str	r2, [r7, #0]
  return result;
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	fab2 f282 	clz	r2, r2
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	40d3      	lsrs	r3, r2
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08005ad4 	.word	0x08005ad4

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b092      	sub	sp, #72	; 0x48
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80d4 	beq.w	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e84:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10e      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	61d3      	str	r3, [r2, #28]
 8003e9c:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fc ff39 	bl	8000d3c <HAL_GetTick>
 8003eca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fc ff35 	bl	8000d3c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e14b      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8084 	beq.w	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d07c      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0c:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	461a      	mov	r2, r3
 8003f36:	2301      	movs	r3, #1
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04b      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fc fee5 	bl	8000d3c <HAL_GetTick>
 8003f72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fc fee1 	bl	8000d3c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0f5      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	2302      	movs	r3, #2
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003fba:	4b01      	ldr	r3, [pc, #4]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	e00d      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	10908100 	.word	0x10908100
 8003fcc:	2302      	movs	r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2202      	movs	r2, #2
 8003fde:	613a      	str	r2, [r7, #16]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	fa92 f2a2 	rbit	r2, r2
 8003fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	fab2 f282 	clz	r2, r2
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	f002 021f 	and.w	r2, r2, #31
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0b7      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004006:	4b5e      	ldr	r3, [pc, #376]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	495b      	ldr	r1, [pc, #364]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004014:	4313      	orrs	r3, r2
 8004016:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004018:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004020:	4b57      	ldr	r3, [pc, #348]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4a56      	ldr	r2, [pc, #344]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004038:	4b51      	ldr	r3, [pc, #324]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f023 0203 	bic.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494e      	ldr	r1, [pc, #312]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004046:	4313      	orrs	r3, r2
 8004048:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4947      	ldr	r1, [pc, #284]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004064:	4313      	orrs	r3, r2
 8004066:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004074:	4b42      	ldr	r3, [pc, #264]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	493f      	ldr	r1, [pc, #252]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f023 0220 	bic.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4938      	ldr	r1, [pc, #224]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4930      	ldr	r1, [pc, #192]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4929      	ldr	r1, [pc, #164]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	4921      	ldr	r1, [pc, #132]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	491a      	ldr	r1, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004118:	4313      	orrs	r3, r2
 800411a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	4912      	ldr	r1, [pc, #72]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004136:	4313      	orrs	r3, r2
 8004138:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	490b      	ldr	r1, [pc, #44]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004154:	4313      	orrs	r3, r2
 8004156:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004172:	4313      	orrs	r3, r2
 8004174:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3748      	adds	r7, #72	; 0x48
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000

08004184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e049      	b.n	800422a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc fc60 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 faa4 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d001      	beq.n	800424c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e03b      	b.n	80042c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x4e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d004      	beq.n	8004282 <HAL_TIM_Base_Start_IT+0x4e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d115      	bne.n	80042ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800428a:	4013      	ands	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d015      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x8c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429a:	d011      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ac:	e008      	b.n	80042c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e000      	b.n	80042c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40014000 	.word	0x40014000
 80042d8:	00010007 	.word	0x00010007

080042dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0202 	mvn.w	r2, #2
 8004308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9d8 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9ca 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f9db 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b04      	cmp	r3, #4
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0204 	mvn.w	r2, #4
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9ae 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9a0 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9b1 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0208 	mvn.w	r2, #8
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f984 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f976 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f987 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0210 	mvn.w	r2, #16
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2208      	movs	r2, #8
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f95a 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f94c 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f95d 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0201 	mvn.w	r2, #1
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f926 	bl	80046ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 faba 	bl	8004a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	d10e      	bne.n	80044ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b80      	cmp	r3, #128	; 0x80
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 faad 	bl	8004a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d10e      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f90b 	bl	80046fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d10e      	bne.n	8004512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d107      	bne.n	8004512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0220 	mvn.w	r2, #32
 800450a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa6d 	bl	80049ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_TIM_ConfigClockSource+0x1c>
 8004532:	2302      	movs	r3, #2
 8004534:	e0b6      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x18a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004558:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004560:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004572:	d03e      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xd8>
 8004574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004578:	f200 8087 	bhi.w	800468a <HAL_TIM_ConfigClockSource+0x170>
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	f000 8086 	beq.w	8004690 <HAL_TIM_ConfigClockSource+0x176>
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	d87f      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 800458a:	2b70      	cmp	r3, #112	; 0x70
 800458c:	d01a      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xaa>
 800458e:	2b70      	cmp	r3, #112	; 0x70
 8004590:	d87b      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 8004592:	2b60      	cmp	r3, #96	; 0x60
 8004594:	d050      	beq.n	8004638 <HAL_TIM_ConfigClockSource+0x11e>
 8004596:	2b60      	cmp	r3, #96	; 0x60
 8004598:	d877      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 800459a:	2b50      	cmp	r3, #80	; 0x50
 800459c:	d03c      	beq.n	8004618 <HAL_TIM_ConfigClockSource+0xfe>
 800459e:	2b50      	cmp	r3, #80	; 0x50
 80045a0:	d873      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d058      	beq.n	8004658 <HAL_TIM_ConfigClockSource+0x13e>
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d86f      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 80045aa:	2b30      	cmp	r3, #48	; 0x30
 80045ac:	d064      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0x15e>
 80045ae:	2b30      	cmp	r3, #48	; 0x30
 80045b0:	d86b      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d060      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0x15e>
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d867      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x170>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d05c      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0x15e>
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d05a      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0x15e>
 80045c2:	e062      	b.n	800468a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	f000 f984 	bl	80048e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e04f      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004602:	f000 f96d 	bl	80048e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004614:	609a      	str	r2, [r3, #8]
      break;
 8004616:	e03c      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004624:	461a      	mov	r2, r3
 8004626:	f000 f8e1 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2150      	movs	r1, #80	; 0x50
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f93a 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004636:	e02c      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004644:	461a      	mov	r2, r3
 8004646:	f000 f900 	bl	800484a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2160      	movs	r1, #96	; 0x60
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f92a 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004656:	e01c      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004664:	461a      	mov	r2, r3
 8004666:	f000 f8c1 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f91a 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004676:	e00c      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f000 f911 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 8004688:	e003      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      break;
 800468e:	e000      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <TIM_Base_SetConfig+0xcc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0x20>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d108      	bne.n	8004742 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a25      	ldr	r2, [pc, #148]	; (80047dc <TIM_Base_SetConfig+0xcc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00f      	beq.n	800476a <TIM_Base_SetConfig+0x5a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d00b      	beq.n	800476a <TIM_Base_SetConfig+0x5a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a22      	ldr	r2, [pc, #136]	; (80047e0 <TIM_Base_SetConfig+0xd0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <TIM_Base_SetConfig+0x5a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <TIM_Base_SetConfig+0xd4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_Base_SetConfig+0x5a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <TIM_Base_SetConfig+0xd8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d108      	bne.n	800477c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <TIM_Base_SetConfig+0xcc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0xb0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <TIM_Base_SetConfig+0xd0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0xb0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <TIM_Base_SetConfig+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0xb0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <TIM_Base_SetConfig+0xd8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 030a 	bic.w	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f043 0307 	orr.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004934:	2302      	movs	r3, #2
 8004936:	e04f      	b.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004968:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d004      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10c      	bne.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40014000 	.word	0x40014000

080049ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e040      	b.n	8004abc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f834 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f82c 	bl	8004ac4 <UART_SetConfig>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e022      	b.n	8004abc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f956 	bl	8004d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f9dd 	bl	8004e74 <UART_CheckIdleState>
 8004aba:	4603      	mov	r3, r0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b8a      	ldr	r3, [pc, #552]	; (8004d18 <UART_SetConfig+0x254>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6979      	ldr	r1, [r7, #20]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a78      	ldr	r2, [pc, #480]	; (8004d1c <UART_SetConfig+0x258>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d120      	bne.n	8004b82 <UART_SetConfig+0xbe>
 8004b40:	4b77      	ldr	r3, [pc, #476]	; (8004d20 <UART_SetConfig+0x25c>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d817      	bhi.n	8004b7c <UART_SetConfig+0xb8>
 8004b4c:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x90>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b65 	.word	0x08004b65
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004b77 	.word	0x08004b77
 8004b60:	08004b6b 	.word	0x08004b6b
 8004b64:	2300      	movs	r3, #0
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e01d      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e01a      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b70:	2304      	movs	r3, #4
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e017      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b76:	2308      	movs	r3, #8
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e014      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e011      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <UART_SetConfig+0x260>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d102      	bne.n	8004b92 <UART_SetConfig+0xce>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e009      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a64      	ldr	r2, [pc, #400]	; (8004d28 <UART_SetConfig+0x264>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d102      	bne.n	8004ba2 <UART_SetConfig+0xde>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e001      	b.n	8004ba6 <UART_SetConfig+0xe2>
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d15a      	bne.n	8004c66 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d827      	bhi.n	8004c06 <UART_SetConfig+0x142>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0xf8>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004c07 	.word	0x08004c07
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c07 	.word	0x08004c07
 8004bdc:	08004bff 	.word	0x08004bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff f8fa 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e013      	b.n	8004c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7ff f918 	bl	8003e1c <HAL_RCC_GetPCLK2Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e00f      	b.n	8004c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <UART_SetConfig+0x268>)
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e00c      	b.n	8004c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7ff f879 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8004bfa:	61b8      	str	r0, [r7, #24]
        break;
 8004bfc:	e008      	b.n	8004c10 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e004      	b.n	8004c10 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d074      	beq.n	8004d00 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	005a      	lsls	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	d916      	bls.n	8004c60 <UART_SetConfig+0x19c>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d212      	bcs.n	8004c60 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f023 030f 	bic.w	r3, r3, #15
 8004c42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	89fa      	ldrh	r2, [r7, #14]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e04f      	b.n	8004d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77bb      	strb	r3, [r7, #30]
 8004c64:	e04c      	b.n	8004d00 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d828      	bhi.n	8004cbe <UART_SetConfig+0x1fa>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x1b0>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cbf 	.word	0x08004cbf
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7ff f89e 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	61b8      	str	r0, [r7, #24]
        break;
 8004c9e:	e013      	b.n	8004cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7ff f8bc 	bl	8003e1c <HAL_RCC_GetPCLK2Freq>
 8004ca4:	61b8      	str	r0, [r7, #24]
        break;
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <UART_SetConfig+0x268>)
 8004caa:	61bb      	str	r3, [r7, #24]
        break;
 8004cac:	e00c      	b.n	8004cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7ff f81d 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8004cb2:	61b8      	str	r0, [r7, #24]
        break;
 8004cb4:	e008      	b.n	8004cc8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	61bb      	str	r3, [r7, #24]
        break;
 8004cbc:	e004      	b.n	8004cc8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085a      	lsrs	r2, r3, #1
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b0f      	cmp	r3, #15
 8004ce6:	d909      	bls.n	8004cfc <UART_SetConfig+0x238>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d205      	bcs.n	8004cfc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e001      	b.n	8004d00 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	efff69f3 	.word	0xefff69f3
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40004400 	.word	0x40004400
 8004d28:	40004800 	.word	0x40004800
 8004d2c:	007a1200 	.word	0x007a1200

08004d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d10a      	bne.n	8004e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b098      	sub	sp, #96	; 0x60
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e84:	f7fb ff5a 	bl	8000d3c <HAL_GetTick>
 8004e88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d12e      	bne.n	8004ef6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f88c 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d021      	beq.n	8004ef6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e6      	bne.n	8004eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e062      	b.n	8004fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d149      	bne.n	8004f98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f856 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d03c      	beq.n	8004f98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e011      	b.n	8004fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3758      	adds	r7, #88	; 0x58
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	e049      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d045      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fb fead 	bl	8000d3c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e048      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d031      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d110      	bne.n	8005036 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2208      	movs	r2, #8
 800501a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f838 	bl	8005092 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2208      	movs	r2, #8
 8005026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e029      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d111      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800504e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f81e 	bl	8005092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e00f      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	429a      	cmp	r2, r3
 8005086:	d0a6      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005092:	b480      	push	{r7}
 8005094:	b095      	sub	sp, #84	; 0x54
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	61fb      	str	r3, [r7, #28]
   return(result);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	2b01      	cmp	r3, #1
 8005106:	d118      	bne.n	800513a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	60bb      	str	r3, [r7, #8]
   return(result);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 0310 	bic.w	r3, r3, #16
 800511c:	647b      	str	r3, [r7, #68]	; 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6979      	ldr	r1, [r7, #20]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	613b      	str	r3, [r7, #16]
   return(result);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e6      	bne.n	8005108 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800514e:	bf00      	nop
 8005150:	3754      	adds	r7, #84	; 0x54
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <siprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	b500      	push	{lr}
 8005160:	b09c      	sub	sp, #112	; 0x70
 8005162:	ab1d      	add	r3, sp, #116	; 0x74
 8005164:	9002      	str	r0, [sp, #8]
 8005166:	9006      	str	r0, [sp, #24]
 8005168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800516c:	4809      	ldr	r0, [pc, #36]	; (8005194 <siprintf+0x38>)
 800516e:	9107      	str	r1, [sp, #28]
 8005170:	9104      	str	r1, [sp, #16]
 8005172:	4909      	ldr	r1, [pc, #36]	; (8005198 <siprintf+0x3c>)
 8005174:	f853 2b04 	ldr.w	r2, [r3], #4
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	a902      	add	r1, sp, #8
 8005180:	f000 f992 	bl	80054a8 <_svfiprintf_r>
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	b01c      	add	sp, #112	; 0x70
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	20000058 	.word	0x20000058
 8005198:	ffff0208 	.word	0xffff0208

0800519c <memset>:
 800519c:	4402      	add	r2, r0
 800519e:	4603      	mov	r3, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <__errno>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	; (80051b4 <__errno+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000058 	.word	0x20000058

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	; (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	; (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	; (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	; (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 fc6a 	bl	8005aa4 <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08005b30 	.word	0x08005b30
 80051f4:	08005b30 	.word	0x08005b30
 80051f8:	08005b30 	.word	0x08005b30
 80051fc:	08005b34 	.word	0x08005b34

08005200 <__retarget_lock_acquire_recursive>:
 8005200:	4770      	bx	lr

08005202 <__retarget_lock_release_recursive>:
 8005202:	4770      	bx	lr

08005204 <_free_r>:
 8005204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005206:	2900      	cmp	r1, #0
 8005208:	d044      	beq.n	8005294 <_free_r+0x90>
 800520a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520e:	9001      	str	r0, [sp, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f1a1 0404 	sub.w	r4, r1, #4
 8005216:	bfb8      	it	lt
 8005218:	18e4      	addlt	r4, r4, r3
 800521a:	f000 f8df 	bl	80053dc <__malloc_lock>
 800521e:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <_free_r+0x94>)
 8005220:	9801      	ldr	r0, [sp, #4]
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	b933      	cbnz	r3, 8005234 <_free_r+0x30>
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	6014      	str	r4, [r2, #0]
 800522a:	b003      	add	sp, #12
 800522c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005230:	f000 b8da 	b.w	80053e8 <__malloc_unlock>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d908      	bls.n	800524a <_free_r+0x46>
 8005238:	6825      	ldr	r5, [r4, #0]
 800523a:	1961      	adds	r1, r4, r5
 800523c:	428b      	cmp	r3, r1
 800523e:	bf01      	itttt	eq
 8005240:	6819      	ldreq	r1, [r3, #0]
 8005242:	685b      	ldreq	r3, [r3, #4]
 8005244:	1949      	addeq	r1, r1, r5
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	e7ed      	b.n	8005226 <_free_r+0x22>
 800524a:	461a      	mov	r2, r3
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b10b      	cbz	r3, 8005254 <_free_r+0x50>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d9fa      	bls.n	800524a <_free_r+0x46>
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	1855      	adds	r5, r2, r1
 8005258:	42a5      	cmp	r5, r4
 800525a:	d10b      	bne.n	8005274 <_free_r+0x70>
 800525c:	6824      	ldr	r4, [r4, #0]
 800525e:	4421      	add	r1, r4
 8005260:	1854      	adds	r4, r2, r1
 8005262:	42a3      	cmp	r3, r4
 8005264:	6011      	str	r1, [r2, #0]
 8005266:	d1e0      	bne.n	800522a <_free_r+0x26>
 8005268:	681c      	ldr	r4, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	440c      	add	r4, r1
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	e7da      	b.n	800522a <_free_r+0x26>
 8005274:	d902      	bls.n	800527c <_free_r+0x78>
 8005276:	230c      	movs	r3, #12
 8005278:	6003      	str	r3, [r0, #0]
 800527a:	e7d6      	b.n	800522a <_free_r+0x26>
 800527c:	6825      	ldr	r5, [r4, #0]
 800527e:	1961      	adds	r1, r4, r5
 8005280:	428b      	cmp	r3, r1
 8005282:	bf04      	itt	eq
 8005284:	6819      	ldreq	r1, [r3, #0]
 8005286:	685b      	ldreq	r3, [r3, #4]
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	bf04      	itt	eq
 800528c:	1949      	addeq	r1, r1, r5
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	6054      	str	r4, [r2, #4]
 8005292:	e7ca      	b.n	800522a <_free_r+0x26>
 8005294:	b003      	add	sp, #12
 8005296:	bd30      	pop	{r4, r5, pc}
 8005298:	20000340 	.word	0x20000340

0800529c <sbrk_aligned>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4e0e      	ldr	r6, [pc, #56]	; (80052d8 <sbrk_aligned+0x3c>)
 80052a0:	460c      	mov	r4, r1
 80052a2:	6831      	ldr	r1, [r6, #0]
 80052a4:	4605      	mov	r5, r0
 80052a6:	b911      	cbnz	r1, 80052ae <sbrk_aligned+0x12>
 80052a8:	f000 fba6 	bl	80059f8 <_sbrk_r>
 80052ac:	6030      	str	r0, [r6, #0]
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 fba1 	bl	80059f8 <_sbrk_r>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	d00a      	beq.n	80052d0 <sbrk_aligned+0x34>
 80052ba:	1cc4      	adds	r4, r0, #3
 80052bc:	f024 0403 	bic.w	r4, r4, #3
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d007      	beq.n	80052d4 <sbrk_aligned+0x38>
 80052c4:	1a21      	subs	r1, r4, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 fb96 	bl	80059f8 <_sbrk_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d101      	bne.n	80052d4 <sbrk_aligned+0x38>
 80052d0:	f04f 34ff 	mov.w	r4, #4294967295
 80052d4:	4620      	mov	r0, r4
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	20000344 	.word	0x20000344

080052dc <_malloc_r>:
 80052dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e0:	1ccd      	adds	r5, r1, #3
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	4607      	mov	r7, r0
 80052f2:	db01      	blt.n	80052f8 <_malloc_r+0x1c>
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	d905      	bls.n	8005304 <_malloc_r+0x28>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	2600      	movs	r6, #0
 80052fe:	4630      	mov	r0, r6
 8005300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053d8 <_malloc_r+0xfc>
 8005308:	f000 f868 	bl	80053dc <__malloc_lock>
 800530c:	f8d8 3000 	ldr.w	r3, [r8]
 8005310:	461c      	mov	r4, r3
 8005312:	bb5c      	cbnz	r4, 800536c <_malloc_r+0x90>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	f7ff ffc0 	bl	800529c <sbrk_aligned>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	4604      	mov	r4, r0
 8005320:	d155      	bne.n	80053ce <_malloc_r+0xf2>
 8005322:	f8d8 4000 	ldr.w	r4, [r8]
 8005326:	4626      	mov	r6, r4
 8005328:	2e00      	cmp	r6, #0
 800532a:	d145      	bne.n	80053b8 <_malloc_r+0xdc>
 800532c:	2c00      	cmp	r4, #0
 800532e:	d048      	beq.n	80053c2 <_malloc_r+0xe6>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	4631      	mov	r1, r6
 8005334:	4638      	mov	r0, r7
 8005336:	eb04 0903 	add.w	r9, r4, r3
 800533a:	f000 fb5d 	bl	80059f8 <_sbrk_r>
 800533e:	4581      	cmp	r9, r0
 8005340:	d13f      	bne.n	80053c2 <_malloc_r+0xe6>
 8005342:	6821      	ldr	r1, [r4, #0]
 8005344:	1a6d      	subs	r5, r5, r1
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ffa7 	bl	800529c <sbrk_aligned>
 800534e:	3001      	adds	r0, #1
 8005350:	d037      	beq.n	80053c2 <_malloc_r+0xe6>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	442b      	add	r3, r5
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	f8d8 3000 	ldr.w	r3, [r8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d038      	beq.n	80053d2 <_malloc_r+0xf6>
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	42a2      	cmp	r2, r4
 8005364:	d12b      	bne.n	80053be <_malloc_r+0xe2>
 8005366:	2200      	movs	r2, #0
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	e00f      	b.n	800538c <_malloc_r+0xb0>
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	1b52      	subs	r2, r2, r5
 8005370:	d41f      	bmi.n	80053b2 <_malloc_r+0xd6>
 8005372:	2a0b      	cmp	r2, #11
 8005374:	d917      	bls.n	80053a6 <_malloc_r+0xca>
 8005376:	1961      	adds	r1, r4, r5
 8005378:	42a3      	cmp	r3, r4
 800537a:	6025      	str	r5, [r4, #0]
 800537c:	bf18      	it	ne
 800537e:	6059      	strne	r1, [r3, #4]
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	bf08      	it	eq
 8005384:	f8c8 1000 	streq.w	r1, [r8]
 8005388:	5162      	str	r2, [r4, r5]
 800538a:	604b      	str	r3, [r1, #4]
 800538c:	4638      	mov	r0, r7
 800538e:	f104 060b 	add.w	r6, r4, #11
 8005392:	f000 f829 	bl	80053e8 <__malloc_unlock>
 8005396:	f026 0607 	bic.w	r6, r6, #7
 800539a:	1d23      	adds	r3, r4, #4
 800539c:	1af2      	subs	r2, r6, r3
 800539e:	d0ae      	beq.n	80052fe <_malloc_r+0x22>
 80053a0:	1b9b      	subs	r3, r3, r6
 80053a2:	50a3      	str	r3, [r4, r2]
 80053a4:	e7ab      	b.n	80052fe <_malloc_r+0x22>
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	6862      	ldr	r2, [r4, #4]
 80053aa:	d1dd      	bne.n	8005368 <_malloc_r+0x8c>
 80053ac:	f8c8 2000 	str.w	r2, [r8]
 80053b0:	e7ec      	b.n	800538c <_malloc_r+0xb0>
 80053b2:	4623      	mov	r3, r4
 80053b4:	6864      	ldr	r4, [r4, #4]
 80053b6:	e7ac      	b.n	8005312 <_malloc_r+0x36>
 80053b8:	4634      	mov	r4, r6
 80053ba:	6876      	ldr	r6, [r6, #4]
 80053bc:	e7b4      	b.n	8005328 <_malloc_r+0x4c>
 80053be:	4613      	mov	r3, r2
 80053c0:	e7cc      	b.n	800535c <_malloc_r+0x80>
 80053c2:	230c      	movs	r3, #12
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4638      	mov	r0, r7
 80053c8:	f000 f80e 	bl	80053e8 <__malloc_unlock>
 80053cc:	e797      	b.n	80052fe <_malloc_r+0x22>
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	e7dc      	b.n	800538c <_malloc_r+0xb0>
 80053d2:	605b      	str	r3, [r3, #4]
 80053d4:	deff      	udf	#255	; 0xff
 80053d6:	bf00      	nop
 80053d8:	20000340 	.word	0x20000340

080053dc <__malloc_lock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_lock+0x8>)
 80053de:	f7ff bf0f 	b.w	8005200 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	2000033c 	.word	0x2000033c

080053e8 <__malloc_unlock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_unlock+0x8>)
 80053ea:	f7ff bf0a 	b.w	8005202 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	2000033c 	.word	0x2000033c

080053f4 <__ssputs_r>:
 80053f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	688e      	ldr	r6, [r1, #8]
 80053fa:	461f      	mov	r7, r3
 80053fc:	42be      	cmp	r6, r7
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	4682      	mov	sl, r0
 8005402:	460c      	mov	r4, r1
 8005404:	4690      	mov	r8, r2
 8005406:	d82c      	bhi.n	8005462 <__ssputs_r+0x6e>
 8005408:	898a      	ldrh	r2, [r1, #12]
 800540a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800540e:	d026      	beq.n	800545e <__ssputs_r+0x6a>
 8005410:	6965      	ldr	r5, [r4, #20]
 8005412:	6909      	ldr	r1, [r1, #16]
 8005414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005418:	eba3 0901 	sub.w	r9, r3, r1
 800541c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005420:	1c7b      	adds	r3, r7, #1
 8005422:	444b      	add	r3, r9
 8005424:	106d      	asrs	r5, r5, #1
 8005426:	429d      	cmp	r5, r3
 8005428:	bf38      	it	cc
 800542a:	461d      	movcc	r5, r3
 800542c:	0553      	lsls	r3, r2, #21
 800542e:	d527      	bpl.n	8005480 <__ssputs_r+0x8c>
 8005430:	4629      	mov	r1, r5
 8005432:	f7ff ff53 	bl	80052dc <_malloc_r>
 8005436:	4606      	mov	r6, r0
 8005438:	b360      	cbz	r0, 8005494 <__ssputs_r+0xa0>
 800543a:	6921      	ldr	r1, [r4, #16]
 800543c:	464a      	mov	r2, r9
 800543e:	f000 faeb 	bl	8005a18 <memcpy>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	81a3      	strh	r3, [r4, #12]
 800544e:	6126      	str	r6, [r4, #16]
 8005450:	6165      	str	r5, [r4, #20]
 8005452:	444e      	add	r6, r9
 8005454:	eba5 0509 	sub.w	r5, r5, r9
 8005458:	6026      	str	r6, [r4, #0]
 800545a:	60a5      	str	r5, [r4, #8]
 800545c:	463e      	mov	r6, r7
 800545e:	42be      	cmp	r6, r7
 8005460:	d900      	bls.n	8005464 <__ssputs_r+0x70>
 8005462:	463e      	mov	r6, r7
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	4632      	mov	r2, r6
 8005468:	4641      	mov	r1, r8
 800546a:	f000 faab 	bl	80059c4 <memmove>
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	1b9b      	subs	r3, r3, r6
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	4433      	add	r3, r6
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	2000      	movs	r0, #0
 800547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005480:	462a      	mov	r2, r5
 8005482:	f000 fad7 	bl	8005a34 <_realloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1e0      	bne.n	800544e <__ssputs_r+0x5a>
 800548c:	6921      	ldr	r1, [r4, #16]
 800548e:	4650      	mov	r0, sl
 8005490:	f7ff feb8 	bl	8005204 <_free_r>
 8005494:	230c      	movs	r3, #12
 8005496:	f8ca 3000 	str.w	r3, [sl]
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	e7e9      	b.n	800547c <__ssputs_r+0x88>

080054a8 <_svfiprintf_r>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	4698      	mov	r8, r3
 80054ae:	898b      	ldrh	r3, [r1, #12]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	b09d      	sub	sp, #116	; 0x74
 80054b4:	4607      	mov	r7, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	d50e      	bpl.n	80054da <_svfiprintf_r+0x32>
 80054bc:	690b      	ldr	r3, [r1, #16]
 80054be:	b963      	cbnz	r3, 80054da <_svfiprintf_r+0x32>
 80054c0:	2140      	movs	r1, #64	; 0x40
 80054c2:	f7ff ff0b 	bl	80052dc <_malloc_r>
 80054c6:	6028      	str	r0, [r5, #0]
 80054c8:	6128      	str	r0, [r5, #16]
 80054ca:	b920      	cbnz	r0, 80054d6 <_svfiprintf_r+0x2e>
 80054cc:	230c      	movs	r3, #12
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	e0d0      	b.n	8005678 <_svfiprintf_r+0x1d0>
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	616b      	str	r3, [r5, #20]
 80054da:	2300      	movs	r3, #0
 80054dc:	9309      	str	r3, [sp, #36]	; 0x24
 80054de:	2320      	movs	r3, #32
 80054e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e8:	2330      	movs	r3, #48	; 0x30
 80054ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005690 <_svfiprintf_r+0x1e8>
 80054ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f2:	f04f 0901 	mov.w	r9, #1
 80054f6:	4623      	mov	r3, r4
 80054f8:	469a      	mov	sl, r3
 80054fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fe:	b10a      	cbz	r2, 8005504 <_svfiprintf_r+0x5c>
 8005500:	2a25      	cmp	r2, #37	; 0x25
 8005502:	d1f9      	bne.n	80054f8 <_svfiprintf_r+0x50>
 8005504:	ebba 0b04 	subs.w	fp, sl, r4
 8005508:	d00b      	beq.n	8005522 <_svfiprintf_r+0x7a>
 800550a:	465b      	mov	r3, fp
 800550c:	4622      	mov	r2, r4
 800550e:	4629      	mov	r1, r5
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff ff6f 	bl	80053f4 <__ssputs_r>
 8005516:	3001      	adds	r0, #1
 8005518:	f000 80a9 	beq.w	800566e <_svfiprintf_r+0x1c6>
 800551c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551e:	445a      	add	r2, fp
 8005520:	9209      	str	r2, [sp, #36]	; 0x24
 8005522:	f89a 3000 	ldrb.w	r3, [sl]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a1 	beq.w	800566e <_svfiprintf_r+0x1c6>
 800552c:	2300      	movs	r3, #0
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005536:	f10a 0a01 	add.w	sl, sl, #1
 800553a:	9304      	str	r3, [sp, #16]
 800553c:	9307      	str	r3, [sp, #28]
 800553e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005542:	931a      	str	r3, [sp, #104]	; 0x68
 8005544:	4654      	mov	r4, sl
 8005546:	2205      	movs	r2, #5
 8005548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554c:	4850      	ldr	r0, [pc, #320]	; (8005690 <_svfiprintf_r+0x1e8>)
 800554e:	f7fa fe3f 	bl	80001d0 <memchr>
 8005552:	9a04      	ldr	r2, [sp, #16]
 8005554:	b9d8      	cbnz	r0, 800558e <_svfiprintf_r+0xe6>
 8005556:	06d0      	lsls	r0, r2, #27
 8005558:	bf44      	itt	mi
 800555a:	2320      	movmi	r3, #32
 800555c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005560:	0711      	lsls	r1, r2, #28
 8005562:	bf44      	itt	mi
 8005564:	232b      	movmi	r3, #43	; 0x2b
 8005566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556a:	f89a 3000 	ldrb.w	r3, [sl]
 800556e:	2b2a      	cmp	r3, #42	; 0x2a
 8005570:	d015      	beq.n	800559e <_svfiprintf_r+0xf6>
 8005572:	9a07      	ldr	r2, [sp, #28]
 8005574:	4654      	mov	r4, sl
 8005576:	2000      	movs	r0, #0
 8005578:	f04f 0c0a 	mov.w	ip, #10
 800557c:	4621      	mov	r1, r4
 800557e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005582:	3b30      	subs	r3, #48	; 0x30
 8005584:	2b09      	cmp	r3, #9
 8005586:	d94d      	bls.n	8005624 <_svfiprintf_r+0x17c>
 8005588:	b1b0      	cbz	r0, 80055b8 <_svfiprintf_r+0x110>
 800558a:	9207      	str	r2, [sp, #28]
 800558c:	e014      	b.n	80055b8 <_svfiprintf_r+0x110>
 800558e:	eba0 0308 	sub.w	r3, r0, r8
 8005592:	fa09 f303 	lsl.w	r3, r9, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	46a2      	mov	sl, r4
 800559c:	e7d2      	b.n	8005544 <_svfiprintf_r+0x9c>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	1d19      	adds	r1, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9103      	str	r1, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfbb      	ittet	lt
 80055aa:	425b      	neglt	r3, r3
 80055ac:	f042 0202 	orrlt.w	r2, r2, #2
 80055b0:	9307      	strge	r3, [sp, #28]
 80055b2:	9307      	strlt	r3, [sp, #28]
 80055b4:	bfb8      	it	lt
 80055b6:	9204      	strlt	r2, [sp, #16]
 80055b8:	7823      	ldrb	r3, [r4, #0]
 80055ba:	2b2e      	cmp	r3, #46	; 0x2e
 80055bc:	d10c      	bne.n	80055d8 <_svfiprintf_r+0x130>
 80055be:	7863      	ldrb	r3, [r4, #1]
 80055c0:	2b2a      	cmp	r3, #42	; 0x2a
 80055c2:	d134      	bne.n	800562e <_svfiprintf_r+0x186>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	1d1a      	adds	r2, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	9203      	str	r2, [sp, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfb8      	it	lt
 80055d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055d4:	3402      	adds	r4, #2
 80055d6:	9305      	str	r3, [sp, #20]
 80055d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056a0 <_svfiprintf_r+0x1f8>
 80055dc:	7821      	ldrb	r1, [r4, #0]
 80055de:	2203      	movs	r2, #3
 80055e0:	4650      	mov	r0, sl
 80055e2:	f7fa fdf5 	bl	80001d0 <memchr>
 80055e6:	b138      	cbz	r0, 80055f8 <_svfiprintf_r+0x150>
 80055e8:	9b04      	ldr	r3, [sp, #16]
 80055ea:	eba0 000a 	sub.w	r0, r0, sl
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	4082      	lsls	r2, r0
 80055f2:	4313      	orrs	r3, r2
 80055f4:	3401      	adds	r4, #1
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fc:	4825      	ldr	r0, [pc, #148]	; (8005694 <_svfiprintf_r+0x1ec>)
 80055fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005602:	2206      	movs	r2, #6
 8005604:	f7fa fde4 	bl	80001d0 <memchr>
 8005608:	2800      	cmp	r0, #0
 800560a:	d038      	beq.n	800567e <_svfiprintf_r+0x1d6>
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <_svfiprintf_r+0x1f0>)
 800560e:	bb1b      	cbnz	r3, 8005658 <_svfiprintf_r+0x1b0>
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	3307      	adds	r3, #7
 8005614:	f023 0307 	bic.w	r3, r3, #7
 8005618:	3308      	adds	r3, #8
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	4433      	add	r3, r6
 8005620:	9309      	str	r3, [sp, #36]	; 0x24
 8005622:	e768      	b.n	80054f6 <_svfiprintf_r+0x4e>
 8005624:	fb0c 3202 	mla	r2, ip, r2, r3
 8005628:	460c      	mov	r4, r1
 800562a:	2001      	movs	r0, #1
 800562c:	e7a6      	b.n	800557c <_svfiprintf_r+0xd4>
 800562e:	2300      	movs	r3, #0
 8005630:	3401      	adds	r4, #1
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	4619      	mov	r1, r3
 8005636:	f04f 0c0a 	mov.w	ip, #10
 800563a:	4620      	mov	r0, r4
 800563c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005640:	3a30      	subs	r2, #48	; 0x30
 8005642:	2a09      	cmp	r2, #9
 8005644:	d903      	bls.n	800564e <_svfiprintf_r+0x1a6>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0c6      	beq.n	80055d8 <_svfiprintf_r+0x130>
 800564a:	9105      	str	r1, [sp, #20]
 800564c:	e7c4      	b.n	80055d8 <_svfiprintf_r+0x130>
 800564e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005652:	4604      	mov	r4, r0
 8005654:	2301      	movs	r3, #1
 8005656:	e7f0      	b.n	800563a <_svfiprintf_r+0x192>
 8005658:	ab03      	add	r3, sp, #12
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	462a      	mov	r2, r5
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <_svfiprintf_r+0x1f4>)
 8005660:	a904      	add	r1, sp, #16
 8005662:	4638      	mov	r0, r7
 8005664:	f3af 8000 	nop.w
 8005668:	1c42      	adds	r2, r0, #1
 800566a:	4606      	mov	r6, r0
 800566c:	d1d6      	bne.n	800561c <_svfiprintf_r+0x174>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	065b      	lsls	r3, r3, #25
 8005672:	f53f af2d 	bmi.w	80054d0 <_svfiprintf_r+0x28>
 8005676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005678:	b01d      	add	sp, #116	; 0x74
 800567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567e:	ab03      	add	r3, sp, #12
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	462a      	mov	r2, r5
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <_svfiprintf_r+0x1f4>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	4638      	mov	r0, r7
 800568a:	f000 f879 	bl	8005780 <_printf_i>
 800568e:	e7eb      	b.n	8005668 <_svfiprintf_r+0x1c0>
 8005690:	08005afc 	.word	0x08005afc
 8005694:	08005b06 	.word	0x08005b06
 8005698:	00000000 	.word	0x00000000
 800569c:	080053f5 	.word	0x080053f5
 80056a0:	08005b02 	.word	0x08005b02

080056a4 <_printf_common>:
 80056a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	4616      	mov	r6, r2
 80056aa:	4699      	mov	r9, r3
 80056ac:	688a      	ldr	r2, [r1, #8]
 80056ae:	690b      	ldr	r3, [r1, #16]
 80056b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b4:	4293      	cmp	r3, r2
 80056b6:	bfb8      	it	lt
 80056b8:	4613      	movlt	r3, r2
 80056ba:	6033      	str	r3, [r6, #0]
 80056bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c0:	4607      	mov	r7, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	b10a      	cbz	r2, 80056ca <_printf_common+0x26>
 80056c6:	3301      	adds	r3, #1
 80056c8:	6033      	str	r3, [r6, #0]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	0699      	lsls	r1, r3, #26
 80056ce:	bf42      	ittt	mi
 80056d0:	6833      	ldrmi	r3, [r6, #0]
 80056d2:	3302      	addmi	r3, #2
 80056d4:	6033      	strmi	r3, [r6, #0]
 80056d6:	6825      	ldr	r5, [r4, #0]
 80056d8:	f015 0506 	ands.w	r5, r5, #6
 80056dc:	d106      	bne.n	80056ec <_printf_common+0x48>
 80056de:	f104 0a19 	add.w	sl, r4, #25
 80056e2:	68e3      	ldr	r3, [r4, #12]
 80056e4:	6832      	ldr	r2, [r6, #0]
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	42ab      	cmp	r3, r5
 80056ea:	dc26      	bgt.n	800573a <_printf_common+0x96>
 80056ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f0:	1e13      	subs	r3, r2, #0
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	bf18      	it	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	0692      	lsls	r2, r2, #26
 80056fa:	d42b      	bmi.n	8005754 <_printf_common+0xb0>
 80056fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005700:	4649      	mov	r1, r9
 8005702:	4638      	mov	r0, r7
 8005704:	47c0      	blx	r8
 8005706:	3001      	adds	r0, #1
 8005708:	d01e      	beq.n	8005748 <_printf_common+0xa4>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	f003 0306 	and.w	r3, r3, #6
 8005712:	2b04      	cmp	r3, #4
 8005714:	bf02      	ittt	eq
 8005716:	68e5      	ldreq	r5, [r4, #12]
 8005718:	6833      	ldreq	r3, [r6, #0]
 800571a:	1aed      	subeq	r5, r5, r3
 800571c:	68a3      	ldr	r3, [r4, #8]
 800571e:	bf0c      	ite	eq
 8005720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005724:	2500      	movne	r5, #0
 8005726:	4293      	cmp	r3, r2
 8005728:	bfc4      	itt	gt
 800572a:	1a9b      	subgt	r3, r3, r2
 800572c:	18ed      	addgt	r5, r5, r3
 800572e:	2600      	movs	r6, #0
 8005730:	341a      	adds	r4, #26
 8005732:	42b5      	cmp	r5, r6
 8005734:	d11a      	bne.n	800576c <_printf_common+0xc8>
 8005736:	2000      	movs	r0, #0
 8005738:	e008      	b.n	800574c <_printf_common+0xa8>
 800573a:	2301      	movs	r3, #1
 800573c:	4652      	mov	r2, sl
 800573e:	4649      	mov	r1, r9
 8005740:	4638      	mov	r0, r7
 8005742:	47c0      	blx	r8
 8005744:	3001      	adds	r0, #1
 8005746:	d103      	bne.n	8005750 <_printf_common+0xac>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005750:	3501      	adds	r5, #1
 8005752:	e7c6      	b.n	80056e2 <_printf_common+0x3e>
 8005754:	18e1      	adds	r1, r4, r3
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	2030      	movs	r0, #48	; 0x30
 800575a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800575e:	4422      	add	r2, r4
 8005760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005768:	3302      	adds	r3, #2
 800576a:	e7c7      	b.n	80056fc <_printf_common+0x58>
 800576c:	2301      	movs	r3, #1
 800576e:	4622      	mov	r2, r4
 8005770:	4649      	mov	r1, r9
 8005772:	4638      	mov	r0, r7
 8005774:	47c0      	blx	r8
 8005776:	3001      	adds	r0, #1
 8005778:	d0e6      	beq.n	8005748 <_printf_common+0xa4>
 800577a:	3601      	adds	r6, #1
 800577c:	e7d9      	b.n	8005732 <_printf_common+0x8e>
	...

08005780 <_printf_i>:
 8005780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	7e0f      	ldrb	r7, [r1, #24]
 8005786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005788:	2f78      	cmp	r7, #120	; 0x78
 800578a:	4691      	mov	r9, r2
 800578c:	4680      	mov	r8, r0
 800578e:	460c      	mov	r4, r1
 8005790:	469a      	mov	sl, r3
 8005792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005796:	d807      	bhi.n	80057a8 <_printf_i+0x28>
 8005798:	2f62      	cmp	r7, #98	; 0x62
 800579a:	d80a      	bhi.n	80057b2 <_printf_i+0x32>
 800579c:	2f00      	cmp	r7, #0
 800579e:	f000 80d4 	beq.w	800594a <_printf_i+0x1ca>
 80057a2:	2f58      	cmp	r7, #88	; 0x58
 80057a4:	f000 80c0 	beq.w	8005928 <_printf_i+0x1a8>
 80057a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057b0:	e03a      	b.n	8005828 <_printf_i+0xa8>
 80057b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057b6:	2b15      	cmp	r3, #21
 80057b8:	d8f6      	bhi.n	80057a8 <_printf_i+0x28>
 80057ba:	a101      	add	r1, pc, #4	; (adr r1, 80057c0 <_printf_i+0x40>)
 80057bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c0:	08005819 	.word	0x08005819
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	080057a9 	.word	0x080057a9
 80057cc:	080057a9 	.word	0x080057a9
 80057d0:	080057a9 	.word	0x080057a9
 80057d4:	080057a9 	.word	0x080057a9
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	080057a9 	.word	0x080057a9
 80057e0:	080057a9 	.word	0x080057a9
 80057e4:	080057a9 	.word	0x080057a9
 80057e8:	080057a9 	.word	0x080057a9
 80057ec:	08005931 	.word	0x08005931
 80057f0:	08005859 	.word	0x08005859
 80057f4:	080058eb 	.word	0x080058eb
 80057f8:	080057a9 	.word	0x080057a9
 80057fc:	080057a9 	.word	0x080057a9
 8005800:	08005953 	.word	0x08005953
 8005804:	080057a9 	.word	0x080057a9
 8005808:	08005859 	.word	0x08005859
 800580c:	080057a9 	.word	0x080057a9
 8005810:	080057a9 	.word	0x080057a9
 8005814:	080058f3 	.word	0x080058f3
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	602a      	str	r2, [r5, #0]
 8005820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005828:	2301      	movs	r3, #1
 800582a:	e09f      	b.n	800596c <_printf_i+0x1ec>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	0607      	lsls	r7, r0, #24
 8005832:	f103 0104 	add.w	r1, r3, #4
 8005836:	6029      	str	r1, [r5, #0]
 8005838:	d501      	bpl.n	800583e <_printf_i+0xbe>
 800583a:	681e      	ldr	r6, [r3, #0]
 800583c:	e003      	b.n	8005846 <_printf_i+0xc6>
 800583e:	0646      	lsls	r6, r0, #25
 8005840:	d5fb      	bpl.n	800583a <_printf_i+0xba>
 8005842:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005846:	2e00      	cmp	r6, #0
 8005848:	da03      	bge.n	8005852 <_printf_i+0xd2>
 800584a:	232d      	movs	r3, #45	; 0x2d
 800584c:	4276      	negs	r6, r6
 800584e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005852:	485a      	ldr	r0, [pc, #360]	; (80059bc <_printf_i+0x23c>)
 8005854:	230a      	movs	r3, #10
 8005856:	e012      	b.n	800587e <_printf_i+0xfe>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	1d19      	adds	r1, r3, #4
 800585e:	6029      	str	r1, [r5, #0]
 8005860:	0605      	lsls	r5, r0, #24
 8005862:	d501      	bpl.n	8005868 <_printf_i+0xe8>
 8005864:	681e      	ldr	r6, [r3, #0]
 8005866:	e002      	b.n	800586e <_printf_i+0xee>
 8005868:	0641      	lsls	r1, r0, #25
 800586a:	d5fb      	bpl.n	8005864 <_printf_i+0xe4>
 800586c:	881e      	ldrh	r6, [r3, #0]
 800586e:	4853      	ldr	r0, [pc, #332]	; (80059bc <_printf_i+0x23c>)
 8005870:	2f6f      	cmp	r7, #111	; 0x6f
 8005872:	bf0c      	ite	eq
 8005874:	2308      	moveq	r3, #8
 8005876:	230a      	movne	r3, #10
 8005878:	2100      	movs	r1, #0
 800587a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800587e:	6865      	ldr	r5, [r4, #4]
 8005880:	60a5      	str	r5, [r4, #8]
 8005882:	2d00      	cmp	r5, #0
 8005884:	bfa2      	ittt	ge
 8005886:	6821      	ldrge	r1, [r4, #0]
 8005888:	f021 0104 	bicge.w	r1, r1, #4
 800588c:	6021      	strge	r1, [r4, #0]
 800588e:	b90e      	cbnz	r6, 8005894 <_printf_i+0x114>
 8005890:	2d00      	cmp	r5, #0
 8005892:	d04b      	beq.n	800592c <_printf_i+0x1ac>
 8005894:	4615      	mov	r5, r2
 8005896:	fbb6 f1f3 	udiv	r1, r6, r3
 800589a:	fb03 6711 	mls	r7, r3, r1, r6
 800589e:	5dc7      	ldrb	r7, [r0, r7]
 80058a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a4:	4637      	mov	r7, r6
 80058a6:	42bb      	cmp	r3, r7
 80058a8:	460e      	mov	r6, r1
 80058aa:	d9f4      	bls.n	8005896 <_printf_i+0x116>
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d10b      	bne.n	80058c8 <_printf_i+0x148>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	07de      	lsls	r6, r3, #31
 80058b4:	d508      	bpl.n	80058c8 <_printf_i+0x148>
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	6861      	ldr	r1, [r4, #4]
 80058ba:	4299      	cmp	r1, r3
 80058bc:	bfde      	ittt	le
 80058be:	2330      	movle	r3, #48	; 0x30
 80058c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c8:	1b52      	subs	r2, r2, r5
 80058ca:	6122      	str	r2, [r4, #16]
 80058cc:	f8cd a000 	str.w	sl, [sp]
 80058d0:	464b      	mov	r3, r9
 80058d2:	aa03      	add	r2, sp, #12
 80058d4:	4621      	mov	r1, r4
 80058d6:	4640      	mov	r0, r8
 80058d8:	f7ff fee4 	bl	80056a4 <_printf_common>
 80058dc:	3001      	adds	r0, #1
 80058de:	d14a      	bne.n	8005976 <_printf_i+0x1f6>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	b004      	add	sp, #16
 80058e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	4833      	ldr	r0, [pc, #204]	; (80059c0 <_printf_i+0x240>)
 80058f4:	2778      	movs	r7, #120	; 0x78
 80058f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6829      	ldr	r1, [r5, #0]
 80058fe:	061f      	lsls	r7, r3, #24
 8005900:	f851 6b04 	ldr.w	r6, [r1], #4
 8005904:	d402      	bmi.n	800590c <_printf_i+0x18c>
 8005906:	065f      	lsls	r7, r3, #25
 8005908:	bf48      	it	mi
 800590a:	b2b6      	uxthmi	r6, r6
 800590c:	07df      	lsls	r7, r3, #31
 800590e:	bf48      	it	mi
 8005910:	f043 0320 	orrmi.w	r3, r3, #32
 8005914:	6029      	str	r1, [r5, #0]
 8005916:	bf48      	it	mi
 8005918:	6023      	strmi	r3, [r4, #0]
 800591a:	b91e      	cbnz	r6, 8005924 <_printf_i+0x1a4>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f023 0320 	bic.w	r3, r3, #32
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	2310      	movs	r3, #16
 8005926:	e7a7      	b.n	8005878 <_printf_i+0xf8>
 8005928:	4824      	ldr	r0, [pc, #144]	; (80059bc <_printf_i+0x23c>)
 800592a:	e7e4      	b.n	80058f6 <_printf_i+0x176>
 800592c:	4615      	mov	r5, r2
 800592e:	e7bd      	b.n	80058ac <_printf_i+0x12c>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	6826      	ldr	r6, [r4, #0]
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	1d18      	adds	r0, r3, #4
 8005938:	6028      	str	r0, [r5, #0]
 800593a:	0635      	lsls	r5, r6, #24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	d501      	bpl.n	8005944 <_printf_i+0x1c4>
 8005940:	6019      	str	r1, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0x1ca>
 8005944:	0670      	lsls	r0, r6, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0x1c0>
 8005948:	8019      	strh	r1, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	4615      	mov	r5, r2
 8005950:	e7bc      	b.n	80058cc <_printf_i+0x14c>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	602a      	str	r2, [r5, #0]
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	2100      	movs	r1, #0
 800595e:	4628      	mov	r0, r5
 8005960:	f7fa fc36 	bl	80001d0 <memchr>
 8005964:	b108      	cbz	r0, 800596a <_printf_i+0x1ea>
 8005966:	1b40      	subs	r0, r0, r5
 8005968:	6060      	str	r0, [r4, #4]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005974:	e7aa      	b.n	80058cc <_printf_i+0x14c>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	462a      	mov	r2, r5
 800597a:	4649      	mov	r1, r9
 800597c:	4640      	mov	r0, r8
 800597e:	47d0      	blx	sl
 8005980:	3001      	adds	r0, #1
 8005982:	d0ad      	beq.n	80058e0 <_printf_i+0x160>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	079b      	lsls	r3, r3, #30
 8005988:	d413      	bmi.n	80059b2 <_printf_i+0x232>
 800598a:	68e0      	ldr	r0, [r4, #12]
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	4298      	cmp	r0, r3
 8005990:	bfb8      	it	lt
 8005992:	4618      	movlt	r0, r3
 8005994:	e7a6      	b.n	80058e4 <_printf_i+0x164>
 8005996:	2301      	movs	r3, #1
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d09d      	beq.n	80058e0 <_printf_i+0x160>
 80059a4:	3501      	adds	r5, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	9903      	ldr	r1, [sp, #12]
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dcf2      	bgt.n	8005996 <_printf_i+0x216>
 80059b0:	e7eb      	b.n	800598a <_printf_i+0x20a>
 80059b2:	2500      	movs	r5, #0
 80059b4:	f104 0619 	add.w	r6, r4, #25
 80059b8:	e7f5      	b.n	80059a6 <_printf_i+0x226>
 80059ba:	bf00      	nop
 80059bc:	08005b0d 	.word	0x08005b0d
 80059c0:	08005b1e 	.word	0x08005b1e

080059c4 <memmove>:
 80059c4:	4288      	cmp	r0, r1
 80059c6:	b510      	push	{r4, lr}
 80059c8:	eb01 0402 	add.w	r4, r1, r2
 80059cc:	d902      	bls.n	80059d4 <memmove+0x10>
 80059ce:	4284      	cmp	r4, r0
 80059d0:	4623      	mov	r3, r4
 80059d2:	d807      	bhi.n	80059e4 <memmove+0x20>
 80059d4:	1e43      	subs	r3, r0, #1
 80059d6:	42a1      	cmp	r1, r4
 80059d8:	d008      	beq.n	80059ec <memmove+0x28>
 80059da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059e2:	e7f8      	b.n	80059d6 <memmove+0x12>
 80059e4:	4402      	add	r2, r0
 80059e6:	4601      	mov	r1, r0
 80059e8:	428a      	cmp	r2, r1
 80059ea:	d100      	bne.n	80059ee <memmove+0x2a>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f6:	e7f7      	b.n	80059e8 <memmove+0x24>

080059f8 <_sbrk_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d06      	ldr	r5, [pc, #24]	; (8005a14 <_sbrk_r+0x1c>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	f7fb f8ce 	bl	8000ba4 <_sbrk>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_sbrk_r+0x1a>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_sbrk_r+0x1a>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20000338 	.word	0x20000338

08005a18 <memcpy>:
 8005a18:	440a      	add	r2, r1
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a20:	d100      	bne.n	8005a24 <memcpy+0xc>
 8005a22:	4770      	bx	lr
 8005a24:	b510      	push	{r4, lr}
 8005a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2e:	4291      	cmp	r1, r2
 8005a30:	d1f9      	bne.n	8005a26 <memcpy+0xe>
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <_realloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	b921      	cbnz	r1, 8005a4a <_realloc_r+0x16>
 8005a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4611      	mov	r1, r2
 8005a46:	f7ff bc49 	b.w	80052dc <_malloc_r>
 8005a4a:	b92a      	cbnz	r2, 8005a58 <_realloc_r+0x24>
 8005a4c:	f7ff fbda 	bl	8005204 <_free_r>
 8005a50:	4625      	mov	r5, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	f000 f81b 	bl	8005a92 <_malloc_usable_size_r>
 8005a5c:	4284      	cmp	r4, r0
 8005a5e:	4607      	mov	r7, r0
 8005a60:	d802      	bhi.n	8005a68 <_realloc_r+0x34>
 8005a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a66:	d812      	bhi.n	8005a8e <_realloc_r+0x5a>
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff fc36 	bl	80052dc <_malloc_r>
 8005a70:	4605      	mov	r5, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0ed      	beq.n	8005a52 <_realloc_r+0x1e>
 8005a76:	42bc      	cmp	r4, r7
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	bf28      	it	cs
 8005a7e:	463a      	movcs	r2, r7
 8005a80:	f7ff ffca 	bl	8005a18 <memcpy>
 8005a84:	4631      	mov	r1, r6
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff fbbc 	bl	8005204 <_free_r>
 8005a8c:	e7e1      	b.n	8005a52 <_realloc_r+0x1e>
 8005a8e:	4635      	mov	r5, r6
 8005a90:	e7df      	b.n	8005a52 <_realloc_r+0x1e>

08005a92 <_malloc_usable_size_r>:
 8005a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a96:	1f18      	subs	r0, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfbc      	itt	lt
 8005a9c:	580b      	ldrlt	r3, [r1, r0]
 8005a9e:	18c0      	addlt	r0, r0, r3
 8005aa0:	4770      	bx	lr
	...

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
