
uart22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f10  08005f10  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f18  08005f18  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  08005f7c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005f7c  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2b8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002102  00000000  00000000  0002f387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2c  00000000  00000000  000321c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d1  00000000  00000000  00032bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f816  00000000  00000000  0005a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad6c  00000000  00000000  00069dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d4c  00000000  00000000  00164b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0016888c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e74 	.word	0x08005e74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e74 	.word	0x08005e74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <enviar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enviar(uint32_t valor){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

	 char buffer[20];
	    sprintf(buffer, "%lu\r\n", valor);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	490b      	ldr	r1, [pc, #44]	; (8000df4 <enviar+0x3c>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fbaf 	bl	800552c <siprintf>

	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff f9fc 	bl	80001d0 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f107 010c 	add.w	r1, r7, #12
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <enviar+0x40>)
 8000de6:	f003 fe49 	bl	8004a7c <HAL_UART_Transmit>
}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08005e8c 	.word	0x08005e8c
 8000df8:	20000124 	.word	0x20000124

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fb80 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f83e 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f952 	bl	80010b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f000 f932 	bl	8001074 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e10:	f000 f900 	bl	8001014 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e14:	f000 f888 	bl	8000f28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 HAL_ADC_Start_DMA(&hadc1, &samples_adc, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4915      	ldr	r1, [pc, #84]	; (8000e70 <main+0x74>)
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <main+0x78>)
 8000e1e:	f000 ff37 	bl	8001c90 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //convierto el valor del adc en voltaje
	  Volt = (samples_adc / 4096.0) * voltaje;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <main+0x74>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb6c 	bl	8000504 <__aeabi_ui2d>
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <main+0x7c>)
 8000e32:	f7ff fd0b 	bl	800084c <__aeabi_ddiv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <main+0x80>)
 8000e44:	f7ff fbd8 	bl	80005f8 <__aeabi_dmul>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fde4 	bl	8000a1c <__aeabi_d2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <main+0x84>)
 8000e58:	6013      	str	r3, [r2, #0]

	  enviar(samples_adc);
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <main+0x74>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffaa 	bl	8000db8 <enviar>

	  HAL_Delay(800);
 8000e64:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e68:	f000 fbc8 	bl	80015fc <HAL_Delay>
	  Volt = (samples_adc / 4096.0) * voltaje;
 8000e6c:	e7d9      	b.n	8000e22 <main+0x26>
 8000e6e:	bf00      	nop
 8000e70:	200001ac 	.word	0x200001ac
 8000e74:	20000078 	.word	0x20000078
 8000e78:	40b00000 	.word	0x40b00000
 8000e7c:	40140000 	.word	0x40140000
 8000e80:	200001b0 	.word	0x200001b0

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b096      	sub	sp, #88	; 0x58
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2244      	movs	r2, #68	; 0x44
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 fb6a 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ea6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eaa:	f002 fa87 	bl	80033bc <HAL_PWREx_ControlVoltageScaling>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000eb4:	f000 f962 	bl	800117c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fabe 	bl	8003468 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ef2:	f000 f943 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2303      	movs	r3, #3
 8000efc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fe86 	bl	8003c20 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f1a:	f000 f92f 	bl	800117c <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3758      	adds	r7, #88	; 0x58
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <MX_ADC1_Init+0xe4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fac:	f000 fd20 	bl	80019f0 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 f8e1 	bl	800117c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000fc6:	f001 fc6f 	bl	80028a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f000 f8d4 	bl	800117c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_ADC1_Init+0xe8>)
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe0:	237f      	movs	r3, #127	; 0x7f
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0xe0>)
 8000ff2:	f000 ff27 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ffc:	f000 f8be 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000078 	.word	0x20000078
 800100c:	50040000 	.word	0x50040000
 8001010:	04300002 	.word	0x04300002

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_USART2_UART_Init+0x58>)
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <MX_USART2_UART_Init+0x5c>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001020:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_USART2_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x58>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_USART2_UART_Init+0x58>)
 8001058:	f003 fcc2 	bl	80049e0 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001062:	f000 f88b 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000124 	.word	0x20000124
 8001070:	40004400 	.word	0x40004400

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_DMA_Init+0x38>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <MX_DMA_Init+0x38>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6493      	str	r3, [r2, #72]	; 0x48
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_DMA_Init+0x38>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	200b      	movs	r0, #11
 8001098:	f001 fd91 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800109c:	200b      	movs	r0, #11
 800109e:	f001 fdaa 	bl	8002bf6 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a24      	ldr	r2, [pc, #144]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <MX_GPIO_Init+0xc4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <MX_GPIO_Init+0xc4>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f002 f91f 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001138:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0xc8>)
 800114a:	f001 ff67 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800114e:	2320      	movs	r3, #32
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 ff58 	bl	800301c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ac      	sub	sp, #176	; 0xb0
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2288      	movs	r2, #136	; 0x88
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 f9bb 	bl	800556c <memset>
  if(hadc->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <HAL_ADC_MspInit+0x11c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d171      	bne.n	80012e4 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001204:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800120a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001216:	2308      	movs	r3, #8
 8001218:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800121a:	2307      	movs	r3, #7
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001222:	2302      	movs	r3, #2
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4618      	mov	r0, r3
 8001232:	f002 ff19 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800123c:	f7ff ff9e 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 8001246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001276:	230b      	movs	r3, #11
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001286:	4619      	mov	r1, r3
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <HAL_ADC_MspInit+0x124>)
 800128a:	f001 fec7 	bl	800301c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_ADC_MspInit+0x12c>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012be:	2220      	movs	r2, #32
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012ca:	f001 fcaf 	bl	8002c2c <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80012d4:	f7ff ff52 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_ADC_MspInit+0x128>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	37b0      	adds	r7, #176	; 0xb0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	50040000 	.word	0x50040000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000800 	.word	0x48000800
 80012f8:	200000dc 	.word	0x200000dc
 80012fc:	40020008 	.word	0x40020008

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ac      	sub	sp, #176	; 0xb0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2288      	movs	r2, #136	; 0x88
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f004 f923 	bl	800556c <memset>
  if(huart->Instance==USART2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_UART_MspInit+0xb0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d13b      	bne.n	80013a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fe93 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001348:	f7ff ff18 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0xb4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137c:	230c      	movs	r3, #12
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f001 fe3a 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	37b0      	adds	r7, #176	; 0xb0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f8da 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel1_IRQHandler+0x10>)
 8001412:	f001 fd23 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000dc 	.word	0x200000dc

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f004 f894 	bl	800557c <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20018000 	.word	0x20018000
 8001480:	00000400 	.word	0x00000400
 8001484:	200001b4 	.word	0x200001b4
 8001488:	20000308 	.word	0x20000308

0800148c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff ffea 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	; (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f004 f853 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e2:	f7ff fc8b 	bl	8000dfc <main>

080014e6 <LoopForever>:

LoopForever:
    b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014f4:	08005f20 	.word	0x08005f20
  ldr r2, =_sbss
 80014f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014fc:	20000304 	.word	0x20000304

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_Init+0x3c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_Init+0x3c>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	2003      	movs	r0, #3
 800151c:	f001 fb44 	bl	8002ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001520:	2000      	movs	r0, #0
 8001522:	f000 f80f 	bl	8001544 <HAL_InitTick>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	e001      	b.n	8001536 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001532:	f7ff fe29 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001536:	79fb      	ldrb	r3, [r7, #7]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_InitTick+0x6c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d023      	beq.n	80015a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_InitTick+0x70>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_InitTick+0x6c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fb4f 	bl	8002c12 <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d809      	bhi.n	8001594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f001 fb19 	bl	8002bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_InitTick+0x74>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e007      	b.n	80015a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e004      	b.n	80015a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e001      	b.n	80015a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008
 80015e0:	200001b8 	.word	0x200001b8

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200001b8 	.word	0x200001b8

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008

08001644 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3360      	adds	r3, #96	; 0x60
 80016be:	461a      	mov	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LL_ADC_SetOffset+0x44>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	4313      	orrs	r3, r2
 80016dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	03fff000 	.word	0x03fff000

080016f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3360      	adds	r3, #96	; 0x60
 8001702:	461a      	mov	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3360      	adds	r3, #96	; 0x60
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3330      	adds	r3, #48	; 0x30
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	211f      	movs	r1, #31
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	0e9b      	lsrs	r3, r3, #26
 80017b4:	f003 011f 	and.w	r1, r3, #31
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	431a      	orrs	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c8:	bf00      	nop
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3314      	adds	r3, #20
 80017e4:	461a      	mov	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0e5b      	lsrs	r3, r3, #25
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	0d1b      	lsrs	r3, r3, #20
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2107      	movs	r1, #7
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	0d1b      	lsrs	r3, r3, #20
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	431a      	orrs	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800181e:	bf00      	nop
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0318 	and.w	r3, r3, #24
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001850:	40d9      	lsrs	r1, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	400b      	ands	r3, r1
 8001856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185a:	431a      	orrs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	0007ffff 	.word	0x0007ffff

08001874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 031f 	and.w	r3, r3, #31
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c8:	d101      	bne.n	80018ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001918:	d101      	bne.n	800191e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800193c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <LL_ADC_IsEnabled+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_IsEnabled+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800198e:	f043 0204 	orr.w	r2, r3, #4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d101      	bne.n	80019ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e130      	b.n	8001c6c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fbd9 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff3f 	bl	80018b4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff25 	bl	8001890 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff5a 	bl	8001904 <LL_ADC_IsInternalRegulatorEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff3e 	bl	80018dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_ADC_Init+0x284>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	4a84      	ldr	r2, [pc, #528]	; (8001c78 <HAL_ADC_Init+0x288>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff3c 	bl	8001904 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f043 0210 	orr.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff75 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001ab8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80c9 	bne.w	8001c5a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80c5 	bne.w	8001c5a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff35 	bl	8001954 <LL_ADC_IsEnabled>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d115      	bne.n	8001b1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af0:	4862      	ldr	r0, [pc, #392]	; (8001c7c <HAL_ADC_Init+0x28c>)
 8001af2:	f7ff ff2f 	bl	8001954 <LL_ADC_IsEnabled>
 8001af6:	4604      	mov	r4, r0
 8001af8:	4861      	ldr	r0, [pc, #388]	; (8001c80 <HAL_ADC_Init+0x290>)
 8001afa:	f7ff ff2b 	bl	8001954 <LL_ADC_IsEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	431c      	orrs	r4, r3
 8001b02:	4860      	ldr	r0, [pc, #384]	; (8001c84 <HAL_ADC_Init+0x294>)
 8001b04:	f7ff ff26 	bl	8001954 <LL_ADC_IsEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	485c      	ldr	r0, [pc, #368]	; (8001c88 <HAL_ADC_Init+0x298>)
 8001b18:	f7ff fd94 	bl	8001644 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7e5b      	ldrb	r3, [r3, #25]
 8001b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_ADC_Init+0x29c>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff1b 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001b92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d13d      	bne.n	8001c16 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d13a      	bne.n	8001c16 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d118      	bne.n	8001c06 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	e007      	b.n	8001c16 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10c      	bne.n	8001c38 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f023 010f 	bic.w	r1, r3, #15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020f 	bic.w	r2, r2, #15
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f023 0303 	bic.w	r3, r3, #3
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
 8001c58:	e007      	b.n	8001c6a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	053e2d63 	.word	0x053e2d63
 8001c7c:	50040000 	.word	0x50040000
 8001c80:	50040100 	.word	0x50040100
 8001c84:	50040200 	.word	0x50040200
 8001c88:	50040300 	.word	0x50040300
 8001c8c:	fff0c007 	.word	0xfff0c007

08001c90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c9c:	4853      	ldr	r0, [pc, #332]	; (8001dec <HAL_ADC_Start_DMA+0x15c>)
 8001c9e:	f7ff fde9 	bl	8001874 <LL_ADC_GetMultimode>
 8001ca2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe7a 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8093 	bne.w	8001ddc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_Start_DMA+0x34>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e08e      	b.n	8001de2 <HAL_ADC_Start_DMA+0x152>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <HAL_ADC_Start_DMA+0x160>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d008      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d172      	bne.n	8001dce <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fc9d 	bl	8002628 <ADC_Enable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d165      	bne.n	8001dc4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <HAL_ADC_Start_DMA+0x164>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d002      	beq.n	8001d1c <HAL_ADC_Start_DMA+0x8c>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	e000      	b.n	8001d1e <HAL_ADC_Start_DMA+0x8e>
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_ADC_Start_DMA+0x168>)
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d002      	beq.n	8001d2c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f023 0206 	bic.w	r2, r3, #6
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_ADC_Start_DMA+0x16c>)
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_ADC_Start_DMA+0x170>)
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <HAL_ADC_Start_DMA+0x174>)
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	221c      	movs	r2, #28
 8001d76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0210 	orr.w	r2, r2, #16
 8001d8e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3340      	adds	r3, #64	; 0x40
 8001daa:	4619      	mov	r1, r3
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f000 fff4 	bl	8002d9c <HAL_DMA_Start_IT>
 8001db4:	4603      	mov	r3, r0
 8001db6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fddc 	bl	800197a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001dc2:	e00d      	b.n	8001de0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001dcc:	e008      	b.n	8001de0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001dda:	e001      	b.n	8001de0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	50040300 	.word	0x50040300
 8001df0:	50040200 	.word	0x50040200
 8001df4:	50040100 	.word	0x50040100
 8001df8:	50040000 	.word	0x50040000
 8001dfc:	08002735 	.word	0x08002735
 8001e00:	0800280d 	.word	0x0800280d
 8001e04:	08002829 	.word	0x08002829

08001e08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0b6      	sub	sp, #216	; 0xd8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x22>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e3c9      	b.n	80025fa <HAL_ADC_ConfigChannel+0x7b6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fd95 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 83aa 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d824      	bhi.n	8001eda <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	3b02      	subs	r3, #2
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d81b      	bhi.n	8001ed2 <HAL_ADC_ConfigChannel+0x8e>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <HAL_ADC_ConfigChannel+0x5c>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001eb9 	.word	0x08001eb9
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ec9 	.word	0x08001ec9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eb6:	e010      	b.n	8001eda <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001eb8:	2312      	movs	r3, #18
 8001eba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ebe:	e00c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ec0:	2318      	movs	r3, #24
 8001ec2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ec6:	e008      	b.n	8001eda <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ed0:	e003      	b.n	8001eda <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ed8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ee8:	f7ff fc48 	bl	800177c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fd56 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001ef6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fd62 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001f04:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 81a4 	bne.w	800225a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 819f 	bne.w	800225a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f7ff fc53 	bl	80017d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00a      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f60:	f7ff fba4 	bl	80016ac <LL_ADC_SetOffset>
 8001f64:	e179      	b.n	800225a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fbc1 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x14e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fbb6 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	e01e      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x18c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fbab 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e004      	b.n	8001fce <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1a4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	e018      	b.n	800201a <HAL_ADC_ConfigChannel+0x1d6>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e004      	b.n	800201a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201a:	429a      	cmp	r2, r3
 800201c:	d106      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fb7a 	bl	8001720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb5e 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x214>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fb53 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	f003 021f 	and.w	r2, r3, #31
 8002056:	e01e      	b.n	8002096 <HAL_ADC_ConfigChannel+0x252>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fb48 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800207e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e004      	b.n	8002094 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800208a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x26a>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	e018      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x29c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e004      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fb17 	bl	8001720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fafb 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x2da>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff faf0 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	e01e      	b.n	800215c <HAL_ADC_ConfigChannel+0x318>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2102      	movs	r1, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fae5 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800213c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e004      	b.n	800215a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x330>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	e014      	b.n	800219e <HAL_ADC_ConfigChannel+0x35a>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e004      	b.n	800219e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800219e:	429a      	cmp	r2, r3
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fab8 	bl	8001720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2103      	movs	r1, #3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fa9c 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x398>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2103      	movs	r1, #3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fa91 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	e017      	b.n	800220c <HAL_ADC_ConfigChannel+0x3c8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2103      	movs	r1, #3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fa86 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80021f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x3e0>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	e011      	b.n	8002248 <HAL_ADC_ConfigChannel+0x404>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002234:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800223c:	2320      	movs	r3, #32
 800223e:	e003      	b.n	8002248 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fa63 	bl	8001720 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fb78 	bl	8001954 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8140 	bne.w	80024ec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	f7ff fad7 	bl	800182c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a8f      	ldr	r2, [pc, #572]	; (80024c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	f040 8131 	bne.w	80024ec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x46e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	bf94      	ite	ls
 80022aa:	2301      	movls	r3, #1
 80022ac:	2300      	movhi	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e019      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x4a2>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022ca:	2320      	movs	r3, #32
 80022cc:	e003      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2b09      	cmp	r3, #9
 80022de:	bf94      	ite	ls
 80022e0:	2301      	movls	r3, #1
 80022e2:	2300      	movhi	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d079      	beq.n	80023de <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x4c2>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002304:	e015      	b.n	8002332 <HAL_ADC_ConfigChannel+0x4ee>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	069b      	lsls	r3, r3, #26
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x50e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	e017      	b.n	8002382 <HAL_ADC_ConfigChannel+0x53e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e003      	b.n	8002376 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	ea42 0103 	orr.w	r1, r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x564>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	e018      	b.n	80023da <HAL_ADC_ConfigChannel+0x596>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023da:	430b      	orrs	r3, r1
 80023dc:	e081      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d107      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x5b6>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f8:	e015      	b.n	8002426 <HAL_ADC_ConfigChannel+0x5e2>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	069b      	lsls	r3, r3, #26
 8002422:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x602>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	3301      	adds	r3, #1
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	e017      	b.n	8002476 <HAL_ADC_ConfigChannel+0x632>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	61bb      	str	r3, [r7, #24]
  return result;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	ea42 0103 	orr.w	r1, r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x65e>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	3b1e      	subs	r3, #30
 800249a:	051b      	lsls	r3, r3, #20
 800249c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x69c>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  return result;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e006      	b.n	80024cc <HAL_ADC_ConfigChannel+0x688>
 80024be:	bf00      	nop
 80024c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 021f 	and.w	r2, r3, #31
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	3b1e      	subs	r3, #30
 80024da:	051b      	lsls	r3, r3, #20
 80024dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7ff f974 	bl	80017d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b44      	ldr	r3, [pc, #272]	; (8002604 <HAL_ADC_ConfigChannel+0x7c0>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07a      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f8:	4843      	ldr	r0, [pc, #268]	; (8002608 <HAL_ADC_ConfigChannel+0x7c4>)
 80024fa:	f7ff f8c9 	bl	8001690 <LL_ADC_GetCommonPathInternalCh>
 80024fe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a41      	ldr	r2, [pc, #260]	; (800260c <HAL_ADC_ConfigChannel+0x7c8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d12c      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800250c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d126      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_ADC_ConfigChannel+0x7cc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_ADC_ConfigChannel+0x6e8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <HAL_ADC_ConfigChannel+0x7d0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d15d      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002534:	4619      	mov	r1, r3
 8002536:	4834      	ldr	r0, [pc, #208]	; (8002608 <HAL_ADC_ConfigChannel+0x7c4>)
 8002538:	f7ff f897 	bl	800166a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_ADC_ConfigChannel+0x7d4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	4a36      	ldr	r2, [pc, #216]	; (800261c <HAL_ADC_ConfigChannel+0x7d8>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002556:	e002      	b.n	800255e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3b01      	subs	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002564:	e040      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <HAL_ADC_ConfigChannel+0x7dc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d118      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d112      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_ADC_ConfigChannel+0x7cc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x74c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_ADC_ConfigChannel+0x7d0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d12d      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002598:	4619      	mov	r1, r3
 800259a:	481b      	ldr	r0, [pc, #108]	; (8002608 <HAL_ADC_ConfigChannel+0x7c4>)
 800259c:	f7ff f865 	bl	800166a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a0:	e024      	b.n	80025ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_ADC_ConfigChannel+0x7e0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d120      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11a      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_ADC_ConfigChannel+0x7cc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d115      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ca:	4619      	mov	r1, r3
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <HAL_ADC_ConfigChannel+0x7c4>)
 80025ce:	f7ff f84c 	bl	800166a <LL_ADC_SetCommonPathInternalCh>
 80025d2:	e00c      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025e6:	e002      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e8:	bf00      	nop
 80025ea:	e000      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	37d8      	adds	r7, #216	; 0xd8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	80080000 	.word	0x80080000
 8002608:	50040300 	.word	0x50040300
 800260c:	c7520000 	.word	0xc7520000
 8002610:	50040000 	.word	0x50040000
 8002614:	50040200 	.word	0x50040200
 8002618:	20000000 	.word	0x20000000
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	cb840000 	.word	0xcb840000
 8002624:	80000001 	.word	0x80000001

08002628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f98b 	bl	8001954 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d169      	bne.n	8002718 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <ADC_Enable+0xfc>)
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e055      	b.n	800271a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f95a 	bl	800192c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002678:	482b      	ldr	r0, [pc, #172]	; (8002728 <ADC_Enable+0x100>)
 800267a:	f7ff f809 	bl	8001690 <LL_ADC_GetCommonPathInternalCh>
 800267e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <ADC_Enable+0x104>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <ADC_Enable+0x108>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026a2:	e002      	b.n	80026aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026b0:	f7fe ff98 	bl	80015e4 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b6:	e028      	b.n	800270a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f949 	bl	8001954 <LL_ADC_IsEnabled>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f92d 	bl	800192c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026d2:	f7fe ff87 	bl	80015e4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d914      	bls.n	800270a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d00d      	beq.n	800270a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e007      	b.n	800271a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d1cf      	bne.n	80026b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	8000003f 	.word	0x8000003f
 8002728:	50040300 	.word	0x50040300
 800272c:	20000000 	.word	0x20000000
 8002730:	053e2d63 	.word	0x053e2d63

08002734 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	d14b      	bne.n	80027e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fff2 	bl	8001756 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d032      	beq.n	80027de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d12b      	bne.n	80027de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11f      	bne.n	80027de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
 80027aa:	e018      	b.n	80027de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fb12 	bl	8001e08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027e4:	e00e      	b.n	8002804 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff fb1c 	bl	8001e30 <HAL_ADC_ErrorCallback>
}
 80027f8:	e004      	b.n	8002804 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fafe 	bl	8001e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff faee 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <LL_ADC_IsEnabled>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <LL_ADC_IsEnabled+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_IsEnabled+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_REG_IsConversionOngoing>:
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d101      	bne.n	800289a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b09f      	sub	sp, #124	; 0x7c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e093      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028ce:	2300      	movs	r3, #0
 80028d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028d2:	2300      	movs	r3, #0
 80028d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a47      	ldr	r2, [pc, #284]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d102      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	e001      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e072      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ffb9 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002910:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffb3 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d154      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002924:	2b00      	cmp	r3, #0
 8002926:	d151      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800292a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d02c      	beq.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002946:	035b      	lsls	r3, r3, #13
 8002948:	430b      	orrs	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002950:	4829      	ldr	r0, [pc, #164]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002952:	f7ff ff83 	bl	800285c <LL_ADC_IsEnabled>
 8002956:	4604      	mov	r4, r0
 8002958:	4828      	ldr	r0, [pc, #160]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800295a:	f7ff ff7f 	bl	800285c <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	431c      	orrs	r4, r3
 8002962:	4828      	ldr	r0, [pc, #160]	; (8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002964:	f7ff ff7a 	bl	800285c <LL_ADC_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	4323      	orrs	r3, r4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d137      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002978:	f023 030f 	bic.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	430a      	orrs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800298c:	e028      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800299a:	4817      	ldr	r0, [pc, #92]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800299c:	f7ff ff5e 	bl	800285c <LL_ADC_IsEnabled>
 80029a0:	4604      	mov	r4, r0
 80029a2:	4816      	ldr	r0, [pc, #88]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029a4:	f7ff ff5a 	bl	800285c <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	431c      	orrs	r4, r3
 80029ac:	4815      	ldr	r0, [pc, #84]	; (8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029ae:	f7ff ff55 	bl	800285c <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4323      	orrs	r3, r4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d112      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029c2:	f023 030f 	bic.w	r3, r3, #15
 80029c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029ca:	e009      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029de:	e000      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	377c      	adds	r7, #124	; 0x7c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	50040000 	.word	0x50040000
 80029fc:	50040100 	.word	0x50040100
 8002a00:	50040300 	.word	0x50040300
 8002a04:	50040200 	.word	0x50040200

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d301      	bcc.n	8002b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00f      	b.n	8002b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <SysTick_Config+0x40>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b82:	210f      	movs	r1, #15
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f7ff ff8e 	bl	8002aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SysTick_Config+0x40>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <SysTick_Config+0x40>)
 8002b94:	2207      	movs	r2, #7
 8002b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff29 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd0:	f7ff ff3e 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f7ff ff8e 	bl	8002afc <NVIC_EncodePriority>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff5d 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff31 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ffa2 	bl	8002b64 <SysTick_Config>
 8002c20:	4603      	mov	r3, r0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e098      	b.n	8002d70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_DMA_Init+0x150>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d80f      	bhi.n	8002c6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <HAL_DMA_Init+0x154>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_DMA_Init+0x158>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a48      	ldr	r2, [pc, #288]	; (8002d88 <HAL_DMA_Init+0x15c>)
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
 8002c68:	e00e      	b.n	8002c88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_DMA_Init+0x160>)
 8002c72:	4413      	add	r3, r2
 8002c74:	4a43      	ldr	r2, [pc, #268]	; (8002d84 <HAL_DMA_Init+0x158>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_DMA_Init+0x164>)
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ce2:	d039      	beq.n	8002d58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_DMA_Init+0x15c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11a      	bne.n	8002d24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_DMA_Init+0x168>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f003 031c 	and.w	r3, r3, #28
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4924      	ldr	r1, [pc, #144]	; (8002d94 <HAL_DMA_Init+0x168>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_DMA_Init+0x168>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	491d      	ldr	r1, [pc, #116]	; (8002d94 <HAL_DMA_Init+0x168>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
 8002d22:	e019      	b.n	8002d58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_DMA_Init+0x16c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f003 031c 	and.w	r3, r3, #28
 8002d30:	210f      	movs	r1, #15
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4917      	ldr	r1, [pc, #92]	; (8002d98 <HAL_DMA_Init+0x16c>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_DMA_Init+0x16c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f003 031c 	and.w	r3, r3, #28
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	4911      	ldr	r1, [pc, #68]	; (8002d98 <HAL_DMA_Init+0x16c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40020407 	.word	0x40020407
 8002d80:	bffdfff8 	.word	0xbffdfff8
 8002d84:	cccccccd 	.word	0xcccccccd
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	bffdfbf8 	.word	0xbffdfbf8
 8002d90:	40020400 	.word	0x40020400
 8002d94:	400200a8 	.word	0x400200a8
 8002d98:	400204a8 	.word	0x400204a8

08002d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_DMA_Start_IT+0x20>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e04b      	b.n	8002e54 <HAL_DMA_Start_IT+0xb8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d13a      	bne.n	8002e46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f8e0 	bl	8002fba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 020e 	orr.w	r2, r2, #14
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e00f      	b.n	8002e34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0204 	bic.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 020a 	orr.w	r2, r2, #10
 8002e32:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e005      	b.n	8002e52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f003 031c 	and.w	r3, r3, #28
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d026      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x7a>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d021      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f003 021c 	and.w	r2, r3, #28
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d071      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ed4:	e06c      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f003 031c 	and.w	r3, r3, #28
 8002ede:	2202      	movs	r2, #2
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0xec>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d029      	beq.n	8002f48 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 020a 	bic.w	r2, r2, #10
 8002f10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 021c 	and.w	r2, r3, #28
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2102      	movs	r1, #2
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d038      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f46:	e033      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f003 031c 	and.w	r3, r3, #28
 8002f50:	2208      	movs	r2, #8
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02a      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x156>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d025      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 020e 	bic.w	r2, r2, #14
 8002f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 021c 	and.w	r2, r3, #28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
}
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f003 021c 	and.w	r2, r3, #28
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d108      	bne.n	8002ffe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ffc:	e007      	b.n	800300e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302a:	e17f      	b.n	800332c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8171 	beq.w	8003326 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d005      	beq.n	800305c <HAL_GPIO_Init+0x40>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d130      	bne.n	80030be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003092:	2201      	movs	r2, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 0201 	and.w	r2, r3, #1
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d118      	bne.n	80030fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d017      	beq.n	8003138 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d123      	bne.n	800318c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80ac 	beq.w	8003326 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_GPIO_Init+0x330>)
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	4a5e      	ldr	r2, [pc, #376]	; (800334c <HAL_GPIO_Init+0x330>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6613      	str	r3, [r2, #96]	; 0x60
 80031da:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_GPIO_Init+0x330>)
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031e6:	4a5a      	ldr	r2, [pc, #360]	; (8003350 <HAL_GPIO_Init+0x334>)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003210:	d025      	beq.n	800325e <HAL_GPIO_Init+0x242>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4f      	ldr	r2, [pc, #316]	; (8003354 <HAL_GPIO_Init+0x338>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01f      	beq.n	800325a <HAL_GPIO_Init+0x23e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4e      	ldr	r2, [pc, #312]	; (8003358 <HAL_GPIO_Init+0x33c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d019      	beq.n	8003256 <HAL_GPIO_Init+0x23a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_GPIO_Init+0x340>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0x236>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_GPIO_Init+0x344>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00d      	beq.n	800324e <HAL_GPIO_Init+0x232>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_GPIO_Init+0x348>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0x22e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_GPIO_Init+0x34c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_GPIO_Init+0x22a>
 8003242:	2306      	movs	r3, #6
 8003244:	e00c      	b.n	8003260 <HAL_GPIO_Init+0x244>
 8003246:	2307      	movs	r3, #7
 8003248:	e00a      	b.n	8003260 <HAL_GPIO_Init+0x244>
 800324a:	2305      	movs	r3, #5
 800324c:	e008      	b.n	8003260 <HAL_GPIO_Init+0x244>
 800324e:	2304      	movs	r3, #4
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x244>
 8003252:	2303      	movs	r3, #3
 8003254:	e004      	b.n	8003260 <HAL_GPIO_Init+0x244>
 8003256:	2302      	movs	r3, #2
 8003258:	e002      	b.n	8003260 <HAL_GPIO_Init+0x244>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x244>
 800325e:	2300      	movs	r3, #0
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	f002 0203 	and.w	r2, r2, #3
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	4093      	lsls	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003270:	4937      	ldr	r1, [pc, #220]	; (8003350 <HAL_GPIO_Init+0x334>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_GPIO_Init+0x350>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032a2:	4a32      	ldr	r2, [pc, #200]	; (800336c <HAL_GPIO_Init+0x350>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_GPIO_Init+0x350>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <HAL_GPIO_Init+0x350>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_GPIO_Init+0x350>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f6:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_GPIO_Init+0x350>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_GPIO_Init+0x350>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003320:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_GPIO_Init+0x350>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f ae78 	bne.w	800302c <HAL_GPIO_Init+0x10>
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	40010000 	.word	0x40010000
 8003354:	48000400 	.word	0x48000400
 8003358:	48000800 	.word	0x48000800
 800335c:	48000c00 	.word	0x48000c00
 8003360:	48001000 	.word	0x48001000
 8003364:	48001400 	.word	0x48001400
 8003368:	48001800 	.word	0x48001800
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800338c:	e002      	b.n	8003394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ca:	d130      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d038      	beq.n	800344c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2232      	movs	r2, #50	; 0x32
 80033f0:	fb02 f303 	mul.w	r3, r2, r3
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0c9b      	lsrs	r3, r3, #18
 80033fc:	3301      	adds	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003400:	e002      	b.n	8003408 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d102      	bne.n	800341c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f2      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d110      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d007      	beq.n	800344c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40007000 	.word	0x40007000
 8003460:	20000000 	.word	0x20000000
 8003464:	431bde83 	.word	0x431bde83

08003468 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e3ca      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	4b97      	ldr	r3, [pc, #604]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003484:	4b94      	ldr	r3, [pc, #592]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80e4 	beq.w	8003664 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4a>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	f040 808b 	bne.w	80035c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 8087 	bne.w	80035c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b2:	4b89      	ldr	r3, [pc, #548]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e3a2      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <HAL_RCC_OscConfig+0x7c>
 80034da:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e2:	e005      	b.n	80034f0 <HAL_RCC_OscConfig+0x88>
 80034e4:	4b7c      	ldr	r3, [pc, #496]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d223      	bcs.n	800353c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fd55 	bl	8003fa8 <RCC_SetFlashLatencyFromMSIRange>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e383      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003508:	4b73      	ldr	r3, [pc, #460]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a72      	ldr	r2, [pc, #456]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	496d      	ldr	r1, [pc, #436]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	4968      	ldr	r1, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
 800353a:	e025      	b.n	8003588 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003542:	f043 0308 	orr.w	r3, r3, #8
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b63      	ldr	r3, [pc, #396]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4960      	ldr	r1, [pc, #384]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355a:	4b5f      	ldr	r3, [pc, #380]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	495b      	ldr	r1, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fd15 	bl	8003fa8 <RCC_SetFlashLatencyFromMSIRange>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e343      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003588:	f000 fc4a 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	4950      	ldr	r1, [pc, #320]	; (80036dc <HAL_RCC_OscConfig+0x274>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <HAL_RCC_OscConfig+0x278>)
 80035a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035a8:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd ffc9 	bl	8001544 <HAL_InitTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d052      	beq.n	8003662 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	e327      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d032      	beq.n	800362e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035d4:	f7fe f806 	bl	80015e4 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035dc:	f7fe f802 	bl	80015e4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e310      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a36      	ldr	r2, [pc, #216]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4931      	ldr	r1, [pc, #196]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003618:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	492c      	ldr	r1, [pc, #176]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
 800362c:	e01a      	b.n	8003664 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800363a:	f7fd ffd3 	bl	80015e4 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003642:	f7fd ffcf 	bl	80015e4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e2dd      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCC_OscConfig+0x1da>
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003662:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d074      	beq.n	800375a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x21a>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d10e      	bne.n	800369a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d10b      	bne.n	800369a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d064      	beq.n	8003758 <HAL_RCC_OscConfig+0x2f0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d160      	bne.n	8003758 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e2ba      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x24a>
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e026      	b.n	8003700 <HAL_RCC_OscConfig+0x298>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ba:	d115      	bne.n	80036e8 <HAL_RCC_OscConfig+0x280>
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a02      	ldr	r2, [pc, #8]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x298>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08005e94 	.word	0x08005e94
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004
 80036e8:	4ba0      	ldr	r3, [pc, #640]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a9f      	ldr	r2, [pc, #636]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b9d      	ldr	r3, [pc, #628]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a9c      	ldr	r2, [pc, #624]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd ff6c 	bl	80015e4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fd ff68 	bl	80015e4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e276      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003722:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x2a8>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd ff58 	bl	80015e4 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fd ff54 	bl	80015e4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e262      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374a:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x2d0>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d060      	beq.n	8003828 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x310>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d119      	bne.n	80037a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d116      	bne.n	80037a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003778:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_OscConfig+0x328>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e23f      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b76      	ldr	r3, [pc, #472]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	4973      	ldr	r1, [pc, #460]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a4:	e040      	b.n	8003828 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d023      	beq.n	80037f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ae:	4b6f      	ldr	r3, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6e      	ldr	r2, [pc, #440]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd ff13 	bl	80015e4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fd ff0f 	bl	80015e4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e21d      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d4:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b62      	ldr	r3, [pc, #392]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	061b      	lsls	r3, r3, #24
 80037ee:	495f      	ldr	r1, [pc, #380]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	e018      	b.n	8003828 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5c      	ldr	r2, [pc, #368]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80037fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fd feef 	bl	80015e4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380a:	f7fd feeb 	bl	80015e4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1f9      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d03c      	beq.n	80038ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01c      	beq.n	8003876 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383c:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003842:	4a4a      	ldr	r2, [pc, #296]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd feca 	bl	80015e4 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd fec6 	bl	80015e4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1d4      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCC_OscConfig+0x3ec>
 8003874:	e01b      	b.n	80038ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	4a3b      	ldr	r2, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fd fead 	bl	80015e4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd fea9 	bl	80015e4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1b7      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ef      	bne.n	800388e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80a6 	beq.w	8003a08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_OscConfig+0x504>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCC_OscConfig+0x508>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d118      	bne.n	8003926 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f4:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <HAL_RCC_OscConfig+0x508>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_RCC_OscConfig+0x508>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003900:	f7fd fe70 	bl	80015e4 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003908:	f7fd fe6c 	bl	80015e4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e17a      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_RCC_OscConfig+0x508>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d108      	bne.n	8003940 <HAL_RCC_OscConfig+0x4d8>
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393e:	e029      	b.n	8003994 <HAL_RCC_OscConfig+0x52c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d115      	bne.n	8003974 <HAL_RCC_OscConfig+0x50c>
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCC_OscConfig+0x504>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_RCC_OscConfig+0x504>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x52c>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
 8003974:	4b9c      	ldr	r3, [pc, #624]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a9b      	ldr	r2, [pc, #620]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003984:	4b98      	ldr	r3, [pc, #608]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a97      	ldr	r2, [pc, #604]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fe22 	bl	80015e4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fe1e 	bl	80015e4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e12a      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ed      	beq.n	80039a4 <HAL_RCC_OscConfig+0x53c>
 80039c8:	e015      	b.n	80039f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd fe0b 	bl	80015e4 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fd fe07 	bl	80015e4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e113      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e8:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ed      	bne.n	80039d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f6:	7ffb      	ldrb	r3, [r7, #31]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a79      	ldr	r2, [pc, #484]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80fe 	beq.w	8003c0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	f040 80d0 	bne.w	8003bbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a1c:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0203 	and.w	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d130      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d127      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d11f      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a5c:	2a07      	cmp	r2, #7
 8003a5e:	bf14      	ite	ne
 8003a60:	2201      	movne	r2, #1
 8003a62:	2200      	moveq	r2, #0
 8003a64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d113      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d06e      	beq.n	8003b70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d069      	beq.n	8003b6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aa4:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ad      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac0:	f7fd fd90 	bl	80015e4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fd8c 	bl	80015e4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e09a      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_OscConfig+0x784>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003af6:	3a01      	subs	r2, #1
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b00:	0212      	lsls	r2, r2, #8
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b08:	0852      	lsrs	r2, r2, #1
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	0552      	lsls	r2, r2, #21
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b14:	0852      	lsrs	r2, r2, #1
 8003b16:	3a01      	subs	r2, #1
 8003b18:	0652      	lsls	r2, r2, #25
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b20:	0912      	lsrs	r2, r2, #4
 8003b22:	0452      	lsls	r2, r2, #17
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4930      	ldr	r1, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b44:	f7fd fd4e 	bl	80015e4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fd4a 	bl	80015e4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e058      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b6a:	e050      	b.n	8003c0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e04f      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d148      	bne.n	8003c0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b94:	f7fd fd26 	bl	80015e4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fd22 	bl	80015e4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e030      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x734>
 8003bba:	e028      	b.n	8003c0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d023      	beq.n	8003c0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x780>)
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fd09 	bl	80015e4 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fd fd05 	bl	80015e4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d905      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e013      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_OscConfig+0x7b0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ec      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x7b0>)
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4905      	ldr	r1, [pc, #20]	; (8003c18 <HAL_RCC_OscConfig+0x7b0>)
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_OscConfig+0x7b4>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60cb      	str	r3, [r1, #12]
 8003c08:	e001      	b.n	8003c0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	feeefffc 	.word	0xfeeefffc

08003c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0e7      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b75      	ldr	r3, [pc, #468]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d910      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4970      	ldr	r1, [pc, #448]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b6e      	ldr	r3, [pc, #440]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0cf      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d908      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4960      	ldr	r1, [pc, #384]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04c      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca6:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d121      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0a6      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d115      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e09a      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e08e      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e086      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4943      	ldr	r1, [pc, #268]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d08:	f7fd fc6c 	bl	80015e4 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd fc68 	bl	80015e4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e06e      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 020c 	and.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1eb      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d208      	bcs.n	8003d66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	492b      	ldr	r1, [pc, #172]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d210      	bcs.n	8003d96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 0207 	bic.w	r2, r3, #7
 8003d7c:	4923      	ldr	r1, [pc, #140]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <HAL_RCC_ClockConfig+0x1ec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e036      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4918      	ldr	r1, [pc, #96]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4910      	ldr	r1, [pc, #64]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd4:	f000 f824 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	490b      	ldr	r1, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1f4>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1f8>)
 8003df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1fc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fba3 	bl	8001544 <HAL_InitTick>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e02:	7afb      	ldrb	r3, [r7, #11]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08005e94 	.word	0x08005e94
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	20000004 	.word	0x20000004

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4b3e      	ldr	r3, [pc, #248]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d121      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d11e      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e60:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	e005      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e70:	4b2d      	ldr	r3, [pc, #180]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ea4:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d134      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d003      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0xac>
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ec8:	617b      	str	r3, [r7, #20]
      break;
 8003eca:	e005      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ece:	617b      	str	r3, [r7, #20]
      break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	617b      	str	r3, [r7, #20]
      break;
 8003ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	fb03 f202 	mul.w	r2, r3, r2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	0e5b      	lsrs	r3, r3, #25
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f18:	69bb      	ldr	r3, [r7, #24]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08005eac 	.word	0x08005eac
 8003f30:	00f42400 	.word	0x00f42400
 8003f34:	007a1200 	.word	0x007a1200

08003f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000000 	.word	0x20000000

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f54:	f7ff fff0 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4904      	ldr	r1, [pc, #16]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	08005ea4 	.word	0x08005ea4

08003f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f80:	f7ff ffda 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0adb      	lsrs	r3, r3, #11
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	08005ea4 	.word	0x08005ea4

08003fa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fc0:	f7ff f9ee 	bl	80033a0 <HAL_PWREx_GetVoltageRange>
 8003fc4:	6178      	str	r0, [r7, #20]
 8003fc6:	e014      	b.n	8003ff2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	4a24      	ldr	r2, [pc, #144]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fe0:	f7ff f9de 	bl	80033a0 <HAL_PWREx_GetVoltageRange>
 8003fe4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d10b      	bne.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d919      	bls.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2ba0      	cmp	r3, #160	; 0xa0
 8004004:	d902      	bls.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004006:	2302      	movs	r3, #2
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e013      	b.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800400c:	2301      	movs	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e010      	b.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d902      	bls.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004018:	2303      	movs	r3, #3
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e00a      	b.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d102      	bne.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004024:	2302      	movs	r3, #2
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e004      	b.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d101      	bne.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004030:	2301      	movs	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 0207 	bic.w	r2, r3, #7
 800403c:	4909      	ldr	r1, [pc, #36]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	40022000 	.word	0x40022000

08004068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004070:	2300      	movs	r3, #0
 8004072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004074:	2300      	movs	r3, #0
 8004076:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004080:	2b00      	cmp	r3, #0
 8004082:	d041      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800408c:	d02a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800408e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004092:	d824      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800409a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409e:	d81e      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a8:	d010      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040aa:	e018      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ac:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a85      	ldr	r2, [pc, #532]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fabb 	bl	800463c <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ca:	e00c      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3320      	adds	r3, #32
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fba6 	bl	8004824 <RCCEx_PLLSAI2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	74fb      	strb	r3, [r7, #19]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ec:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	4973      	ldr	r1, [pc, #460]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004102:	e001      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d041      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004118:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800411c:	d02a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800411e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004122:	d824      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004128:	d008      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800412a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412e:	d81e      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004138:	d010      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800413a:	e018      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800413c:	4b62      	ldr	r3, [pc, #392]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a61      	ldr	r2, [pc, #388]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004146:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004148:	e015      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa73 	bl	800463c <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800415a:	e00c      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3320      	adds	r3, #32
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fb5e 	bl	8004824 <RCCEx_PLLSAI2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	74fb      	strb	r3, [r7, #19]
      break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800417c:	4b52      	ldr	r3, [pc, #328]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418a:	494f      	ldr	r1, [pc, #316]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004192:	e001      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a0 	beq.w	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6593      	str	r3, [r2, #88]	; 0x58
 80041cc:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d8:	2301      	movs	r3, #1
 80041da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3a      	ldr	r2, [pc, #232]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e8:	f7fd f9fc 	bl	80015e4 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ee:	e009      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f0:	f7fd f9f8 	bl	80015e4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d902      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	74fb      	strb	r3, [r7, #19]
        break;
 8004202:	e005      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ef      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d15c      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004220:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	429a      	cmp	r2, r3
 8004232:	d019      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd f9b7 	bl	80015e4 <HAL_GetTick>
 8004276:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004278:	e00b      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fd f9b3 	bl	80015e4 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d902      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	74fb      	strb	r3, [r7, #19]
            break;
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ec      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b6:	4904      	ldr	r1, [pc, #16]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042be:	e009      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d4:	7c7b      	ldrb	r3, [r7, #17]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f2:	4b98      	ldr	r3, [pc, #608]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 0203 	bic.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	4994      	ldr	r1, [pc, #592]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004314:	4b8f      	ldr	r3, [pc, #572]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 020c 	bic.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	498c      	ldr	r1, [pc, #560]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004336:	4b87      	ldr	r3, [pc, #540]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	4983      	ldr	r1, [pc, #524]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004358:	4b7e      	ldr	r3, [pc, #504]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	497b      	ldr	r1, [pc, #492]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004388:	4972      	ldr	r1, [pc, #456]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800439c:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	496a      	ldr	r1, [pc, #424]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	4961      	ldr	r1, [pc, #388]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e0:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ee:	4959      	ldr	r1, [pc, #356]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004402:	4b54      	ldr	r3, [pc, #336]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	4950      	ldr	r1, [pc, #320]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	4948      	ldr	r1, [pc, #288]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	493f      	ldr	r1, [pc, #252]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d028      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004476:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004486:	d106      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004492:	60d3      	str	r3, [r2, #12]
 8004494:	e011      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449e:	d10c      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f8c8 	bl	800463c <RCCEx_PLLSAI1_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d028      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	491f      	ldr	r1, [pc, #124]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e4:	d106      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e6:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f0:	60d3      	str	r3, [r2, #12]
 80044f2:	e011      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f899 	bl	800463c <RCCEx_PLLSAI1_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d02b      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	4908      	ldr	r1, [pc, #32]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004542:	d109      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a02      	ldr	r2, [pc, #8]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
 8004550:	e014      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004560:	d10c      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f867 	bl	800463c <RCCEx_PLLSAI1_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02f      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004596:	4928      	ldr	r1, [pc, #160]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	2102      	movs	r1, #2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f844 	bl	800463c <RCCEx_PLLSAI1_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d014      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	74bb      	strb	r3, [r7, #18]
 80045c2:	e011      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3320      	adds	r3, #32
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f925 	bl	8004824 <RCCEx_PLLSAI2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f4:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004602:	490d      	ldr	r1, [pc, #52]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004626:	4904      	ldr	r1, [pc, #16]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800462e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000

0800463c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800464a:	4b75      	ldr	r3, [pc, #468]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0203 	and.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d10d      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
       ||
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800466e:	4b6c      	ldr	r3, [pc, #432]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
       ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d047      	beq.n	8004712 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	e044      	b.n	8004712 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d018      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x86>
 8004690:	2b03      	cmp	r3, #3
 8004692:	d825      	bhi.n	80046e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004694:	2b01      	cmp	r3, #1
 8004696:	d002      	beq.n	800469e <RCCEx_PLLSAI1_Config+0x62>
 8004698:	2b02      	cmp	r3, #2
 800469a:	d009      	beq.n	80046b0 <RCCEx_PLLSAI1_Config+0x74>
 800469c:	e020      	b.n	80046e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800469e:	4b60      	ldr	r3, [pc, #384]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11d      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ae:	e01a      	b.n	80046e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b0:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d116      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c0:	e013      	b.n	80046ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c2:	4b57      	ldr	r3, [pc, #348]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10f      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ce:	4b54      	ldr	r3, [pc, #336]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046de:	e006      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
      break;
 80046e4:	e004      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	430b      	orrs	r3, r1
 800470c:	4944      	ldr	r1, [pc, #272]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d17d      	bne.n	8004814 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a40      	ldr	r2, [pc, #256]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004724:	f7fc ff5e 	bl	80015e4 <HAL_GetTick>
 8004728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800472a:	e009      	b.n	8004740 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800472c:	f7fc ff5a 	bl	80015e4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d902      	bls.n	8004740 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	73fb      	strb	r3, [r7, #15]
        break;
 800473e:	e005      	b.n	800474c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004740:	4b37      	ldr	r3, [pc, #220]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ef      	bne.n	800472c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d160      	bne.n	8004814 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d111      	bne.n	800477c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004758:	4b31      	ldr	r3, [pc, #196]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6892      	ldr	r2, [r2, #8]
 8004768:	0211      	lsls	r1, r2, #8
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68d2      	ldr	r2, [r2, #12]
 800476e:	0912      	lsrs	r2, r2, #4
 8004770:	0452      	lsls	r2, r2, #17
 8004772:	430a      	orrs	r2, r1
 8004774:	492a      	ldr	r1, [pc, #168]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
 800477a:	e027      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d112      	bne.n	80047a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800478a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6892      	ldr	r2, [r2, #8]
 8004792:	0211      	lsls	r1, r2, #8
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6912      	ldr	r2, [r2, #16]
 8004798:	0852      	lsrs	r2, r2, #1
 800479a:	3a01      	subs	r2, #1
 800479c:	0552      	lsls	r2, r2, #21
 800479e:	430a      	orrs	r2, r1
 80047a0:	491f      	ldr	r1, [pc, #124]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]
 80047a6:	e011      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	0211      	lsls	r1, r2, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6952      	ldr	r2, [r2, #20]
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0652      	lsls	r2, r2, #25
 80047c4:	430a      	orrs	r2, r1
 80047c6:	4916      	ldr	r1, [pc, #88]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fc ff04 	bl	80015e4 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e0:	f7fc ff00 	bl	80015e4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
          break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000

08004824 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004832:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800483e:	4b67      	ldr	r3, [pc, #412]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0203 	and.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d10d      	bne.n	800486a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
       ||
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004856:	4b61      	ldr	r3, [pc, #388]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
       ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d047      	beq.n	80048fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e044      	b.n	80048fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d018      	beq.n	80048aa <RCCEx_PLLSAI2_Config+0x86>
 8004878:	2b03      	cmp	r3, #3
 800487a:	d825      	bhi.n	80048c8 <RCCEx_PLLSAI2_Config+0xa4>
 800487c:	2b01      	cmp	r3, #1
 800487e:	d002      	beq.n	8004886 <RCCEx_PLLSAI2_Config+0x62>
 8004880:	2b02      	cmp	r3, #2
 8004882:	d009      	beq.n	8004898 <RCCEx_PLLSAI2_Config+0x74>
 8004884:	e020      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004886:	4b55      	ldr	r3, [pc, #340]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11d      	bne.n	80048ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004896:	e01a      	b.n	80048ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d116      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a8:	e013      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048aa:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b6:	4b49      	ldr	r3, [pc, #292]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c6:	e006      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e004      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	430b      	orrs	r3, r1
 80048f4:	4939      	ldr	r1, [pc, #228]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d167      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a35      	ldr	r2, [pc, #212]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490c:	f7fc fe6a 	bl	80015e4 <HAL_GetTick>
 8004910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004912:	e009      	b.n	8004928 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004914:	f7fc fe66 	bl	80015e4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d902      	bls.n	8004928 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	73fb      	strb	r3, [r7, #15]
        break;
 8004926:	e005      	b.n	8004934 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ef      	bne.n	8004914 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d14a      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d111      	bne.n	8004964 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004940:	4b26      	ldr	r3, [pc, #152]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6892      	ldr	r2, [r2, #8]
 8004950:	0211      	lsls	r1, r2, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68d2      	ldr	r2, [r2, #12]
 8004956:	0912      	lsrs	r2, r2, #4
 8004958:	0452      	lsls	r2, r2, #17
 800495a:	430a      	orrs	r2, r1
 800495c:	491f      	ldr	r1, [pc, #124]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	614b      	str	r3, [r1, #20]
 8004962:	e011      	b.n	8004988 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6892      	ldr	r2, [r2, #8]
 8004974:	0211      	lsls	r1, r2, #8
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6912      	ldr	r2, [r2, #16]
 800497a:	0852      	lsrs	r2, r2, #1
 800497c:	3a01      	subs	r2, #1
 800497e:	0652      	lsls	r2, r2, #25
 8004980:	430a      	orrs	r2, r1
 8004982:	4916      	ldr	r1, [pc, #88]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	4313      	orrs	r3, r2
 8004986:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fc fe26 	bl	80015e4 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800499c:	f7fc fe22 	bl	80015e4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
          break;
 80049ae:	e005      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ef      	beq.n	800499c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4904      	ldr	r1, [pc, #16]	; (80049dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000

080049e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e040      	b.n	8004a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc fc7c 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	; 0x24
 8004a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb6a 	bl	8005100 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8af 	bl	8004b90 <UART_SetConfig>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e01b      	b.n	8004a74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fbe9 	bl	8005244 <UART_CheckIdleState>
 8004a72:	4603      	mov	r3, r0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d178      	bne.n	8004b86 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_UART_Transmit+0x24>
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e071      	b.n	8004b88 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2221      	movs	r2, #33	; 0x21
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fd97 	bl	80015e4 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_UART_Transmit+0x68>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e003      	b.n	8004aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aec:	e030      	b.n	8004b50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fc4b 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e03c      	b.n	8004b88 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b20:	b292      	uxth	r2, r2
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	3302      	adds	r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e008      	b.n	8004b3e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	b292      	uxth	r2, r2
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1c8      	bne.n	8004aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fc14 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e005      	b.n	8004b88 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3720      	adds	r7, #32
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b08a      	sub	sp, #40	; 0x28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4ba4      	ldr	r3, [pc, #656]	; (8004e50 <UART_SetConfig+0x2c0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a99      	ldr	r2, [pc, #612]	; (8004e54 <UART_SetConfig+0x2c4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a90      	ldr	r2, [pc, #576]	; (8004e58 <UART_SetConfig+0x2c8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d126      	bne.n	8004c68 <UART_SetConfig+0xd8>
 8004c1a:	4b90      	ldr	r3, [pc, #576]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d81b      	bhi.n	8004c60 <UART_SetConfig+0xd0>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0xa0>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c51 	.word	0x08004c51
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e116      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e112      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e10e      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e10a      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e106      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7c      	ldr	r2, [pc, #496]	; (8004e60 <UART_SetConfig+0x2d0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d138      	bne.n	8004ce4 <UART_SetConfig+0x154>
 8004c72:	4b7a      	ldr	r3, [pc, #488]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d82d      	bhi.n	8004cdc <UART_SetConfig+0x14c>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0xf8>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004cdd 	.word	0x08004cdd
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e0d8      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e0d4      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e0d0      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e0cc      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e0c8      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5e      	ldr	r2, [pc, #376]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d125      	bne.n	8004d3a <UART_SetConfig+0x1aa>
 8004cee:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf8:	2b30      	cmp	r3, #48	; 0x30
 8004cfa:	d016      	beq.n	8004d2a <UART_SetConfig+0x19a>
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d818      	bhi.n	8004d32 <UART_SetConfig+0x1a2>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d00a      	beq.n	8004d1a <UART_SetConfig+0x18a>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d814      	bhi.n	8004d32 <UART_SetConfig+0x1a2>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <UART_SetConfig+0x182>
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d008      	beq.n	8004d22 <UART_SetConfig+0x192>
 8004d10:	e00f      	b.n	8004d32 <UART_SetConfig+0x1a2>
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d18:	e0ad      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d20:	e0a9      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d22:	2304      	movs	r3, #4
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d28:	e0a5      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d30:	e0a1      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d32:	2310      	movs	r3, #16
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d38:	e09d      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a4a      	ldr	r2, [pc, #296]	; (8004e68 <UART_SetConfig+0x2d8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d125      	bne.n	8004d90 <UART_SetConfig+0x200>
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d50:	d016      	beq.n	8004d80 <UART_SetConfig+0x1f0>
 8004d52:	2bc0      	cmp	r3, #192	; 0xc0
 8004d54:	d818      	bhi.n	8004d88 <UART_SetConfig+0x1f8>
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d00a      	beq.n	8004d70 <UART_SetConfig+0x1e0>
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d814      	bhi.n	8004d88 <UART_SetConfig+0x1f8>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <UART_SetConfig+0x1d8>
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d008      	beq.n	8004d78 <UART_SetConfig+0x1e8>
 8004d66:	e00f      	b.n	8004d88 <UART_SetConfig+0x1f8>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e082      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e07e      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e07a      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e076      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e072      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <UART_SetConfig+0x2dc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d12a      	bne.n	8004df0 <UART_SetConfig+0x260>
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da8:	d01a      	beq.n	8004de0 <UART_SetConfig+0x250>
 8004daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dae:	d81b      	bhi.n	8004de8 <UART_SetConfig+0x258>
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d00c      	beq.n	8004dd0 <UART_SetConfig+0x240>
 8004db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dba:	d815      	bhi.n	8004de8 <UART_SetConfig+0x258>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <UART_SetConfig+0x238>
 8004dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc4:	d008      	beq.n	8004dd8 <UART_SetConfig+0x248>
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x258>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e052      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e04e      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e04a      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e046      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e042      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <UART_SetConfig+0x2c4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d13a      	bne.n	8004e70 <UART_SetConfig+0x2e0>
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e08:	d01a      	beq.n	8004e40 <UART_SetConfig+0x2b0>
 8004e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e0e:	d81b      	bhi.n	8004e48 <UART_SetConfig+0x2b8>
 8004e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e14:	d00c      	beq.n	8004e30 <UART_SetConfig+0x2a0>
 8004e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1a:	d815      	bhi.n	8004e48 <UART_SetConfig+0x2b8>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <UART_SetConfig+0x298>
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d008      	beq.n	8004e38 <UART_SetConfig+0x2a8>
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x2b8>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e022      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e01e      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e01a      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e016      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e012      	b.n	8004e76 <UART_SetConfig+0x2e6>
 8004e50:	efff69f3 	.word	0xefff69f3
 8004e54:	40008000 	.word	0x40008000
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40004400 	.word	0x40004400
 8004e64:	40004800 	.word	0x40004800
 8004e68:	40004c00 	.word	0x40004c00
 8004e6c:	40005000 	.word	0x40005000
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a9f      	ldr	r2, [pc, #636]	; (80050f8 <UART_SetConfig+0x568>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d17a      	bne.n	8004f76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d824      	bhi.n	8004ed2 <UART_SetConfig+0x342>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x300>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ed3 	.word	0x08004ed3
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004ed3 	.word	0x08004ed3
 8004ea0:	08004ec3 	.word	0x08004ec3
 8004ea4:	08004ed3 	.word	0x08004ed3
 8004ea8:	08004ed3 	.word	0x08004ed3
 8004eac:	08004ed3 	.word	0x08004ed3
 8004eb0:	08004ecb 	.word	0x08004ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7ff f84c 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	61f8      	str	r0, [r7, #28]
        break;
 8004eba:	e010      	b.n	8004ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ebc:	4b8f      	ldr	r3, [pc, #572]	; (80050fc <UART_SetConfig+0x56c>)
 8004ebe:	61fb      	str	r3, [r7, #28]
        break;
 8004ec0:	e00d      	b.n	8004ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec2:	f7fe ffad 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8004ec6:	61f8      	str	r0, [r7, #28]
        break;
 8004ec8:	e009      	b.n	8004ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ece:	61fb      	str	r3, [r7, #28]
        break;
 8004ed0:	e005      	b.n	8004ede <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004edc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80fb 	beq.w	80050dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d305      	bcc.n	8004f02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d903      	bls.n	8004f0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f08:	e0e8      	b.n	80050dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	461c      	mov	r4, r3
 8004f10:	4615      	mov	r5, r2
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	022b      	lsls	r3, r5, #8
 8004f1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f20:	0222      	lsls	r2, r4, #8
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	6849      	ldr	r1, [r1, #4]
 8004f26:	0849      	lsrs	r1, r1, #1
 8004f28:	2000      	movs	r0, #0
 8004f2a:	4688      	mov	r8, r1
 8004f2c:	4681      	mov	r9, r0
 8004f2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f32:	eb43 0b09 	adc.w	fp, r3, r9
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f44:	4650      	mov	r0, sl
 8004f46:	4659      	mov	r1, fp
 8004f48:	f7fb fdb8 	bl	8000abc <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5a:	d308      	bcc.n	8004f6e <UART_SetConfig+0x3de>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d204      	bcs.n	8004f6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e0b6      	b.n	80050dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f74:	e0b2      	b.n	80050dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d15e      	bne.n	800503e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d828      	bhi.n	8004fda <UART_SetConfig+0x44a>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x400>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	08004fdb 	.word	0x08004fdb
 8004fa0:	08004fcb 	.word	0x08004fcb
 8004fa4:	08004fdb 	.word	0x08004fdb
 8004fa8:	08004fdb 	.word	0x08004fdb
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004fd3 	.word	0x08004fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fe ffcc 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e014      	b.n	8004fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fe ffde 	bl	8003f7c <HAL_RCC_GetPCLK2Freq>
 8004fc0:	61f8      	str	r0, [r7, #28]
        break;
 8004fc2:	e010      	b.n	8004fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc4:	4b4d      	ldr	r3, [pc, #308]	; (80050fc <UART_SetConfig+0x56c>)
 8004fc6:	61fb      	str	r3, [r7, #28]
        break;
 8004fc8:	e00d      	b.n	8004fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fca:	f7fe ff29 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8004fce:	61f8      	str	r0, [r7, #28]
        break;
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	61fb      	str	r3, [r7, #28]
        break;
 8004fd8:	e005      	b.n	8004fe6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d077      	beq.n	80050dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	005a      	lsls	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b0f      	cmp	r3, #15
 8005006:	d916      	bls.n	8005036 <UART_SetConfig+0x4a6>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500e:	d212      	bcs.n	8005036 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f023 030f 	bic.w	r3, r3, #15
 8005018:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	b29a      	uxth	r2, r3
 8005026:	8afb      	ldrh	r3, [r7, #22]
 8005028:	4313      	orrs	r3, r2
 800502a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	8afa      	ldrh	r2, [r7, #22]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	e052      	b.n	80050dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800503c:	e04e      	b.n	80050dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800503e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005042:	2b08      	cmp	r3, #8
 8005044:	d827      	bhi.n	8005096 <UART_SetConfig+0x506>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x4bc>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	08005097 	.word	0x08005097
 800505c:	08005087 	.word	0x08005087
 8005060:	08005097 	.word	0x08005097
 8005064:	08005097 	.word	0x08005097
 8005068:	08005097 	.word	0x08005097
 800506c:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005070:	f7fe ff6e 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8005074:	61f8      	str	r0, [r7, #28]
        break;
 8005076:	e014      	b.n	80050a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe ff80 	bl	8003f7c <HAL_RCC_GetPCLK2Freq>
 800507c:	61f8      	str	r0, [r7, #28]
        break;
 800507e:	e010      	b.n	80050a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <UART_SetConfig+0x56c>)
 8005082:	61fb      	str	r3, [r7, #28]
        break;
 8005084:	e00d      	b.n	80050a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe fecb 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 800508a:	61f8      	str	r0, [r7, #28]
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050a0:	bf00      	nop
    }

    if (pclk != 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d019      	beq.n	80050dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	085a      	lsrs	r2, r3, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d909      	bls.n	80050d6 <UART_SetConfig+0x546>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d205      	bcs.n	80050d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60da      	str	r2, [r3, #12]
 80050d4:	e002      	b.n	80050dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3728      	adds	r7, #40	; 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40008000 	.word	0x40008000
 80050fc:	00f42400 	.word	0x00f42400

08005100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fe:	d10a      	bne.n	8005216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b098      	sub	sp, #96	; 0x60
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005254:	f7fc f9c6 	bl	80015e4 <HAL_GetTick>
 8005258:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b08      	cmp	r3, #8
 8005266:	d12e      	bne.n	80052c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005270:	2200      	movs	r2, #0
 8005272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f88c 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d021      	beq.n	80052c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e6      	bne.n	8005282 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e062      	b.n	800538c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d149      	bne.n	8005368 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f856 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d03c      	beq.n	8005368 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	623b      	str	r3, [r7, #32]
   return(result);
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
 800530e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	64bb      	str	r3, [r7, #72]	; 0x48
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3308      	adds	r3, #8
 800533e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005340:	61fa      	str	r2, [r7, #28]
 8005342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	69b9      	ldr	r1, [r7, #24]
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	617b      	str	r3, [r7, #20]
   return(result);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e5      	bne.n	8005320 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e011      	b.n	800538c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3758      	adds	r7, #88	; 0x58
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	e049      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d045      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fc f919 	bl	80015e4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e048      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d031      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d110      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f838 	bl	8005462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2208      	movs	r2, #8
 80053f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e029      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005414:	d111      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800541e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f81e 	bl	8005462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d0a6      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005462:	b480      	push	{r7}
 8005464:	b095      	sub	sp, #84	; 0x54
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	643b      	str	r3, [r7, #64]	; 0x40
 800548a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800548e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d118      	bne.n	800550a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	613b      	str	r3, [r7, #16]
   return(result);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800551e:	bf00      	nop
 8005520:	3754      	adds	r7, #84	; 0x54
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <siprintf>:
 800552c:	b40e      	push	{r1, r2, r3}
 800552e:	b500      	push	{lr}
 8005530:	b09c      	sub	sp, #112	; 0x70
 8005532:	ab1d      	add	r3, sp, #116	; 0x74
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	9006      	str	r0, [sp, #24]
 8005538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800553c:	4809      	ldr	r0, [pc, #36]	; (8005564 <siprintf+0x38>)
 800553e:	9107      	str	r1, [sp, #28]
 8005540:	9104      	str	r1, [sp, #16]
 8005542:	4909      	ldr	r1, [pc, #36]	; (8005568 <siprintf+0x3c>)
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	9105      	str	r1, [sp, #20]
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	a902      	add	r1, sp, #8
 8005550:	f000 f992 	bl	8005878 <_svfiprintf_r>
 8005554:	9b02      	ldr	r3, [sp, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	b01c      	add	sp, #112	; 0x70
 800555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005560:	b003      	add	sp, #12
 8005562:	4770      	bx	lr
 8005564:	20000058 	.word	0x20000058
 8005568:	ffff0208 	.word	0xffff0208

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	; (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000058 	.word	0x20000058

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	; (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	; (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	; (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	; (80055cc <__libc_init_array+0x44>)
 800559c:	f000 fc6a 	bl	8005e74 <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	08005f18 	.word	0x08005f18
 80055c4:	08005f18 	.word	0x08005f18
 80055c8:	08005f18 	.word	0x08005f18
 80055cc:	08005f1c 	.word	0x08005f1c

080055d0 <__retarget_lock_acquire_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_release_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <_free_r>:
 80055d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d044      	beq.n	8005664 <_free_r+0x90>
 80055da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055de:	9001      	str	r0, [sp, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f1a1 0404 	sub.w	r4, r1, #4
 80055e6:	bfb8      	it	lt
 80055e8:	18e4      	addlt	r4, r4, r3
 80055ea:	f000 f8df 	bl	80057ac <__malloc_lock>
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <_free_r+0x94>)
 80055f0:	9801      	ldr	r0, [sp, #4]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	b933      	cbnz	r3, 8005604 <_free_r+0x30>
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	b003      	add	sp, #12
 80055fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005600:	f000 b8da 	b.w	80057b8 <__malloc_unlock>
 8005604:	42a3      	cmp	r3, r4
 8005606:	d908      	bls.n	800561a <_free_r+0x46>
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	1961      	adds	r1, r4, r5
 800560c:	428b      	cmp	r3, r1
 800560e:	bf01      	itttt	eq
 8005610:	6819      	ldreq	r1, [r3, #0]
 8005612:	685b      	ldreq	r3, [r3, #4]
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	e7ed      	b.n	80055f6 <_free_r+0x22>
 800561a:	461a      	mov	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b10b      	cbz	r3, 8005624 <_free_r+0x50>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d9fa      	bls.n	800561a <_free_r+0x46>
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	1855      	adds	r5, r2, r1
 8005628:	42a5      	cmp	r5, r4
 800562a:	d10b      	bne.n	8005644 <_free_r+0x70>
 800562c:	6824      	ldr	r4, [r4, #0]
 800562e:	4421      	add	r1, r4
 8005630:	1854      	adds	r4, r2, r1
 8005632:	42a3      	cmp	r3, r4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	d1e0      	bne.n	80055fa <_free_r+0x26>
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6053      	str	r3, [r2, #4]
 800563e:	440c      	add	r4, r1
 8005640:	6014      	str	r4, [r2, #0]
 8005642:	e7da      	b.n	80055fa <_free_r+0x26>
 8005644:	d902      	bls.n	800564c <_free_r+0x78>
 8005646:	230c      	movs	r3, #12
 8005648:	6003      	str	r3, [r0, #0]
 800564a:	e7d6      	b.n	80055fa <_free_r+0x26>
 800564c:	6825      	ldr	r5, [r4, #0]
 800564e:	1961      	adds	r1, r4, r5
 8005650:	428b      	cmp	r3, r1
 8005652:	bf04      	itt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	bf04      	itt	eq
 800565c:	1949      	addeq	r1, r1, r5
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6054      	str	r4, [r2, #4]
 8005662:	e7ca      	b.n	80055fa <_free_r+0x26>
 8005664:	b003      	add	sp, #12
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	200002fc 	.word	0x200002fc

0800566c <sbrk_aligned>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4e0e      	ldr	r6, [pc, #56]	; (80056a8 <sbrk_aligned+0x3c>)
 8005670:	460c      	mov	r4, r1
 8005672:	6831      	ldr	r1, [r6, #0]
 8005674:	4605      	mov	r5, r0
 8005676:	b911      	cbnz	r1, 800567e <sbrk_aligned+0x12>
 8005678:	f000 fba6 	bl	8005dc8 <_sbrk_r>
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fba1 	bl	8005dc8 <_sbrk_r>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d00a      	beq.n	80056a0 <sbrk_aligned+0x34>
 800568a:	1cc4      	adds	r4, r0, #3
 800568c:	f024 0403 	bic.w	r4, r4, #3
 8005690:	42a0      	cmp	r0, r4
 8005692:	d007      	beq.n	80056a4 <sbrk_aligned+0x38>
 8005694:	1a21      	subs	r1, r4, r0
 8005696:	4628      	mov	r0, r5
 8005698:	f000 fb96 	bl	8005dc8 <_sbrk_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d101      	bne.n	80056a4 <sbrk_aligned+0x38>
 80056a0:	f04f 34ff 	mov.w	r4, #4294967295
 80056a4:	4620      	mov	r0, r4
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	20000300 	.word	0x20000300

080056ac <_malloc_r>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	1ccd      	adds	r5, r1, #3
 80056b2:	f025 0503 	bic.w	r5, r5, #3
 80056b6:	3508      	adds	r5, #8
 80056b8:	2d0c      	cmp	r5, #12
 80056ba:	bf38      	it	cc
 80056bc:	250c      	movcc	r5, #12
 80056be:	2d00      	cmp	r5, #0
 80056c0:	4607      	mov	r7, r0
 80056c2:	db01      	blt.n	80056c8 <_malloc_r+0x1c>
 80056c4:	42a9      	cmp	r1, r5
 80056c6:	d905      	bls.n	80056d4 <_malloc_r+0x28>
 80056c8:	230c      	movs	r3, #12
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	2600      	movs	r6, #0
 80056ce:	4630      	mov	r0, r6
 80056d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057a8 <_malloc_r+0xfc>
 80056d8:	f000 f868 	bl	80057ac <__malloc_lock>
 80056dc:	f8d8 3000 	ldr.w	r3, [r8]
 80056e0:	461c      	mov	r4, r3
 80056e2:	bb5c      	cbnz	r4, 800573c <_malloc_r+0x90>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ffc0 	bl	800566c <sbrk_aligned>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	4604      	mov	r4, r0
 80056f0:	d155      	bne.n	800579e <_malloc_r+0xf2>
 80056f2:	f8d8 4000 	ldr.w	r4, [r8]
 80056f6:	4626      	mov	r6, r4
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	d145      	bne.n	8005788 <_malloc_r+0xdc>
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	d048      	beq.n	8005792 <_malloc_r+0xe6>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	4631      	mov	r1, r6
 8005704:	4638      	mov	r0, r7
 8005706:	eb04 0903 	add.w	r9, r4, r3
 800570a:	f000 fb5d 	bl	8005dc8 <_sbrk_r>
 800570e:	4581      	cmp	r9, r0
 8005710:	d13f      	bne.n	8005792 <_malloc_r+0xe6>
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	1a6d      	subs	r5, r5, r1
 8005716:	4629      	mov	r1, r5
 8005718:	4638      	mov	r0, r7
 800571a:	f7ff ffa7 	bl	800566c <sbrk_aligned>
 800571e:	3001      	adds	r0, #1
 8005720:	d037      	beq.n	8005792 <_malloc_r+0xe6>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	442b      	add	r3, r5
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	f8d8 3000 	ldr.w	r3, [r8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d038      	beq.n	80057a2 <_malloc_r+0xf6>
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	42a2      	cmp	r2, r4
 8005734:	d12b      	bne.n	800578e <_malloc_r+0xe2>
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	e00f      	b.n	800575c <_malloc_r+0xb0>
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	1b52      	subs	r2, r2, r5
 8005740:	d41f      	bmi.n	8005782 <_malloc_r+0xd6>
 8005742:	2a0b      	cmp	r2, #11
 8005744:	d917      	bls.n	8005776 <_malloc_r+0xca>
 8005746:	1961      	adds	r1, r4, r5
 8005748:	42a3      	cmp	r3, r4
 800574a:	6025      	str	r5, [r4, #0]
 800574c:	bf18      	it	ne
 800574e:	6059      	strne	r1, [r3, #4]
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	bf08      	it	eq
 8005754:	f8c8 1000 	streq.w	r1, [r8]
 8005758:	5162      	str	r2, [r4, r5]
 800575a:	604b      	str	r3, [r1, #4]
 800575c:	4638      	mov	r0, r7
 800575e:	f104 060b 	add.w	r6, r4, #11
 8005762:	f000 f829 	bl	80057b8 <__malloc_unlock>
 8005766:	f026 0607 	bic.w	r6, r6, #7
 800576a:	1d23      	adds	r3, r4, #4
 800576c:	1af2      	subs	r2, r6, r3
 800576e:	d0ae      	beq.n	80056ce <_malloc_r+0x22>
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	50a3      	str	r3, [r4, r2]
 8005774:	e7ab      	b.n	80056ce <_malloc_r+0x22>
 8005776:	42a3      	cmp	r3, r4
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	d1dd      	bne.n	8005738 <_malloc_r+0x8c>
 800577c:	f8c8 2000 	str.w	r2, [r8]
 8005780:	e7ec      	b.n	800575c <_malloc_r+0xb0>
 8005782:	4623      	mov	r3, r4
 8005784:	6864      	ldr	r4, [r4, #4]
 8005786:	e7ac      	b.n	80056e2 <_malloc_r+0x36>
 8005788:	4634      	mov	r4, r6
 800578a:	6876      	ldr	r6, [r6, #4]
 800578c:	e7b4      	b.n	80056f8 <_malloc_r+0x4c>
 800578e:	4613      	mov	r3, r2
 8005790:	e7cc      	b.n	800572c <_malloc_r+0x80>
 8005792:	230c      	movs	r3, #12
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4638      	mov	r0, r7
 8005798:	f000 f80e 	bl	80057b8 <__malloc_unlock>
 800579c:	e797      	b.n	80056ce <_malloc_r+0x22>
 800579e:	6025      	str	r5, [r4, #0]
 80057a0:	e7dc      	b.n	800575c <_malloc_r+0xb0>
 80057a2:	605b      	str	r3, [r3, #4]
 80057a4:	deff      	udf	#255	; 0xff
 80057a6:	bf00      	nop
 80057a8:	200002fc 	.word	0x200002fc

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_lock+0x8>)
 80057ae:	f7ff bf0f 	b.w	80055d0 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	200002f8 	.word	0x200002f8

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f7ff bf0a 	b.w	80055d2 <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	200002f8 	.word	0x200002f8

080057c4 <__ssputs_r>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	688e      	ldr	r6, [r1, #8]
 80057ca:	461f      	mov	r7, r3
 80057cc:	42be      	cmp	r6, r7
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	4682      	mov	sl, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4690      	mov	r8, r2
 80057d6:	d82c      	bhi.n	8005832 <__ssputs_r+0x6e>
 80057d8:	898a      	ldrh	r2, [r1, #12]
 80057da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057de:	d026      	beq.n	800582e <__ssputs_r+0x6a>
 80057e0:	6965      	ldr	r5, [r4, #20]
 80057e2:	6909      	ldr	r1, [r1, #16]
 80057e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e8:	eba3 0901 	sub.w	r9, r3, r1
 80057ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f0:	1c7b      	adds	r3, r7, #1
 80057f2:	444b      	add	r3, r9
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	429d      	cmp	r5, r3
 80057f8:	bf38      	it	cc
 80057fa:	461d      	movcc	r5, r3
 80057fc:	0553      	lsls	r3, r2, #21
 80057fe:	d527      	bpl.n	8005850 <__ssputs_r+0x8c>
 8005800:	4629      	mov	r1, r5
 8005802:	f7ff ff53 	bl	80056ac <_malloc_r>
 8005806:	4606      	mov	r6, r0
 8005808:	b360      	cbz	r0, 8005864 <__ssputs_r+0xa0>
 800580a:	6921      	ldr	r1, [r4, #16]
 800580c:	464a      	mov	r2, r9
 800580e:	f000 faeb 	bl	8005de8 <memcpy>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	6126      	str	r6, [r4, #16]
 8005820:	6165      	str	r5, [r4, #20]
 8005822:	444e      	add	r6, r9
 8005824:	eba5 0509 	sub.w	r5, r5, r9
 8005828:	6026      	str	r6, [r4, #0]
 800582a:	60a5      	str	r5, [r4, #8]
 800582c:	463e      	mov	r6, r7
 800582e:	42be      	cmp	r6, r7
 8005830:	d900      	bls.n	8005834 <__ssputs_r+0x70>
 8005832:	463e      	mov	r6, r7
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	4632      	mov	r2, r6
 8005838:	4641      	mov	r1, r8
 800583a:	f000 faab 	bl	8005d94 <memmove>
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	1b9b      	subs	r3, r3, r6
 8005842:	60a3      	str	r3, [r4, #8]
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	4433      	add	r3, r6
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	2000      	movs	r0, #0
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	462a      	mov	r2, r5
 8005852:	f000 fad7 	bl	8005e04 <_realloc_r>
 8005856:	4606      	mov	r6, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d1e0      	bne.n	800581e <__ssputs_r+0x5a>
 800585c:	6921      	ldr	r1, [r4, #16]
 800585e:	4650      	mov	r0, sl
 8005860:	f7ff feb8 	bl	80055d4 <_free_r>
 8005864:	230c      	movs	r3, #12
 8005866:	f8ca 3000 	str.w	r3, [sl]
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	f04f 30ff 	mov.w	r0, #4294967295
 8005876:	e7e9      	b.n	800584c <__ssputs_r+0x88>

08005878 <_svfiprintf_r>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	4698      	mov	r8, r3
 800587e:	898b      	ldrh	r3, [r1, #12]
 8005880:	061b      	lsls	r3, r3, #24
 8005882:	b09d      	sub	sp, #116	; 0x74
 8005884:	4607      	mov	r7, r0
 8005886:	460d      	mov	r5, r1
 8005888:	4614      	mov	r4, r2
 800588a:	d50e      	bpl.n	80058aa <_svfiprintf_r+0x32>
 800588c:	690b      	ldr	r3, [r1, #16]
 800588e:	b963      	cbnz	r3, 80058aa <_svfiprintf_r+0x32>
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	f7ff ff0b 	bl	80056ac <_malloc_r>
 8005896:	6028      	str	r0, [r5, #0]
 8005898:	6128      	str	r0, [r5, #16]
 800589a:	b920      	cbnz	r0, 80058a6 <_svfiprintf_r+0x2e>
 800589c:	230c      	movs	r3, #12
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	e0d0      	b.n	8005a48 <_svfiprintf_r+0x1d0>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	616b      	str	r3, [r5, #20]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	2320      	movs	r3, #32
 80058b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b8:	2330      	movs	r3, #48	; 0x30
 80058ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a60 <_svfiprintf_r+0x1e8>
 80058be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c2:	f04f 0901 	mov.w	r9, #1
 80058c6:	4623      	mov	r3, r4
 80058c8:	469a      	mov	sl, r3
 80058ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ce:	b10a      	cbz	r2, 80058d4 <_svfiprintf_r+0x5c>
 80058d0:	2a25      	cmp	r2, #37	; 0x25
 80058d2:	d1f9      	bne.n	80058c8 <_svfiprintf_r+0x50>
 80058d4:	ebba 0b04 	subs.w	fp, sl, r4
 80058d8:	d00b      	beq.n	80058f2 <_svfiprintf_r+0x7a>
 80058da:	465b      	mov	r3, fp
 80058dc:	4622      	mov	r2, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ff6f 	bl	80057c4 <__ssputs_r>
 80058e6:	3001      	adds	r0, #1
 80058e8:	f000 80a9 	beq.w	8005a3e <_svfiprintf_r+0x1c6>
 80058ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ee:	445a      	add	r2, fp
 80058f0:	9209      	str	r2, [sp, #36]	; 0x24
 80058f2:	f89a 3000 	ldrb.w	r3, [sl]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a1 	beq.w	8005a3e <_svfiprintf_r+0x1c6>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005906:	f10a 0a01 	add.w	sl, sl, #1
 800590a:	9304      	str	r3, [sp, #16]
 800590c:	9307      	str	r3, [sp, #28]
 800590e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005912:	931a      	str	r3, [sp, #104]	; 0x68
 8005914:	4654      	mov	r4, sl
 8005916:	2205      	movs	r2, #5
 8005918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591c:	4850      	ldr	r0, [pc, #320]	; (8005a60 <_svfiprintf_r+0x1e8>)
 800591e:	f7fa fc5f 	bl	80001e0 <memchr>
 8005922:	9a04      	ldr	r2, [sp, #16]
 8005924:	b9d8      	cbnz	r0, 800595e <_svfiprintf_r+0xe6>
 8005926:	06d0      	lsls	r0, r2, #27
 8005928:	bf44      	itt	mi
 800592a:	2320      	movmi	r3, #32
 800592c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005930:	0711      	lsls	r1, r2, #28
 8005932:	bf44      	itt	mi
 8005934:	232b      	movmi	r3, #43	; 0x2b
 8005936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593a:	f89a 3000 	ldrb.w	r3, [sl]
 800593e:	2b2a      	cmp	r3, #42	; 0x2a
 8005940:	d015      	beq.n	800596e <_svfiprintf_r+0xf6>
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	4654      	mov	r4, sl
 8005946:	2000      	movs	r0, #0
 8005948:	f04f 0c0a 	mov.w	ip, #10
 800594c:	4621      	mov	r1, r4
 800594e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005952:	3b30      	subs	r3, #48	; 0x30
 8005954:	2b09      	cmp	r3, #9
 8005956:	d94d      	bls.n	80059f4 <_svfiprintf_r+0x17c>
 8005958:	b1b0      	cbz	r0, 8005988 <_svfiprintf_r+0x110>
 800595a:	9207      	str	r2, [sp, #28]
 800595c:	e014      	b.n	8005988 <_svfiprintf_r+0x110>
 800595e:	eba0 0308 	sub.w	r3, r0, r8
 8005962:	fa09 f303 	lsl.w	r3, r9, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	9304      	str	r3, [sp, #16]
 800596a:	46a2      	mov	sl, r4
 800596c:	e7d2      	b.n	8005914 <_svfiprintf_r+0x9c>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	9103      	str	r1, [sp, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfbb      	ittet	lt
 800597a:	425b      	neglt	r3, r3
 800597c:	f042 0202 	orrlt.w	r2, r2, #2
 8005980:	9307      	strge	r3, [sp, #28]
 8005982:	9307      	strlt	r3, [sp, #28]
 8005984:	bfb8      	it	lt
 8005986:	9204      	strlt	r2, [sp, #16]
 8005988:	7823      	ldrb	r3, [r4, #0]
 800598a:	2b2e      	cmp	r3, #46	; 0x2e
 800598c:	d10c      	bne.n	80059a8 <_svfiprintf_r+0x130>
 800598e:	7863      	ldrb	r3, [r4, #1]
 8005990:	2b2a      	cmp	r3, #42	; 0x2a
 8005992:	d134      	bne.n	80059fe <_svfiprintf_r+0x186>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	9203      	str	r2, [sp, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfb8      	it	lt
 80059a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059a4:	3402      	adds	r4, #2
 80059a6:	9305      	str	r3, [sp, #20]
 80059a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a70 <_svfiprintf_r+0x1f8>
 80059ac:	7821      	ldrb	r1, [r4, #0]
 80059ae:	2203      	movs	r2, #3
 80059b0:	4650      	mov	r0, sl
 80059b2:	f7fa fc15 	bl	80001e0 <memchr>
 80059b6:	b138      	cbz	r0, 80059c8 <_svfiprintf_r+0x150>
 80059b8:	9b04      	ldr	r3, [sp, #16]
 80059ba:	eba0 000a 	sub.w	r0, r0, sl
 80059be:	2240      	movs	r2, #64	; 0x40
 80059c0:	4082      	lsls	r2, r0
 80059c2:	4313      	orrs	r3, r2
 80059c4:	3401      	adds	r4, #1
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059cc:	4825      	ldr	r0, [pc, #148]	; (8005a64 <_svfiprintf_r+0x1ec>)
 80059ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059d2:	2206      	movs	r2, #6
 80059d4:	f7fa fc04 	bl	80001e0 <memchr>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d038      	beq.n	8005a4e <_svfiprintf_r+0x1d6>
 80059dc:	4b22      	ldr	r3, [pc, #136]	; (8005a68 <_svfiprintf_r+0x1f0>)
 80059de:	bb1b      	cbnz	r3, 8005a28 <_svfiprintf_r+0x1b0>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	3307      	adds	r3, #7
 80059e4:	f023 0307 	bic.w	r3, r3, #7
 80059e8:	3308      	adds	r3, #8
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ee:	4433      	add	r3, r6
 80059f0:	9309      	str	r3, [sp, #36]	; 0x24
 80059f2:	e768      	b.n	80058c6 <_svfiprintf_r+0x4e>
 80059f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059f8:	460c      	mov	r4, r1
 80059fa:	2001      	movs	r0, #1
 80059fc:	e7a6      	b.n	800594c <_svfiprintf_r+0xd4>
 80059fe:	2300      	movs	r3, #0
 8005a00:	3401      	adds	r4, #1
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	4619      	mov	r1, r3
 8005a06:	f04f 0c0a 	mov.w	ip, #10
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a10:	3a30      	subs	r2, #48	; 0x30
 8005a12:	2a09      	cmp	r2, #9
 8005a14:	d903      	bls.n	8005a1e <_svfiprintf_r+0x1a6>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0c6      	beq.n	80059a8 <_svfiprintf_r+0x130>
 8005a1a:	9105      	str	r1, [sp, #20]
 8005a1c:	e7c4      	b.n	80059a8 <_svfiprintf_r+0x130>
 8005a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a22:	4604      	mov	r4, r0
 8005a24:	2301      	movs	r3, #1
 8005a26:	e7f0      	b.n	8005a0a <_svfiprintf_r+0x192>
 8005a28:	ab03      	add	r3, sp, #12
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <_svfiprintf_r+0x1f4>)
 8005a30:	a904      	add	r1, sp, #16
 8005a32:	4638      	mov	r0, r7
 8005a34:	f3af 8000 	nop.w
 8005a38:	1c42      	adds	r2, r0, #1
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	d1d6      	bne.n	80059ec <_svfiprintf_r+0x174>
 8005a3e:	89ab      	ldrh	r3, [r5, #12]
 8005a40:	065b      	lsls	r3, r3, #25
 8005a42:	f53f af2d 	bmi.w	80058a0 <_svfiprintf_r+0x28>
 8005a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a48:	b01d      	add	sp, #116	; 0x74
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	ab03      	add	r3, sp, #12
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	462a      	mov	r2, r5
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <_svfiprintf_r+0x1f4>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f000 f879 	bl	8005b50 <_printf_i>
 8005a5e:	e7eb      	b.n	8005a38 <_svfiprintf_r+0x1c0>
 8005a60:	08005edc 	.word	0x08005edc
 8005a64:	08005ee6 	.word	0x08005ee6
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	080057c5 	.word	0x080057c5
 8005a70:	08005ee2 	.word	0x08005ee2

08005a74 <_printf_common>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	4616      	mov	r6, r2
 8005a7a:	4699      	mov	r9, r3
 8005a7c:	688a      	ldr	r2, [r1, #8]
 8005a7e:	690b      	ldr	r3, [r1, #16]
 8005a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	bfb8      	it	lt
 8005a88:	4613      	movlt	r3, r2
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a90:	4607      	mov	r7, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	b10a      	cbz	r2, 8005a9a <_printf_common+0x26>
 8005a96:	3301      	adds	r3, #1
 8005a98:	6033      	str	r3, [r6, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	0699      	lsls	r1, r3, #26
 8005a9e:	bf42      	ittt	mi
 8005aa0:	6833      	ldrmi	r3, [r6, #0]
 8005aa2:	3302      	addmi	r3, #2
 8005aa4:	6033      	strmi	r3, [r6, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d106      	bne.n	8005abc <_printf_common+0x48>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	6832      	ldr	r2, [r6, #0]
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dc26      	bgt.n	8005b0a <_printf_common+0x96>
 8005abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac0:	1e13      	subs	r3, r2, #0
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	bf18      	it	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	0692      	lsls	r2, r2, #26
 8005aca:	d42b      	bmi.n	8005b24 <_printf_common+0xb0>
 8005acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	47c0      	blx	r8
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d01e      	beq.n	8005b18 <_printf_common+0xa4>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	bf02      	ittt	eq
 8005ae6:	68e5      	ldreq	r5, [r4, #12]
 8005ae8:	6833      	ldreq	r3, [r6, #0]
 8005aea:	1aed      	subeq	r5, r5, r3
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	bf0c      	ite	eq
 8005af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af4:	2500      	movne	r5, #0
 8005af6:	4293      	cmp	r3, r2
 8005af8:	bfc4      	itt	gt
 8005afa:	1a9b      	subgt	r3, r3, r2
 8005afc:	18ed      	addgt	r5, r5, r3
 8005afe:	2600      	movs	r6, #0
 8005b00:	341a      	adds	r4, #26
 8005b02:	42b5      	cmp	r5, r6
 8005b04:	d11a      	bne.n	8005b3c <_printf_common+0xc8>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e008      	b.n	8005b1c <_printf_common+0xa8>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4638      	mov	r0, r7
 8005b12:	47c0      	blx	r8
 8005b14:	3001      	adds	r0, #1
 8005b16:	d103      	bne.n	8005b20 <_printf_common+0xac>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	3501      	adds	r5, #1
 8005b22:	e7c6      	b.n	8005ab2 <_printf_common+0x3e>
 8005b24:	18e1      	adds	r1, r4, r3
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	2030      	movs	r0, #48	; 0x30
 8005b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b2e:	4422      	add	r2, r4
 8005b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b38:	3302      	adds	r3, #2
 8005b3a:	e7c7      	b.n	8005acc <_printf_common+0x58>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d0e6      	beq.n	8005b18 <_printf_common+0xa4>
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7d9      	b.n	8005b02 <_printf_common+0x8e>
	...

08005b50 <_printf_i>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	7e0f      	ldrb	r7, [r1, #24]
 8005b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b58:	2f78      	cmp	r7, #120	; 0x78
 8005b5a:	4691      	mov	r9, r2
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	469a      	mov	sl, r3
 8005b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b66:	d807      	bhi.n	8005b78 <_printf_i+0x28>
 8005b68:	2f62      	cmp	r7, #98	; 0x62
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x32>
 8005b6c:	2f00      	cmp	r7, #0
 8005b6e:	f000 80d4 	beq.w	8005d1a <_printf_i+0x1ca>
 8005b72:	2f58      	cmp	r7, #88	; 0x58
 8005b74:	f000 80c0 	beq.w	8005cf8 <_printf_i+0x1a8>
 8005b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b80:	e03a      	b.n	8005bf8 <_printf_i+0xa8>
 8005b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b86:	2b15      	cmp	r3, #21
 8005b88:	d8f6      	bhi.n	8005b78 <_printf_i+0x28>
 8005b8a:	a101      	add	r1, pc, #4	; (adr r1, 8005b90 <_printf_i+0x40>)
 8005b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005b79 	.word	0x08005b79
 8005b9c:	08005b79 	.word	0x08005b79
 8005ba0:	08005b79 	.word	0x08005b79
 8005ba4:	08005b79 	.word	0x08005b79
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b79 	.word	0x08005b79
 8005bb0:	08005b79 	.word	0x08005b79
 8005bb4:	08005b79 	.word	0x08005b79
 8005bb8:	08005b79 	.word	0x08005b79
 8005bbc:	08005d01 	.word	0x08005d01
 8005bc0:	08005c29 	.word	0x08005c29
 8005bc4:	08005cbb 	.word	0x08005cbb
 8005bc8:	08005b79 	.word	0x08005b79
 8005bcc:	08005b79 	.word	0x08005b79
 8005bd0:	08005d23 	.word	0x08005d23
 8005bd4:	08005b79 	.word	0x08005b79
 8005bd8:	08005c29 	.word	0x08005c29
 8005bdc:	08005b79 	.word	0x08005b79
 8005be0:	08005b79 	.word	0x08005b79
 8005be4:	08005cc3 	.word	0x08005cc3
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	602a      	str	r2, [r5, #0]
 8005bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e09f      	b.n	8005d3c <_printf_i+0x1ec>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	0607      	lsls	r7, r0, #24
 8005c02:	f103 0104 	add.w	r1, r3, #4
 8005c06:	6029      	str	r1, [r5, #0]
 8005c08:	d501      	bpl.n	8005c0e <_printf_i+0xbe>
 8005c0a:	681e      	ldr	r6, [r3, #0]
 8005c0c:	e003      	b.n	8005c16 <_printf_i+0xc6>
 8005c0e:	0646      	lsls	r6, r0, #25
 8005c10:	d5fb      	bpl.n	8005c0a <_printf_i+0xba>
 8005c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	da03      	bge.n	8005c22 <_printf_i+0xd2>
 8005c1a:	232d      	movs	r3, #45	; 0x2d
 8005c1c:	4276      	negs	r6, r6
 8005c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c22:	485a      	ldr	r0, [pc, #360]	; (8005d8c <_printf_i+0x23c>)
 8005c24:	230a      	movs	r3, #10
 8005c26:	e012      	b.n	8005c4e <_printf_i+0xfe>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	1d19      	adds	r1, r3, #4
 8005c2e:	6029      	str	r1, [r5, #0]
 8005c30:	0605      	lsls	r5, r0, #24
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0xe8>
 8005c34:	681e      	ldr	r6, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0xee>
 8005c38:	0641      	lsls	r1, r0, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0xe4>
 8005c3c:	881e      	ldrh	r6, [r3, #0]
 8005c3e:	4853      	ldr	r0, [pc, #332]	; (8005d8c <_printf_i+0x23c>)
 8005c40:	2f6f      	cmp	r7, #111	; 0x6f
 8005c42:	bf0c      	ite	eq
 8005c44:	2308      	moveq	r3, #8
 8005c46:	230a      	movne	r3, #10
 8005c48:	2100      	movs	r1, #0
 8005c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c4e:	6865      	ldr	r5, [r4, #4]
 8005c50:	60a5      	str	r5, [r4, #8]
 8005c52:	2d00      	cmp	r5, #0
 8005c54:	bfa2      	ittt	ge
 8005c56:	6821      	ldrge	r1, [r4, #0]
 8005c58:	f021 0104 	bicge.w	r1, r1, #4
 8005c5c:	6021      	strge	r1, [r4, #0]
 8005c5e:	b90e      	cbnz	r6, 8005c64 <_printf_i+0x114>
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	d04b      	beq.n	8005cfc <_printf_i+0x1ac>
 8005c64:	4615      	mov	r5, r2
 8005c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c6e:	5dc7      	ldrb	r7, [r0, r7]
 8005c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c74:	4637      	mov	r7, r6
 8005c76:	42bb      	cmp	r3, r7
 8005c78:	460e      	mov	r6, r1
 8005c7a:	d9f4      	bls.n	8005c66 <_printf_i+0x116>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d10b      	bne.n	8005c98 <_printf_i+0x148>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07de      	lsls	r6, r3, #31
 8005c84:	d508      	bpl.n	8005c98 <_printf_i+0x148>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	6861      	ldr	r1, [r4, #4]
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	bfde      	ittt	le
 8005c8e:	2330      	movle	r3, #48	; 0x30
 8005c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c98:	1b52      	subs	r2, r2, r5
 8005c9a:	6122      	str	r2, [r4, #16]
 8005c9c:	f8cd a000 	str.w	sl, [sp]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	aa03      	add	r2, sp, #12
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff fee4 	bl	8005a74 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d14a      	bne.n	8005d46 <_printf_i+0x1f6>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	b004      	add	sp, #16
 8005cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f043 0320 	orr.w	r3, r3, #32
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	4833      	ldr	r0, [pc, #204]	; (8005d90 <_printf_i+0x240>)
 8005cc4:	2778      	movs	r7, #120	; 0x78
 8005cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	6829      	ldr	r1, [r5, #0]
 8005cce:	061f      	lsls	r7, r3, #24
 8005cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cd4:	d402      	bmi.n	8005cdc <_printf_i+0x18c>
 8005cd6:	065f      	lsls	r7, r3, #25
 8005cd8:	bf48      	it	mi
 8005cda:	b2b6      	uxthmi	r6, r6
 8005cdc:	07df      	lsls	r7, r3, #31
 8005cde:	bf48      	it	mi
 8005ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce4:	6029      	str	r1, [r5, #0]
 8005ce6:	bf48      	it	mi
 8005ce8:	6023      	strmi	r3, [r4, #0]
 8005cea:	b91e      	cbnz	r6, 8005cf4 <_printf_i+0x1a4>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f023 0320 	bic.w	r3, r3, #32
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	e7a7      	b.n	8005c48 <_printf_i+0xf8>
 8005cf8:	4824      	ldr	r0, [pc, #144]	; (8005d8c <_printf_i+0x23c>)
 8005cfa:	e7e4      	b.n	8005cc6 <_printf_i+0x176>
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	e7bd      	b.n	8005c7c <_printf_i+0x12c>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6826      	ldr	r6, [r4, #0]
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	1d18      	adds	r0, r3, #4
 8005d08:	6028      	str	r0, [r5, #0]
 8005d0a:	0635      	lsls	r5, r6, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0x1c4>
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0x1ca>
 8005d14:	0670      	lsls	r0, r6, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0x1c0>
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	4615      	mov	r5, r2
 8005d20:	e7bc      	b.n	8005c9c <_printf_i+0x14c>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fa fa56 	bl	80001e0 <memchr>
 8005d34:	b108      	cbz	r0, 8005d3a <_printf_i+0x1ea>
 8005d36:	1b40      	subs	r0, r0, r5
 8005d38:	6060      	str	r0, [r4, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d44:	e7aa      	b.n	8005c9c <_printf_i+0x14c>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	47d0      	blx	sl
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0ad      	beq.n	8005cb0 <_printf_i+0x160>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	079b      	lsls	r3, r3, #30
 8005d58:	d413      	bmi.n	8005d82 <_printf_i+0x232>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	bfb8      	it	lt
 8005d62:	4618      	movlt	r0, r3
 8005d64:	e7a6      	b.n	8005cb4 <_printf_i+0x164>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d09d      	beq.n	8005cb0 <_printf_i+0x160>
 8005d74:	3501      	adds	r5, #1
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	9903      	ldr	r1, [sp, #12]
 8005d7a:	1a5b      	subs	r3, r3, r1
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dcf2      	bgt.n	8005d66 <_printf_i+0x216>
 8005d80:	e7eb      	b.n	8005d5a <_printf_i+0x20a>
 8005d82:	2500      	movs	r5, #0
 8005d84:	f104 0619 	add.w	r6, r4, #25
 8005d88:	e7f5      	b.n	8005d76 <_printf_i+0x226>
 8005d8a:	bf00      	nop
 8005d8c:	08005eed 	.word	0x08005eed
 8005d90:	08005efe 	.word	0x08005efe

08005d94 <memmove>:
 8005d94:	4288      	cmp	r0, r1
 8005d96:	b510      	push	{r4, lr}
 8005d98:	eb01 0402 	add.w	r4, r1, r2
 8005d9c:	d902      	bls.n	8005da4 <memmove+0x10>
 8005d9e:	4284      	cmp	r4, r0
 8005da0:	4623      	mov	r3, r4
 8005da2:	d807      	bhi.n	8005db4 <memmove+0x20>
 8005da4:	1e43      	subs	r3, r0, #1
 8005da6:	42a1      	cmp	r1, r4
 8005da8:	d008      	beq.n	8005dbc <memmove+0x28>
 8005daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005db2:	e7f8      	b.n	8005da6 <memmove+0x12>
 8005db4:	4402      	add	r2, r0
 8005db6:	4601      	mov	r1, r0
 8005db8:	428a      	cmp	r2, r1
 8005dba:	d100      	bne.n	8005dbe <memmove+0x2a>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dc6:	e7f7      	b.n	8005db8 <memmove+0x24>

08005dc8 <_sbrk_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d06      	ldr	r5, [pc, #24]	; (8005de4 <_sbrk_r+0x1c>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	602b      	str	r3, [r5, #0]
 8005dd4:	f7fb fb24 	bl	8001420 <_sbrk>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_sbrk_r+0x1a>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_sbrk_r+0x1a>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	200002f4 	.word	0x200002f4

08005de8 <memcpy>:
 8005de8:	440a      	add	r2, r1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df0:	d100      	bne.n	8005df4 <memcpy+0xc>
 8005df2:	4770      	bx	lr
 8005df4:	b510      	push	{r4, lr}
 8005df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d1f9      	bne.n	8005df6 <memcpy+0xe>
 8005e02:	bd10      	pop	{r4, pc}

08005e04 <_realloc_r>:
 8005e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4614      	mov	r4, r2
 8005e0c:	460e      	mov	r6, r1
 8005e0e:	b921      	cbnz	r1, 8005e1a <_realloc_r+0x16>
 8005e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	4611      	mov	r1, r2
 8005e16:	f7ff bc49 	b.w	80056ac <_malloc_r>
 8005e1a:	b92a      	cbnz	r2, 8005e28 <_realloc_r+0x24>
 8005e1c:	f7ff fbda 	bl	80055d4 <_free_r>
 8005e20:	4625      	mov	r5, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	f000 f81b 	bl	8005e62 <_malloc_usable_size_r>
 8005e2c:	4284      	cmp	r4, r0
 8005e2e:	4607      	mov	r7, r0
 8005e30:	d802      	bhi.n	8005e38 <_realloc_r+0x34>
 8005e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e36:	d812      	bhi.n	8005e5e <_realloc_r+0x5a>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7ff fc36 	bl	80056ac <_malloc_r>
 8005e40:	4605      	mov	r5, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d0ed      	beq.n	8005e22 <_realloc_r+0x1e>
 8005e46:	42bc      	cmp	r4, r7
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	bf28      	it	cs
 8005e4e:	463a      	movcs	r2, r7
 8005e50:	f7ff ffca 	bl	8005de8 <memcpy>
 8005e54:	4631      	mov	r1, r6
 8005e56:	4640      	mov	r0, r8
 8005e58:	f7ff fbbc 	bl	80055d4 <_free_r>
 8005e5c:	e7e1      	b.n	8005e22 <_realloc_r+0x1e>
 8005e5e:	4635      	mov	r5, r6
 8005e60:	e7df      	b.n	8005e22 <_realloc_r+0x1e>

08005e62 <_malloc_usable_size_r>:
 8005e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e66:	1f18      	subs	r0, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bfbc      	itt	lt
 8005e6c:	580b      	ldrlt	r3, [r1, r0]
 8005e6e:	18c0      	addlt	r0, r0, r3
 8005e70:	4770      	bx	lr
	...

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
