
practica_wilkin_the_best.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c80  08005c80  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c80  08005c80  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  08005ce4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005ce4  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e72  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002561  00000000  00000000  00032f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000354a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2e  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc81  00000000  00000000  0003727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d73  00000000  00000000  00053eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000acfe3  00000000  00000000  00069c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bec  00000000  00000000  00116c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0011b844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bf8 	.word	0x08005bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005bf8 	.word	0x08005bf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b0:	f107 0208 	add.w	r2, r7, #8
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	214e      	movs	r1, #78	; 0x4e
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <lcd_send_cmd+0x5c>)
 80002be:	f002 f873 	bl	80023a8 <HAL_I2C_Master_Transmit>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000c8 	.word	0x200000c8

080002d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 030d 	orr.w	r3, r3, #13
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0309 	orr.w	r3, r3, #9
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	f043 030d 	orr.w	r3, r3, #13
 8000302:	b2db      	uxtb	r3, r3
 8000304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f043 0309 	orr.w	r3, r3, #9
 800030c:	b2db      	uxtb	r3, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	f107 0208 	add.w	r2, r7, #8
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <lcd_send_data+0x5c>)
 800031e:	f002 f843 	bl	80023a8 <HAL_I2C_Master_Transmit>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000c8 	.word	0x200000c8

08000330 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <lcd_enviar_int+0x34>)
 8000344:	4618      	mov	r0, r3
 8000346:	f004 ffb3 	bl	80052b0 <siprintf>
    lcd_put_cur(row, col);
 800034a:	6879      	ldr	r1, [r7, #4]
 800034c:	68b8      	ldr	r0, [r7, #8]
 800034e:	f000 f80b 	bl	8000368 <lcd_put_cur>
    lcd_send_string(buffer);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f862 	bl	8000420 <lcd_send_string>
}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08005c10 	.word	0x08005c10

08000368 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
    switch (row)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d003      	beq.n	8000380 <lcd_put_cur+0x18>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d005      	beq.n	800038a <lcd_put_cur+0x22>
 800037e:	e009      	b.n	8000394 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000386:	603b      	str	r3, [r7, #0]
            break;
 8000388:	e004      	b.n	8000394 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000390:	603b      	str	r3, [r7, #0]
            break;
 8000392:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff69 	bl	8000270 <lcd_send_cmd>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <lcd_init>:


void lcd_init (void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003aa:	2032      	movs	r0, #50	; 0x32
 80003ac:	f000 fd86 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b0:	2030      	movs	r0, #48	; 0x30
 80003b2:	f7ff ff5d 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003b6:	2005      	movs	r0, #5
 80003b8:	f000 fd80 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x30);
 80003bc:	2030      	movs	r0, #48	; 0x30
 80003be:	f7ff ff57 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fd7a 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x30);
 80003c8:	2030      	movs	r0, #48	; 0x30
 80003ca:	f7ff ff51 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003ce:	200a      	movs	r0, #10
 80003d0:	f000 fd74 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003d4:	2020      	movs	r0, #32
 80003d6:	f7ff ff4b 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f000 fd6e 	bl	8000ebc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003e0:	2028      	movs	r0, #40	; 0x28
 80003e2:	f7ff ff45 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fd68 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003ec:	2008      	movs	r0, #8
 80003ee:	f7ff ff3f 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003f2:	2001      	movs	r0, #1
 80003f4:	f000 fd62 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff39 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 fd5c 	bl	8000ebc <HAL_Delay>
	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fd59 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800040a:	2006      	movs	r0, #6
 800040c:	f7ff ff30 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 fd53 	bl	8000ebc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000416:	200c      	movs	r0, #12
 8000418:	f7ff ff2a 	bl	8000270 <lcd_send_cmd>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000428:	e006      	b.n	8000438 <lcd_send_string+0x18>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff4c 	bl	80002d0 <lcd_send_data>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f4      	bne.n	800042a <lcd_send_string+0xa>
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	static unsigned int Count_LCD=0,Count_KEY=0,Count_ADC=0,Count_MATRIZ=0,Count_SONIC=0;

	if(htim->Instance==htim2.Instance)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	d159      	bne.n	8000514 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{

	//LDC
	if(Count_LCD<(Time_LCD/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000460:	4b30      	ldr	r3, [pc, #192]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b31      	cmp	r3, #49	; 0x31
 8000466:	d805      	bhi.n	8000474 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Count_LCD++;
 8000468:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	e007      	b.n	8000484 <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else
	{
		Count_LCD=0;
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
		FLAG.LCD2=1;
 800047a:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800047c:	7813      	ldrb	r3, [r2, #0]
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	7013      	strb	r3, [r2, #0]
	}

	//KEYPAD
	if(Count_KEY<(Time_keypad/Timer))//Calculo para designar el tiempo(Tiempo en ms entre Tiempo de la interrupcion en ms)
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b18      	cmp	r3, #24
 800048a:	d805      	bhi.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			Count_KEY++;
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a26      	ldr	r2, [pc, #152]	; (800052c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e007      	b.n	80004a8 <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else
		{
			Count_KEY=0;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			FLAG.KEYPAD=1;
 800049e:	4a22      	ldr	r2, [pc, #136]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004a0:	7813      	ldrb	r3, [r2, #0]
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	7013      	strb	r3, [r2, #0]
		}



	//ADC
	if(Count_ADC<(Time_ADC/Timer))
 80004a8:	4b21      	ldr	r3, [pc, #132]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b09      	cmp	r3, #9
 80004ae:	d805      	bhi.n	80004bc <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		Count_ADC++;
 80004b0:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e007      	b.n	80004cc <HAL_TIM_PeriodElapsedCallback+0x80>
	}
	else
	{
		Count_ADC=0;
 80004bc:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
		FLAG.ADC=1;
 80004c2:	4a19      	ldr	r2, [pc, #100]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004c4:	7813      	ldrb	r3, [r2, #0]
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	7013      	strb	r3, [r2, #0]
	}


	//MATRIZ
	if(Count_MATRIZ<(Time_matriz/Timer))
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b4a      	cmp	r3, #74	; 0x4a
 80004d2:	d805      	bhi.n	80004e0 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Count_MATRIZ++;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a16      	ldr	r2, [pc, #88]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004dc:	6013      	str	r3, [r2, #0]
 80004de:	e007      	b.n	80004f0 <HAL_TIM_PeriodElapsedCallback+0xa4>
	}
	else
	{
		Count_MATRIZ=0;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		FLAG.MATRIZ=1;
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80004e8:	7813      	ldrb	r3, [r2, #0]
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	7013      	strb	r3, [r2, #0]
	}

	//ULTRASONICO
	if(Count_SONIC<(Time_sonic/Timer))
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b63      	cmp	r3, #99	; 0x63
 80004f6:	d805      	bhi.n	8000504 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		Count_SONIC++;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000500:	6013      	str	r3, [r2, #0]

	}



}
 8000502:	e007      	b.n	8000514 <HAL_TIM_PeriodElapsedCallback+0xc8>
		Count_SONIC=0;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		FLAG.SONIC=1;
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800050c:	7813      	ldrb	r3, [r2, #0]
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	7013      	strb	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000168 	.word	0x20000168
 8000524:	20000244 	.word	0x20000244
 8000528:	2000023c 	.word	0x2000023c
 800052c:	20000248 	.word	0x20000248
 8000530:	2000024c 	.word	0x2000024c
 8000534:	20000250 	.word	0x20000250
 8000538:	20000254 	.word	0x20000254

0800053c <Medir_ADC>:

void Medir_ADC()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <Medir_ADC+0x28>)
 8000542:	f000 fe65 	bl	8001210 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000546:	2164      	movs	r1, #100	; 0x64
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <Medir_ADC+0x28>)
 800054a:	f000 ff03 	bl	8001354 <HAL_ADC_PollForConversion>

	Medida_ADC = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <Medir_ADC+0x28>)
 8000550:	f000 ffbe 	bl	80014d0 <HAL_ADC_GetValue>
 8000554:	4603      	mov	r3, r0
 8000556:	4a04      	ldr	r2, [pc, #16]	; (8000568 <Medir_ADC+0x2c>)
 8000558:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 800055a:	4802      	ldr	r0, [pc, #8]	; (8000564 <Medir_ADC+0x28>)
 800055c:	f000 fec5 	bl	80012ea <HAL_ADC_Stop>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000078 	.word	0x20000078
 8000568:	20000240 	.word	0x20000240

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fc3e 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f83a 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fa08 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f9d6 	bl	800092c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000584:	f000 f8f0 	bl	8000768 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000588:	f000 f982 	bl	8000890 <MX_TIM2_Init>
  MX_TIM1_Init();
 800058c:	f000 f92c 	bl	80007e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0x74>)
 8000592:	f003 ff03 	bl	800439c <HAL_TIM_Base_Start_IT>

   lcd_init();
 8000596:	f7ff ff06 	bl	80003a6 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FLAG.ADC)
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <main+0x78>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d006      	beq.n	80005b6 <main+0x4a>
		  {
			  FLAG.ADC=0;
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <main+0x78>)
 80005aa:	7813      	ldrb	r3, [r2, #0]
 80005ac:	f36f 0382 	bfc	r3, #2, #1
 80005b0:	7013      	strb	r3, [r2, #0]
			  Medir_ADC();
 80005b2:	f7ff ffc3 	bl	800053c <Medir_ADC>
		  }

		  if(FLAG.LCD2)
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <main+0x78>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0ea      	beq.n	800059a <main+0x2e>
		  {
//			  lcd_clear();
			  lcd_enviar_int(Medida_ADC,0,0);
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <main+0x7c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff feaf 	bl	8000330 <lcd_enviar_int>
			  FLAG.LCD2=0;
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <main+0x78>)
 80005d4:	7813      	ldrb	r3, [r2, #0]
 80005d6:	f36f 0300 	bfc	r3, #0, #1
 80005da:	7013      	strb	r3, [r2, #0]
	  if(FLAG.ADC)
 80005dc:	e7dd      	b.n	800059a <main+0x2e>
 80005de:	bf00      	nop
 80005e0:	20000168 	.word	0x20000168
 80005e4:	2000023c 	.word	0x2000023c
 80005e8:	20000240 	.word	0x20000240

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	; 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f6:	2228      	movs	r2, #40	; 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fe78 	bl	80052f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fe6a 	bl	80052f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800061c:	2303      	movs	r3, #3
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000620:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800063c:	2300      	movs	r3, #0
 800063e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fa4b 	bl	8002ae0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000650:	f000 fa04 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000664:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fa73 	bl	8003b5c <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f9ee 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000680:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000684:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800068e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fc96 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a2:	f000 f9db 	bl	8000a5c <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3770      	adds	r7, #112	; 0x70
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000710:	2204      	movs	r2, #4
 8000712:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0xb4>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000722:	f000 fbef 	bl	8000f04 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 f996 	bl	8000a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800073c:	2307      	movs	r3, #7
 800073e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0xb4>)
 800074e:	f000 fecd 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000758:	f000 f980 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000078 	.word	0x20000078

08000768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_I2C1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_I2C1_Init+0x74>)
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x7c>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C1_Init+0x74>)
 8000780:	2201      	movs	r2, #1
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_I2C1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_I2C1_Init+0x74>)
 80007a4:	f001 fd70 	bl	8002288 <HAL_I2C_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ae:	f000 f955 	bl	8000a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_I2C1_Init+0x74>)
 80007b6:	f002 f8fb 	bl	80029b0 <HAL_I2CEx_ConfigAnalogFilter>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c0:	f000 f94c 	bl	8000a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c4:	2100      	movs	r1, #0
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_I2C1_Init+0x74>)
 80007c8:	f002 f93d 	bl	8002a46 <HAL_I2CEx_ConfigDigitalFilter>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f943 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000c8 	.word	0x200000c8
 80007e0:	40005400 	.word	0x40005400
 80007e4:	2000090e 	.word	0x2000090e

080007e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <MX_TIM1_Init+0xa4>)
 800080a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_TIM1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_TIM1_Init+0xa0>)
 800081a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_TIM1_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000832:	4815      	ldr	r0, [pc, #84]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000834:	f003 fd5a 	bl	80042ec <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800083e:	f000 f90d 	bl	8000a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000850:	f003 ff17 	bl	8004682 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800085a:	f000 f8ff 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_TIM1_Init+0xa0>)
 8000870:	f004 f900 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800087a:	f000 f8ef 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000011c 	.word	0x2000011c
 800088c:	40012c00 	.word	0x40012c00

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM2_Init+0x98>)
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_TIM2_Init+0x98>)
 80008b8:	220f      	movs	r2, #15
 80008ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM2_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_TIM2_Init+0x98>)
 80008c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_TIM2_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_TIM2_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_TIM2_Init+0x98>)
 80008d8:	f003 fd08 	bl	80042ec <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 f8bb 	bl	8000a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_TIM2_Init+0x98>)
 80008f4:	f003 fec5 	bl	8004682 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008fe:	f000 f8ad 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM2_Init+0x98>)
 8000910:	f004 f8b0 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800091a:	f000 f89f 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000168 	.word	0x20000168

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART2_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000938:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000970:	f004 f904 	bl	8004b7c <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f86f 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001b4 	.word	0x200001b4
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xc8>)
 8000a0a:	f001 fc25 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_GPIO_Init+0xcc>)
 8000a26:	f001 faa5 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0xc8>)
 8000a44:	f001 fa96 	bl	8001f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400
 8000a58:	48000800 	.word	0x48000800

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x44>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x44>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x44>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x44>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x44>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x44>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f001 fa26 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ad0:	d124      	bne.n	8000b1c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_ADC_MspInit+0x74>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f001 fa2c 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_I2C_MspInit+0x7c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d128      	bne.n	8000b9c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b80:	f001 f9f8 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8e:	61d3      	str	r3, [r2, #28]
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_I2C_MspInit+0x80>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400

08000bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_TIM_Base_MspInit+0x68>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d10c      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bda:	e018      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201c      	movs	r0, #28
 8000c04:	f001 f97f 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c08:	201c      	movs	r0, #28
 8000c0a:	f001 f998 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f001 f970 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f8c4 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM2_IRQHandler+0x10>)
 8000cfe:	f003 fba1 	bl	8004444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000168 	.word	0x20000168

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f004 fae0 	bl	8005300 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20004000 	.word	0x20004000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000258 	.word	0x20000258
 8000d74:	200003a8 	.word	0x200003a8

08000d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ffea 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f004 fa9f 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fbcd 	bl	800056c <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de0:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 8000de4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000de8:	200003a8 	.word	0x200003a8

08000dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x28>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x28>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f001 f875 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fe2c 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40022000 	.word	0x40022000

08000e1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 f88d 	bl	8001f5a <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f001 f855 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000025c 	.word	0x2000025c

08000ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2000025c 	.word	0x2000025c

08000ebc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09a      	sub	sp, #104	; 0x68
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e169      	b.n	80011f8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d176      	bne.n	8001024 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d152      	bne.n	8000fe4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fda9 	bl	8000ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d13b      	bne.n	8000fe4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fdd3 	bl	8001b18 <ADC_Disable>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d12f      	bne.n	8000fe4 <HAL_ADC_Init+0xe0>
 8000f84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d12b      	bne.n	8000fe4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f94:	f023 0302 	bic.w	r3, r3, #2
 8000f98:	f043 0202 	orr.w	r2, r3, #2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fbe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc0:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <HAL_ADC_Init+0x2fc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a8f      	ldr	r2, [pc, #572]	; (8001204 <HAL_ADC_Init+0x300>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9a      	lsrs	r2, r3, #18
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd6:	e002      	b.n	8000fde <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f9      	bne.n	8000fd8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001000:	d110      	bne.n	8001024 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f023 0312 	bic.w	r3, r3, #18
 800100a:	f043 0210 	orr.w	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 80d6 	bne.w	80011de <HAL_ADC_Init+0x2da>
 8001032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 80d1 	bne.w	80011de <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 80c9 	bne.w	80011de <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001054:	f043 0202 	orr.w	r2, r3, #2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105c:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <HAL_ADC_Init+0x304>)
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <HAL_ADC_Init+0x180>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_ADC_Init+0x180>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_ADC_Init+0x182>
 8001084:	2300      	movs	r3, #0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d11c      	bne.n	80010c4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800108a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800108c:	2b00      	cmp	r3, #0
 800108e:	d010      	beq.n	80010b2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_ADC_Init+0x1a8>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_Init+0x1a8>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_ADC_Init+0x1aa>
 80010ac:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d108      	bne.n	80010c4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	431a      	orrs	r2, r3
 80010c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e5b      	ldrb	r3, [r3, #25]
 80010c8:	035b      	lsls	r3, r3, #13
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010ce:	2a01      	cmp	r2, #1
 80010d0:	d002      	beq.n	80010d8 <HAL_ADC_Init+0x1d4>
 80010d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d6:	e000      	b.n	80010da <HAL_ADC_Init+0x1d6>
 80010d8:	2200      	movs	r2, #0
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010ea:	4313      	orrs	r3, r2
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d11b      	bne.n	8001130 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e5b      	ldrb	r3, [r3, #25]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	3b01      	subs	r3, #1
 8001106:	045a      	lsls	r2, r3, #17
 8001108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800110a:	4313      	orrs	r3, r2
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
 8001112:	e00d      	b.n	8001130 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800111c:	f043 0220 	orr.w	r2, r3, #32
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	2b01      	cmp	r3, #1
 8001136:	d007      	beq.n	8001148 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	4313      	orrs	r3, r2
 8001142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001144:	4313      	orrs	r3, r2
 8001146:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d114      	bne.n	8001180 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001164:	f023 0302 	bic.w	r3, r3, #2
 8001168:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e1b      	ldrb	r3, [r3, #24]
 800116e:	039a      	lsls	r2, r3, #14
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4313      	orrs	r3, r2
 800117a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800117c:	4313      	orrs	r3, r2
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_ADC_Init+0x308>)
 8001188:	4013      	ands	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001190:	430b      	orrs	r3, r1
 8001192:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10c      	bne.n	80011b6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f023 010f 	bic.w	r1, r3, #15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
 80011b4:	e007      	b.n	80011c6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020f 	bic.w	r2, r2, #15
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f023 0303 	bic.w	r3, r3, #3
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
 80011dc:	e00a      	b.n	80011f4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f023 0312 	bic.w	r3, r3, #18
 80011e6:	f043 0210 	orr.w	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3768      	adds	r7, #104	; 0x68
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83
 8001208:	50000300 	.word	0x50000300
 800120c:	fff0c007 	.word	0xfff0c007

08001210 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d158      	bne.n	80012dc <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_ADC_Start+0x28>
 8001234:	2302      	movs	r3, #2
 8001236:	e054      	b.n	80012e2 <HAL_ADC_Start+0xd2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fc05 	bl	8001a50 <ADC_Enable>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d140      	bne.n	80012d2 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001286:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129a:	d106      	bne.n	80012aa <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f023 0206 	bic.w	r2, r3, #6
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	221c      	movs	r2, #28
 80012be:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0204 	orr.w	r2, r2, #4
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e006      	b.n	80012e0 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80012da:	e001      	b.n	80012e0 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012dc:	2302      	movs	r3, #2
 80012de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_Stop+0x1a>
 8001300:	2302      	movs	r3, #2
 8001302:	e023      	b.n	800134c <HAL_ADC_Stop+0x62>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800130c:	216c      	movs	r1, #108	; 0x6c
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fc68 	bl	8001be4 <ADC_ConversionStop>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d111      	bne.n	8001342 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fbfa 	bl	8001b18 <ADC_Disable>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d102      	bne.n	8001370 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800136a:	2308      	movs	r3, #8
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e02e      	b.n	80013ce <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_ADC_PollForConversion+0x178>)
 8001372:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	2b00      	cmp	r3, #0
 800137e:	d112      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11d      	bne.n	80013ca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f043 0220 	orr.w	r2, r3, #32
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e08d      	b.n	80014c2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07b      	b.n	80014c2 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80013d6:	f7ff fd65 	bl	8000ea4 <HAL_GetTick>
 80013da:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013dc:	e021      	b.n	8001422 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d01d      	beq.n	8001422 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_ADC_PollForConversion+0xa8>
 80013ec:	f7ff fd5a 	bl	8000ea4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d212      	bcs.n	8001422 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10b      	bne.n	8001422 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f043 0204 	orr.w	r2, r3, #4
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e04f      	b.n	80014c2 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0d6      	beq.n	80013de <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001446:	2b00      	cmp	r3, #0
 8001448:	d131      	bne.n	80014ae <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001450:	2b00      	cmp	r3, #0
 8001452:	d12c      	bne.n	80014ae <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b08      	cmp	r3, #8
 8001460:	d125      	bne.n	80014ae <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d112      	bne.n	8001496 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d112      	bne.n	80014ae <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	e00b      	b.n	80014ae <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f043 0220 	orr.w	r2, r3, #32
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	50000300 	.word	0x50000300

080014d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b09b      	sub	sp, #108	; 0x6c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ADC_ConfigChannel+0x22>
 800150a:	2302      	movs	r3, #2
 800150c:	e295      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x54e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 8279 	bne.w	8001a18 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d81c      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	461a      	mov	r2, r3
 8001542:	231f      	movs	r3, #31
 8001544:	4093      	lsls	r3, r2
 8001546:	43db      	mvns	r3, r3
 8001548:	4019      	ands	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
 8001566:	e063      	b.n	8001630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d81e      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	3b1e      	subs	r3, #30
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	4019      	ands	r1, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	3b1e      	subs	r3, #30
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
 80015ac:	e040      	b.n	8001630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b0e      	cmp	r3, #14
 80015b4:	d81e      	bhi.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	3b3c      	subs	r3, #60	; 0x3c
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4019      	ands	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	3b3c      	subs	r3, #60	; 0x3c
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
 80015f2:	e01d      	b.n	8001630 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	3b5a      	subs	r3, #90	; 0x5a
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	4019      	ands	r1, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	3b5a      	subs	r3, #90	; 0x5a
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80e5 	bne.w	800180a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d91c      	bls.n	8001682 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6999      	ldr	r1, [r3, #24]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	3b1e      	subs	r3, #30
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	4019      	ands	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6898      	ldr	r0, [r3, #8]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	3b1e      	subs	r3, #30
 8001674:	fa00 f203 	lsl.w	r2, r0, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	e019      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6959      	ldr	r1, [r3, #20]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	2207      	movs	r2, #7
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	4019      	ands	r1, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	08db      	lsrs	r3, r3, #3
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d84f      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0x28c>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <HAL_ADC_ConfigChannel+0x1f4>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001713 	.word	0x08001713
 80016e8:	08001735 	.word	0x08001735
 80016ec:	08001757 	.word	0x08001757
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_ADC_ConfigChannel+0x468>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	0691      	lsls	r1, r2, #26
 8001700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001702:	430a      	orrs	r2, r1
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800170e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001710:	e07b      	b.n	800180a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001718:	4b8e      	ldr	r3, [pc, #568]	; (8001954 <HAL_ADC_ConfigChannel+0x468>)
 800171a:	4013      	ands	r3, r2
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	0691      	lsls	r1, r2, #26
 8001722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001724:	430a      	orrs	r2, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001730:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001732:	e06a      	b.n	800180a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800173a:	4b86      	ldr	r3, [pc, #536]	; (8001954 <HAL_ADC_ConfigChannel+0x468>)
 800173c:	4013      	ands	r3, r2
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	0691      	lsls	r1, r2, #26
 8001744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001746:	430a      	orrs	r2, r1
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001752:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001754:	e059      	b.n	800180a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800175c:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <HAL_ADC_ConfigChannel+0x468>)
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	0691      	lsls	r1, r2, #26
 8001766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001768:	430a      	orrs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001774:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001776:	e048      	b.n	800180a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800179a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	069b      	lsls	r3, r3, #26
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017be:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	069b      	lsls	r3, r3, #26
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d107      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017e2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	069b      	lsls	r3, r3, #26
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001806:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001808:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_ADC_ConfigChannel+0x33e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x33e>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_ADC_ConfigChannel+0x340>
 800182a:	2300      	movs	r3, #0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 80fe 	bne.w	8001a2e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d00f      	beq.n	800185a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43da      	mvns	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	400a      	ands	r2, r1
 8001854:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001858:	e049      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b09      	cmp	r3, #9
 800187a:	d91c      	bls.n	80018b6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6999      	ldr	r1, [r3, #24]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	3b1b      	subs	r3, #27
 800188e:	2207      	movs	r2, #7
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6898      	ldr	r0, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	3b1b      	subs	r3, #27
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	619a      	str	r2, [r3, #24]
 80018b4:	e01b      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6959      	ldr	r1, [r3, #20]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	2207      	movs	r2, #7
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4019      	ands	r1, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6898      	ldr	r0, [r3, #8]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_ADC_ConfigChannel+0x46c>)
 80018f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d014      	beq.n	8001930 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800190a:	2b11      	cmp	r3, #17
 800190c:	d105      	bne.n	800191a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800190e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800191e:	2b12      	cmp	r3, #18
 8001920:	f040 8085 	bne.w	8001a2e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d17e      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10c      	bne.n	800195c <HAL_ADC_ConfigChannel+0x470>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_ADC_ConfigChannel+0x470>
 8001950:	2301      	movs	r3, #1
 8001952:	e004      	b.n	800195e <HAL_ADC_ConfigChannel+0x472>
 8001954:	83fff000 	.word	0x83fff000
 8001958:	50000300 	.word	0x50000300
 800195c:	2300      	movs	r3, #0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d150      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001962:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d010      	beq.n	800198a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x498>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x498>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_ADC_ConfigChannel+0x49a>
 8001984:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13c      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b10      	cmp	r3, #16
 8001990:	d11d      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x4e2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199a:	d118      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800199c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_ADC_ConfigChannel+0x55c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_ADC_ConfigChannel+0x560>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9a      	lsrs	r2, r3, #18
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019be:	e002      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f9      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019cc:	e02e      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d10b      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x502>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019de:	d106      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019ec:	e01e      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d11a      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80019f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a02:	e013      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a16:	e00a      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	376c      	adds	r7, #108	; 0x6c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <ADC_Enable+0x2c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <ADC_Enable+0x2c>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <ADC_Enable+0x2e>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d143      	bne.n	8001b0a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <ADC_Enable+0xc4>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e02f      	b.n	8001b0c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001abc:	f7ff f9f2 	bl	8000ea4 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ac2:	e01b      	b.n	8001afc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ac4:	f7ff f9ee 	bl	8000ea4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d914      	bls.n	8001afc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d00d      	beq.n	8001afc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f043 0210 	orr.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e007      	b.n	8001b0c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d1dc      	bne.n	8001ac4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	8000003f 	.word	0x8000003f

08001b18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <ADC_Disable+0x2c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <ADC_Disable+0x2c>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <ADC_Disable+0x2e>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d047      	beq.n	8001bda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030d 	and.w	r3, r3, #13
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10f      	bne.n	8001b78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0202 	orr.w	r2, r2, #2
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f998 	bl	8000ea4 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b76:	e029      	b.n	8001bcc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e023      	b.n	8001bdc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b94:	f7ff f986 	bl	8000ea4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d914      	bls.n	8001bcc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10d      	bne.n	8001bcc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0210 	orr.w	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e007      	b.n	8001bdc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d0dc      	beq.n	8001b94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 809b 	beq.w	8001d40 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c18:	d12a      	bne.n	8001c70 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d126      	bne.n	8001c70 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d122      	bne.n	8001c70 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001c2e:	e014      	b.n	8001c5a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <ADC_ConversionStop+0x168>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d90d      	bls.n	8001c54 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e076      	b.n	8001d42 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3301      	adds	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d1e3      	bne.n	8001c30 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b60      	cmp	r3, #96	; 0x60
 8001c74:	d015      	beq.n	8001ca2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d10e      	bne.n	8001ca2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0210 	orr.w	r2, r2, #16
 8001ca0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d015      	beq.n	8001cd4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d10e      	bne.n	8001cd4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b60      	cmp	r3, #96	; 0x60
 8001cd8:	d005      	beq.n	8001ce6 <ADC_ConversionStop+0x102>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b6c      	cmp	r3, #108	; 0x6c
 8001cde:	d105      	bne.n	8001cec <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	617b      	str	r3, [r7, #20]
        break;
 8001ce4:	e005      	b.n	8001cf2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	617b      	str	r3, [r7, #20]
        break;
 8001cea:	e002      	b.n	8001cf2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001cec:	2304      	movs	r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
        break;
 8001cf0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001cf2:	f7ff f8d7 	bl	8000ea4 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001cf8:	e01b      	b.n	8001d32 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001cfa:	f7ff f8d3 	bl	8000ea4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b0b      	cmp	r3, #11
 8001d06:	d914      	bls.n	8001d32 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f043 0210 	orr.w	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e007      	b.n	8001d42 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1dc      	bne.n	8001cfa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	000993ff 	.word	0x000993ff

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e14e      	b.n	8002222 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8140 	beq.w	800221c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x40>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 809a 	beq.w	800221c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a54      	ldr	r2, [pc, #336]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x1e0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a46      	ldr	r2, [pc, #280]	; (8002248 <HAL_GPIO_Init+0x2d4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x1dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_GPIO_Init+0x2d8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1d8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_GPIO_Init+0x1d4>
 8002144:	2303      	movs	r3, #3
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 8002148:	2305      	movs	r3, #5
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x1e2>
 8002154:	2300      	movs	r3, #0
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002166:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002198:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f aea9 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	48000400 	.word	0x48000400
 800224c:	48000800 	.word	0x48000800
 8002250:	48000c00 	.word	0x48000c00
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e081      	b.n	800239e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fc3a 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e006      	b.n	8002310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800230e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d104      	bne.n	8002322 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69d9      	ldr	r1, [r3, #28]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	817b      	strh	r3, [r7, #10]
 80023b8:	4613      	mov	r3, r2
 80023ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	f040 80da 	bne.w	800257e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x30>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0d3      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd60 	bl	8000ea4 <HAL_GetTick>
 80023e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2319      	movs	r3, #25
 80023ec:	2201      	movs	r2, #1
 80023ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8f0 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0be      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2221      	movs	r2, #33	; 0x21
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2210      	movs	r2, #16
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	893a      	ldrh	r2, [r7, #8]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2bff      	cmp	r3, #255	; 0xff
 8002432:	d90e      	bls.n	8002452 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_I2C_Master_Transmit+0x1e0>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa7e 	bl	800294c <I2C_TransferConfig>
 8002450:	e06c      	b.n	800252c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_I2C_Master_Transmit+0x1e0>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fa6d 	bl	800294c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002472:	e05b      	b.n	800252c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	6a39      	ldr	r1, [r7, #32]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f8fc 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e07b      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d034      	beq.n	800252c <HAL_I2C_Master_Transmit+0x184>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d130      	bne.n	800252c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f87f 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e04d      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d90e      	bls.n	800250c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fa21 	bl	800294c <I2C_TransferConfig>
 800250a:	e00f      	b.n	800252c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa10 	bl	800294c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d19e      	bne.n	8002474 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8e2 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e01a      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2220      	movs	r2, #32
 8002550:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_I2C_Master_Transmit+0x1e4>)
 800255e:	400b      	ands	r3, r1
 8002560:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	80002000 	.word	0x80002000
 800258c:	fe00e800 	.word	0xfe00e800

08002590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d007      	beq.n	80025cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	619a      	str	r2, [r3, #24]
  }
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e8:	e031      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d02d      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7fe fc57 	bl	8000ea4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d122      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	429a      	cmp	r2, r3
 8002624:	d113      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0be      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002682:	e033      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f87f 	bl	800278c <I2C_IsErrorOccurred>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e031      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d025      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7fe fc00 	bl	8000ea4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11a      	bne.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d013      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1c4      	bne.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002710:	e02f      	b.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f838 	bl	800278c <I2C_IsErrorOccurred>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02d      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe fbbd 	bl	8000ea4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11a      	bne.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b20      	cmp	r3, #32
 8002748:	d013      	beq.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d1c8      	bne.n	8002712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d068      	beq.n	800288a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c0:	e049      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d045      	beq.n	8002856 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe fb6b 	bl	8000ea4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_IsErrorOccurred+0x54>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13a      	bne.n	8002856 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002802:	d121      	bne.n	8002848 <I2C_IsErrorOccurred+0xbc>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280a:	d01d      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b20      	cmp	r3, #32
 8002810:	d01a      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002820:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002822:	f7fe fb3f 	bl	8000ea4 <HAL_GetTick>
 8002826:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002828:	e00e      	b.n	8002848 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800282a:	f7fe fb3b 	bl	8000ea4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b19      	cmp	r3, #25
 8002836:	d907      	bls.n	8002848 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002846:	e006      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d1e9      	bne.n	800282a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d003      	beq.n	800286c <I2C_IsErrorOccurred+0xe0>
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0aa      	beq.n	80027c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800286c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fe45 	bl	8002590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <I2C_IsErrorOccurred+0x1bc>)
 8002912:	400b      	ands	r3, r1
 8002914:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800293a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	4613      	mov	r3, r2
 800295c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002964:	7a7b      	ldrb	r3, [r7, #9]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4313      	orrs	r3, r2
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800297a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	0d5b      	lsrs	r3, r3, #21
 8002986:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <I2C_TransferConfig+0x60>)
 800298c:	430b      	orrs	r3, r1
 800298e:	43db      	mvns	r3, r3
 8002990:	ea02 0103 	and.w	r1, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	03ff63ff 	.word	0x03ff63ff

080029b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d138      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e032      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d139      	bne.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e033      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2224      	movs	r2, #36	; 0x24
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f001 b823 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 817d 	beq.w	8002e16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b1c:	4bbc      	ldr	r3, [pc, #752]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d00c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b28:	4bb9      	ldr	r3, [pc, #740]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d15c      	bne.n	8002bee <HAL_RCC_OscConfig+0x10e>
 8002b34:	4bb6      	ldr	r3, [pc, #728]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d155      	bne.n	8002bee <HAL_RCC_OscConfig+0x10e>
 8002b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0x94>
 8002b6e:	4ba8      	ldr	r3, [pc, #672]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e015      	b.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b9c:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ba8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bb8:	fab2 f282 	clz	r2, r2
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f002 021f 	and.w	r2, r2, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 811f 	beq.w	8002e14 <HAL_RCC_OscConfig+0x334>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8116 	bne.w	8002e14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f000 bfaf 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12e>
 8002c00:	4b83      	ldr	r3, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a82      	ldr	r2, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e036      	b.n	8002c7c <HAL_RCC_OscConfig+0x19c>
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x158>
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7b      	ldr	r2, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a78      	ldr	r2, [pc, #480]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e021      	b.n	8002c7c <HAL_RCC_OscConfig+0x19c>
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x184>
 8002c4a:	4b71      	ldr	r3, [pc, #452]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a70      	ldr	r2, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x19c>
 8002c64:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a69      	ldr	r2, [pc, #420]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a66      	ldr	r2, [pc, #408]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c7c:	4b64      	ldr	r3, [pc, #400]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f023 020f 	bic.w	r2, r3, #15
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	495f      	ldr	r1, [pc, #380]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d059      	beq.n	8002d5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f8fd 	bl	8000ea4 <HAL_GetTick>
 8002caa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f8f8 	bl	8000ea4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d902      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f000 bf43 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 8002cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x218>
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	e015      	b.n	8002d24 <HAL_RCC_OscConfig+0x244>
 8002cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d30:	fa92 f2a2 	rbit	r2, r2
 8002d34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f042 0220 	orr.w	r2, r2, #32
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	f002 021f 	and.w	r2, r2, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ab      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x1d0>
 8002d58:	e05d      	b.n	8002e16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f8a3 	bl	8000ea4 <HAL_GetTick>
 8002d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe f89e 	bl	8000ea4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d902      	bls.n	8002d7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f000 bee9 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 8002d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x2cc>
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	e015      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2f8>
 8002dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dc8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ddc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002de0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002de4:	fa92 f2a2 	rbit	r2, r2
 8002de8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002dec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ab      	bne.n	8002d64 <HAL_RCC_OscConfig+0x284>
 8002e0c:	e003      	b.n	8002e16 <HAL_RCC_OscConfig+0x336>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 817d 	beq.w	8003126 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e2c:	4ba6      	ldr	r3, [pc, #664]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e38:	4ba3      	ldr	r3, [pc, #652]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d172      	bne.n	8002f2a <HAL_RCC_OscConfig+0x44a>
 8002e44:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d16c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x44a>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3a0>
 8002e7a:	4b93      	ldr	r3, [pc, #588]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e013      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c8>
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e92:	2302      	movs	r3, #2
 8002e94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ea4:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002eae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002eba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x410>
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f000 be2e 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4b75      	ldr	r3, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	21f8      	movs	r1, #248	; 0xf8
 8002f06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f0e:	fa91 f1a1 	rbit	r1, r1
 8002f12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f1a:	fab1 f181 	clz	r1, r1
 8002f1e:	b2c9      	uxtb	r1, r1
 8002f20:	408b      	lsls	r3, r1
 8002f22:	4969      	ldr	r1, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f28:	e0fd      	b.n	8003126 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8088 	beq.w	800304c <HAL_RCC_OscConfig+0x56c>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	461a      	mov	r2, r3
 8002f64:	2301      	movs	r3, #1
 8002f66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fd ff9c 	bl	8000ea4 <HAL_GetTick>
 8002f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fd ff97 	bl	8000ea4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f000 bde2 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4d8>
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e013      	b.n	8002fe0 <HAL_RCC_OscConfig+0x500>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fdc:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002fe6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ff2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ff6:	fab2 f282 	clz	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f042 0220 	orr.w	r2, r2, #32
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f002 021f 	and.w	r2, r2, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0af      	beq.n	8002f72 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	21f8      	movs	r1, #248	; 0xf8
 8003028:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003030:	fa91 f1a1 	rbit	r1, r1
 8003034:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003038:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800303c:	fab1 f181 	clz	r1, r1
 8003040:	b2c9      	uxtb	r1, r1
 8003042:	408b      	lsls	r3, r1
 8003044:	4920      	ldr	r1, [pc, #128]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
 800304a:	e06c      	b.n	8003126 <HAL_RCC_OscConfig+0x646>
 800304c:	2301      	movs	r3, #1
 800304e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800305e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800306c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd ff14 	bl	8000ea4 <HAL_GetTick>
 800307c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fd ff0f 	bl	8000ea4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d902      	bls.n	8003098 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	f000 bd5a 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d104      	bne.n	80030cc <HAL_RCC_OscConfig+0x5ec>
 80030c2:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCC_OscConfig+0x5e8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0x614>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	2302      	movs	r3, #2
 80030ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030f0:	4bc8      	ldr	r3, [pc, #800]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2202      	movs	r2, #2
 80030f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003106:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800310a:	fab2 f282 	clz	r2, r2
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	f042 0220 	orr.w	r2, r2, #32
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	f002 021f 	and.w	r2, r2, #31
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ad      	bne.n	8003082 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8110 	beq.w	800335c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d079      	beq.n	8003240 <HAL_RCC_OscConfig+0x760>
 800314c:	2301      	movs	r3, #1
 800314e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800315e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4bab      	ldr	r3, [pc, #684]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	461a      	mov	r2, r3
 8003172:	2301      	movs	r3, #1
 8003174:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fd fe95 	bl	8000ea4 <HAL_GetTick>
 800317a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fd fe90 	bl	8000ea4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d902      	bls.n	8003196 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	f000 bcdb 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 8003196:	2302      	movs	r3, #2
 8003198:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031b0:	2202      	movs	r2, #2
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031d4:	2202      	movs	r2, #2
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f0:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031fc:	2102      	movs	r1, #2
 80031fe:	6019      	str	r1, [r3, #0]
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	fa93 f1a3 	rbit	r1, r3
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003216:	6019      	str	r1, [r3, #0]
  return result;
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0a0      	beq.n	8003180 <HAL_RCC_OscConfig+0x6a0>
 800323e:	e08d      	b.n	800335c <HAL_RCC_OscConfig+0x87c>
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003262:	601a      	str	r2, [r3, #0]
  return result;
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800326c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x938>)
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fd fe0f 	bl	8000ea4 <HAL_GetTick>
 8003286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7fd fe0a 	bl	8000ea4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d902      	bls.n	80032a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	f000 bc55 	b.w	8003b4c <HAL_RCC_OscConfig+0x106c>
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032f2:	2202      	movs	r2, #2
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800330c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 8003310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800331a:	2102      	movs	r1, #2
 800331c:	6019      	str	r1, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f1a3 	rbit	r1, r3
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003334:	6019      	str	r1, [r3, #0]
  return result;
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d197      	bne.n	800328c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 81a1 	beq.w	80036b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	61d3      	str	r3, [r2, #28]
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x93c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11a      	bne.n	80033f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x93c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x93c>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fd6b 	bl	8000ea4 <HAL_GetTick>
 80033ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	e009      	b.n	80033e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fd fd66 	bl	8000ea4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b64      	cmp	r3, #100	; 0x64
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e3b1      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x93c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_OscConfig+0x940>
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a02      	ldr	r2, [pc, #8]	; (8003414 <HAL_RCC_OscConfig+0x934>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6213      	str	r3, [r2, #32]
 8003410:	e03c      	b.n	800348c <HAL_RCC_OscConfig+0x9ac>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	10908120 	.word	0x10908120
 800341c:	40007000 	.word	0x40007000
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCC_OscConfig+0x96a>
 8003430:	4bc1      	ldr	r3, [pc, #772]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4ac0      	ldr	r2, [pc, #768]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	4bbe      	ldr	r3, [pc, #760]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4abd      	ldr	r2, [pc, #756]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	6213      	str	r3, [r2, #32]
 8003448:	e020      	b.n	800348c <HAL_RCC_OscConfig+0x9ac>
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x994>
 800345a:	4bb7      	ldr	r3, [pc, #732]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4ab6      	ldr	r2, [pc, #728]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	4bb4      	ldr	r3, [pc, #720]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4ab3      	ldr	r2, [pc, #716]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0x9ac>
 8003474:	4bb0      	ldr	r3, [pc, #704]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4aaf      	ldr	r2, [pc, #700]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	4bad      	ldr	r3, [pc, #692]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4aac      	ldr	r2, [pc, #688]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003486:	f023 0304 	bic.w	r3, r3, #4
 800348a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8081 	beq.w	80035a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fd fd01 	bl	8000ea4 <HAL_GetTick>
 80034a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fcfc 	bl	8000ea4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e345      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003506:	601a      	str	r2, [r3, #0]
  return result;
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003510:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d102      	bne.n	800352c <HAL_RCC_OscConfig+0xa4c>
 8003526:	4b84      	ldr	r3, [pc, #528]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	e013      	b.n	8003554 <HAL_RCC_OscConfig+0xa74>
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	4b79      	ldr	r3, [pc, #484]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003558:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800355c:	2102      	movs	r1, #2
 800355e:	6011      	str	r1, [r2, #0]
 8003560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003564:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	fa92 f1a2 	rbit	r1, r2
 800356e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003572:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003576:	6011      	str	r1, [r2, #0]
  return result;
 8003578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d084      	beq.n	80034a8 <HAL_RCC_OscConfig+0x9c8>
 800359e:	e07f      	b.n	80036a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fd fc80 	bl	8000ea4 <HAL_GetTick>
 80035a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	e00b      	b.n	80035c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fd fc7b 	bl	8000ea4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e2c4      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035ca:	2202      	movs	r2, #2
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035ee:	2202      	movs	r2, #2
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f2a3 	rbit	r2, r3
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003608:	601a      	str	r2, [r3, #0]
  return result;
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003612:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d102      	bne.n	800362e <HAL_RCC_OscConfig+0xb4e>
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	e013      	b.n	8003656 <HAL_RCC_OscConfig+0xb76>
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003636:	2202      	movs	r2, #2
 8003638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800365a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800365e:	2102      	movs	r1, #2
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003666:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fa92 f1a2 	rbit	r1, r2
 8003670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003674:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003678:	6011      	str	r1, [r2, #0]
  return result;
 800367a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d184      	bne.n	80035aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a22      	ldr	r2, [pc, #136]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8242 	beq.w	8003b4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_RCC_OscConfig+0xc58>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	f000 8213 	beq.w	8003afa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f040 8162 	bne.w	80039aa <HAL_RCC_OscConfig+0xeca>
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800370a:	601a      	str	r2, [r3, #0]
  return result;
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003714:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fbba 	bl	8000ea4 <HAL_GetTick>
 8003730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003734:	e00c      	b.n	8003750 <HAL_RCC_OscConfig+0xc70>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fd fbb2 	bl	8000ea4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1fd      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	fa93 f2a3 	rbit	r2, r3
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003774:	601a      	str	r2, [r3, #0]
  return result;
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800377e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0xcba>
 8003794:	4bb0      	ldr	r3, [pc, #704]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	e027      	b.n	80037ea <HAL_RCC_OscConfig+0xd0a>
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	4b9c      	ldr	r3, [pc, #624]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037f6:	6011      	str	r1, [r2, #0]
 80037f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	fa92 f1a2 	rbit	r1, r2
 8003806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800380e:	6011      	str	r1, [r2, #0]
  return result;
 8003810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003814:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	fab2 f282 	clz	r2, r2
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f042 0220 	orr.w	r2, r2, #32
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f002 021f 	and.w	r2, r2, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d182      	bne.n	800373c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	430b      	orrs	r3, r1
 8003858:	497f      	ldr	r1, [pc, #508]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800386a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003882:	601a      	str	r2, [r3, #0]
  return result;
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800388c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	2301      	movs	r3, #1
 80038a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd fafe 	bl	8000ea4 <HAL_GetTick>
 80038a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ac:	e009      	b.n	80038c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd faf9 	bl	8000ea4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e144      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_OscConfig+0xe2c>
 8003906:	4b54      	ldr	r3, [pc, #336]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e027      	b.n	800395c <HAL_RCC_OscConfig+0xe7c>
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fa93 f2a3 	rbit	r2, r3
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800393a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003960:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003964:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800396e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	fa92 f1a2 	rbit	r1, r2
 8003978:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003980:	6011      	str	r1, [r2, #0]
  return result;
 8003982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003986:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d082      	beq.n	80038ae <HAL_RCC_OscConfig+0xdce>
 80039a8:	e0cf      	b.n	8003b4a <HAL_RCC_OscConfig+0x106a>
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039ce:	601a      	str	r2, [r3, #0]
  return result;
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	461a      	mov	r2, r3
 80039ec:	2300      	movs	r3, #0
 80039ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fd fa58 	bl	8000ea4 <HAL_GetTick>
 80039f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f8:	e009      	b.n	8003a0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fd fa53 	bl	8000ea4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e09e      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a32:	601a      	str	r2, [r3, #0]
  return result;
 8003a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d104      	bne.n	8003a5c <HAL_RCC_OscConfig+0xf7c>
 8003a52:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <HAL_RCC_OscConfig+0xf78>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e029      	b.n	8003aac <HAL_RCC_OscConfig+0xfcc>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x1078>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ab8:	6011      	str	r1, [r2, #0]
 8003aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003abe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	fa92 f1a2 	rbit	r1, r2
 8003ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003acc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ad0:	6011      	str	r1, [r2, #0]
  return result;
 8003ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f042 0220 	orr.w	r2, r2, #32
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f002 021f 	and.w	r2, r2, #31
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d180      	bne.n	80039fa <HAL_RCC_OscConfig+0xf1a>
 8003af8:	e027      	b.n	8003b4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01e      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCC_OscConfig+0x1078>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09e      	sub	sp, #120	; 0x78
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e162      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b90      	ldr	r3, [pc, #576]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d910      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b8d      	ldr	r3, [pc, #564]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	498b      	ldr	r1, [pc, #556]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b89      	ldr	r3, [pc, #548]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e14a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	497f      	ldr	r1, [pc, #508]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80dc 	beq.w	8003d88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d13c      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xf6>
 8003bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xa6>
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e00f      	b.n	8003c22 <HAL_RCC_ClockConfig+0xc6>
 8003c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
 8003c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1e:	4b67      	ldr	r3, [pc, #412]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c32:	fab2 f282 	clz	r2, r2
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	f042 0220 	orr.w	r2, r2, #32
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f002 021f 	and.w	r2, r2, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f202 	lsl.w	r2, r1, r2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d17b      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0f3      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d13c      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x178>
 8003c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c7e:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
 8003c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
 8003c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cac:	fa92 f2a2 	rbit	r2, r2
 8003cb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0220 	orr.w	r2, r2, #32
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d13a      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b2      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x1a0>
 8003cf6:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e00d      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1bc>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	2302      	movs	r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2202      	movs	r2, #2
 8003d1a:	61ba      	str	r2, [r7, #24]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	fa92 f2a2 	rbit	r2, r2
 8003d22:	617a      	str	r2, [r7, #20]
  return result;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f042 0220 	orr.w	r2, r2, #32
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	f002 021f 	and.w	r2, r2, #31
 8003d36:	2101      	movs	r1, #1
 8003d38:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e079      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	491a      	ldr	r1, [pc, #104]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fd f8a4 	bl	8000ea4 <HAL_GetTick>
 8003d5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fd f8a0 	bl	8000ea4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e061      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d214      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4906      	ldr	r1, [pc, #24]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e040      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4912      	ldr	r1, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dfe:	f000 f829 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	22f0      	movs	r2, #240	; 0xf0
 8003e0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	fa92 f2a2 	rbit	r2, r2
 8003e16:	60fa      	str	r2, [r7, #12]
  return result;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	fab2 f282 	clz	r2, r2
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	40d3      	lsrs	r3, r2
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x2ec>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	fa21 f303 	lsr.w	r3, r1, r3
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_ClockConfig+0x2f0>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCC_ClockConfig+0x2f4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fff2 	bl	8000e1c <HAL_InitTick>
  
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3778      	adds	r7, #120	; 0x78
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08005c14 	.word	0x08005c14
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	20000004 	.word	0x20000004

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b08b      	sub	sp, #44	; 0x2c
 8003e58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e6e:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x30>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x36>
 8003e82:	e03c      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e86:	623b      	str	r3, [r7, #32]
      break;
 8003e88:	e03c      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	fa92 f2a2 	rbit	r2, r2
 8003e9c:	607a      	str	r2, [r7, #4]
  return result;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	fab2 f282 	clz	r2, r2
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	40d3      	lsrs	r3, r2
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eaa:	5cd3      	ldrb	r3, [r2, r3]
 8003eac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	fa92 f2a2 	rbit	r2, r2
 8003ec0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	40d3      	lsrs	r3, r2
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	e004      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	623b      	str	r3, [r7, #32]
      break;
 8003efc:	e002      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f00:	623b      	str	r3, [r7, #32]
      break;
 8003f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	372c      	adds	r7, #44	; 0x2c
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	007a1200 	.word	0x007a1200
 8003f1c:	08005c2c 	.word	0x08005c2c
 8003f20:	08005c3c 	.word	0x08005c3c
 8003f24:	003d0900 	.word	0x003d0900

08003f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000000 	.word	0x20000000

08003f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f46:	f7ff ffef 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	fa92 f2a2 	rbit	r2, r2
 8003f60:	603a      	str	r2, [r7, #0]
  return result;
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	40d3      	lsrs	r3, r2
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08005c24 	.word	0x08005c24

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f8a:	f7ff ffcd 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	603a      	str	r2, [r7, #0]
  return result;
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	40d3      	lsrs	r3, r2
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08005c24 	.word	0x08005c24

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b092      	sub	sp, #72	; 0x48
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80d4 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fec:	4b4e      	ldr	r3, [pc, #312]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10e      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
 8004004:	4b48      	ldr	r3, [pc, #288]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b45      	ldr	r3, [pc, #276]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d118      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004022:	4b42      	ldr	r3, [pc, #264]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a41      	ldr	r2, [pc, #260]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402e:	f7fc ff39 	bl	8000ea4 <HAL_GetTick>
 8004032:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	e008      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004036:	f7fc ff35 	bl	8000ea4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e14b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004054:	4b34      	ldr	r3, [pc, #208]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8084 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004070:	429a      	cmp	r2, r3
 8004072:	d07c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	461a      	mov	r2, r3
 800409e:	2301      	movs	r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	461a      	mov	r2, r3
 80040c2:	2300      	movs	r3, #0
 80040c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d04b      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fc fee5 	bl	8000ea4 <HAL_GetTick>
 80040da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fc fee1 	bl	8000ea4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0f5      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80040f4:	2302      	movs	r3, #2
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	2302      	movs	r3, #2
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	61fb      	str	r3, [r7, #28]
  return result;
 800410c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d108      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004122:	4b01      	ldr	r3, [pc, #4]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	e00d      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	10908100 	.word	0x10908100
 8004134:	2302      	movs	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	4b69      	ldr	r3, [pc, #420]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2202      	movs	r2, #2
 8004146:	613a      	str	r2, [r7, #16]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	60fa      	str	r2, [r7, #12]
  return result;
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	fab2 f282 	clz	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f002 021f 	and.w	r2, r2, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0b7      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800416e:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	495b      	ldr	r1, [pc, #364]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a56      	ldr	r2, [pc, #344]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a0:	4b51      	ldr	r3, [pc, #324]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f023 0203 	bic.w	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494e      	ldr	r1, [pc, #312]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f023 0210 	bic.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4947      	ldr	r1, [pc, #284]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041dc:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	493f      	ldr	r1, [pc, #252]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041fa:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f023 0220 	bic.w	r2, r3, #32
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4938      	ldr	r1, [pc, #224]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004208:	4313      	orrs	r3, r2
 800420a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4930      	ldr	r1, [pc, #192]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004226:	4313      	orrs	r3, r2
 8004228:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4929      	ldr	r1, [pc, #164]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4921      	ldr	r1, [pc, #132]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	491a      	ldr	r1, [pc, #104]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004280:	4313      	orrs	r3, r2
 8004282:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	4912      	ldr	r1, [pc, #72]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	490b      	ldr	r1, [pc, #44]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3748      	adds	r7, #72	; 0x48
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e049      	b.n	8004392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fc4c 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fa9a 	bl	8004864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d001      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e03b      	b.n	800442c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_TIM_Base_Start_IT+0x9c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x4e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d004      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x4e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIM_Base_Start_IT+0xa0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d115      	bne.n	8004416 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <HAL_TIM_Base_Start_IT+0xa4>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d015      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x8c>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004402:	d011      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	e008      	b.n	8004428 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e000      	b.n	800442a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40014000 	.word	0x40014000
 8004440:	00010007 	.word	0x00010007

08004444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9ce 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9c0 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9d1 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0204 	mvn.w	r2, #4
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9a4 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f996 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9a7 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b08      	cmp	r3, #8
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0208 	mvn.w	r2, #8
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f97a 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f96c 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f97d 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b10      	cmp	r3, #16
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0210 	mvn.w	r2, #16
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2208      	movs	r2, #8
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f950 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f942 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f953 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fb ff42 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fab0 	bl	8004b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d10e      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d107      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 faa3 	bl	8004b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f901 	bl	8004850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0220 	mvn.w	r2, #32
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa63 	bl	8004b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_TIM_ConfigClockSource+0x1c>
 800469a:	2302      	movs	r3, #2
 800469c:	e0b6      	b.n	800480c <HAL_TIM_ConfigClockSource+0x18a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	d03e      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xd8>
 80046dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e0:	f200 8087 	bhi.w	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	f000 8086 	beq.w	80047f8 <HAL_TIM_ConfigClockSource+0x176>
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d87f      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 80046f2:	2b70      	cmp	r3, #112	; 0x70
 80046f4:	d01a      	beq.n	800472c <HAL_TIM_ConfigClockSource+0xaa>
 80046f6:	2b70      	cmp	r3, #112	; 0x70
 80046f8:	d87b      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 80046fa:	2b60      	cmp	r3, #96	; 0x60
 80046fc:	d050      	beq.n	80047a0 <HAL_TIM_ConfigClockSource+0x11e>
 80046fe:	2b60      	cmp	r3, #96	; 0x60
 8004700:	d877      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 8004702:	2b50      	cmp	r3, #80	; 0x50
 8004704:	d03c      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0xfe>
 8004706:	2b50      	cmp	r3, #80	; 0x50
 8004708:	d873      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d058      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0x13e>
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d86f      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 8004712:	2b30      	cmp	r3, #48	; 0x30
 8004714:	d064      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004716:	2b30      	cmp	r3, #48	; 0x30
 8004718:	d86b      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 800471a:	2b20      	cmp	r3, #32
 800471c:	d060      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0x15e>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d867      	bhi.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d05c      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004726:	2b10      	cmp	r3, #16
 8004728:	d05a      	beq.n	80047e0 <HAL_TIM_ConfigClockSource+0x15e>
 800472a:	e062      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	f000 f97a 	bl	8004a34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800474e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
      break;
 8004758:	e04f      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476a:	f000 f963 	bl	8004a34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477c:	609a      	str	r2, [r3, #8]
      break;
 800477e:	e03c      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478c:	461a      	mov	r2, r3
 800478e:	f000 f8d7 	bl	8004940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2150      	movs	r1, #80	; 0x50
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f930 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 800479e:	e02c      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ac:	461a      	mov	r2, r3
 80047ae:	f000 f8f6 	bl	800499e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2160      	movs	r1, #96	; 0x60
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f920 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80047be:	e01c      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047cc:	461a      	mov	r2, r3
 80047ce:	f000 f8b7 	bl	8004940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2140      	movs	r1, #64	; 0x40
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f910 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80047de:	e00c      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 f907 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80047f0:	e003      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      break;
 80047f6:	e000      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <TIM_Base_SetConfig+0xcc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0x20>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004882:	d108      	bne.n	8004896 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <TIM_Base_SetConfig+0xcc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <TIM_Base_SetConfig+0x5a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d00b      	beq.n	80048be <TIM_Base_SetConfig+0x5a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <TIM_Base_SetConfig+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_Base_SetConfig+0x5a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a21      	ldr	r2, [pc, #132]	; (8004938 <TIM_Base_SetConfig+0xd4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_Base_SetConfig+0x5a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <TIM_Base_SetConfig+0xd8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <TIM_Base_SetConfig+0xcc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0xb0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a0d      	ldr	r2, [pc, #52]	; (8004934 <TIM_Base_SetConfig+0xd0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0xb0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <TIM_Base_SetConfig+0xd4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0b      	ldr	r2, [pc, #44]	; (800493c <TIM_Base_SetConfig+0xd8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d103      	bne.n	800491c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	615a      	str	r2, [r3, #20]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800

08004940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f023 030a 	bic.w	r3, r3, #10
 800497c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499e:	b480      	push	{r7}
 80049a0:	b087      	sub	sp, #28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0210 	bic.w	r2, r3, #16
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	031b      	lsls	r3, r3, #12
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f043 0307 	orr.w	r3, r3, #7
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	021a      	lsls	r2, r3, #8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004abc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d004      	beq.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e040      	b.n	8004c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc f83e 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f82c 	bl	8004c18 <UART_SetConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f956 	bl	8004e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9dd 	bl	8004fc8 <UART_CheckIdleState>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8a      	ldr	r3, [pc, #552]	; (8004e6c <UART_SetConfig+0x254>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a78      	ldr	r2, [pc, #480]	; (8004e70 <UART_SetConfig+0x258>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d120      	bne.n	8004cd6 <UART_SetConfig+0xbe>
 8004c94:	4b77      	ldr	r3, [pc, #476]	; (8004e74 <UART_SetConfig+0x25c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d817      	bhi.n	8004cd0 <UART_SetConfig+0xb8>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x90>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cc5 	.word	0x08004cc5
 8004cb0:	08004ccb 	.word	0x08004ccb
 8004cb4:	08004cbf 	.word	0x08004cbf
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e01d      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e01a      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e017      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e014      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e011      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <UART_SetConfig+0x260>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <UART_SetConfig+0xce>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e009      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a64      	ldr	r2, [pc, #400]	; (8004e7c <UART_SetConfig+0x264>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d102      	bne.n	8004cf6 <UART_SetConfig+0xde>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e001      	b.n	8004cfa <UART_SetConfig+0xe2>
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d02:	d15a      	bne.n	8004dba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d04:	7ffb      	ldrb	r3, [r7, #31]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d827      	bhi.n	8004d5a <UART_SetConfig+0x142>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0xf8>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	08004d5b 	.word	0x08004d5b
 8004d20:	08004d4b 	.word	0x08004d4b
 8004d24:	08004d5b 	.word	0x08004d5b
 8004d28:	08004d5b 	.word	0x08004d5b
 8004d2c:	08004d5b 	.word	0x08004d5b
 8004d30:	08004d53 	.word	0x08004d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7ff f904 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 8004d38:	61b8      	str	r0, [r7, #24]
        break;
 8004d3a:	e013      	b.n	8004d64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7ff f922 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8004d40:	61b8      	str	r0, [r7, #24]
        break;
 8004d42:	e00f      	b.n	8004d64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d44:	4b4e      	ldr	r3, [pc, #312]	; (8004e80 <UART_SetConfig+0x268>)
 8004d46:	61bb      	str	r3, [r7, #24]
        break;
 8004d48:	e00c      	b.n	8004d64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4a:	f7ff f883 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8004d4e:	61b8      	str	r0, [r7, #24]
        break;
 8004d50:	e008      	b.n	8004d64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d56:	61bb      	str	r3, [r7, #24]
        break;
 8004d58:	e004      	b.n	8004d64 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	77bb      	strb	r3, [r7, #30]
        break;
 8004d62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d074      	beq.n	8004e54 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	005a      	lsls	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	d916      	bls.n	8004db4 <UART_SetConfig+0x19c>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d212      	bcs.n	8004db4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f023 030f 	bic.w	r3, r3, #15
 8004d96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	89fb      	ldrh	r3, [r7, #14]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	89fa      	ldrh	r2, [r7, #14]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e04f      	b.n	8004e54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77bb      	strb	r3, [r7, #30]
 8004db8:	e04c      	b.n	8004e54 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d828      	bhi.n	8004e12 <UART_SetConfig+0x1fa>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <UART_SetConfig+0x1b0>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004dfd 	.word	0x08004dfd
 8004dd4:	08004e13 	.word	0x08004e13
 8004dd8:	08004e03 	.word	0x08004e03
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e13 	.word	0x08004e13
 8004de4:	08004e13 	.word	0x08004e13
 8004de8:	08004e0b 	.word	0x08004e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dec:	f7ff f8a8 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 8004df0:	61b8      	str	r0, [r7, #24]
        break;
 8004df2:	e013      	b.n	8004e1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df4:	f7ff f8c6 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8004df8:	61b8      	str	r0, [r7, #24]
        break;
 8004dfa:	e00f      	b.n	8004e1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <UART_SetConfig+0x268>)
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e00c      	b.n	8004e1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7ff f827 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8004e06:	61b8      	str	r0, [r7, #24]
        break;
 8004e08:	e008      	b.n	8004e1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	61bb      	str	r3, [r7, #24]
        break;
 8004e10:	e004      	b.n	8004e1c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	77bb      	strb	r3, [r7, #30]
        break;
 8004e1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085a      	lsrs	r2, r3, #1
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d909      	bls.n	8004e50 <UART_SetConfig+0x238>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e42:	d205      	bcs.n	8004e50 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	e001      	b.n	8004e54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e60:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	efff69f3 	.word	0xefff69f3
 8004e70:	40013800 	.word	0x40013800
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40004400 	.word	0x40004400
 8004e7c:	40004800 	.word	0x40004800
 8004e80:	007a1200 	.word	0x007a1200

08004e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d10a      	bne.n	8004f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b098      	sub	sp, #96	; 0x60
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd8:	f7fb ff64 	bl	8000ea4 <HAL_GetTick>
 8004fdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d12e      	bne.n	800504a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f88c 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d021      	beq.n	800504a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501a:	653b      	str	r3, [r7, #80]	; 0x50
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005024:	647b      	str	r3, [r7, #68]	; 0x44
 8005026:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800502a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e062      	b.n	8005110 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d149      	bne.n	80050ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f856 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d03c      	beq.n	80050ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	623b      	str	r3, [r7, #32]
   return(result);
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3308      	adds	r3, #8
 80050c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c4:	61fa      	str	r2, [r7, #28]
 80050c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	617b      	str	r3, [r7, #20]
   return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e5      	bne.n	80050a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e011      	b.n	8005110 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3758      	adds	r7, #88	; 0x58
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	e049      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d045      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fb feb7 	bl	8000ea4 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <UART_WaitOnFlagUntilTimeout+0x30>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e048      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d031      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d110      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2208      	movs	r2, #8
 800516e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f838 	bl	80051e6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2208      	movs	r2, #8
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e029      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005198:	d111      	bne.n	80051be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f81e 	bl	80051e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e00f      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4013      	ands	r3, r2
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	bf0c      	ite	eq
 80051ce:	2301      	moveq	r3, #1
 80051d0:	2300      	movne	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d0a6      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b095      	sub	sp, #84	; 0x54
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
 800520e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3308      	adds	r3, #8
 800523e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	2b01      	cmp	r3, #1
 800525a:	d118      	bne.n	800528e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	60bb      	str	r3, [r7, #8]
   return(result);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0310 	bic.w	r3, r3, #16
 8005270:	647b      	str	r3, [r7, #68]	; 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	613b      	str	r3, [r7, #16]
   return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052a2:	bf00      	nop
 80052a4:	3754      	adds	r7, #84	; 0x54
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <siprintf>:
 80052b0:	b40e      	push	{r1, r2, r3}
 80052b2:	b500      	push	{lr}
 80052b4:	b09c      	sub	sp, #112	; 0x70
 80052b6:	ab1d      	add	r3, sp, #116	; 0x74
 80052b8:	9002      	str	r0, [sp, #8]
 80052ba:	9006      	str	r0, [sp, #24]
 80052bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052c0:	4809      	ldr	r0, [pc, #36]	; (80052e8 <siprintf+0x38>)
 80052c2:	9107      	str	r1, [sp, #28]
 80052c4:	9104      	str	r1, [sp, #16]
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <siprintf+0x3c>)
 80052c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052cc:	9105      	str	r1, [sp, #20]
 80052ce:	6800      	ldr	r0, [r0, #0]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	a902      	add	r1, sp, #8
 80052d4:	f000 f992 	bl	80055fc <_svfiprintf_r>
 80052d8:	9b02      	ldr	r3, [sp, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	b01c      	add	sp, #112	; 0x70
 80052e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e4:	b003      	add	sp, #12
 80052e6:	4770      	bx	lr
 80052e8:	20000058 	.word	0x20000058
 80052ec:	ffff0208 	.word	0xffff0208

080052f0 <memset>:
 80052f0:	4402      	add	r2, r0
 80052f2:	4603      	mov	r3, r0
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d100      	bne.n	80052fa <memset+0xa>
 80052f8:	4770      	bx	lr
 80052fa:	f803 1b01 	strb.w	r1, [r3], #1
 80052fe:	e7f9      	b.n	80052f4 <memset+0x4>

08005300 <__errno>:
 8005300:	4b01      	ldr	r3, [pc, #4]	; (8005308 <__errno+0x8>)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000058 	.word	0x20000058

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f000 fc6a 	bl	8005bf8 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	08005c80 	.word	0x08005c80
 8005348:	08005c80 	.word	0x08005c80
 800534c:	08005c80 	.word	0x08005c80
 8005350:	08005c84 	.word	0x08005c84

08005354 <__retarget_lock_acquire_recursive>:
 8005354:	4770      	bx	lr

08005356 <__retarget_lock_release_recursive>:
 8005356:	4770      	bx	lr

08005358 <_free_r>:
 8005358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800535a:	2900      	cmp	r1, #0
 800535c:	d044      	beq.n	80053e8 <_free_r+0x90>
 800535e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005362:	9001      	str	r0, [sp, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f1a1 0404 	sub.w	r4, r1, #4
 800536a:	bfb8      	it	lt
 800536c:	18e4      	addlt	r4, r4, r3
 800536e:	f000 f8df 	bl	8005530 <__malloc_lock>
 8005372:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <_free_r+0x94>)
 8005374:	9801      	ldr	r0, [sp, #4]
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	b933      	cbnz	r3, 8005388 <_free_r+0x30>
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	6014      	str	r4, [r2, #0]
 800537e:	b003      	add	sp, #12
 8005380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005384:	f000 b8da 	b.w	800553c <__malloc_unlock>
 8005388:	42a3      	cmp	r3, r4
 800538a:	d908      	bls.n	800539e <_free_r+0x46>
 800538c:	6825      	ldr	r5, [r4, #0]
 800538e:	1961      	adds	r1, r4, r5
 8005390:	428b      	cmp	r3, r1
 8005392:	bf01      	itttt	eq
 8005394:	6819      	ldreq	r1, [r3, #0]
 8005396:	685b      	ldreq	r3, [r3, #4]
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	e7ed      	b.n	800537a <_free_r+0x22>
 800539e:	461a      	mov	r2, r3
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	b10b      	cbz	r3, 80053a8 <_free_r+0x50>
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d9fa      	bls.n	800539e <_free_r+0x46>
 80053a8:	6811      	ldr	r1, [r2, #0]
 80053aa:	1855      	adds	r5, r2, r1
 80053ac:	42a5      	cmp	r5, r4
 80053ae:	d10b      	bne.n	80053c8 <_free_r+0x70>
 80053b0:	6824      	ldr	r4, [r4, #0]
 80053b2:	4421      	add	r1, r4
 80053b4:	1854      	adds	r4, r2, r1
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	d1e0      	bne.n	800537e <_free_r+0x26>
 80053bc:	681c      	ldr	r4, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	6053      	str	r3, [r2, #4]
 80053c2:	440c      	add	r4, r1
 80053c4:	6014      	str	r4, [r2, #0]
 80053c6:	e7da      	b.n	800537e <_free_r+0x26>
 80053c8:	d902      	bls.n	80053d0 <_free_r+0x78>
 80053ca:	230c      	movs	r3, #12
 80053cc:	6003      	str	r3, [r0, #0]
 80053ce:	e7d6      	b.n	800537e <_free_r+0x26>
 80053d0:	6825      	ldr	r5, [r4, #0]
 80053d2:	1961      	adds	r1, r4, r5
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf04      	itt	eq
 80053d8:	6819      	ldreq	r1, [r3, #0]
 80053da:	685b      	ldreq	r3, [r3, #4]
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	bf04      	itt	eq
 80053e0:	1949      	addeq	r1, r1, r5
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	6054      	str	r4, [r2, #4]
 80053e6:	e7ca      	b.n	800537e <_free_r+0x26>
 80053e8:	b003      	add	sp, #12
 80053ea:	bd30      	pop	{r4, r5, pc}
 80053ec:	200003a0 	.word	0x200003a0

080053f0 <sbrk_aligned>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4e0e      	ldr	r6, [pc, #56]	; (800542c <sbrk_aligned+0x3c>)
 80053f4:	460c      	mov	r4, r1
 80053f6:	6831      	ldr	r1, [r6, #0]
 80053f8:	4605      	mov	r5, r0
 80053fa:	b911      	cbnz	r1, 8005402 <sbrk_aligned+0x12>
 80053fc:	f000 fba6 	bl	8005b4c <_sbrk_r>
 8005400:	6030      	str	r0, [r6, #0]
 8005402:	4621      	mov	r1, r4
 8005404:	4628      	mov	r0, r5
 8005406:	f000 fba1 	bl	8005b4c <_sbrk_r>
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	d00a      	beq.n	8005424 <sbrk_aligned+0x34>
 800540e:	1cc4      	adds	r4, r0, #3
 8005410:	f024 0403 	bic.w	r4, r4, #3
 8005414:	42a0      	cmp	r0, r4
 8005416:	d007      	beq.n	8005428 <sbrk_aligned+0x38>
 8005418:	1a21      	subs	r1, r4, r0
 800541a:	4628      	mov	r0, r5
 800541c:	f000 fb96 	bl	8005b4c <_sbrk_r>
 8005420:	3001      	adds	r0, #1
 8005422:	d101      	bne.n	8005428 <sbrk_aligned+0x38>
 8005424:	f04f 34ff 	mov.w	r4, #4294967295
 8005428:	4620      	mov	r0, r4
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	200003a4 	.word	0x200003a4

08005430 <_malloc_r>:
 8005430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005434:	1ccd      	adds	r5, r1, #3
 8005436:	f025 0503 	bic.w	r5, r5, #3
 800543a:	3508      	adds	r5, #8
 800543c:	2d0c      	cmp	r5, #12
 800543e:	bf38      	it	cc
 8005440:	250c      	movcc	r5, #12
 8005442:	2d00      	cmp	r5, #0
 8005444:	4607      	mov	r7, r0
 8005446:	db01      	blt.n	800544c <_malloc_r+0x1c>
 8005448:	42a9      	cmp	r1, r5
 800544a:	d905      	bls.n	8005458 <_malloc_r+0x28>
 800544c:	230c      	movs	r3, #12
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	2600      	movs	r6, #0
 8005452:	4630      	mov	r0, r6
 8005454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005458:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800552c <_malloc_r+0xfc>
 800545c:	f000 f868 	bl	8005530 <__malloc_lock>
 8005460:	f8d8 3000 	ldr.w	r3, [r8]
 8005464:	461c      	mov	r4, r3
 8005466:	bb5c      	cbnz	r4, 80054c0 <_malloc_r+0x90>
 8005468:	4629      	mov	r1, r5
 800546a:	4638      	mov	r0, r7
 800546c:	f7ff ffc0 	bl	80053f0 <sbrk_aligned>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	4604      	mov	r4, r0
 8005474:	d155      	bne.n	8005522 <_malloc_r+0xf2>
 8005476:	f8d8 4000 	ldr.w	r4, [r8]
 800547a:	4626      	mov	r6, r4
 800547c:	2e00      	cmp	r6, #0
 800547e:	d145      	bne.n	800550c <_malloc_r+0xdc>
 8005480:	2c00      	cmp	r4, #0
 8005482:	d048      	beq.n	8005516 <_malloc_r+0xe6>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	4631      	mov	r1, r6
 8005488:	4638      	mov	r0, r7
 800548a:	eb04 0903 	add.w	r9, r4, r3
 800548e:	f000 fb5d 	bl	8005b4c <_sbrk_r>
 8005492:	4581      	cmp	r9, r0
 8005494:	d13f      	bne.n	8005516 <_malloc_r+0xe6>
 8005496:	6821      	ldr	r1, [r4, #0]
 8005498:	1a6d      	subs	r5, r5, r1
 800549a:	4629      	mov	r1, r5
 800549c:	4638      	mov	r0, r7
 800549e:	f7ff ffa7 	bl	80053f0 <sbrk_aligned>
 80054a2:	3001      	adds	r0, #1
 80054a4:	d037      	beq.n	8005516 <_malloc_r+0xe6>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	442b      	add	r3, r5
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	f8d8 3000 	ldr.w	r3, [r8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d038      	beq.n	8005526 <_malloc_r+0xf6>
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	42a2      	cmp	r2, r4
 80054b8:	d12b      	bne.n	8005512 <_malloc_r+0xe2>
 80054ba:	2200      	movs	r2, #0
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	e00f      	b.n	80054e0 <_malloc_r+0xb0>
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	1b52      	subs	r2, r2, r5
 80054c4:	d41f      	bmi.n	8005506 <_malloc_r+0xd6>
 80054c6:	2a0b      	cmp	r2, #11
 80054c8:	d917      	bls.n	80054fa <_malloc_r+0xca>
 80054ca:	1961      	adds	r1, r4, r5
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	6025      	str	r5, [r4, #0]
 80054d0:	bf18      	it	ne
 80054d2:	6059      	strne	r1, [r3, #4]
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	bf08      	it	eq
 80054d8:	f8c8 1000 	streq.w	r1, [r8]
 80054dc:	5162      	str	r2, [r4, r5]
 80054de:	604b      	str	r3, [r1, #4]
 80054e0:	4638      	mov	r0, r7
 80054e2:	f104 060b 	add.w	r6, r4, #11
 80054e6:	f000 f829 	bl	800553c <__malloc_unlock>
 80054ea:	f026 0607 	bic.w	r6, r6, #7
 80054ee:	1d23      	adds	r3, r4, #4
 80054f0:	1af2      	subs	r2, r6, r3
 80054f2:	d0ae      	beq.n	8005452 <_malloc_r+0x22>
 80054f4:	1b9b      	subs	r3, r3, r6
 80054f6:	50a3      	str	r3, [r4, r2]
 80054f8:	e7ab      	b.n	8005452 <_malloc_r+0x22>
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	6862      	ldr	r2, [r4, #4]
 80054fe:	d1dd      	bne.n	80054bc <_malloc_r+0x8c>
 8005500:	f8c8 2000 	str.w	r2, [r8]
 8005504:	e7ec      	b.n	80054e0 <_malloc_r+0xb0>
 8005506:	4623      	mov	r3, r4
 8005508:	6864      	ldr	r4, [r4, #4]
 800550a:	e7ac      	b.n	8005466 <_malloc_r+0x36>
 800550c:	4634      	mov	r4, r6
 800550e:	6876      	ldr	r6, [r6, #4]
 8005510:	e7b4      	b.n	800547c <_malloc_r+0x4c>
 8005512:	4613      	mov	r3, r2
 8005514:	e7cc      	b.n	80054b0 <_malloc_r+0x80>
 8005516:	230c      	movs	r3, #12
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4638      	mov	r0, r7
 800551c:	f000 f80e 	bl	800553c <__malloc_unlock>
 8005520:	e797      	b.n	8005452 <_malloc_r+0x22>
 8005522:	6025      	str	r5, [r4, #0]
 8005524:	e7dc      	b.n	80054e0 <_malloc_r+0xb0>
 8005526:	605b      	str	r3, [r3, #4]
 8005528:	deff      	udf	#255	; 0xff
 800552a:	bf00      	nop
 800552c:	200003a0 	.word	0x200003a0

08005530 <__malloc_lock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_lock+0x8>)
 8005532:	f7ff bf0f 	b.w	8005354 <__retarget_lock_acquire_recursive>
 8005536:	bf00      	nop
 8005538:	2000039c 	.word	0x2000039c

0800553c <__malloc_unlock>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__malloc_unlock+0x8>)
 800553e:	f7ff bf0a 	b.w	8005356 <__retarget_lock_release_recursive>
 8005542:	bf00      	nop
 8005544:	2000039c 	.word	0x2000039c

08005548 <__ssputs_r>:
 8005548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	688e      	ldr	r6, [r1, #8]
 800554e:	461f      	mov	r7, r3
 8005550:	42be      	cmp	r6, r7
 8005552:	680b      	ldr	r3, [r1, #0]
 8005554:	4682      	mov	sl, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4690      	mov	r8, r2
 800555a:	d82c      	bhi.n	80055b6 <__ssputs_r+0x6e>
 800555c:	898a      	ldrh	r2, [r1, #12]
 800555e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005562:	d026      	beq.n	80055b2 <__ssputs_r+0x6a>
 8005564:	6965      	ldr	r5, [r4, #20]
 8005566:	6909      	ldr	r1, [r1, #16]
 8005568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800556c:	eba3 0901 	sub.w	r9, r3, r1
 8005570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005574:	1c7b      	adds	r3, r7, #1
 8005576:	444b      	add	r3, r9
 8005578:	106d      	asrs	r5, r5, #1
 800557a:	429d      	cmp	r5, r3
 800557c:	bf38      	it	cc
 800557e:	461d      	movcc	r5, r3
 8005580:	0553      	lsls	r3, r2, #21
 8005582:	d527      	bpl.n	80055d4 <__ssputs_r+0x8c>
 8005584:	4629      	mov	r1, r5
 8005586:	f7ff ff53 	bl	8005430 <_malloc_r>
 800558a:	4606      	mov	r6, r0
 800558c:	b360      	cbz	r0, 80055e8 <__ssputs_r+0xa0>
 800558e:	6921      	ldr	r1, [r4, #16]
 8005590:	464a      	mov	r2, r9
 8005592:	f000 faeb 	bl	8005b6c <memcpy>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	6126      	str	r6, [r4, #16]
 80055a4:	6165      	str	r5, [r4, #20]
 80055a6:	444e      	add	r6, r9
 80055a8:	eba5 0509 	sub.w	r5, r5, r9
 80055ac:	6026      	str	r6, [r4, #0]
 80055ae:	60a5      	str	r5, [r4, #8]
 80055b0:	463e      	mov	r6, r7
 80055b2:	42be      	cmp	r6, r7
 80055b4:	d900      	bls.n	80055b8 <__ssputs_r+0x70>
 80055b6:	463e      	mov	r6, r7
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	4632      	mov	r2, r6
 80055bc:	4641      	mov	r1, r8
 80055be:	f000 faab 	bl	8005b18 <memmove>
 80055c2:	68a3      	ldr	r3, [r4, #8]
 80055c4:	1b9b      	subs	r3, r3, r6
 80055c6:	60a3      	str	r3, [r4, #8]
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	4433      	add	r3, r6
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	2000      	movs	r0, #0
 80055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d4:	462a      	mov	r2, r5
 80055d6:	f000 fad7 	bl	8005b88 <_realloc_r>
 80055da:	4606      	mov	r6, r0
 80055dc:	2800      	cmp	r0, #0
 80055de:	d1e0      	bne.n	80055a2 <__ssputs_r+0x5a>
 80055e0:	6921      	ldr	r1, [r4, #16]
 80055e2:	4650      	mov	r0, sl
 80055e4:	f7ff feb8 	bl	8005358 <_free_r>
 80055e8:	230c      	movs	r3, #12
 80055ea:	f8ca 3000 	str.w	r3, [sl]
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	e7e9      	b.n	80055d0 <__ssputs_r+0x88>

080055fc <_svfiprintf_r>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	4698      	mov	r8, r3
 8005602:	898b      	ldrh	r3, [r1, #12]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	b09d      	sub	sp, #116	; 0x74
 8005608:	4607      	mov	r7, r0
 800560a:	460d      	mov	r5, r1
 800560c:	4614      	mov	r4, r2
 800560e:	d50e      	bpl.n	800562e <_svfiprintf_r+0x32>
 8005610:	690b      	ldr	r3, [r1, #16]
 8005612:	b963      	cbnz	r3, 800562e <_svfiprintf_r+0x32>
 8005614:	2140      	movs	r1, #64	; 0x40
 8005616:	f7ff ff0b 	bl	8005430 <_malloc_r>
 800561a:	6028      	str	r0, [r5, #0]
 800561c:	6128      	str	r0, [r5, #16]
 800561e:	b920      	cbnz	r0, 800562a <_svfiprintf_r+0x2e>
 8005620:	230c      	movs	r3, #12
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	e0d0      	b.n	80057cc <_svfiprintf_r+0x1d0>
 800562a:	2340      	movs	r3, #64	; 0x40
 800562c:	616b      	str	r3, [r5, #20]
 800562e:	2300      	movs	r3, #0
 8005630:	9309      	str	r3, [sp, #36]	; 0x24
 8005632:	2320      	movs	r3, #32
 8005634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005638:	f8cd 800c 	str.w	r8, [sp, #12]
 800563c:	2330      	movs	r3, #48	; 0x30
 800563e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057e4 <_svfiprintf_r+0x1e8>
 8005642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005646:	f04f 0901 	mov.w	r9, #1
 800564a:	4623      	mov	r3, r4
 800564c:	469a      	mov	sl, r3
 800564e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005652:	b10a      	cbz	r2, 8005658 <_svfiprintf_r+0x5c>
 8005654:	2a25      	cmp	r2, #37	; 0x25
 8005656:	d1f9      	bne.n	800564c <_svfiprintf_r+0x50>
 8005658:	ebba 0b04 	subs.w	fp, sl, r4
 800565c:	d00b      	beq.n	8005676 <_svfiprintf_r+0x7a>
 800565e:	465b      	mov	r3, fp
 8005660:	4622      	mov	r2, r4
 8005662:	4629      	mov	r1, r5
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff ff6f 	bl	8005548 <__ssputs_r>
 800566a:	3001      	adds	r0, #1
 800566c:	f000 80a9 	beq.w	80057c2 <_svfiprintf_r+0x1c6>
 8005670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005672:	445a      	add	r2, fp
 8005674:	9209      	str	r2, [sp, #36]	; 0x24
 8005676:	f89a 3000 	ldrb.w	r3, [sl]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80a1 	beq.w	80057c2 <_svfiprintf_r+0x1c6>
 8005680:	2300      	movs	r3, #0
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568a:	f10a 0a01 	add.w	sl, sl, #1
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	9307      	str	r3, [sp, #28]
 8005692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005696:	931a      	str	r3, [sp, #104]	; 0x68
 8005698:	4654      	mov	r4, sl
 800569a:	2205      	movs	r2, #5
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	4850      	ldr	r0, [pc, #320]	; (80057e4 <_svfiprintf_r+0x1e8>)
 80056a2:	f7fa fd95 	bl	80001d0 <memchr>
 80056a6:	9a04      	ldr	r2, [sp, #16]
 80056a8:	b9d8      	cbnz	r0, 80056e2 <_svfiprintf_r+0xe6>
 80056aa:	06d0      	lsls	r0, r2, #27
 80056ac:	bf44      	itt	mi
 80056ae:	2320      	movmi	r3, #32
 80056b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b4:	0711      	lsls	r1, r2, #28
 80056b6:	bf44      	itt	mi
 80056b8:	232b      	movmi	r3, #43	; 0x2b
 80056ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056be:	f89a 3000 	ldrb.w	r3, [sl]
 80056c2:	2b2a      	cmp	r3, #42	; 0x2a
 80056c4:	d015      	beq.n	80056f2 <_svfiprintf_r+0xf6>
 80056c6:	9a07      	ldr	r2, [sp, #28]
 80056c8:	4654      	mov	r4, sl
 80056ca:	2000      	movs	r0, #0
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	4621      	mov	r1, r4
 80056d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d6:	3b30      	subs	r3, #48	; 0x30
 80056d8:	2b09      	cmp	r3, #9
 80056da:	d94d      	bls.n	8005778 <_svfiprintf_r+0x17c>
 80056dc:	b1b0      	cbz	r0, 800570c <_svfiprintf_r+0x110>
 80056de:	9207      	str	r2, [sp, #28]
 80056e0:	e014      	b.n	800570c <_svfiprintf_r+0x110>
 80056e2:	eba0 0308 	sub.w	r3, r0, r8
 80056e6:	fa09 f303 	lsl.w	r3, r9, r3
 80056ea:	4313      	orrs	r3, r2
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	46a2      	mov	sl, r4
 80056f0:	e7d2      	b.n	8005698 <_svfiprintf_r+0x9c>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	1d19      	adds	r1, r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	9103      	str	r1, [sp, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfbb      	ittet	lt
 80056fe:	425b      	neglt	r3, r3
 8005700:	f042 0202 	orrlt.w	r2, r2, #2
 8005704:	9307      	strge	r3, [sp, #28]
 8005706:	9307      	strlt	r3, [sp, #28]
 8005708:	bfb8      	it	lt
 800570a:	9204      	strlt	r2, [sp, #16]
 800570c:	7823      	ldrb	r3, [r4, #0]
 800570e:	2b2e      	cmp	r3, #46	; 0x2e
 8005710:	d10c      	bne.n	800572c <_svfiprintf_r+0x130>
 8005712:	7863      	ldrb	r3, [r4, #1]
 8005714:	2b2a      	cmp	r3, #42	; 0x2a
 8005716:	d134      	bne.n	8005782 <_svfiprintf_r+0x186>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9203      	str	r2, [sp, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfb8      	it	lt
 8005724:	f04f 33ff 	movlt.w	r3, #4294967295
 8005728:	3402      	adds	r4, #2
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057f4 <_svfiprintf_r+0x1f8>
 8005730:	7821      	ldrb	r1, [r4, #0]
 8005732:	2203      	movs	r2, #3
 8005734:	4650      	mov	r0, sl
 8005736:	f7fa fd4b 	bl	80001d0 <memchr>
 800573a:	b138      	cbz	r0, 800574c <_svfiprintf_r+0x150>
 800573c:	9b04      	ldr	r3, [sp, #16]
 800573e:	eba0 000a 	sub.w	r0, r0, sl
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	4082      	lsls	r2, r0
 8005746:	4313      	orrs	r3, r2
 8005748:	3401      	adds	r4, #1
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	4825      	ldr	r0, [pc, #148]	; (80057e8 <_svfiprintf_r+0x1ec>)
 8005752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005756:	2206      	movs	r2, #6
 8005758:	f7fa fd3a 	bl	80001d0 <memchr>
 800575c:	2800      	cmp	r0, #0
 800575e:	d038      	beq.n	80057d2 <_svfiprintf_r+0x1d6>
 8005760:	4b22      	ldr	r3, [pc, #136]	; (80057ec <_svfiprintf_r+0x1f0>)
 8005762:	bb1b      	cbnz	r3, 80057ac <_svfiprintf_r+0x1b0>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	3307      	adds	r3, #7
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	3308      	adds	r3, #8
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005772:	4433      	add	r3, r6
 8005774:	9309      	str	r3, [sp, #36]	; 0x24
 8005776:	e768      	b.n	800564a <_svfiprintf_r+0x4e>
 8005778:	fb0c 3202 	mla	r2, ip, r2, r3
 800577c:	460c      	mov	r4, r1
 800577e:	2001      	movs	r0, #1
 8005780:	e7a6      	b.n	80056d0 <_svfiprintf_r+0xd4>
 8005782:	2300      	movs	r3, #0
 8005784:	3401      	adds	r4, #1
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	4619      	mov	r1, r3
 800578a:	f04f 0c0a 	mov.w	ip, #10
 800578e:	4620      	mov	r0, r4
 8005790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005794:	3a30      	subs	r2, #48	; 0x30
 8005796:	2a09      	cmp	r2, #9
 8005798:	d903      	bls.n	80057a2 <_svfiprintf_r+0x1a6>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c6      	beq.n	800572c <_svfiprintf_r+0x130>
 800579e:	9105      	str	r1, [sp, #20]
 80057a0:	e7c4      	b.n	800572c <_svfiprintf_r+0x130>
 80057a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a6:	4604      	mov	r4, r0
 80057a8:	2301      	movs	r3, #1
 80057aa:	e7f0      	b.n	800578e <_svfiprintf_r+0x192>
 80057ac:	ab03      	add	r3, sp, #12
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <_svfiprintf_r+0x1f4>)
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	4638      	mov	r0, r7
 80057b8:	f3af 8000 	nop.w
 80057bc:	1c42      	adds	r2, r0, #1
 80057be:	4606      	mov	r6, r0
 80057c0:	d1d6      	bne.n	8005770 <_svfiprintf_r+0x174>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	065b      	lsls	r3, r3, #25
 80057c6:	f53f af2d 	bmi.w	8005624 <_svfiprintf_r+0x28>
 80057ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057cc:	b01d      	add	sp, #116	; 0x74
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	ab03      	add	r3, sp, #12
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	462a      	mov	r2, r5
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <_svfiprintf_r+0x1f4>)
 80057da:	a904      	add	r1, sp, #16
 80057dc:	4638      	mov	r0, r7
 80057de:	f000 f879 	bl	80058d4 <_printf_i>
 80057e2:	e7eb      	b.n	80057bc <_svfiprintf_r+0x1c0>
 80057e4:	08005c4c 	.word	0x08005c4c
 80057e8:	08005c56 	.word	0x08005c56
 80057ec:	00000000 	.word	0x00000000
 80057f0:	08005549 	.word	0x08005549
 80057f4:	08005c52 	.word	0x08005c52

080057f8 <_printf_common>:
 80057f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	4616      	mov	r6, r2
 80057fe:	4699      	mov	r9, r3
 8005800:	688a      	ldr	r2, [r1, #8]
 8005802:	690b      	ldr	r3, [r1, #16]
 8005804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005808:	4293      	cmp	r3, r2
 800580a:	bfb8      	it	lt
 800580c:	4613      	movlt	r3, r2
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005814:	4607      	mov	r7, r0
 8005816:	460c      	mov	r4, r1
 8005818:	b10a      	cbz	r2, 800581e <_printf_common+0x26>
 800581a:	3301      	adds	r3, #1
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	0699      	lsls	r1, r3, #26
 8005822:	bf42      	ittt	mi
 8005824:	6833      	ldrmi	r3, [r6, #0]
 8005826:	3302      	addmi	r3, #2
 8005828:	6033      	strmi	r3, [r6, #0]
 800582a:	6825      	ldr	r5, [r4, #0]
 800582c:	f015 0506 	ands.w	r5, r5, #6
 8005830:	d106      	bne.n	8005840 <_printf_common+0x48>
 8005832:	f104 0a19 	add.w	sl, r4, #25
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	6832      	ldr	r2, [r6, #0]
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	42ab      	cmp	r3, r5
 800583e:	dc26      	bgt.n	800588e <_printf_common+0x96>
 8005840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005844:	1e13      	subs	r3, r2, #0
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	bf18      	it	ne
 800584a:	2301      	movne	r3, #1
 800584c:	0692      	lsls	r2, r2, #26
 800584e:	d42b      	bmi.n	80058a8 <_printf_common+0xb0>
 8005850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005854:	4649      	mov	r1, r9
 8005856:	4638      	mov	r0, r7
 8005858:	47c0      	blx	r8
 800585a:	3001      	adds	r0, #1
 800585c:	d01e      	beq.n	800589c <_printf_common+0xa4>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	f003 0306 	and.w	r3, r3, #6
 8005866:	2b04      	cmp	r3, #4
 8005868:	bf02      	ittt	eq
 800586a:	68e5      	ldreq	r5, [r4, #12]
 800586c:	6833      	ldreq	r3, [r6, #0]
 800586e:	1aed      	subeq	r5, r5, r3
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	bf0c      	ite	eq
 8005874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005878:	2500      	movne	r5, #0
 800587a:	4293      	cmp	r3, r2
 800587c:	bfc4      	itt	gt
 800587e:	1a9b      	subgt	r3, r3, r2
 8005880:	18ed      	addgt	r5, r5, r3
 8005882:	2600      	movs	r6, #0
 8005884:	341a      	adds	r4, #26
 8005886:	42b5      	cmp	r5, r6
 8005888:	d11a      	bne.n	80058c0 <_printf_common+0xc8>
 800588a:	2000      	movs	r0, #0
 800588c:	e008      	b.n	80058a0 <_printf_common+0xa8>
 800588e:	2301      	movs	r3, #1
 8005890:	4652      	mov	r2, sl
 8005892:	4649      	mov	r1, r9
 8005894:	4638      	mov	r0, r7
 8005896:	47c0      	blx	r8
 8005898:	3001      	adds	r0, #1
 800589a:	d103      	bne.n	80058a4 <_printf_common+0xac>
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	3501      	adds	r5, #1
 80058a6:	e7c6      	b.n	8005836 <_printf_common+0x3e>
 80058a8:	18e1      	adds	r1, r4, r3
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	2030      	movs	r0, #48	; 0x30
 80058ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058b2:	4422      	add	r2, r4
 80058b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058bc:	3302      	adds	r3, #2
 80058be:	e7c7      	b.n	8005850 <_printf_common+0x58>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4622      	mov	r2, r4
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d0e6      	beq.n	800589c <_printf_common+0xa4>
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7d9      	b.n	8005886 <_printf_common+0x8e>
	...

080058d4 <_printf_i>:
 80058d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	7e0f      	ldrb	r7, [r1, #24]
 80058da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058dc:	2f78      	cmp	r7, #120	; 0x78
 80058de:	4691      	mov	r9, r2
 80058e0:	4680      	mov	r8, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	469a      	mov	sl, r3
 80058e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058ea:	d807      	bhi.n	80058fc <_printf_i+0x28>
 80058ec:	2f62      	cmp	r7, #98	; 0x62
 80058ee:	d80a      	bhi.n	8005906 <_printf_i+0x32>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	f000 80d4 	beq.w	8005a9e <_printf_i+0x1ca>
 80058f6:	2f58      	cmp	r7, #88	; 0x58
 80058f8:	f000 80c0 	beq.w	8005a7c <_printf_i+0x1a8>
 80058fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005904:	e03a      	b.n	800597c <_printf_i+0xa8>
 8005906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800590a:	2b15      	cmp	r3, #21
 800590c:	d8f6      	bhi.n	80058fc <_printf_i+0x28>
 800590e:	a101      	add	r1, pc, #4	; (adr r1, 8005914 <_printf_i+0x40>)
 8005910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005914:	0800596d 	.word	0x0800596d
 8005918:	08005981 	.word	0x08005981
 800591c:	080058fd 	.word	0x080058fd
 8005920:	080058fd 	.word	0x080058fd
 8005924:	080058fd 	.word	0x080058fd
 8005928:	080058fd 	.word	0x080058fd
 800592c:	08005981 	.word	0x08005981
 8005930:	080058fd 	.word	0x080058fd
 8005934:	080058fd 	.word	0x080058fd
 8005938:	080058fd 	.word	0x080058fd
 800593c:	080058fd 	.word	0x080058fd
 8005940:	08005a85 	.word	0x08005a85
 8005944:	080059ad 	.word	0x080059ad
 8005948:	08005a3f 	.word	0x08005a3f
 800594c:	080058fd 	.word	0x080058fd
 8005950:	080058fd 	.word	0x080058fd
 8005954:	08005aa7 	.word	0x08005aa7
 8005958:	080058fd 	.word	0x080058fd
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080058fd 	.word	0x080058fd
 8005964:	080058fd 	.word	0x080058fd
 8005968:	08005a47 	.word	0x08005a47
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	602a      	str	r2, [r5, #0]
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800597c:	2301      	movs	r3, #1
 800597e:	e09f      	b.n	8005ac0 <_printf_i+0x1ec>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	0607      	lsls	r7, r0, #24
 8005986:	f103 0104 	add.w	r1, r3, #4
 800598a:	6029      	str	r1, [r5, #0]
 800598c:	d501      	bpl.n	8005992 <_printf_i+0xbe>
 800598e:	681e      	ldr	r6, [r3, #0]
 8005990:	e003      	b.n	800599a <_printf_i+0xc6>
 8005992:	0646      	lsls	r6, r0, #25
 8005994:	d5fb      	bpl.n	800598e <_printf_i+0xba>
 8005996:	f9b3 6000 	ldrsh.w	r6, [r3]
 800599a:	2e00      	cmp	r6, #0
 800599c:	da03      	bge.n	80059a6 <_printf_i+0xd2>
 800599e:	232d      	movs	r3, #45	; 0x2d
 80059a0:	4276      	negs	r6, r6
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	485a      	ldr	r0, [pc, #360]	; (8005b10 <_printf_i+0x23c>)
 80059a8:	230a      	movs	r3, #10
 80059aa:	e012      	b.n	80059d2 <_printf_i+0xfe>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0605      	lsls	r5, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xe8>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xee>
 80059bc:	0641      	lsls	r1, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe4>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4853      	ldr	r0, [pc, #332]	; (8005b10 <_printf_i+0x23c>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x114>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04b      	beq.n	8005a80 <_printf_i+0x1ac>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x116>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x148>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x148>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee4 	bl	80057f8 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14a      	bne.n	8005aca <_printf_i+0x1f6>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f043 0320 	orr.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	4833      	ldr	r0, [pc, #204]	; (8005b14 <_printf_i+0x240>)
 8005a48:	2778      	movs	r7, #120	; 0x78
 8005a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	6829      	ldr	r1, [r5, #0]
 8005a52:	061f      	lsls	r7, r3, #24
 8005a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a58:	d402      	bmi.n	8005a60 <_printf_i+0x18c>
 8005a5a:	065f      	lsls	r7, r3, #25
 8005a5c:	bf48      	it	mi
 8005a5e:	b2b6      	uxthmi	r6, r6
 8005a60:	07df      	lsls	r7, r3, #31
 8005a62:	bf48      	it	mi
 8005a64:	f043 0320 	orrmi.w	r3, r3, #32
 8005a68:	6029      	str	r1, [r5, #0]
 8005a6a:	bf48      	it	mi
 8005a6c:	6023      	strmi	r3, [r4, #0]
 8005a6e:	b91e      	cbnz	r6, 8005a78 <_printf_i+0x1a4>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f023 0320 	bic.w	r3, r3, #32
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	2310      	movs	r3, #16
 8005a7a:	e7a7      	b.n	80059cc <_printf_i+0xf8>
 8005a7c:	4824      	ldr	r0, [pc, #144]	; (8005b10 <_printf_i+0x23c>)
 8005a7e:	e7e4      	b.n	8005a4a <_printf_i+0x176>
 8005a80:	4615      	mov	r5, r2
 8005a82:	e7bd      	b.n	8005a00 <_printf_i+0x12c>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	6826      	ldr	r6, [r4, #0]
 8005a88:	6961      	ldr	r1, [r4, #20]
 8005a8a:	1d18      	adds	r0, r3, #4
 8005a8c:	6028      	str	r0, [r5, #0]
 8005a8e:	0635      	lsls	r5, r6, #24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	d501      	bpl.n	8005a98 <_printf_i+0x1c4>
 8005a94:	6019      	str	r1, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <_printf_i+0x1ca>
 8005a98:	0670      	lsls	r0, r6, #25
 8005a9a:	d5fb      	bpl.n	8005a94 <_printf_i+0x1c0>
 8005a9c:	8019      	strh	r1, [r3, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	e7bc      	b.n	8005a20 <_printf_i+0x14c>
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	1d1a      	adds	r2, r3, #4
 8005aaa:	602a      	str	r2, [r5, #0]
 8005aac:	681d      	ldr	r5, [r3, #0]
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7fa fb8c 	bl	80001d0 <memchr>
 8005ab8:	b108      	cbz	r0, 8005abe <_printf_i+0x1ea>
 8005aba:	1b40      	subs	r0, r0, r5
 8005abc:	6060      	str	r0, [r4, #4]
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac8:	e7aa      	b.n	8005a20 <_printf_i+0x14c>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	462a      	mov	r2, r5
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	47d0      	blx	sl
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d0ad      	beq.n	8005a34 <_printf_i+0x160>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	079b      	lsls	r3, r3, #30
 8005adc:	d413      	bmi.n	8005b06 <_printf_i+0x232>
 8005ade:	68e0      	ldr	r0, [r4, #12]
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	bfb8      	it	lt
 8005ae6:	4618      	movlt	r0, r3
 8005ae8:	e7a6      	b.n	8005a38 <_printf_i+0x164>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d09d      	beq.n	8005a34 <_printf_i+0x160>
 8005af8:	3501      	adds	r5, #1
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	9903      	ldr	r1, [sp, #12]
 8005afe:	1a5b      	subs	r3, r3, r1
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dcf2      	bgt.n	8005aea <_printf_i+0x216>
 8005b04:	e7eb      	b.n	8005ade <_printf_i+0x20a>
 8005b06:	2500      	movs	r5, #0
 8005b08:	f104 0619 	add.w	r6, r4, #25
 8005b0c:	e7f5      	b.n	8005afa <_printf_i+0x226>
 8005b0e:	bf00      	nop
 8005b10:	08005c5d 	.word	0x08005c5d
 8005b14:	08005c6e 	.word	0x08005c6e

08005b18 <memmove>:
 8005b18:	4288      	cmp	r0, r1
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	eb01 0402 	add.w	r4, r1, r2
 8005b20:	d902      	bls.n	8005b28 <memmove+0x10>
 8005b22:	4284      	cmp	r4, r0
 8005b24:	4623      	mov	r3, r4
 8005b26:	d807      	bhi.n	8005b38 <memmove+0x20>
 8005b28:	1e43      	subs	r3, r0, #1
 8005b2a:	42a1      	cmp	r1, r4
 8005b2c:	d008      	beq.n	8005b40 <memmove+0x28>
 8005b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b36:	e7f8      	b.n	8005b2a <memmove+0x12>
 8005b38:	4402      	add	r2, r0
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	428a      	cmp	r2, r1
 8005b3e:	d100      	bne.n	8005b42 <memmove+0x2a>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b4a:	e7f7      	b.n	8005b3c <memmove+0x24>

08005b4c <_sbrk_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <_sbrk_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	f7fb f8d8 	bl	8000d0c <_sbrk>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_sbrk_r+0x1a>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_sbrk_r+0x1a>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20000398 	.word	0x20000398

08005b6c <memcpy>:
 8005b6c:	440a      	add	r2, r1
 8005b6e:	4291      	cmp	r1, r2
 8005b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b74:	d100      	bne.n	8005b78 <memcpy+0xc>
 8005b76:	4770      	bx	lr
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b82:	4291      	cmp	r1, r2
 8005b84:	d1f9      	bne.n	8005b7a <memcpy+0xe>
 8005b86:	bd10      	pop	{r4, pc}

08005b88 <_realloc_r>:
 8005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	4614      	mov	r4, r2
 8005b90:	460e      	mov	r6, r1
 8005b92:	b921      	cbnz	r1, 8005b9e <_realloc_r+0x16>
 8005b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	4611      	mov	r1, r2
 8005b9a:	f7ff bc49 	b.w	8005430 <_malloc_r>
 8005b9e:	b92a      	cbnz	r2, 8005bac <_realloc_r+0x24>
 8005ba0:	f7ff fbda 	bl	8005358 <_free_r>
 8005ba4:	4625      	mov	r5, r4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bac:	f000 f81b 	bl	8005be6 <_malloc_usable_size_r>
 8005bb0:	4284      	cmp	r4, r0
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	d802      	bhi.n	8005bbc <_realloc_r+0x34>
 8005bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bba:	d812      	bhi.n	8005be2 <_realloc_r+0x5a>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fc36 	bl	8005430 <_malloc_r>
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d0ed      	beq.n	8005ba6 <_realloc_r+0x1e>
 8005bca:	42bc      	cmp	r4, r7
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4631      	mov	r1, r6
 8005bd0:	bf28      	it	cs
 8005bd2:	463a      	movcs	r2, r7
 8005bd4:	f7ff ffca 	bl	8005b6c <memcpy>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7ff fbbc 	bl	8005358 <_free_r>
 8005be0:	e7e1      	b.n	8005ba6 <_realloc_r+0x1e>
 8005be2:	4635      	mov	r5, r6
 8005be4:	e7df      	b.n	8005ba6 <_realloc_r+0x1e>

08005be6 <_malloc_usable_size_r>:
 8005be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bea:	1f18      	subs	r0, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfbc      	itt	lt
 8005bf0:	580b      	ldrlt	r3, [r1, r0]
 8005bf2:	18c0      	addlt	r0, r0, r3
 8005bf4:	4770      	bx	lr
	...

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
