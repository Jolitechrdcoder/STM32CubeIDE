
PRACTICA2_MICRO2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08007480  08007480  00017480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007748  08007748  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007748  08007748  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800774c  0800774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  2000005c  080077ac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  080077ac  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013388  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000295b  00000000  00000000  00033457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc6  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce02  00000000  00000000  00037d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001675e  00000000  00000000  00054b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a92c2  00000000  00000000  0006b26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005354  00000000  00000000  00114530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00119884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007468 	.word	0x08007468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007468 	.word	0x08007468

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f043 030c 	orr.w	r3, r3, #12
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	f043 030c 	orr.w	r3, r3, #12
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2304      	movs	r3, #4
 8000c06:	214e      	movs	r1, #78	; 0x4e
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <lcd_send_cmd+0x5c>)
 8000c0a:	f001 ff2b 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000d0 	.word	0x200000d0

08000c1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f023 030f 	bic.w	r3, r3, #15
 8000c2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f043 030d 	orr.w	r3, r3, #13
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	f043 0309 	orr.w	r3, r3, #9
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	f043 030d 	orr.w	r3, r3, #13
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	f043 0309 	orr.w	r3, r3, #9
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c5c:	f107 0208 	add.w	r2, r7, #8
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2304      	movs	r3, #4
 8000c66:	214e      	movs	r1, #78	; 0x4e
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <lcd_send_data+0x5c>)
 8000c6a:	f001 fefb 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000d0 	.word	0x200000d0

08000c7c <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68b8      	ldr	r0, [r7, #8]
 8000c8c:	f000 f807 	bl	8000c9e <lcd_put_cur>
	lcd_send_string(string);
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f000 f860 	bl	8000d56 <lcd_send_string>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <lcd_put_cur+0x18>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d005      	beq.n	8000cc0 <lcd_put_cur+0x22>
 8000cb4:	e009      	b.n	8000cca <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	603b      	str	r3, [r7, #0]
            break;
 8000cbe:	e004      	b.n	8000cca <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cc6:	603b      	str	r3, [r7, #0]
            break;
 8000cc8:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff74 	bl	8000bbc <lcd_send_cmd>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <lcd_init>:


void lcd_init (void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ce0:	2032      	movs	r0, #50	; 0x32
 8000ce2:	f001 f815 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ce6:	2030      	movs	r0, #48	; 0x30
 8000ce8:	f7ff ff68 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000cec:	2005      	movs	r0, #5
 8000cee:	f001 f80f 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cf2:	2030      	movs	r0, #48	; 0x30
 8000cf4:	f7ff ff62 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f001 f809 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cfe:	2030      	movs	r0, #48	; 0x30
 8000d00:	f7ff ff5c 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f001 f803 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d0a:	2020      	movs	r0, #32
 8000d0c:	f7ff ff56 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(10);
 8000d10:	200a      	movs	r0, #10
 8000d12:	f000 fffd 	bl	8001d10 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d16:	2028      	movs	r0, #40	; 0x28
 8000d18:	f7ff ff50 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 fff7 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d22:	2008      	movs	r0, #8
 8000d24:	f7ff ff4a 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 fff1 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ff44 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 ffeb 	bl	8001d10 <HAL_Delay>
	HAL_Delay(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 ffe8 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d40:	2006      	movs	r0, #6
 8000d42:	f7ff ff3b 	bl	8000bbc <lcd_send_cmd>
	HAL_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 ffe2 	bl	8001d10 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d4c:	200c      	movs	r0, #12
 8000d4e:	f7ff ff35 	bl	8000bbc <lcd_send_cmd>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d5e:	e006      	b.n	8000d6e <lcd_send_string+0x18>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff57 	bl	8000c1c <lcd_send_data>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f4      	bne.n	8000d60 <lcd_send_string+0xa>
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <ondaseno>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ondaseno()
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

	for (int x = 0; x < 100; x++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	e04a      	b.n	8000e22 <ondaseno+0xa2>
	    {
	        onda_seno[x] = ((sin(x * 2 * PI / 100) + 1) * (amplitud * 4096 / 2));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbc7 	bl	8000524 <__aeabi_i2d>
 8000d96:	a32d      	add	r3, pc, #180	; (adr r3, 8000e4c <ondaseno+0xcc>)
 8000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9c:	f7ff fc2c 	bl	80005f8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <ondaseno+0xb8>)
 8000dae:	f7ff fd4d 	bl	800084c <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	ec43 2b17 	vmov	d7, r2, r3
 8000dba:	eeb0 0a47 	vmov.f32	s0, s14
 8000dbe:	eef0 0a67 	vmov.f32	s1, s15
 8000dc2:	f005 fb11 	bl	80063e8 <sin>
 8000dc6:	ec51 0b10 	vmov	r0, r1, d0
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <ondaseno+0xbc>)
 8000dd0:	f7ff fa5c 	bl	800028c <__adddf3>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4614      	mov	r4, r2
 8000dda:	461d      	mov	r5, r3
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <ondaseno+0xc0>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000e44 <ondaseno+0xc4>
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000dee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000df2:	ee16 0a90 	vmov	r0, s13
 8000df6:	f7ff fba7 	bl	8000548 <__aeabi_f2d>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4620      	mov	r0, r4
 8000e00:	4629      	mov	r1, r5
 8000e02:	f7ff fbf9 	bl	80005f8 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff feb5 	bl	8000b7c <__aeabi_d2uiz>
 8000e12:	4602      	mov	r2, r0
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <ondaseno+0xc8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int x = 0; x < 100; x++)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b63      	cmp	r3, #99	; 0x63
 8000e26:	ddb1      	ble.n	8000d8c <ondaseno+0xc>
	    }


}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	40590000 	.word	0x40590000
 8000e3c:	3ff00000 	.word	0x3ff00000
 8000e40:	20000260 	.word	0x20000260
 8000e44:	45800000 	.word	0x45800000
 8000e48:	20000264 	.word	0x20000264
 8000e4c:	4d12d84a 	.word	0x4d12d84a
 8000e50:	400921fb 	.word	0x400921fb

08000e54 <ondasierra>:
void ondasierra()
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0

	for (int y = 0; y < 100; y++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e01c      	b.n	8000e9a <ondasierra+0x46>
	    {
	        onda_sierra[y] = (y * (amplitud*4096 / 100)); // calculo onda sierra
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ondasierra+0x5c>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000eb4 <ondasierra+0x60>
 8000e74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e78:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8000eb8 <ondasierra+0x64>
 8000e7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e88:	ee17 1a90 	vmov	r1, s15
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <ondasierra+0x68>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int y = 0; y < 100; y++)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b63      	cmp	r3, #99	; 0x63
 8000e9e:	dddf      	ble.n	8000e60 <ondasierra+0xc>
	    }

}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000260 	.word	0x20000260
 8000eb4:	45800000 	.word	0x45800000
 8000eb8:	42c80000 	.word	0x42c80000
 8000ebc:	200003f4 	.word	0x200003f4

08000ec0 <buzzer>:
void buzzer(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(buxx_GPIO_Port, buxx_Pin, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <buzzer+0x28>)
 8000ecc:	f001 fd22 	bl	8002914 <HAL_GPIO_WritePin>
HAL_Delay(10);
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f000 ff1d 	bl	8001d10 <HAL_Delay>
HAL_GPIO_WritePin(buxx_GPIO_Port, buxx_Pin, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <buzzer+0x28>)
 8000ede:	f001 fd19 	bl	8002914 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	48000400 	.word	0x48000400

08000eec <enviar>:

void enviar(uint32_t valor){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	 char buffer[20];
	    sprintf(buffer, "%lu\r\n", valor);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	490b      	ldr	r1, [pc, #44]	; (8000f28 <enviar+0x3c>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fdcf 	bl	8005aa0 <siprintf>

	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f962 	bl	80001d0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <enviar+0x40>)
 8000f1a:	f004 f9eb 	bl	80052f4 <HAL_UART_Transmit>
}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08007480 	.word	0x08007480
 8000f2c:	200001bc 	.word	0x200001bc

08000f30 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    counter = __HAL_TIM_GET_COUNTER(htim);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f40:	6013      	str	r3, [r2, #0]
    count = (int16_t)counter;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000f4a:	801a      	strh	r2, [r3, #0]
    position = count / 4;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da00      	bge.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x28>
 8000f56:	3303      	adds	r3, #3
 8000f58:	109b      	asrs	r3, r3, #2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000f5e:	801a      	strh	r2, [r3, #0]

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	20000244 	.word	0x20000244
 8000f70:	20000248 	.word	0x20000248
 8000f74:	2000024a 	.word	0x2000024a

08000f78 <lectura_boton>:

void lectura_boton(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(bton_GPIO_Port, bton_Pin)){
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f001 fcae 	bl	80028e4 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <lectura_boton+0x2c>
					menu1++;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <lectura_boton+0x30>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <lectura_boton+0x30>)
 8000f96:	6013      	str	r3, [r2, #0]
					buzzer();
 8000f98:	f7ff ff92 	bl	8000ec0 <buzzer>
					HAL_Delay(600);
 8000f9c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000fa0:	f000 feb6 	bl	8001d10 <HAL_Delay>
				}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000024c 	.word	0x2000024c

08000fac <menu_senoidal>:

void menu_senoidal(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	 lcd_enviar("   Sell Onda   ", 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <menu_senoidal+0x20>)
 8000fb6:	f7ff fe61 	bl	8000c7c <lcd_enviar>
			  lcd_enviar("1.Senoidal    <<", 1, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <menu_senoidal+0x24>)
 8000fc0:	f7ff fe5c 	bl	8000c7c <lcd_enviar>
			lectura_boton();
 8000fc4:	f7ff ffd8 	bl	8000f78 <lectura_boton>

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08007488 	.word	0x08007488
 8000fd0:	08007498 	.word	0x08007498

08000fd4 <menu_sierra>:


void menu_sierra(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	lcd_enviar("   Sell Onda   ", 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <menu_sierra+0x20>)
 8000fde:	f7ff fe4d 	bl	8000c7c <lcd_enviar>
	lcd_enviar("2.Sierra    <<", 1, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <menu_sierra+0x24>)
 8000fe8:	f7ff fe48 	bl	8000c7c <lcd_enviar>
	lectura_boton();
 8000fec:	f7ff ffc4 	bl	8000f78 <lectura_boton>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	08007488 	.word	0x08007488
 8000ff8:	080074ac 	.word	0x080074ac

08000ffc <menu_cuadrada>:


void menu_cuadrada(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	lcd_enviar("   Sell Onda   ", 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <menu_cuadrada+0x20>)
 8001006:	f7ff fe39 	bl	8000c7c <lcd_enviar>
	lcd_enviar("3.Cuadrada    <<", 1, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <menu_cuadrada+0x24>)
 8001010:	f7ff fe34 	bl	8000c7c <lcd_enviar>
	lectura_boton();
 8001014:	f7ff ffb0 	bl	8000f78 <lectura_boton>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08007488 	.word	0x08007488
 8001020:	080074bc 	.word	0x080074bc

08001024 <menu_triangular>:


void menu_triangular(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	lectura_boton();
 8001028:	f7ff ffa6 	bl	8000f78 <lectura_boton>
	 lcd_enviar("   Sell Onda   ", 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <menu_triangular+0x20>)
 8001032:	f7ff fe23 	bl	8000c7c <lcd_enviar>
	 lcd_enviar("4.Triangular   <<", 1, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <menu_triangular+0x24>)
 800103c:	f7ff fe1e 	bl	8000c7c <lcd_enviar>

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08007488 	.word	0x08007488
 8001048:	080074d0 	.word	0x080074d0

0800104c <subMenu1>:


void subMenu1(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
	 lcd_enviar("  Sell amplitud", 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	4829      	ldr	r0, [pc, #164]	; (80010fc <subMenu1+0xb0>)
 8001058:	f7ff fe10 	bl	8000c7c <lcd_enviar>
	 lcd_enviar("Amplitud (+,-)", 1, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2101      	movs	r1, #1
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <subMenu1+0xb4>)
 8001062:	f7ff fe0b 	bl	8000c7c <lcd_enviar>
	 HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	4826      	ldr	r0, [pc, #152]	; (8001104 <subMenu1+0xb8>)
 800106a:	f000 ffa8 	bl	8001fbe <HAL_DAC_Stop_DMA>
	 HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,onda_seno,100, DAC_ALIGN_12B_R);
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	4a24      	ldr	r2, [pc, #144]	; (8001108 <subMenu1+0xbc>)
 8001076:	2100      	movs	r1, #0
 8001078:	4822      	ldr	r0, [pc, #136]	; (8001104 <subMenu1+0xb8>)
 800107a:	f000 ffff 	bl	800207c <HAL_DAC_Start_DMA>

	 for(int i=0; i<100; i++){
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e012      	b.n	80010aa <subMenu1+0x5e>



	 			   DAC->DHR12R1 = onda_seno[i];
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <subMenu1+0xc0>)
 8001086:	4920      	ldr	r1, [pc, #128]	; (8001108 <subMenu1+0xbc>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108e:	6093      	str	r3, [r2, #8]
	 			   HAL_Delay(8);
 8001090:	2008      	movs	r0, #8
 8001092:	f000 fe3d 	bl	8001d10 <HAL_Delay>
	 			   enviar(onda_seno[i]);
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <subMenu1+0xbc>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff24 	bl	8000eec <enviar>
	 for(int i=0; i<100; i++){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b63      	cmp	r3, #99	; 0x63
 80010ae:	dde9      	ble.n	8001084 <subMenu1+0x38>
	 		   }

	 if(!HAL_GPIO_ReadPin(bton_GPIO_Port, bton_Pin)){
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f001 fc14 	bl	80028e4 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <subMenu1+0x8c>
		       submenu1++;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <subMenu1+0xc4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <subMenu1+0xc4>)
 80010ca:	6013      	str	r3, [r2, #0]
		       buzzer();
 80010cc:	f7ff fef8 	bl	8000ec0 <buzzer>
	 					HAL_Delay(600);
 80010d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80010d4:	f000 fe1c 	bl	8001d10 <HAL_Delay>
	 }
	 if(submenu1 == 2){
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <subMenu1+0xc4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d107      	bne.n	80010f0 <subMenu1+0xa4>
		 menu_senoidal();
 80010e0:	f7ff ff64 	bl	8000fac <menu_senoidal>
		 submenu1 =0;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <subMenu1+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
		 menu1=0;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <subMenu1+0xc8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	 }
	 lectura_boton();
 80010f0:	f7ff ff42 	bl	8000f78 <lectura_boton>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	080074e4 	.word	0x080074e4
 8001100:	080074f4 	.word	0x080074f4
 8001104:	20000078 	.word	0x20000078
 8001108:	20000264 	.word	0x20000264
 800110c:	40007400 	.word	0x40007400
 8001110:	20000250 	.word	0x20000250
 8001114:	2000024c 	.word	0x2000024c

08001118 <subMenu2>:
void subMenu2(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af02      	add	r7, sp, #8
	 lcd_enviar("  Sell amplitud", 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	4829      	ldr	r0, [pc, #164]	; (80011c8 <subMenu2+0xb0>)
 8001124:	f7ff fdaa 	bl	8000c7c <lcd_enviar>
	 lcd_enviar("Amplitud (+,-)", 1, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <subMenu2+0xb4>)
 800112e:	f7ff fda5 	bl	8000c7c <lcd_enviar>
	 HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001132:	2100      	movs	r1, #0
 8001134:	4826      	ldr	r0, [pc, #152]	; (80011d0 <subMenu2+0xb8>)
 8001136:	f000 ff42 	bl	8001fbe <HAL_DAC_Stop_DMA>
	 	 HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,onda_sierra,100, DAC_ALIGN_12B_R);
 800113a:	2300      	movs	r3, #0
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <subMenu2+0xbc>)
 8001142:	2100      	movs	r1, #0
 8001144:	4822      	ldr	r0, [pc, #136]	; (80011d0 <subMenu2+0xb8>)
 8001146:	f000 ff99 	bl	800207c <HAL_DAC_Start_DMA>

	 	 for(int i=0; i<100; i++){
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	e012      	b.n	8001176 <subMenu2+0x5e>



	 	 			   DAC->DHR12R1 = onda_sierra[i];
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <subMenu2+0xc0>)
 8001152:	4920      	ldr	r1, [pc, #128]	; (80011d4 <subMenu2+0xbc>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800115a:	6093      	str	r3, [r2, #8]
	 	 			   HAL_Delay(8);
 800115c:	2008      	movs	r0, #8
 800115e:	f000 fdd7 	bl	8001d10 <HAL_Delay>
	 	 			   enviar(onda_sierra[i]);
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <subMenu2+0xbc>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff febe 	bl	8000eec <enviar>
	 	 for(int i=0; i<100; i++){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b63      	cmp	r3, #99	; 0x63
 800117a:	dde9      	ble.n	8001150 <subMenu2+0x38>
	 	 		   }

	 if(!HAL_GPIO_ReadPin(bton_GPIO_Port, bton_Pin)){
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 fbae 	bl	80028e4 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <subMenu2+0x8c>
			       submenu2++;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <subMenu2+0xc4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <subMenu2+0xc4>)
 8001196:	6013      	str	r3, [r2, #0]
			       buzzer();
 8001198:	f7ff fe92 	bl	8000ec0 <buzzer>
		 			HAL_Delay(600);
 800119c:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011a0:	f000 fdb6 	bl	8001d10 <HAL_Delay>
		 }
		 if(submenu2 == 2){
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <subMenu2+0xc4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d107      	bne.n	80011bc <subMenu2+0xa4>
			 menu_sierra();
 80011ac:	f7ff ff12 	bl	8000fd4 <menu_sierra>
			 submenu2 =0;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <subMenu2+0xc4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
			 menu1=0;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <subMenu2+0xc8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		 }
		 lectura_boton();
 80011bc:	f7ff fedc 	bl	8000f78 <lectura_boton>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080074e4 	.word	0x080074e4
 80011cc:	080074f4 	.word	0x080074f4
 80011d0:	20000078 	.word	0x20000078
 80011d4:	200003f4 	.word	0x200003f4
 80011d8:	40007400 	.word	0x40007400
 80011dc:	20000254 	.word	0x20000254
 80011e0:	2000024c 	.word	0x2000024c

080011e4 <subMenu3>:
void subMenu3(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	 lcd_enviar("  Sell amplitud", 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <subMenu3+0x5c>)
 80011ee:	f7ff fd45 	bl	8000c7c <lcd_enviar>
	 lcd_enviar("Amplitud (+,-)", 1, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <subMenu3+0x60>)
 80011f8:	f7ff fd40 	bl	8000c7c <lcd_enviar>
	 if(!HAL_GPIO_ReadPin(bton_GPIO_Port, bton_Pin)){
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 fb6e 	bl	80028e4 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10a      	bne.n	8001224 <subMenu3+0x40>
				       submenu3++;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <subMenu3+0x64>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <subMenu3+0x64>)
 8001216:	6013      	str	r3, [r2, #0]
				       buzzer();
 8001218:	f7ff fe52 	bl	8000ec0 <buzzer>
			 			HAL_Delay(600);
 800121c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001220:	f000 fd76 	bl	8001d10 <HAL_Delay>
			 }
			 if(submenu3 == 2){
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <subMenu3+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d107      	bne.n	800123c <subMenu3+0x58>
				 menu_cuadrada();
 800122c:	f7ff fee6 	bl	8000ffc <menu_cuadrada>
				 submenu3 =0;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <subMenu3+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
				 menu1=0;
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <subMenu3+0x68>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
			 }
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	080074e4 	.word	0x080074e4
 8001244:	080074f4 	.word	0x080074f4
 8001248:	20000258 	.word	0x20000258
 800124c:	2000024c 	.word	0x2000024c

08001250 <subMenu4>:
void subMenu4(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	 lcd_enviar("  Sell amplitud", 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <subMenu4+0x5c>)
 800125a:	f7ff fd0f 	bl	8000c7c <lcd_enviar>
	 lcd_enviar("Amplitud (+,-)", 1, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <subMenu4+0x60>)
 8001264:	f7ff fd0a 	bl	8000c7c <lcd_enviar>
	 if(!HAL_GPIO_ReadPin(bton_GPIO_Port, bton_Pin)){
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f001 fb38 	bl	80028e4 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10a      	bne.n	8001290 <subMenu4+0x40>
	 				       submenu4++;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <subMenu4+0x64>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <subMenu4+0x64>)
 8001282:	6013      	str	r3, [r2, #0]
	 				       buzzer();
 8001284:	f7ff fe1c 	bl	8000ec0 <buzzer>
	 			 			HAL_Delay(600);
 8001288:	f44f 7016 	mov.w	r0, #600	; 0x258
 800128c:	f000 fd40 	bl	8001d10 <HAL_Delay>
	 			 }
	 			 if(submenu4 == 2){
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <subMenu4+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d107      	bne.n	80012a8 <subMenu4+0x58>
	 				 menu_triangular();
 8001298:	f7ff fec4 	bl	8001024 <menu_triangular>
	 				 submenu4 =0;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <subMenu4+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	 				 menu1=0;
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <subMenu4+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
	 			 }
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080074e4 	.word	0x080074e4
 80012b0:	080074f4 	.word	0x080074f4
 80012b4:	2000025c 	.word	0x2000025c
 80012b8:	2000024c 	.word	0x2000024c

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f000 fcc0 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f870 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 fa0c 	bl	80016e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012cc:	f000 f9ec 	bl	80016a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012d0:	f000 f9ba 	bl	8001648 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012d4:	f000 f8ee 	bl	80014b4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012d8:	f000 f92c 	bl	8001534 <MX_TIM2_Init>
  MX_DAC_Init();
 80012dc:	f000 f8c0 	bl	8001460 <MX_DAC_Init>
  MX_TIM6_Init();
 80012e0:	f000 f97c 	bl	80015dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

    lcd_init();
 80012e4:	f7ff fcfa 	bl	8000cdc <lcd_init>

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80012e8:	213c      	movs	r1, #60	; 0x3c
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <main+0xd4>)
 80012ec:	f003 fca6 	bl	8004c3c <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Base_Start(&htim6);
 80012f0:	4828      	ldr	r0, [pc, #160]	; (8001394 <main+0xd8>)
 80012f2:	f003 fbb1 	bl	8004a58 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(position)
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <main+0xdc>)
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d817      	bhi.n	8001330 <main+0x74>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <main+0x4c>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	0800131f 	.word	0x0800131f
 8001310:	08001325 	.word	0x08001325
 8001314:	0800132b 	.word	0x0800132b
	  {

	  case 0:
		 menu_senoidal();
 8001318:	f7ff fe48 	bl	8000fac <menu_senoidal>
	  break;
 800131c:	e008      	b.n	8001330 <main+0x74>
	  case 1:
		  menu_sierra();
 800131e:	f7ff fe59 	bl	8000fd4 <menu_sierra>
	  break;
 8001322:	e005      	b.n	8001330 <main+0x74>
	  case 2:
	 	  menu_cuadrada();
 8001324:	f7ff fe6a 	bl	8000ffc <menu_cuadrada>
	  break;
 8001328:	e002      	b.n	8001330 <main+0x74>
	  case 3:
	 	  menu_triangular();
 800132a:	f7ff fe7b 	bl	8001024 <menu_triangular>
	  break;
 800132e:	bf00      	nop

	  }
	  amplitud = (float)position * 0.01f; // Ajustar este valor según tus necesidades
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <main+0xdc>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800139c <main+0xe0>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <main+0xe4>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
	  ondaseno();
 800134c:	f7ff fd18 	bl	8000d80 <ondaseno>
	     ondasierra();
 8001350:	f7ff fd80 	bl	8000e54 <ondasierra>
	  switch (menu1)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <main+0xe8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	2b03      	cmp	r3, #3
 800135c:	d8cb      	bhi.n	80012f6 <main+0x3a>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <main+0xa8>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137b 	.word	0x0800137b
 800136c:	08001381 	.word	0x08001381
 8001370:	08001387 	.word	0x08001387
	  {
	  case 1:
		 subMenu1();
 8001374:	f7ff fe6a 	bl	800104c <subMenu1>
	  break;
 8001378:	e009      	b.n	800138e <main+0xd2>
	  case 2:
	  	 subMenu2();
 800137a:	f7ff fecd 	bl	8001118 <subMenu2>
	  break;
 800137e:	e006      	b.n	800138e <main+0xd2>
	  case 3:
	  	 subMenu3();
 8001380:	f7ff ff30 	bl	80011e4 <subMenu3>
	  break;
 8001384:	e003      	b.n	800138e <main+0xd2>
	  case 4:
	  	 subMenu4();
 8001386:	f7ff ff63 	bl	8001250 <subMenu4>
	  break;
 800138a:	bf00      	nop
 800138c:	e7b3      	b.n	80012f6 <main+0x3a>
	  switch(position)
 800138e:	e7b2      	b.n	80012f6 <main+0x3a>
 8001390:	20000124 	.word	0x20000124
 8001394:	20000170 	.word	0x20000170
 8001398:	2000024a 	.word	0x2000024a
 800139c:	3c23d70a 	.word	0x3c23d70a
 80013a0:	20000260 	.word	0x20000260
 80013a4:	2000024c 	.word	0x2000024c

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09c      	sub	sp, #112	; 0x70
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b2:	2228      	movs	r2, #40	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fb92 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2234      	movs	r2, #52	; 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fb84 	bl	8005ae0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013d8:	2303      	movs	r3, #3
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001402:	4618      	mov	r0, r3
 8001404:	f001 feca 	bl	800319c <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800140e:	f000 f9df 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fef2 	bl	8004218 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800143a:	f000 f9c9 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143e:	2320      	movs	r3, #32
 8001440:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f91b 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001454:	f000 f9bc 	bl	80017d0 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3770      	adds	r7, #112	; 0x70
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_DAC_Init+0x4c>)
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <MX_DAC_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_DAC_Init+0x4c>)
 8001478:	f000 fd7f 	bl	8001f7a <HAL_DAC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001482:	f000 f9a5 	bl	80017d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001486:	2304      	movs	r3, #4
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_DAC_Init+0x4c>)
 8001496:	f000 fe5f 	bl	8002158 <HAL_DAC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80014a0:	f000 f996 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000078 	.word	0x20000078
 80014b0:	40007400 	.word	0x40007400

080014b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MX_I2C1_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MX_I2C1_Init+0x7c>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_I2C1_Init+0x74>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_I2C1_Init+0x74>)
 80014f0:	f001 fa28 	bl	8002944 <HAL_I2C_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fa:	f000 f969 	bl	80017d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <MX_I2C1_Init+0x74>)
 8001502:	f001 fdb3 	bl	800306c <HAL_I2CEx_ConfigAnalogFilter>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800150c:	f000 f960 	bl	80017d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001510:	2100      	movs	r1, #0
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_I2C1_Init+0x74>)
 8001514:	f001 fdf5 	bl	8003102 <HAL_I2CEx_ConfigDigitalFilter>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800151e:	f000 f957 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000d0 	.word	0x200000d0
 800152c:	40005400 	.word	0x40005400
 8001530:	2000090e 	.word	0x2000090e

08001534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f004 facc 	bl	8005ae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_TIM2_Init+0xa4>)
 8001554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_TIM2_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM2_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_TIM2_Init+0xa4>)
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM2_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800157a:	2303      	movs	r3, #3
 800157c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800157e:	2302      	movs	r3, #2
 8001580:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001592:	2301      	movs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM2_Init+0xa4>)
 80015a6:	f003 faa3 	bl	8004af0 <HAL_TIM_Encoder_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80015b0:	f000 f90e 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM2_Init+0xa4>)
 80015c2:	f003 fdc5 	bl	8005150 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015cc:	f000 f900 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000124 	.word	0x20000124

080015dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_TIM6_Init+0x64>)
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <MX_TIM6_Init+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_TIM6_Init+0x64>)
 80015f4:	2247      	movs	r2, #71	; 0x47
 80015f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_TIM6_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_TIM6_Init+0x64>)
 8001600:	2264      	movs	r2, #100	; 0x64
 8001602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_TIM6_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_TIM6_Init+0x64>)
 800160c:	f003 f9cc 	bl	80049a8 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001616:	f000 f8db 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800161a:	2320      	movs	r3, #32
 800161c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_TIM6_Init+0x64>)
 8001628:	f003 fd92 	bl	8005150 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001632:	f000 f8cd 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000170 	.word	0x20000170
 8001644:	40001000 	.word	0x40001000

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <MX_USART2_UART_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001654:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_USART2_UART_Init+0x58>)
 800168c:	f003 fde4 	bl	8005258 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f000 f89b 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001bc 	.word	0x200001bc
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_DMA_Init+0x38>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <MX_DMA_Init+0x38>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_DMA_Init+0x38>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200d      	movs	r0, #13
 80016cc:	f000 fc1f 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d0:	200d      	movs	r0, #13
 80016d2:	f000 fc38 	bl	8001f46 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <MX_GPIO_Init+0xe0>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <MX_GPIO_Init+0xe0>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_GPIO_Init+0xe0>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buxx_GPIO_Port, buxx_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001760:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_GPIO_Init+0xe4>)
 8001762:	f001 f8d7 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <MX_GPIO_Init+0xe8>)
 800177e:	f000 ff3f 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : buxx_Pin */
  GPIO_InitStruct.Pin = buxx_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(buxx_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0xe4>)
 800179c:	f000 ff30 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : bton_Pin */
  GPIO_InitStruct.Pin = bton_Pin;
 80017a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(bton_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f000 ff22 	bl	8002600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x44>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001812:	2007      	movs	r0, #7
 8001814:	f000 fb70 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <HAL_DAC_MspInit+0xd0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d152      	bne.n	80018ec <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 800184c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_DAC_MspInit+0xd4>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001876:	2310      	movs	r3, #16
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187a:	2303      	movs	r3, #3
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f000 feb8 	bl	8002600 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_DAC_MspInit+0xdc>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 8001898:	2210      	movs	r2, #16
 800189a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018ba:	2220      	movs	r2, #32
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018c6:	f000 fcca 	bl	800225e <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80018d0:	f7ff ff7e 	bl	80017d0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_DAC_MspInit+0xe0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_DAC_MspInit+0xe0>)
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_DAC_MspInit+0xd8>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40007400 	.word	0x40007400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	2000008c 	.word	0x2000008c
 8001900:	40020030 	.word	0x40020030
 8001904:	40010000 	.word	0x40010000

08001908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_I2C_MspInit+0x7c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d128      	bne.n	800197c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_I2C_MspInit+0x80>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_I2C_MspInit+0x80>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6153      	str	r3, [r2, #20]
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_I2C_MspInit+0x80>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001954:	2304      	movs	r3, #4
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <HAL_I2C_MspInit+0x84>)
 8001960:	f000 fe4e 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_I2C_MspInit+0x80>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_I2C_MspInit+0x80>)
 800196a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196e:	61d3      	str	r3, [r2, #28]
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_I2C_MspInit+0x80>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40005400 	.word	0x40005400
 8001988:	40021000 	.word	0x40021000
 800198c:	48000400 	.word	0x48000400

08001990 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d130      	bne.n	8001a14 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019e2:	2303      	movs	r3, #3
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f2:	2301      	movs	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a00:	f000 fdfe 	bl	8002600 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	201c      	movs	r0, #28
 8001a0a:	f000 fa80 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f000 fa99 	bl	8001f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x38>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10b      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40001000 	.word	0x40001000
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_UART_MspInit+0x7c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d128      	bne.n	8001ad4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0x80>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad0:	f000 fd96 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8ce 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA1_Channel3_IRQHandler+0x10>)
 8001b3e:	f000 fc6d 	bl	800241c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000008c 	.word	0x2000008c

08001b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM2_IRQHandler+0x10>)
 8001b52:	f003 f921 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000124 	.word	0x20000124

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f003 ffae 	bl	8005af0 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20004000 	.word	0x20004000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	20000584 	.word	0x20000584
 8001bc8:	200006d8 	.word	0x200006d8

08001bcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff ffea 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f003 ff6d 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c22:	f7ff fb4b 	bl	80012bc <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c34:	08007750 	.word	0x08007750
  ldr r2, =_sbss
 8001c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c3c:	200006d4 	.word	0x200006d4

08001c40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_Init+0x28>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_Init+0x28>)
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f000 f94f 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f808 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c60:	f7ff fdbc 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x54>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x58>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f967 	bl	8001f62 <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00e      	b.n	8001cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d80a      	bhi.n	8001cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f000 f92f 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <HAL_InitTick+0x5c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000588 	.word	0x20000588

08001cf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000588 	.word	0x20000588

08001d10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff3e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff31 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e014      	b.n	8001fb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fc41 	bl	8001824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10e      	bne.n	8002022 <HAL_DAC_Stop_DMA+0x64>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f9ce 	bl	80023aa <HAL_DMA_Abort>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002020:	601a      	str	r2, [r3, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2204      	movs	r2, #4
 800202c:	711a      	strb	r2, [r3, #4]
 800202e:	e002      	b.n	8002036 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_DAC_Start_DMA+0x1e>
 8002096:	2302      	movs	r3, #2
 8002098:	e053      	b.n	8002142 <HAL_DAC_Start_DMA+0xc6>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2202      	movs	r2, #2
 80020a4:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_DAC_Start_DMA+0xd0>)
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_DAC_Start_DMA+0xd4>)
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_DAC_Start_DMA+0xd8>)
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020cc:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d013      	beq.n	80020fc <HAL_DAC_Start_DMA+0x80>
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d815      	bhi.n	8002106 <HAL_DAC_Start_DMA+0x8a>
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_DAC_Start_DMA+0x6c>
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d005      	beq.n	80020f2 <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 80020e6:	e00e      	b.n	8002106 <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3308      	adds	r3, #8
 80020ee:	617b      	str	r3, [r7, #20]
      break;
 80020f0:	e00a      	b.n	8002108 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	617b      	str	r3, [r7, #20]
      break;
 80020fa:	e005      	b.n	8002108 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3310      	adds	r3, #16
 8002102:	617b      	str	r3, [r7, #20]
      break;
 8002104:	e000      	b.n	8002108 <HAL_DAC_Start_DMA+0x8c>
      break;
 8002106:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002116:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6898      	ldr	r0, [r3, #8]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	f000 f8e3 	bl	80022ec <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	080021f3 	.word	0x080021f3
 8002150:	08002215 	.word	0x08002215
 8002154:	08002231 	.word	0x08002231

08002158 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	795b      	ldrb	r3, [r3, #5]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_DAC_ConfigChannel+0x20>
 8002174:	2302      	movs	r3, #2
 8002176:	e036      	b.n	80021e6 <HAL_DAC_ConfigChannel+0x8e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2202      	movs	r2, #2
 8002182:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800218c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4013      	ands	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	22c0      	movs	r2, #192	; 0xc0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff ff1d 	bl	8002040 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff ff16 	bl	8002054 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ff0c 	bl	8002068 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	711a      	strb	r2, [r3, #4]
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e037      	b.n	80022e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800228a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800228e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f97a 	bl	80025c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}  
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_DMA_Start_IT+0x20>
 8002308:	2302      	movs	r3, #2
 800230a:	e04a      	b.n	80023a2 <HAL_DMA_Start_IT+0xb6>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800231a:	2b01      	cmp	r3, #1
 800231c:	d13a      	bne.n	8002394 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f90d 	bl	8002562 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 020e 	orr.w	r2, r2, #14
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e00f      	b.n	8002382 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 020a 	orr.w	r2, r2, #10
 8002370:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0204 	bic.w	r2, r2, #4
 8002380:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e005      	b.n	80023a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800239c:	2302      	movs	r3, #2
 800239e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2204      	movs	r2, #4
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e020      	b.n	8002410 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 020e 	bic.w	r2, r2, #14
 80023dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2204      	movs	r2, #4
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d024      	beq.n	800248e <HAL_DMA_IRQHandler+0x72>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01f      	beq.n	800248e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2104      	movs	r1, #4
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d06a      	beq.n	800255a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800248c:	e065      	b.n	800255a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2202      	movs	r2, #2
 8002494:	409a      	lsls	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02c      	beq.n	80024f8 <HAL_DMA_IRQHandler+0xdc>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d027      	beq.n	80024f8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 020a 	bic.w	r2, r2, #10
 80024c4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	2102      	movs	r1, #2
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d035      	beq.n	800255a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80024f6:	e030      	b.n	800255a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2208      	movs	r2, #8
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d028      	beq.n	800255a <HAL_DMA_IRQHandler+0x13e>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d023      	beq.n	800255a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 020e 	bic.w	r2, r2, #14
 8002520:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
    }
  }
}  
 8002558:	e7ff      	b.n	800255a <HAL_DMA_IRQHandler+0x13e>
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d108      	bne.n	80025a2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025a0:	e007      	b.n	80025b2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	60da      	str	r2, [r3, #12]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <DMA_CalcBaseAndBitshift+0x34>)
 80025d0:	4413      	add	r3, r2
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <DMA_CalcBaseAndBitshift+0x38>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <DMA_CalcBaseAndBitshift+0x3c>)
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	bffdfff8 	.word	0xbffdfff8
 80025f8:	cccccccd 	.word	0xcccccccd
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260e:	e14e      	b.n	80028ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8140 	beq.w	80028a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d005      	beq.n	8002640 <HAL_GPIO_Init+0x40>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d130      	bne.n	80026a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002676:	2201      	movs	r2, #1
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	f003 0201 	and.w	r2, r3, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d017      	beq.n	80026de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d123      	bne.n	8002732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	6939      	ldr	r1, [r7, #16]
 800272e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0203 	and.w	r2, r3, #3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 809a 	beq.w	80028a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027b6:	d013      	beq.n	80027e0 <HAL_GPIO_Init+0x1e0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <HAL_GPIO_Init+0x2d4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00d      	beq.n	80027dc <HAL_GPIO_Init+0x1dc>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_GPIO_Init+0x2d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <HAL_GPIO_Init+0x1d8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_GPIO_Init+0x2dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_GPIO_Init+0x1d4>
 80027d0:	2303      	movs	r3, #3
 80027d2:	e006      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027d4:	2305      	movs	r3, #5
 80027d6:	e004      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027d8:	2302      	movs	r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027e0:	2300      	movs	r3, #0
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4093      	lsls	r3, r2
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027f2:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002824:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800284e:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f aea9 	bne.w	8002610 <HAL_GPIO_Init+0x10>
  }
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	48000400 	.word	0x48000400
 80028d8:	48000800 	.word	0x48000800
 80028dc:	48000c00 	.word	0x48000c00
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e001      	b.n	8002906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002930:	e002      	b.n	8002938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e081      	b.n	8002a5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe ffcc 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e006      	b.n	80029cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d104      	bne.n	80029de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	f040 80da 	bne.w	8002c3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x30>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e0d3      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a9c:	f7ff f92c 	bl	8001cf8 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2319      	movs	r3, #25
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8f0 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0be      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2221      	movs	r2, #33	; 0x21
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	893a      	ldrh	r2, [r7, #8]
 8002ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2bff      	cmp	r3, #255	; 0xff
 8002aee:	d90e      	bls.n	8002b0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa7e 	bl	8003008 <I2C_TransferConfig>
 8002b0c:	e06c      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa6d 	bl	8003008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b2e:	e05b      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	6a39      	ldr	r1, [r7, #32]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f8fc 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e07b      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d034      	beq.n	8002be8 <HAL_I2C_Master_Transmit+0x184>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d130      	bne.n	8002be8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f87f 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e04d      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2bff      	cmp	r3, #255	; 0xff
 8002ba8:	d90e      	bls.n	8002bc8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	8979      	ldrh	r1, [r7, #10]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fa21 	bl	8003008 <I2C_TransferConfig>
 8002bc6:	e00f      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	8979      	ldrh	r1, [r7, #10]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa10 	bl	8003008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d19e      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	6a39      	ldr	r1, [r7, #32]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8e2 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e01a      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	80002000 	.word	0x80002000
 8002c48:	fe00e800 	.word	0xfe00e800

08002c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d103      	bne.n	8002c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d007      	beq.n	8002c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	619a      	str	r2, [r3, #24]
  }
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	e031      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d02d      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f823 	bl	8001cf8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d122      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d113      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0be      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d3e:	e033      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f87f 	bl	8002e48 <I2C_IsErrorOccurred>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e031      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d025      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7fe ffcc 	bl	8001cf8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11a      	bne.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d013      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d1c4      	bne.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	e02f      	b.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f838 	bl	8002e48 <I2C_IsErrorOccurred>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe ff89 	bl	8001cf8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d013      	beq.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d1c8      	bne.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d068      	beq.n	8002f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e7c:	e049      	b.n	8002f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d045      	beq.n	8002f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe ff37 	bl	8001cf8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_IsErrorOccurred+0x54>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13a      	bne.n	8002f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebe:	d121      	bne.n	8002f04 <I2C_IsErrorOccurred+0xbc>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec6:	d01d      	beq.n	8002f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d01a      	beq.n	8002f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ede:	f7fe ff0b 	bl	8001cf8 <HAL_GetTick>
 8002ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee4:	e00e      	b.n	8002f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ee6:	f7fe ff07 	bl	8001cf8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b19      	cmp	r3, #25
 8002ef2:	d907      	bls.n	8002f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f02:	e006      	b.n	8002f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d1e9      	bne.n	8002ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d003      	beq.n	8002f28 <I2C_IsErrorOccurred+0xe0>
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0aa      	beq.n	8002e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2220      	movs	r2, #32
 8002f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fe45 	bl	8002c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <I2C_IsErrorOccurred+0x1bc>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	fe00e800 	.word	0xfe00e800

08003008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	4613      	mov	r3, r2
 8003018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003020:	7a7b      	ldrb	r3, [r7, #9]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	4313      	orrs	r3, r2
 8003032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <I2C_TransferConfig+0x60>)
 8003048:	430b      	orrs	r3, r1
 800304a:	43db      	mvns	r3, r3
 800304c:	ea02 0103 	and.w	r1, r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	03ff63ff 	.word	0x03ff63ff

0800306c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d138      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e032      	b.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	d139      	bne.n	800318c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003122:	2302      	movs	r3, #2
 8003124:	e033      	b.n	800318e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	; 0x24
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f001 b823 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 817d 	beq.w	80034d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031d8:	4bbc      	ldr	r3, [pc, #752]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e4:	4bb9      	ldr	r3, [pc, #740]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d15c      	bne.n	80032aa <HAL_RCC_OscConfig+0x10e>
 80031f0:	4bb6      	ldr	r3, [pc, #728]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d155      	bne.n	80032aa <HAL_RCC_OscConfig+0x10e>
 80031fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003202:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003212:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_RCC_OscConfig+0x94>
 800322a:	4ba8      	ldr	r3, [pc, #672]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	e015      	b.n	800325c <HAL_RCC_OscConfig+0xc0>
 8003230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003234:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003248:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800324c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003258:	4b9c      	ldr	r3, [pc, #624]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003260:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003264:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003268:	fa92 f2a2 	rbit	r2, r2
 800326c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003270:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003274:	fab2 f282 	clz	r2, r2
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	f042 0220 	orr.w	r2, r2, #32
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f002 021f 	and.w	r2, r2, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f202 	lsl.w	r2, r1, r2
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 811f 	beq.w	80034d0 <HAL_RCC_OscConfig+0x334>
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 8116 	bne.w	80034d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f000 bfaf 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x12e>
 80032bc:	4b83      	ldr	r3, [pc, #524]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a82      	ldr	r2, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e036      	b.n	8003338 <HAL_RCC_OscConfig+0x19c>
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x158>
 80032da:	4b7c      	ldr	r3, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7b      	ldr	r2, [pc, #492]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b79      	ldr	r3, [pc, #484]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e021      	b.n	8003338 <HAL_RCC_OscConfig+0x19c>
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x184>
 8003306:	4b71      	ldr	r3, [pc, #452]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a70      	ldr	r2, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b6e      	ldr	r3, [pc, #440]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6d      	ldr	r2, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0x19c>
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a69      	ldr	r2, [pc, #420]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b67      	ldr	r3, [pc, #412]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a66      	ldr	r2, [pc, #408]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f023 020f 	bic.w	r2, r3, #15
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	495f      	ldr	r1, [pc, #380]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 800334e:	4313      	orrs	r3, r2
 8003350:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d059      	beq.n	8003416 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fcc9 	bl	8001cf8 <HAL_GetTick>
 8003366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fcc4 	bl	8001cf8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d902      	bls.n	8003382 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	f000 bf43 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 8003382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003386:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003396:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_OscConfig+0x218>
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_OscConfig+0x244>
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033f8:	fab2 f282 	clz	r2, r2
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	f042 0220 	orr.w	r2, r2, #32
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f002 021f 	and.w	r2, r2, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ab      	beq.n	800336c <HAL_RCC_OscConfig+0x1d0>
 8003414:	e05d      	b.n	80034d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fc6f 	bl	8001cf8 <HAL_GetTick>
 800341a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe fc6a 	bl	8001cf8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d902      	bls.n	8003436 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	f000 bee9 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 8003436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800344a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0x2cc>
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e015      	b.n	8003494 <HAL_RCC_OscConfig+0x2f8>
 8003468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800347c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003480:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003484:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_RCC_OscConfig+0x330>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003498:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800349c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ab      	bne.n	8003420 <HAL_RCC_OscConfig+0x284>
 80034c8:	e003      	b.n	80034d2 <HAL_RCC_OscConfig+0x336>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 817d 	beq.w	80037e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034e8:	4ba6      	ldr	r3, [pc, #664]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f4:	4ba3      	ldr	r3, [pc, #652]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d172      	bne.n	80035e6 <HAL_RCC_OscConfig+0x44a>
 8003500:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d16c      	bne.n	80035e6 <HAL_RCC_OscConfig+0x44a>
 800350c:	2302      	movs	r3, #2
 800350e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800351e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_RCC_OscConfig+0x3a0>
 8003536:	4b93      	ldr	r3, [pc, #588]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0x3c8>
 800353c:	2302      	movs	r3, #2
 800353e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003554:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003560:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800356a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800356e:	fa92 f2a2 	rbit	r2, r2
 8003572:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003576:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800357a:	fab2 f282 	clz	r2, r2
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	f042 0220 	orr.w	r2, r2, #32
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f002 021f 	and.w	r2, r2, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCC_OscConfig+0x410>
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f000 be2e 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b75      	ldr	r3, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	21f8      	movs	r1, #248	; 0xf8
 80035c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035ca:	fa91 f1a1 	rbit	r1, r1
 80035ce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035d6:	fab1 f181 	clz	r1, r1
 80035da:	b2c9      	uxtb	r1, r1
 80035dc:	408b      	lsls	r3, r1
 80035de:	4969      	ldr	r1, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e4:	e0fd      	b.n	80037e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8088 	beq.w	8003708 <HAL_RCC_OscConfig+0x56c>
 80035f8:	2301      	movs	r3, #1
 80035fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800360a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003618:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	461a      	mov	r2, r3
 8003620:	2301      	movs	r3, #1
 8003622:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe fb68 	bl	8001cf8 <HAL_GetTick>
 8003628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe fb63 	bl	8001cf8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	f000 bde2 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 8003644:	2302      	movs	r3, #2
 8003646:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003656:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_RCC_OscConfig+0x4d8>
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e013      	b.n	800369c <HAL_RCC_OscConfig+0x500>
 8003674:	2302      	movs	r3, #2
 8003676:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003686:	2302      	movs	r3, #2
 8003688:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800368c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003698:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2202      	movs	r2, #2
 800369e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036a6:	fa92 f2a2 	rbit	r2, r2
 80036aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0af      	beq.n	800362e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	21f8      	movs	r1, #248	; 0xf8
 80036e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036ec:	fa91 f1a1 	rbit	r1, r1
 80036f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036f8:	fab1 f181 	clz	r1, r1
 80036fc:	b2c9      	uxtb	r1, r1
 80036fe:	408b      	lsls	r3, r1
 8003700:	4920      	ldr	r1, [pc, #128]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
 8003706:	e06c      	b.n	80037e2 <HAL_RCC_OscConfig+0x646>
 8003708:	2301      	movs	r3, #1
 800370a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800371a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fae0 	bl	8001cf8 <HAL_GetTick>
 8003738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe fadb 	bl	8001cf8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	f000 bd5a 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 8003754:	2302      	movs	r3, #2
 8003756:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d104      	bne.n	8003788 <HAL_RCC_OscConfig+0x5ec>
 800377e:	4b01      	ldr	r3, [pc, #4]	; (8003784 <HAL_RCC_OscConfig+0x5e8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e015      	b.n	80037b0 <HAL_RCC_OscConfig+0x614>
 8003784:	40021000 	.word	0x40021000
 8003788:	2302      	movs	r3, #2
 800378a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800379a:	2302      	movs	r3, #2
 800379c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037ac:	4bc8      	ldr	r3, [pc, #800]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2202      	movs	r2, #2
 80037b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037ba:	fa92 f2a2 	rbit	r2, r2
 80037be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037c6:	fab2 f282 	clz	r2, r2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	f042 0220 	orr.w	r2, r2, #32
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f002 021f 	and.w	r2, r2, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ad      	bne.n	800373e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8110 	beq.w	8003a18 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d079      	beq.n	80038fc <HAL_RCC_OscConfig+0x760>
 8003808:	2301      	movs	r3, #1
 800380a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800381a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4bab      	ldr	r3, [pc, #684]	; (8003ad4 <HAL_RCC_OscConfig+0x938>)
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	2301      	movs	r3, #1
 8003830:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7fe fa61 	bl	8001cf8 <HAL_GetTick>
 8003836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383c:	f7fe fa5c 	bl	8001cf8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d902      	bls.n	8003852 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	f000 bcdb 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800386c:	2202      	movs	r2, #2
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003890:	2202      	movs	r2, #2
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ac:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038b8:	2102      	movs	r1, #2
 80038ba:	6019      	str	r1, [r3, #0]
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f1a3 	rbit	r1, r3
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038d2:	6019      	str	r1, [r3, #0]
  return result;
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0a0      	beq.n	800383c <HAL_RCC_OscConfig+0x6a0>
 80038fa:	e08d      	b.n	8003a18 <HAL_RCC_OscConfig+0x87c>
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fa93 f2a3 	rbit	r2, r3
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800391e:	601a      	str	r2, [r3, #0]
  return result;
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003928:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x938>)
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe f9db 	bl	8001cf8 <HAL_GetTick>
 8003942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe f9d6 	bl	8001cf8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d902      	bls.n	800395e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	f000 bc55 	b.w	8004208 <HAL_RCC_OscConfig+0x106c>
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003966:	2202      	movs	r2, #2
 8003968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	fa93 f2a3 	rbit	r2, r3
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800398a:	2202      	movs	r2, #2
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ae:	2202      	movs	r2, #2
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	fa93 f2a3 	rbit	r2, r3
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ca:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 80039cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039d6:	2102      	movs	r1, #2
 80039d8:	6019      	str	r1, [r3, #0]
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f1a3 	rbit	r1, r3
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039f0:	6019      	str	r1, [r3, #0]
  return result;
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d197      	bne.n	8003948 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 81a1 	beq.w	8003d70 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	61d3      	str	r3, [r2, #28]
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a66:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_RCC_OscConfig+0x93c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11a      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_RCC_OscConfig+0x93c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <HAL_RCC_OscConfig+0x93c>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe f937 	bl	8001cf8 <HAL_GetTick>
 8003a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	e009      	b.n	8003aa4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fe f932 	bl	8001cf8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b64      	cmp	r3, #100	; 0x64
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e3b1      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <HAL_RCC_OscConfig+0x93c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <HAL_RCC_OscConfig+0x940>
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a02      	ldr	r2, [pc, #8]	; (8003ad0 <HAL_RCC_OscConfig+0x934>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e03c      	b.n	8003b48 <HAL_RCC_OscConfig+0x9ac>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	10908120 	.word	0x10908120
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x96a>
 8003aec:	4bc1      	ldr	r3, [pc, #772]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4ac0      	ldr	r2, [pc, #768]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	4bbe      	ldr	r3, [pc, #760]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4abd      	ldr	r2, [pc, #756]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003afe:	f023 0304 	bic.w	r3, r3, #4
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	e020      	b.n	8003b48 <HAL_RCC_OscConfig+0x9ac>
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x994>
 8003b16:	4bb7      	ldr	r3, [pc, #732]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4ab6      	ldr	r2, [pc, #728]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6213      	str	r3, [r2, #32]
 8003b22:	4bb4      	ldr	r3, [pc, #720]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4ab3      	ldr	r2, [pc, #716]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x9ac>
 8003b30:	4bb0      	ldr	r3, [pc, #704]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4aaf      	ldr	r2, [pc, #700]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	4bad      	ldr	r3, [pc, #692]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4aac      	ldr	r2, [pc, #688]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8081 	beq.w	8003c5c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe f8cd 	bl	8001cf8 <HAL_GetTick>
 8003b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe f8c8 	bl	8001cf8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e345      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	fa93 f2a3 	rbit	r2, r3
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bc2:	601a      	str	r2, [r3, #0]
  return result;
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d102      	bne.n	8003be8 <HAL_RCC_OscConfig+0xa4c>
 8003be2:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	e013      	b.n	8003c10 <HAL_RCC_OscConfig+0xa74>
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4b79      	ldr	r3, [pc, #484]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c18:	2102      	movs	r1, #2
 8003c1a:	6011      	str	r1, [r2, #0]
 8003c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	fa92 f1a2 	rbit	r1, r2
 8003c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c32:	6011      	str	r1, [r2, #0]
  return result;
 8003c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c38:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d084      	beq.n	8003b64 <HAL_RCC_OscConfig+0x9c8>
 8003c5a:	e07f      	b.n	8003d5c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe f84c 	bl	8001cf8 <HAL_GetTick>
 8003c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00b      	b.n	8003c7e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f847 	bl	8001cf8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e2c4      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c86:	2202      	movs	r2, #2
 8003c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	fa93 f2a3 	rbit	r2, r3
 8003c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003caa:	2202      	movs	r2, #2
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fa93 f2a3 	rbit	r2, r3
 8003cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cc4:	601a      	str	r2, [r3, #0]
  return result;
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0xb4e>
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	e013      	b.n	8003d12 <HAL_RCC_OscConfig+0xb76>
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f2a3 	rbit	r2, r3
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	6011      	str	r1, [r2, #0]
 8003d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	fa92 f1a2 	rbit	r1, r2
 8003d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d34:	6011      	str	r1, [r2, #0]
  return result;
 8003d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d3a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d184      	bne.n	8003c66 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8242 	beq.w	8004206 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_RCC_OscConfig+0xc58>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	f000 8213 	beq.w	80041b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f040 8162 	bne.w	8004066 <HAL_RCC_OscConfig+0xeca>
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003daa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dc6:	601a      	str	r2, [r3, #0]
  return result;
 8003dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dcc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd ff86 	bl	8001cf8 <HAL_GetTick>
 8003dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df0:	e00c      	b.n	8003e0c <HAL_RCC_OscConfig+0xc70>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd ff7e 	bl	8001cf8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1fd      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	fa93 f2a3 	rbit	r2, r3
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e30:	601a      	str	r2, [r3, #0]
  return result;
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_OscConfig+0xcba>
 8003e50:	4bb0      	ldr	r3, [pc, #704]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	e027      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd0a>
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	4b9c      	ldr	r3, [pc, #624]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eaa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003eae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003eb2:	6011      	str	r1, [r2, #0]
 8003eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	fa92 f1a2 	rbit	r1, r2
 8003ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eca:	6011      	str	r1, [r2, #0]
  return result;
 8003ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	fab2 f282 	clz	r2, r2
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f042 0220 	orr.w	r2, r2, #32
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f002 021f 	and.w	r2, r2, #31
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d182      	bne.n	8003df8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	430b      	orrs	r3, r1
 8003f14:	497f      	ldr	r1, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	fa93 f2a3 	rbit	r2, r3
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f3e:	601a      	str	r2, [r3, #0]
  return result;
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd feca 	bl	8001cf8 <HAL_GetTick>
 8003f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f68:	e009      	b.n	8003f7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd fec5 	bl	8001cf8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e144      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f2a3 	rbit	r2, r3
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fa2:	601a      	str	r2, [r3, #0]
  return result;
 8003fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xe2c>
 8003fc2:	4b54      	ldr	r3, [pc, #336]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	e027      	b.n	8004018 <HAL_RCC_OscConfig+0xe7c>
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fa92 f1a2 	rbit	r1, r2
 8004034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004038:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800403c:	6011      	str	r1, [r2, #0]
  return result;
 800403e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004042:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fab2 f282 	clz	r2, r2
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	f002 021f 	and.w	r2, r2, #31
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d082      	beq.n	8003f6a <HAL_RCC_OscConfig+0xdce>
 8004064:	e0cf      	b.n	8004206 <HAL_RCC_OscConfig+0x106a>
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800406e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	fa93 f2a3 	rbit	r2, r3
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800408a:	601a      	str	r2, [r3, #0]
  return result;
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004094:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd fe24 	bl	8001cf8 <HAL_GetTick>
 80040b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b4:	e009      	b.n	80040ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fd fe1f 	bl	8001cf8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e09e      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	fa93 f2a3 	rbit	r2, r3
 80040e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040ee:	601a      	str	r2, [r3, #0]
  return result;
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d104      	bne.n	8004118 <HAL_RCC_OscConfig+0xf7c>
 800410e:	4b01      	ldr	r3, [pc, #4]	; (8004114 <HAL_RCC_OscConfig+0xf78>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	e029      	b.n	8004168 <HAL_RCC_OscConfig+0xfcc>
 8004114:	40021000 	.word	0x40021000
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	fa93 f2a3 	rbit	r2, r3
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCC_OscConfig+0x1078>)
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800416c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004170:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800417a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	fa92 f1a2 	rbit	r1, r2
 8004184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004188:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800418c:	6011      	str	r1, [r2, #0]
  return result;
 800418e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004192:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f042 0220 	orr.w	r2, r2, #32
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f002 021f 	and.w	r2, r2, #31
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f202 	lsl.w	r2, r1, r2
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d180      	bne.n	80040b6 <HAL_RCC_OscConfig+0xf1a>
 80041b4:	e027      	b.n	8004206 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01e      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_OscConfig+0x1078>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d10b      	bne.n	8004202 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000

08004218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b09e      	sub	sp, #120	; 0x78
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e162      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b90      	ldr	r3, [pc, #576]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d910      	bls.n	8004260 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b8d      	ldr	r3, [pc, #564]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	498b      	ldr	r1, [pc, #556]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b89      	ldr	r3, [pc, #548]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e14a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b82      	ldr	r3, [pc, #520]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	497f      	ldr	r1, [pc, #508]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80dc 	beq.w	8004444 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d13c      	bne.n	800430e <HAL_RCC_ClockConfig+0xf6>
 8004294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004298:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a4:	fab3 f383 	clz	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_RCC_ClockConfig+0xa6>
 80042b8:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	e00f      	b.n	80042de <HAL_RCC_ClockConfig+0xc6>
 80042be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	667b      	str	r3, [r7, #100]	; 0x64
 80042cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d0:	663b      	str	r3, [r7, #96]	; 0x60
 80042d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042da:	4b67      	ldr	r3, [pc, #412]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80042e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e6:	fa92 f2a2 	rbit	r2, r2
 80042ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042ee:	fab2 f282 	clz	r2, r2
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	f042 0220 	orr.w	r2, r2, #32
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f002 021f 	and.w	r2, r2, #31
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d17b      	bne.n	8004402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0f3      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d13c      	bne.n	8004390 <HAL_RCC_ClockConfig+0x178>
 8004316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800431a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_RCC_ClockConfig+0x128>
 800433a:	4b4f      	ldr	r3, [pc, #316]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	e00f      	b.n	8004360 <HAL_RCC_ClockConfig+0x148>
 8004340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
 800434e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004352:	643b      	str	r3, [r7, #64]	; 0x40
 8004354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435c:	4b46      	ldr	r3, [pc, #280]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004364:	63ba      	str	r2, [r7, #56]	; 0x38
 8004366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004368:	fa92 f2a2 	rbit	r2, r2
 800436c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004370:	fab2 f282 	clz	r2, r2
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	f042 0220 	orr.w	r2, r2, #32
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	f002 021f 	and.w	r2, r2, #31
 8004380:	2101      	movs	r1, #1
 8004382:	fa01 f202 	lsl.w	r2, r1, r2
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d13a      	bne.n	8004402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0b2      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
 8004390:	2302      	movs	r3, #2
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x1a0>
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	e00d      	b.n	80043d4 <HAL_RCC_ClockConfig+0x1bc>
 80043b8:	2302      	movs	r3, #2
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
 80043c4:	2302      	movs	r3, #2
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2202      	movs	r2, #2
 80043d6:	61ba      	str	r2, [r7, #24]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	fa92 f2a2 	rbit	r2, r2
 80043de:	617a      	str	r2, [r7, #20]
  return result;
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f002 021f 	and.w	r2, r2, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e079      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f023 0203 	bic.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	491a      	ldr	r1, [pc, #104]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004414:	f7fd fc70 	bl	8001cf8 <HAL_GetTick>
 8004418:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	e00a      	b.n	8004432 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441c:	f7fd fc6c 	bl	8001cf8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e061      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_RCC_ClockConfig+0x260>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 020c 	and.w	r2, r3, #12
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	429a      	cmp	r2, r3
 8004442:	d1eb      	bne.n	800441c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d214      	bcs.n	800447c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 0207 	bic.w	r2, r3, #7
 800445a:	4906      	ldr	r1, [pc, #24]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCC_ClockConfig+0x25c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e040      	b.n	80044f6 <HAL_RCC_ClockConfig+0x2de>
 8004474:	40022000 	.word	0x40022000
 8004478:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_RCC_ClockConfig+0x2e8>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	491a      	ldr	r1, [pc, #104]	; (8004500 <HAL_RCC_ClockConfig+0x2e8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x2e8>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4912      	ldr	r1, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x2e8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044ba:	f000 f829 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044be:	4601      	mov	r1, r0
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCC_ClockConfig+0x2e8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	22f0      	movs	r2, #240	; 0xf0
 80044ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	fa92 f2a2 	rbit	r2, r2
 80044d2:	60fa      	str	r2, [r7, #12]
  return result;
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	fab2 f282 	clz	r2, r2
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	40d3      	lsrs	r3, r2
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x2ec>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	fa21 f303 	lsr.w	r3, r1, r3
 80044e6:	4a08      	ldr	r2, [pc, #32]	; (8004508 <HAL_RCC_ClockConfig+0x2f0>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_RCC_ClockConfig+0x2f4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fbbe 	bl	8001c70 <HAL_InitTick>
  
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3778      	adds	r7, #120	; 0x78
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	08007504 	.word	0x08007504
 8004508:	20000000 	.word	0x20000000
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b08b      	sub	sp, #44	; 0x2c
 8004514:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800452a:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b04      	cmp	r3, #4
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x30>
 800453a:	2b08      	cmp	r3, #8
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x36>
 800453e:	e03c      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004542:	623b      	str	r3, [r7, #32]
      break;
 8004544:	e03c      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800454c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004550:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	fa92 f2a2 	rbit	r2, r2
 8004558:	607a      	str	r2, [r7, #4]
  return result;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	40d3      	lsrs	r3, r2
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	220f      	movs	r2, #15
 8004574:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	60fa      	str	r2, [r7, #12]
  return result;
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a14      	ldr	r2, [pc, #80]	; (80045dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	e004      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	623b      	str	r3, [r7, #32]
      break;
 80045b8:	e002      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045bc:	623b      	str	r3, [r7, #32]
      break;
 80045be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	372c      	adds	r7, #44	; 0x2c
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	007a1200 	.word	0x007a1200
 80045d8:	0800751c 	.word	0x0800751c
 80045dc:	0800752c 	.word	0x0800752c
 80045e0:	003d0900 	.word	0x003d0900

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000000 	.word	0x20000000

080045fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004602:	f7ff ffef 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004606:	4601      	mov	r1, r0
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004610:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004614:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	fa92 f2a2 	rbit	r2, r2
 800461c:	603a      	str	r2, [r7, #0]
  return result;
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	fab2 f282 	clz	r2, r2
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	40d3      	lsrs	r3, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_RCC_GetPCLK1Freq+0x40>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	08007514 	.word	0x08007514

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004646:	f7ff ffcd 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800464a:	4601      	mov	r1, r0
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004654:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004658:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	fa92 f2a2 	rbit	r2, r2
 8004660:	603a      	str	r2, [r7, #0]
  return result;
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	40d3      	lsrs	r3, r2
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x40>)
 800466e:	5cd3      	ldrb	r3, [r2, r3]
 8004670:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	08007514 	.word	0x08007514

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b092      	sub	sp, #72	; 0x48
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d4 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a8:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10e      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b4:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	61d3      	str	r3, [r2, #28]
 80046c0:	4b48      	ldr	r3, [pc, #288]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fd fb05 	bl	8001cf8 <HAL_GetTick>
 80046ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fd fb01 	bl	8001cf8 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e14b      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8084 	beq.w	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472c:	429a      	cmp	r2, r3
 800472e:	d07c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004730:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	461a      	mov	r2, r3
 800475a:	2301      	movs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	461a      	mov	r2, r3
 800477e:	2300      	movs	r3, #0
 8004780:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04b      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd fab1 	bl	8001cf8 <HAL_GetTick>
 8004796:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd faad 	bl	8001cf8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0f5      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80047b0:	2302      	movs	r3, #2
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	61fb      	str	r3, [r7, #28]
  return result;
 80047c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d108      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047de:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	e00d      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	10908100 	.word	0x10908100
 80047f0:	2302      	movs	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	4b69      	ldr	r3, [pc, #420]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2202      	movs	r2, #2
 8004802:	613a      	str	r2, [r7, #16]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fa92 f2a2 	rbit	r2, r2
 800480a:	60fa      	str	r2, [r7, #12]
  return result;
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	fab2 f282 	clz	r2, r2
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	f002 021f 	and.w	r2, r2, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0b7      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800482a:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	495b      	ldr	r1, [pc, #364]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004838:	4313      	orrs	r3, r2
 800483a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800483c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	494e      	ldr	r1, [pc, #312]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4947      	ldr	r1, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004888:	4313      	orrs	r3, r2
 800488a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	493f      	ldr	r1, [pc, #252]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b6:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f023 0220 	bic.w	r2, r3, #32
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	4938      	ldr	r1, [pc, #224]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d4:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4930      	ldr	r1, [pc, #192]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048f2:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4929      	ldr	r1, [pc, #164]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4921      	ldr	r1, [pc, #132]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800491e:	4313      	orrs	r3, r2
 8004920:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	491a      	ldr	r1, [pc, #104]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800494c:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	4912      	ldr	r1, [pc, #72]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800496a:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	490b      	ldr	r1, [pc, #44]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004978:	4313      	orrs	r3, r2
 800497a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004996:	4313      	orrs	r3, r2
 8004998:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3748      	adds	r7, #72	; 0x48
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e049      	b.n	8004a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd f826 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fb1e 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e033      	b.n	8004ad8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_TIM_Base_Start+0x8c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_TIM_Base_Start+0x3e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIM_Base_Start+0x3e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <HAL_TIM_Base_Start+0x90>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d115      	bne.n	8004ac2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b13      	ldr	r3, [pc, #76]	; (8004aec <HAL_TIM_Base_Start+0x94>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d015      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x7c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d011      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	e008      	b.n	8004ad4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e000      	b.n	8004ad6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	00010007 	.word	0x00010007

08004af0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e097      	b.n	8004c34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fc ff39 	bl	8001990 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 fa6f 	bl	8005028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	4313      	orrs	r3, r2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b90:	f023 030c 	bic.w	r3, r3, #12
 8004b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4313      	orrs	r3, r2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	011a      	lsls	r2, r3, #4
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	031b      	lsls	r3, r3, #12
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	4313      	orrs	r3, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c72:	7b7b      	ldrb	r3, [r7, #13]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e089      	b.n	8004d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	e031      	b.n	8004cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d110      	bne.n	8004cb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c94:	7bbb      	ldrb	r3, [r7, #14]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c9a:	7b3b      	ldrb	r3, [r7, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e075      	b.n	8004d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb4:	e01d      	b.n	8004cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d108      	bne.n	8004cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d102      	bne.n	8004cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc8:	7b3b      	ldrb	r3, [r7, #12]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e05e      	b.n	8004d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d010      	beq.n	8004d20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004cfe:	e01f      	b.n	8004d40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f9fb 	bl	8005104 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0202 	orr.w	r2, r2, #2
 8004d1c:	60da      	str	r2, [r3, #12]
      break;
 8004d1e:	e02e      	b.n	8004d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	2104      	movs	r1, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f9eb 	bl	8005104 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0204 	orr.w	r2, r2, #4
 8004d3c:	60da      	str	r2, [r3, #12]
      break;
 8004d3e:	e01e      	b.n	8004d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f9db 	bl	8005104 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2201      	movs	r2, #1
 8004d54:	2104      	movs	r1, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f9d4 	bl	8005104 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0202 	orr.w	r2, r2, #2
 8004d6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0204 	orr.w	r2, r2, #4
 8004d7a:	60da      	str	r2, [r3, #12]
      break;
 8004d7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0202 	mvn.w	r2, #2
 8004dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc f8a8 	bl	8000f30 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f901 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f908 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0204 	mvn.w	r2, #4
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc f87e 	bl	8000f30 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8d7 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8de 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0208 	mvn.w	r2, #8
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc f854 	bl	8000f30 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8ad 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f8b4 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc f82a 	bl	8000f30 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f883 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f88a 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f85d 	bl	8004fd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f974 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f967 	bl	8005244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f838 	bl	8005012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d10e      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d107      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0220 	mvn.w	r2, #32
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f927 	bl	800521c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <TIM_Base_SetConfig+0xcc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_Base_SetConfig+0x20>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d108      	bne.n	800505a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <TIM_Base_SetConfig+0xcc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0x5a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0x5a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <TIM_Base_SetConfig+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0x5a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a21      	ldr	r2, [pc, #132]	; (80050fc <TIM_Base_SetConfig+0xd4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0x5a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a20      	ldr	r2, [pc, #128]	; (8005100 <TIM_Base_SetConfig+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <TIM_Base_SetConfig+0xcc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0xb0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <TIM_Base_SetConfig+0xd0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <TIM_Base_SetConfig+0xd4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <TIM_Base_SetConfig+0xd8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	615a      	str	r2, [r3, #20]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2201      	movs	r2, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005164:	2302      	movs	r3, #2
 8005166:	e04f      	b.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d108      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005198:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d004      	beq.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10c      	bne.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40014000 	.word	0x40014000

0800521c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e040      	b.n	80052ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc fbf0 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8b6 	bl	8005408 <UART_SetConfig>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9e0 	bl	8005674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa67 	bl	80057b8 <UART_CheckIdleState>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005308:	2b20      	cmp	r3, #32
 800530a:	d178      	bne.n	80053fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Transmit+0x24>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e071      	b.n	8005400 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2221      	movs	r2, #33	; 0x21
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800532a:	f7fc fce5 	bl	8001cf8 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005348:	d108      	bne.n	800535c <HAL_UART_Transmit+0x68>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	e003      	b.n	8005364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005364:	e030      	b.n	80053c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fac9 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e03c      	b.n	8005400 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	b292      	uxth	r2, r2
 800539a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	3302      	adds	r3, #2
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e008      	b.n	80053b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b292      	uxth	r2, r2
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1c8      	bne.n	8005366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fa92 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e005      	b.n	8005400 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8a      	ldr	r3, [pc, #552]	; (800565c <UART_SetConfig+0x254>)
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	430b      	orrs	r3, r1
 800543e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a78      	ldr	r2, [pc, #480]	; (8005660 <UART_SetConfig+0x258>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d120      	bne.n	80054c6 <UART_SetConfig+0xbe>
 8005484:	4b77      	ldr	r3, [pc, #476]	; (8005664 <UART_SetConfig+0x25c>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	2b03      	cmp	r3, #3
 800548e:	d817      	bhi.n	80054c0 <UART_SetConfig+0xb8>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x90>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	080054bb 	.word	0x080054bb
 80054a4:	080054af 	.word	0x080054af
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e01d      	b.n	80054ea <UART_SetConfig+0xe2>
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e01a      	b.n	80054ea <UART_SetConfig+0xe2>
 80054b4:	2304      	movs	r3, #4
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e017      	b.n	80054ea <UART_SetConfig+0xe2>
 80054ba:	2308      	movs	r3, #8
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e014      	b.n	80054ea <UART_SetConfig+0xe2>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e011      	b.n	80054ea <UART_SetConfig+0xe2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a67      	ldr	r2, [pc, #412]	; (8005668 <UART_SetConfig+0x260>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d102      	bne.n	80054d6 <UART_SetConfig+0xce>
 80054d0:	2300      	movs	r3, #0
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e009      	b.n	80054ea <UART_SetConfig+0xe2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a64      	ldr	r2, [pc, #400]	; (800566c <UART_SetConfig+0x264>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d102      	bne.n	80054e6 <UART_SetConfig+0xde>
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e001      	b.n	80054ea <UART_SetConfig+0xe2>
 80054e6:	2310      	movs	r3, #16
 80054e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f2:	d15a      	bne.n	80055aa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80054f4:	7ffb      	ldrb	r3, [r7, #31]
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d827      	bhi.n	800554a <UART_SetConfig+0x142>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0xf8>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005525 	.word	0x08005525
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005535 	.word	0x08005535
 800550c:	0800554b 	.word	0x0800554b
 8005510:	0800553b 	.word	0x0800553b
 8005514:	0800554b 	.word	0x0800554b
 8005518:	0800554b 	.word	0x0800554b
 800551c:	0800554b 	.word	0x0800554b
 8005520:	08005543 	.word	0x08005543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005524:	f7ff f86a 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 8005528:	61b8      	str	r0, [r7, #24]
        break;
 800552a:	e013      	b.n	8005554 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800552c:	f7ff f888 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8005530:	61b8      	str	r0, [r7, #24]
        break;
 8005532:	e00f      	b.n	8005554 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005534:	4b4e      	ldr	r3, [pc, #312]	; (8005670 <UART_SetConfig+0x268>)
 8005536:	61bb      	str	r3, [r7, #24]
        break;
 8005538:	e00c      	b.n	8005554 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553a:	f7fe ffe9 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 800553e:	61b8      	str	r0, [r7, #24]
        break;
 8005540:	e008      	b.n	8005554 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	61bb      	str	r3, [r7, #24]
        break;
 8005548:	e004      	b.n	8005554 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	77bb      	strb	r3, [r7, #30]
        break;
 8005552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d074      	beq.n	8005644 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	005a      	lsls	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	fbb2 f3f3 	udiv	r3, r2, r3
 800556e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b0f      	cmp	r3, #15
 8005574:	d916      	bls.n	80055a4 <UART_SetConfig+0x19c>
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d212      	bcs.n	80055a4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f023 030f 	bic.w	r3, r3, #15
 8005586:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	b29a      	uxth	r2, r3
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	4313      	orrs	r3, r2
 8005598:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	89fa      	ldrh	r2, [r7, #14]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e04f      	b.n	8005644 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77bb      	strb	r3, [r7, #30]
 80055a8:	e04c      	b.n	8005644 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d828      	bhi.n	8005602 <UART_SetConfig+0x1fa>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x1b0>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7ff f80e 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e013      	b.n	800560c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7ff f82c 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 80055e8:	61b8      	str	r0, [r7, #24]
        break;
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b20      	ldr	r3, [pc, #128]	; (8005670 <UART_SetConfig+0x268>)
 80055ee:	61bb      	str	r3, [r7, #24]
        break;
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7fe ff8d 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80055f6:	61b8      	str	r0, [r7, #24]
        break;
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	77bb      	strb	r3, [r7, #30]
        break;
 800560a:	bf00      	nop
    }

    if (pclk != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	085a      	lsrs	r2, r3, #1
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d909      	bls.n	8005640 <UART_SetConfig+0x238>
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005632:	d205      	bcs.n	8005640 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e001      	b.n	8005644 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005650:	7fbb      	ldrb	r3, [r7, #30]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	efff69f3 	.word	0xefff69f3
 8005660:	40013800 	.word	0x40013800
 8005664:	40021000 	.word	0x40021000
 8005668:	40004400 	.word	0x40004400
 800566c:	40004800 	.word	0x40004800
 8005670:	007a1200 	.word	0x007a1200

08005674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01a      	beq.n	800578a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005772:	d10a      	bne.n	800578a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b098      	sub	sp, #96	; 0x60
 80057bc:	af02      	add	r7, sp, #8
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c8:	f7fc fa96 	bl	8001cf8 <HAL_GetTick>
 80057cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d12e      	bne.n	800583a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e4:	2200      	movs	r2, #0
 80057e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f88c 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d021      	beq.n	800583a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800581a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e6      	bne.n	80057f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e062      	b.n	8005900 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d149      	bne.n	80058dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005850:	2200      	movs	r2, #0
 8005852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f856 	bl	8005908 <UART_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d03c      	beq.n	80058dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	623b      	str	r3, [r7, #32]
   return(result);
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	633b      	str	r3, [r7, #48]	; 0x30
 8005882:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b4:	61fa      	str	r2, [r7, #28]
 80058b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	617b      	str	r3, [r7, #20]
   return(result);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e011      	b.n	8005900 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3758      	adds	r7, #88	; 0x58
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005918:	e049      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d045      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fc f9e9 	bl	8001cf8 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <UART_WaitOnFlagUntilTimeout+0x30>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e048      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d031      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d110      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f838 	bl	80059d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2208      	movs	r2, #8
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e029      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	d111      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f81e 	bl	80059d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e00f      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	bf0c      	ite	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	2300      	movne	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d0a6      	beq.n	800591a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b095      	sub	sp, #84	; 0x54
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fc:	643b      	str	r3, [r7, #64]	; 0x40
 80059fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d118      	bne.n	8005a7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f023 0310 	bic.w	r3, r3, #16
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6979      	ldr	r1, [r7, #20]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e6      	bne.n	8005a4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a92:	bf00      	nop
 8005a94:	3754      	adds	r7, #84	; 0x54
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <siprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	; 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab0:	4809      	ldr	r0, [pc, #36]	; (8005ad8 <siprintf+0x38>)
 8005ab2:	9107      	str	r1, [sp, #28]
 8005ab4:	9104      	str	r1, [sp, #16]
 8005ab6:	4909      	ldr	r1, [pc, #36]	; (8005adc <siprintf+0x3c>)
 8005ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	a902      	add	r1, sp, #8
 8005ac4:	f000 f992 	bl	8005dec <_svfiprintf_r>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	b01c      	add	sp, #112	; 0x70
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	20000058 	.word	0x20000058
 8005adc:	ffff0208 	.word	0xffff0208

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000058 	.word	0x20000058

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f001 fcaa 	bl	8007468 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08007748 	.word	0x08007748
 8005b38:	08007748 	.word	0x08007748
 8005b3c:	08007748 	.word	0x08007748
 8005b40:	0800774c 	.word	0x0800774c

08005b44 <__retarget_lock_acquire_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <__retarget_lock_release_recursive>:
 8005b46:	4770      	bx	lr

08005b48 <_free_r>:
 8005b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d044      	beq.n	8005bd8 <_free_r+0x90>
 8005b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b52:	9001      	str	r0, [sp, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f1a1 0404 	sub.w	r4, r1, #4
 8005b5a:	bfb8      	it	lt
 8005b5c:	18e4      	addlt	r4, r4, r3
 8005b5e:	f000 f8df 	bl	8005d20 <__malloc_lock>
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <_free_r+0x94>)
 8005b64:	9801      	ldr	r0, [sp, #4]
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	b933      	cbnz	r3, 8005b78 <_free_r+0x30>
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	6014      	str	r4, [r2, #0]
 8005b6e:	b003      	add	sp, #12
 8005b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b74:	f000 b8da 	b.w	8005d2c <__malloc_unlock>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d908      	bls.n	8005b8e <_free_r+0x46>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf01      	itttt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	1949      	addeq	r1, r1, r5
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	e7ed      	b.n	8005b6a <_free_r+0x22>
 8005b8e:	461a      	mov	r2, r3
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b10b      	cbz	r3, 8005b98 <_free_r+0x50>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d9fa      	bls.n	8005b8e <_free_r+0x46>
 8005b98:	6811      	ldr	r1, [r2, #0]
 8005b9a:	1855      	adds	r5, r2, r1
 8005b9c:	42a5      	cmp	r5, r4
 8005b9e:	d10b      	bne.n	8005bb8 <_free_r+0x70>
 8005ba0:	6824      	ldr	r4, [r4, #0]
 8005ba2:	4421      	add	r1, r4
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	d1e0      	bne.n	8005b6e <_free_r+0x26>
 8005bac:	681c      	ldr	r4, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	440c      	add	r4, r1
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	e7da      	b.n	8005b6e <_free_r+0x26>
 8005bb8:	d902      	bls.n	8005bc0 <_free_r+0x78>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	e7d6      	b.n	8005b6e <_free_r+0x26>
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf04      	itt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	bf04      	itt	eq
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6054      	str	r4, [r2, #4]
 8005bd6:	e7ca      	b.n	8005b6e <_free_r+0x26>
 8005bd8:	b003      	add	sp, #12
 8005bda:	bd30      	pop	{r4, r5, pc}
 8005bdc:	200006cc 	.word	0x200006cc

08005be0 <sbrk_aligned>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4e0e      	ldr	r6, [pc, #56]	; (8005c1c <sbrk_aligned+0x3c>)
 8005be4:	460c      	mov	r4, r1
 8005be6:	6831      	ldr	r1, [r6, #0]
 8005be8:	4605      	mov	r5, r0
 8005bea:	b911      	cbnz	r1, 8005bf2 <sbrk_aligned+0x12>
 8005bec:	f000 fba6 	bl	800633c <_sbrk_r>
 8005bf0:	6030      	str	r0, [r6, #0]
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fba1 	bl	800633c <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d00a      	beq.n	8005c14 <sbrk_aligned+0x34>
 8005bfe:	1cc4      	adds	r4, r0, #3
 8005c00:	f024 0403 	bic.w	r4, r4, #3
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	d007      	beq.n	8005c18 <sbrk_aligned+0x38>
 8005c08:	1a21      	subs	r1, r4, r0
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 fb96 	bl	800633c <_sbrk_r>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d101      	bne.n	8005c18 <sbrk_aligned+0x38>
 8005c14:	f04f 34ff 	mov.w	r4, #4294967295
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	200006d0 	.word	0x200006d0

08005c20 <_malloc_r>:
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	1ccd      	adds	r5, r1, #3
 8005c26:	f025 0503 	bic.w	r5, r5, #3
 8005c2a:	3508      	adds	r5, #8
 8005c2c:	2d0c      	cmp	r5, #12
 8005c2e:	bf38      	it	cc
 8005c30:	250c      	movcc	r5, #12
 8005c32:	2d00      	cmp	r5, #0
 8005c34:	4607      	mov	r7, r0
 8005c36:	db01      	blt.n	8005c3c <_malloc_r+0x1c>
 8005c38:	42a9      	cmp	r1, r5
 8005c3a:	d905      	bls.n	8005c48 <_malloc_r+0x28>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	2600      	movs	r6, #0
 8005c42:	4630      	mov	r0, r6
 8005c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d1c <_malloc_r+0xfc>
 8005c4c:	f000 f868 	bl	8005d20 <__malloc_lock>
 8005c50:	f8d8 3000 	ldr.w	r3, [r8]
 8005c54:	461c      	mov	r4, r3
 8005c56:	bb5c      	cbnz	r4, 8005cb0 <_malloc_r+0x90>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7ff ffc0 	bl	8005be0 <sbrk_aligned>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	4604      	mov	r4, r0
 8005c64:	d155      	bne.n	8005d12 <_malloc_r+0xf2>
 8005c66:	f8d8 4000 	ldr.w	r4, [r8]
 8005c6a:	4626      	mov	r6, r4
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	d145      	bne.n	8005cfc <_malloc_r+0xdc>
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d048      	beq.n	8005d06 <_malloc_r+0xe6>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	4631      	mov	r1, r6
 8005c78:	4638      	mov	r0, r7
 8005c7a:	eb04 0903 	add.w	r9, r4, r3
 8005c7e:	f000 fb5d 	bl	800633c <_sbrk_r>
 8005c82:	4581      	cmp	r9, r0
 8005c84:	d13f      	bne.n	8005d06 <_malloc_r+0xe6>
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	1a6d      	subs	r5, r5, r1
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff ffa7 	bl	8005be0 <sbrk_aligned>
 8005c92:	3001      	adds	r0, #1
 8005c94:	d037      	beq.n	8005d06 <_malloc_r+0xe6>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	442b      	add	r3, r5
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d038      	beq.n	8005d16 <_malloc_r+0xf6>
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	d12b      	bne.n	8005d02 <_malloc_r+0xe2>
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	e00f      	b.n	8005cd0 <_malloc_r+0xb0>
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	1b52      	subs	r2, r2, r5
 8005cb4:	d41f      	bmi.n	8005cf6 <_malloc_r+0xd6>
 8005cb6:	2a0b      	cmp	r2, #11
 8005cb8:	d917      	bls.n	8005cea <_malloc_r+0xca>
 8005cba:	1961      	adds	r1, r4, r5
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	6025      	str	r5, [r4, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	6059      	strne	r1, [r3, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	bf08      	it	eq
 8005cc8:	f8c8 1000 	streq.w	r1, [r8]
 8005ccc:	5162      	str	r2, [r4, r5]
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f104 060b 	add.w	r6, r4, #11
 8005cd6:	f000 f829 	bl	8005d2c <__malloc_unlock>
 8005cda:	f026 0607 	bic.w	r6, r6, #7
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	1af2      	subs	r2, r6, r3
 8005ce2:	d0ae      	beq.n	8005c42 <_malloc_r+0x22>
 8005ce4:	1b9b      	subs	r3, r3, r6
 8005ce6:	50a3      	str	r3, [r4, r2]
 8005ce8:	e7ab      	b.n	8005c42 <_malloc_r+0x22>
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	d1dd      	bne.n	8005cac <_malloc_r+0x8c>
 8005cf0:	f8c8 2000 	str.w	r2, [r8]
 8005cf4:	e7ec      	b.n	8005cd0 <_malloc_r+0xb0>
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	6864      	ldr	r4, [r4, #4]
 8005cfa:	e7ac      	b.n	8005c56 <_malloc_r+0x36>
 8005cfc:	4634      	mov	r4, r6
 8005cfe:	6876      	ldr	r6, [r6, #4]
 8005d00:	e7b4      	b.n	8005c6c <_malloc_r+0x4c>
 8005d02:	4613      	mov	r3, r2
 8005d04:	e7cc      	b.n	8005ca0 <_malloc_r+0x80>
 8005d06:	230c      	movs	r3, #12
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f000 f80e 	bl	8005d2c <__malloc_unlock>
 8005d10:	e797      	b.n	8005c42 <_malloc_r+0x22>
 8005d12:	6025      	str	r5, [r4, #0]
 8005d14:	e7dc      	b.n	8005cd0 <_malloc_r+0xb0>
 8005d16:	605b      	str	r3, [r3, #4]
 8005d18:	deff      	udf	#255	; 0xff
 8005d1a:	bf00      	nop
 8005d1c:	200006cc 	.word	0x200006cc

08005d20 <__malloc_lock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	; (8005d28 <__malloc_lock+0x8>)
 8005d22:	f7ff bf0f 	b.w	8005b44 <__retarget_lock_acquire_recursive>
 8005d26:	bf00      	nop
 8005d28:	200006c8 	.word	0x200006c8

08005d2c <__malloc_unlock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_unlock+0x8>)
 8005d2e:	f7ff bf0a 	b.w	8005b46 <__retarget_lock_release_recursive>
 8005d32:	bf00      	nop
 8005d34:	200006c8 	.word	0x200006c8

08005d38 <__ssputs_r>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	688e      	ldr	r6, [r1, #8]
 8005d3e:	461f      	mov	r7, r3
 8005d40:	42be      	cmp	r6, r7
 8005d42:	680b      	ldr	r3, [r1, #0]
 8005d44:	4682      	mov	sl, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4690      	mov	r8, r2
 8005d4a:	d82c      	bhi.n	8005da6 <__ssputs_r+0x6e>
 8005d4c:	898a      	ldrh	r2, [r1, #12]
 8005d4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d52:	d026      	beq.n	8005da2 <__ssputs_r+0x6a>
 8005d54:	6965      	ldr	r5, [r4, #20]
 8005d56:	6909      	ldr	r1, [r1, #16]
 8005d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d5c:	eba3 0901 	sub.w	r9, r3, r1
 8005d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d64:	1c7b      	adds	r3, r7, #1
 8005d66:	444b      	add	r3, r9
 8005d68:	106d      	asrs	r5, r5, #1
 8005d6a:	429d      	cmp	r5, r3
 8005d6c:	bf38      	it	cc
 8005d6e:	461d      	movcc	r5, r3
 8005d70:	0553      	lsls	r3, r2, #21
 8005d72:	d527      	bpl.n	8005dc4 <__ssputs_r+0x8c>
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7ff ff53 	bl	8005c20 <_malloc_r>
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	b360      	cbz	r0, 8005dd8 <__ssputs_r+0xa0>
 8005d7e:	6921      	ldr	r1, [r4, #16]
 8005d80:	464a      	mov	r2, r9
 8005d82:	f000 faeb 	bl	800635c <memcpy>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	6126      	str	r6, [r4, #16]
 8005d94:	6165      	str	r5, [r4, #20]
 8005d96:	444e      	add	r6, r9
 8005d98:	eba5 0509 	sub.w	r5, r5, r9
 8005d9c:	6026      	str	r6, [r4, #0]
 8005d9e:	60a5      	str	r5, [r4, #8]
 8005da0:	463e      	mov	r6, r7
 8005da2:	42be      	cmp	r6, r7
 8005da4:	d900      	bls.n	8005da8 <__ssputs_r+0x70>
 8005da6:	463e      	mov	r6, r7
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	4632      	mov	r2, r6
 8005dac:	4641      	mov	r1, r8
 8005dae:	f000 faab 	bl	8006308 <memmove>
 8005db2:	68a3      	ldr	r3, [r4, #8]
 8005db4:	1b9b      	subs	r3, r3, r6
 8005db6:	60a3      	str	r3, [r4, #8]
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	4433      	add	r3, r6
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	f000 fad7 	bl	8006378 <_realloc_r>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1e0      	bne.n	8005d92 <__ssputs_r+0x5a>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	f7ff feb8 	bl	8005b48 <_free_r>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	f8ca 3000 	str.w	r3, [sl]
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dea:	e7e9      	b.n	8005dc0 <__ssputs_r+0x88>

08005dec <_svfiprintf_r>:
 8005dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	4698      	mov	r8, r3
 8005df2:	898b      	ldrh	r3, [r1, #12]
 8005df4:	061b      	lsls	r3, r3, #24
 8005df6:	b09d      	sub	sp, #116	; 0x74
 8005df8:	4607      	mov	r7, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	d50e      	bpl.n	8005e1e <_svfiprintf_r+0x32>
 8005e00:	690b      	ldr	r3, [r1, #16]
 8005e02:	b963      	cbnz	r3, 8005e1e <_svfiprintf_r+0x32>
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	f7ff ff0b 	bl	8005c20 <_malloc_r>
 8005e0a:	6028      	str	r0, [r5, #0]
 8005e0c:	6128      	str	r0, [r5, #16]
 8005e0e:	b920      	cbnz	r0, 8005e1a <_svfiprintf_r+0x2e>
 8005e10:	230c      	movs	r3, #12
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e0d0      	b.n	8005fbc <_svfiprintf_r+0x1d0>
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	616b      	str	r3, [r5, #20]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9309      	str	r3, [sp, #36]	; 0x24
 8005e22:	2320      	movs	r3, #32
 8005e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e2c:	2330      	movs	r3, #48	; 0x30
 8005e2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005fd4 <_svfiprintf_r+0x1e8>
 8005e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e36:	f04f 0901 	mov.w	r9, #1
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	469a      	mov	sl, r3
 8005e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e42:	b10a      	cbz	r2, 8005e48 <_svfiprintf_r+0x5c>
 8005e44:	2a25      	cmp	r2, #37	; 0x25
 8005e46:	d1f9      	bne.n	8005e3c <_svfiprintf_r+0x50>
 8005e48:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4c:	d00b      	beq.n	8005e66 <_svfiprintf_r+0x7a>
 8005e4e:	465b      	mov	r3, fp
 8005e50:	4622      	mov	r2, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	4638      	mov	r0, r7
 8005e56:	f7ff ff6f 	bl	8005d38 <__ssputs_r>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f000 80a9 	beq.w	8005fb2 <_svfiprintf_r+0x1c6>
 8005e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e62:	445a      	add	r2, fp
 8005e64:	9209      	str	r2, [sp, #36]	; 0x24
 8005e66:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80a1 	beq.w	8005fb2 <_svfiprintf_r+0x1c6>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7a:	f10a 0a01 	add.w	sl, sl, #1
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	9307      	str	r3, [sp, #28]
 8005e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e86:	931a      	str	r3, [sp, #104]	; 0x68
 8005e88:	4654      	mov	r4, sl
 8005e8a:	2205      	movs	r2, #5
 8005e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e90:	4850      	ldr	r0, [pc, #320]	; (8005fd4 <_svfiprintf_r+0x1e8>)
 8005e92:	f7fa f9a5 	bl	80001e0 <memchr>
 8005e96:	9a04      	ldr	r2, [sp, #16]
 8005e98:	b9d8      	cbnz	r0, 8005ed2 <_svfiprintf_r+0xe6>
 8005e9a:	06d0      	lsls	r0, r2, #27
 8005e9c:	bf44      	itt	mi
 8005e9e:	2320      	movmi	r3, #32
 8005ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea4:	0711      	lsls	r1, r2, #28
 8005ea6:	bf44      	itt	mi
 8005ea8:	232b      	movmi	r3, #43	; 0x2b
 8005eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eae:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb4:	d015      	beq.n	8005ee2 <_svfiprintf_r+0xf6>
 8005eb6:	9a07      	ldr	r2, [sp, #28]
 8005eb8:	4654      	mov	r4, sl
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f04f 0c0a 	mov.w	ip, #10
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec6:	3b30      	subs	r3, #48	; 0x30
 8005ec8:	2b09      	cmp	r3, #9
 8005eca:	d94d      	bls.n	8005f68 <_svfiprintf_r+0x17c>
 8005ecc:	b1b0      	cbz	r0, 8005efc <_svfiprintf_r+0x110>
 8005ece:	9207      	str	r2, [sp, #28]
 8005ed0:	e014      	b.n	8005efc <_svfiprintf_r+0x110>
 8005ed2:	eba0 0308 	sub.w	r3, r0, r8
 8005ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	46a2      	mov	sl, r4
 8005ee0:	e7d2      	b.n	8005e88 <_svfiprintf_r+0x9c>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	9103      	str	r1, [sp, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfbb      	ittet	lt
 8005eee:	425b      	neglt	r3, r3
 8005ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef4:	9307      	strge	r3, [sp, #28]
 8005ef6:	9307      	strlt	r3, [sp, #28]
 8005ef8:	bfb8      	it	lt
 8005efa:	9204      	strlt	r2, [sp, #16]
 8005efc:	7823      	ldrb	r3, [r4, #0]
 8005efe:	2b2e      	cmp	r3, #46	; 0x2e
 8005f00:	d10c      	bne.n	8005f1c <_svfiprintf_r+0x130>
 8005f02:	7863      	ldrb	r3, [r4, #1]
 8005f04:	2b2a      	cmp	r3, #42	; 0x2a
 8005f06:	d134      	bne.n	8005f72 <_svfiprintf_r+0x186>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	9203      	str	r2, [sp, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfb8      	it	lt
 8005f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f18:	3402      	adds	r4, #2
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005fe4 <_svfiprintf_r+0x1f8>
 8005f20:	7821      	ldrb	r1, [r4, #0]
 8005f22:	2203      	movs	r2, #3
 8005f24:	4650      	mov	r0, sl
 8005f26:	f7fa f95b 	bl	80001e0 <memchr>
 8005f2a:	b138      	cbz	r0, 8005f3c <_svfiprintf_r+0x150>
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	eba0 000a 	sub.w	r0, r0, sl
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	4082      	lsls	r2, r0
 8005f36:	4313      	orrs	r3, r2
 8005f38:	3401      	adds	r4, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f40:	4825      	ldr	r0, [pc, #148]	; (8005fd8 <_svfiprintf_r+0x1ec>)
 8005f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f46:	2206      	movs	r2, #6
 8005f48:	f7fa f94a 	bl	80001e0 <memchr>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d038      	beq.n	8005fc2 <_svfiprintf_r+0x1d6>
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <_svfiprintf_r+0x1f0>)
 8005f52:	bb1b      	cbnz	r3, 8005f9c <_svfiprintf_r+0x1b0>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	3307      	adds	r3, #7
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f62:	4433      	add	r3, r6
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	e768      	b.n	8005e3a <_svfiprintf_r+0x4e>
 8005f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7a6      	b.n	8005ec0 <_svfiprintf_r+0xd4>
 8005f72:	2300      	movs	r3, #0
 8005f74:	3401      	adds	r4, #1
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f04f 0c0a 	mov.w	ip, #10
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f84:	3a30      	subs	r2, #48	; 0x30
 8005f86:	2a09      	cmp	r2, #9
 8005f88:	d903      	bls.n	8005f92 <_svfiprintf_r+0x1a6>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c6      	beq.n	8005f1c <_svfiprintf_r+0x130>
 8005f8e:	9105      	str	r1, [sp, #20]
 8005f90:	e7c4      	b.n	8005f1c <_svfiprintf_r+0x130>
 8005f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f96:	4604      	mov	r4, r0
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f0      	b.n	8005f7e <_svfiprintf_r+0x192>
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <_svfiprintf_r+0x1f4>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f3af 8000 	nop.w
 8005fac:	1c42      	adds	r2, r0, #1
 8005fae:	4606      	mov	r6, r0
 8005fb0:	d1d6      	bne.n	8005f60 <_svfiprintf_r+0x174>
 8005fb2:	89ab      	ldrh	r3, [r5, #12]
 8005fb4:	065b      	lsls	r3, r3, #25
 8005fb6:	f53f af2d 	bmi.w	8005e14 <_svfiprintf_r+0x28>
 8005fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fbc:	b01d      	add	sp, #116	; 0x74
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	ab03      	add	r3, sp, #12
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	462a      	mov	r2, r5
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <_svfiprintf_r+0x1f4>)
 8005fca:	a904      	add	r1, sp, #16
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f000 f879 	bl	80060c4 <_printf_i>
 8005fd2:	e7eb      	b.n	8005fac <_svfiprintf_r+0x1c0>
 8005fd4:	0800753c 	.word	0x0800753c
 8005fd8:	08007546 	.word	0x08007546
 8005fdc:	00000000 	.word	0x00000000
 8005fe0:	08005d39 	.word	0x08005d39
 8005fe4:	08007542 	.word	0x08007542

08005fe8 <_printf_common>:
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	4616      	mov	r6, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	688a      	ldr	r2, [r1, #8]
 8005ff2:	690b      	ldr	r3, [r1, #16]
 8005ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bfb8      	it	lt
 8005ffc:	4613      	movlt	r3, r2
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006004:	4607      	mov	r7, r0
 8006006:	460c      	mov	r4, r1
 8006008:	b10a      	cbz	r2, 800600e <_printf_common+0x26>
 800600a:	3301      	adds	r3, #1
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	0699      	lsls	r1, r3, #26
 8006012:	bf42      	ittt	mi
 8006014:	6833      	ldrmi	r3, [r6, #0]
 8006016:	3302      	addmi	r3, #2
 8006018:	6033      	strmi	r3, [r6, #0]
 800601a:	6825      	ldr	r5, [r4, #0]
 800601c:	f015 0506 	ands.w	r5, r5, #6
 8006020:	d106      	bne.n	8006030 <_printf_common+0x48>
 8006022:	f104 0a19 	add.w	sl, r4, #25
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	6832      	ldr	r2, [r6, #0]
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	42ab      	cmp	r3, r5
 800602e:	dc26      	bgt.n	800607e <_printf_common+0x96>
 8006030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006034:	1e13      	subs	r3, r2, #0
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	bf18      	it	ne
 800603a:	2301      	movne	r3, #1
 800603c:	0692      	lsls	r2, r2, #26
 800603e:	d42b      	bmi.n	8006098 <_printf_common+0xb0>
 8006040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006044:	4649      	mov	r1, r9
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	3001      	adds	r0, #1
 800604c:	d01e      	beq.n	800608c <_printf_common+0xa4>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	6922      	ldr	r2, [r4, #16]
 8006052:	f003 0306 	and.w	r3, r3, #6
 8006056:	2b04      	cmp	r3, #4
 8006058:	bf02      	ittt	eq
 800605a:	68e5      	ldreq	r5, [r4, #12]
 800605c:	6833      	ldreq	r3, [r6, #0]
 800605e:	1aed      	subeq	r5, r5, r3
 8006060:	68a3      	ldr	r3, [r4, #8]
 8006062:	bf0c      	ite	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	2500      	movne	r5, #0
 800606a:	4293      	cmp	r3, r2
 800606c:	bfc4      	itt	gt
 800606e:	1a9b      	subgt	r3, r3, r2
 8006070:	18ed      	addgt	r5, r5, r3
 8006072:	2600      	movs	r6, #0
 8006074:	341a      	adds	r4, #26
 8006076:	42b5      	cmp	r5, r6
 8006078:	d11a      	bne.n	80060b0 <_printf_common+0xc8>
 800607a:	2000      	movs	r0, #0
 800607c:	e008      	b.n	8006090 <_printf_common+0xa8>
 800607e:	2301      	movs	r3, #1
 8006080:	4652      	mov	r2, sl
 8006082:	4649      	mov	r1, r9
 8006084:	4638      	mov	r0, r7
 8006086:	47c0      	blx	r8
 8006088:	3001      	adds	r0, #1
 800608a:	d103      	bne.n	8006094 <_printf_common+0xac>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	3501      	adds	r5, #1
 8006096:	e7c6      	b.n	8006026 <_printf_common+0x3e>
 8006098:	18e1      	adds	r1, r4, r3
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	2030      	movs	r0, #48	; 0x30
 800609e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a2:	4422      	add	r2, r4
 80060a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ac:	3302      	adds	r3, #2
 80060ae:	e7c7      	b.n	8006040 <_printf_common+0x58>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4622      	mov	r2, r4
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d0e6      	beq.n	800608c <_printf_common+0xa4>
 80060be:	3601      	adds	r6, #1
 80060c0:	e7d9      	b.n	8006076 <_printf_common+0x8e>
	...

080060c4 <_printf_i>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	7e0f      	ldrb	r7, [r1, #24]
 80060ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060cc:	2f78      	cmp	r7, #120	; 0x78
 80060ce:	4691      	mov	r9, r2
 80060d0:	4680      	mov	r8, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	469a      	mov	sl, r3
 80060d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060da:	d807      	bhi.n	80060ec <_printf_i+0x28>
 80060dc:	2f62      	cmp	r7, #98	; 0x62
 80060de:	d80a      	bhi.n	80060f6 <_printf_i+0x32>
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	f000 80d4 	beq.w	800628e <_printf_i+0x1ca>
 80060e6:	2f58      	cmp	r7, #88	; 0x58
 80060e8:	f000 80c0 	beq.w	800626c <_printf_i+0x1a8>
 80060ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f4:	e03a      	b.n	800616c <_printf_i+0xa8>
 80060f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fa:	2b15      	cmp	r3, #21
 80060fc:	d8f6      	bhi.n	80060ec <_printf_i+0x28>
 80060fe:	a101      	add	r1, pc, #4	; (adr r1, 8006104 <_printf_i+0x40>)
 8006100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006171 	.word	0x08006171
 800610c:	080060ed 	.word	0x080060ed
 8006110:	080060ed 	.word	0x080060ed
 8006114:	080060ed 	.word	0x080060ed
 8006118:	080060ed 	.word	0x080060ed
 800611c:	08006171 	.word	0x08006171
 8006120:	080060ed 	.word	0x080060ed
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	08006275 	.word	0x08006275
 8006134:	0800619d 	.word	0x0800619d
 8006138:	0800622f 	.word	0x0800622f
 800613c:	080060ed 	.word	0x080060ed
 8006140:	080060ed 	.word	0x080060ed
 8006144:	08006297 	.word	0x08006297
 8006148:	080060ed 	.word	0x080060ed
 800614c:	0800619d 	.word	0x0800619d
 8006150:	080060ed 	.word	0x080060ed
 8006154:	080060ed 	.word	0x080060ed
 8006158:	08006237 	.word	0x08006237
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	602a      	str	r2, [r5, #0]
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616c:	2301      	movs	r3, #1
 800616e:	e09f      	b.n	80062b0 <_printf_i+0x1ec>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	0607      	lsls	r7, r0, #24
 8006176:	f103 0104 	add.w	r1, r3, #4
 800617a:	6029      	str	r1, [r5, #0]
 800617c:	d501      	bpl.n	8006182 <_printf_i+0xbe>
 800617e:	681e      	ldr	r6, [r3, #0]
 8006180:	e003      	b.n	800618a <_printf_i+0xc6>
 8006182:	0646      	lsls	r6, r0, #25
 8006184:	d5fb      	bpl.n	800617e <_printf_i+0xba>
 8006186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800618a:	2e00      	cmp	r6, #0
 800618c:	da03      	bge.n	8006196 <_printf_i+0xd2>
 800618e:	232d      	movs	r3, #45	; 0x2d
 8006190:	4276      	negs	r6, r6
 8006192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006196:	485a      	ldr	r0, [pc, #360]	; (8006300 <_printf_i+0x23c>)
 8006198:	230a      	movs	r3, #10
 800619a:	e012      	b.n	80061c2 <_printf_i+0xfe>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	6029      	str	r1, [r5, #0]
 80061a4:	0605      	lsls	r5, r0, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xe8>
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0xee>
 80061ac:	0641      	lsls	r1, r0, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xe4>
 80061b0:	881e      	ldrh	r6, [r3, #0]
 80061b2:	4853      	ldr	r0, [pc, #332]	; (8006300 <_printf_i+0x23c>)
 80061b4:	2f6f      	cmp	r7, #111	; 0x6f
 80061b6:	bf0c      	ite	eq
 80061b8:	2308      	moveq	r3, #8
 80061ba:	230a      	movne	r3, #10
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c2:	6865      	ldr	r5, [r4, #4]
 80061c4:	60a5      	str	r5, [r4, #8]
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	bfa2      	ittt	ge
 80061ca:	6821      	ldrge	r1, [r4, #0]
 80061cc:	f021 0104 	bicge.w	r1, r1, #4
 80061d0:	6021      	strge	r1, [r4, #0]
 80061d2:	b90e      	cbnz	r6, 80061d8 <_printf_i+0x114>
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d04b      	beq.n	8006270 <_printf_i+0x1ac>
 80061d8:	4615      	mov	r5, r2
 80061da:	fbb6 f1f3 	udiv	r1, r6, r3
 80061de:	fb03 6711 	mls	r7, r3, r1, r6
 80061e2:	5dc7      	ldrb	r7, [r0, r7]
 80061e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061e8:	4637      	mov	r7, r6
 80061ea:	42bb      	cmp	r3, r7
 80061ec:	460e      	mov	r6, r1
 80061ee:	d9f4      	bls.n	80061da <_printf_i+0x116>
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d10b      	bne.n	800620c <_printf_i+0x148>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	07de      	lsls	r6, r3, #31
 80061f8:	d508      	bpl.n	800620c <_printf_i+0x148>
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	4299      	cmp	r1, r3
 8006200:	bfde      	ittt	le
 8006202:	2330      	movle	r3, #48	; 0x30
 8006204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006208:	f105 35ff 	addle.w	r5, r5, #4294967295
 800620c:	1b52      	subs	r2, r2, r5
 800620e:	6122      	str	r2, [r4, #16]
 8006210:	f8cd a000 	str.w	sl, [sp]
 8006214:	464b      	mov	r3, r9
 8006216:	aa03      	add	r2, sp, #12
 8006218:	4621      	mov	r1, r4
 800621a:	4640      	mov	r0, r8
 800621c:	f7ff fee4 	bl	8005fe8 <_printf_common>
 8006220:	3001      	adds	r0, #1
 8006222:	d14a      	bne.n	80062ba <_printf_i+0x1f6>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	b004      	add	sp, #16
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f043 0320 	orr.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	4833      	ldr	r0, [pc, #204]	; (8006304 <_printf_i+0x240>)
 8006238:	2778      	movs	r7, #120	; 0x78
 800623a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	6829      	ldr	r1, [r5, #0]
 8006242:	061f      	lsls	r7, r3, #24
 8006244:	f851 6b04 	ldr.w	r6, [r1], #4
 8006248:	d402      	bmi.n	8006250 <_printf_i+0x18c>
 800624a:	065f      	lsls	r7, r3, #25
 800624c:	bf48      	it	mi
 800624e:	b2b6      	uxthmi	r6, r6
 8006250:	07df      	lsls	r7, r3, #31
 8006252:	bf48      	it	mi
 8006254:	f043 0320 	orrmi.w	r3, r3, #32
 8006258:	6029      	str	r1, [r5, #0]
 800625a:	bf48      	it	mi
 800625c:	6023      	strmi	r3, [r4, #0]
 800625e:	b91e      	cbnz	r6, 8006268 <_printf_i+0x1a4>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f023 0320 	bic.w	r3, r3, #32
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	2310      	movs	r3, #16
 800626a:	e7a7      	b.n	80061bc <_printf_i+0xf8>
 800626c:	4824      	ldr	r0, [pc, #144]	; (8006300 <_printf_i+0x23c>)
 800626e:	e7e4      	b.n	800623a <_printf_i+0x176>
 8006270:	4615      	mov	r5, r2
 8006272:	e7bd      	b.n	80061f0 <_printf_i+0x12c>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	6826      	ldr	r6, [r4, #0]
 8006278:	6961      	ldr	r1, [r4, #20]
 800627a:	1d18      	adds	r0, r3, #4
 800627c:	6028      	str	r0, [r5, #0]
 800627e:	0635      	lsls	r5, r6, #24
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	d501      	bpl.n	8006288 <_printf_i+0x1c4>
 8006284:	6019      	str	r1, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0x1ca>
 8006288:	0670      	lsls	r0, r6, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0x1c0>
 800628c:	8019      	strh	r1, [r3, #0]
 800628e:	2300      	movs	r3, #0
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	4615      	mov	r5, r2
 8006294:	e7bc      	b.n	8006210 <_printf_i+0x14c>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	602a      	str	r2, [r5, #0]
 800629c:	681d      	ldr	r5, [r3, #0]
 800629e:	6862      	ldr	r2, [r4, #4]
 80062a0:	2100      	movs	r1, #0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f7f9 ff9c 	bl	80001e0 <memchr>
 80062a8:	b108      	cbz	r0, 80062ae <_printf_i+0x1ea>
 80062aa:	1b40      	subs	r0, r0, r5
 80062ac:	6060      	str	r0, [r4, #4]
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	2300      	movs	r3, #0
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b8:	e7aa      	b.n	8006210 <_printf_i+0x14c>
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	462a      	mov	r2, r5
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	47d0      	blx	sl
 80062c4:	3001      	adds	r0, #1
 80062c6:	d0ad      	beq.n	8006224 <_printf_i+0x160>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	079b      	lsls	r3, r3, #30
 80062cc:	d413      	bmi.n	80062f6 <_printf_i+0x232>
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	4298      	cmp	r0, r3
 80062d4:	bfb8      	it	lt
 80062d6:	4618      	movlt	r0, r3
 80062d8:	e7a6      	b.n	8006228 <_printf_i+0x164>
 80062da:	2301      	movs	r3, #1
 80062dc:	4632      	mov	r2, r6
 80062de:	4649      	mov	r1, r9
 80062e0:	4640      	mov	r0, r8
 80062e2:	47d0      	blx	sl
 80062e4:	3001      	adds	r0, #1
 80062e6:	d09d      	beq.n	8006224 <_printf_i+0x160>
 80062e8:	3501      	adds	r5, #1
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	9903      	ldr	r1, [sp, #12]
 80062ee:	1a5b      	subs	r3, r3, r1
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dcf2      	bgt.n	80062da <_printf_i+0x216>
 80062f4:	e7eb      	b.n	80062ce <_printf_i+0x20a>
 80062f6:	2500      	movs	r5, #0
 80062f8:	f104 0619 	add.w	r6, r4, #25
 80062fc:	e7f5      	b.n	80062ea <_printf_i+0x226>
 80062fe:	bf00      	nop
 8006300:	0800754d 	.word	0x0800754d
 8006304:	0800755e 	.word	0x0800755e

08006308 <memmove>:
 8006308:	4288      	cmp	r0, r1
 800630a:	b510      	push	{r4, lr}
 800630c:	eb01 0402 	add.w	r4, r1, r2
 8006310:	d902      	bls.n	8006318 <memmove+0x10>
 8006312:	4284      	cmp	r4, r0
 8006314:	4623      	mov	r3, r4
 8006316:	d807      	bhi.n	8006328 <memmove+0x20>
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	42a1      	cmp	r1, r4
 800631c:	d008      	beq.n	8006330 <memmove+0x28>
 800631e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006326:	e7f8      	b.n	800631a <memmove+0x12>
 8006328:	4402      	add	r2, r0
 800632a:	4601      	mov	r1, r0
 800632c:	428a      	cmp	r2, r1
 800632e:	d100      	bne.n	8006332 <memmove+0x2a>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800633a:	e7f7      	b.n	800632c <memmove+0x24>

0800633c <_sbrk_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d06      	ldr	r5, [pc, #24]	; (8006358 <_sbrk_r+0x1c>)
 8006340:	2300      	movs	r3, #0
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	f7fb fc0a 	bl	8001b60 <_sbrk>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_sbrk_r+0x1a>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_sbrk_r+0x1a>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200006c4 	.word	0x200006c4

0800635c <memcpy>:
 800635c:	440a      	add	r2, r1
 800635e:	4291      	cmp	r1, r2
 8006360:	f100 33ff 	add.w	r3, r0, #4294967295
 8006364:	d100      	bne.n	8006368 <memcpy+0xc>
 8006366:	4770      	bx	lr
 8006368:	b510      	push	{r4, lr}
 800636a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006372:	4291      	cmp	r1, r2
 8006374:	d1f9      	bne.n	800636a <memcpy+0xe>
 8006376:	bd10      	pop	{r4, pc}

08006378 <_realloc_r>:
 8006378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637c:	4680      	mov	r8, r0
 800637e:	4614      	mov	r4, r2
 8006380:	460e      	mov	r6, r1
 8006382:	b921      	cbnz	r1, 800638e <_realloc_r+0x16>
 8006384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	4611      	mov	r1, r2
 800638a:	f7ff bc49 	b.w	8005c20 <_malloc_r>
 800638e:	b92a      	cbnz	r2, 800639c <_realloc_r+0x24>
 8006390:	f7ff fbda 	bl	8005b48 <_free_r>
 8006394:	4625      	mov	r5, r4
 8006396:	4628      	mov	r0, r5
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	f000 f81b 	bl	80063d6 <_malloc_usable_size_r>
 80063a0:	4284      	cmp	r4, r0
 80063a2:	4607      	mov	r7, r0
 80063a4:	d802      	bhi.n	80063ac <_realloc_r+0x34>
 80063a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063aa:	d812      	bhi.n	80063d2 <_realloc_r+0x5a>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7ff fc36 	bl	8005c20 <_malloc_r>
 80063b4:	4605      	mov	r5, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0ed      	beq.n	8006396 <_realloc_r+0x1e>
 80063ba:	42bc      	cmp	r4, r7
 80063bc:	4622      	mov	r2, r4
 80063be:	4631      	mov	r1, r6
 80063c0:	bf28      	it	cs
 80063c2:	463a      	movcs	r2, r7
 80063c4:	f7ff ffca 	bl	800635c <memcpy>
 80063c8:	4631      	mov	r1, r6
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff fbbc 	bl	8005b48 <_free_r>
 80063d0:	e7e1      	b.n	8006396 <_realloc_r+0x1e>
 80063d2:	4635      	mov	r5, r6
 80063d4:	e7df      	b.n	8006396 <_realloc_r+0x1e>

080063d6 <_malloc_usable_size_r>:
 80063d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063da:	1f18      	subs	r0, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfbc      	itt	lt
 80063e0:	580b      	ldrlt	r3, [r1, r0]
 80063e2:	18c0      	addlt	r0, r0, r3
 80063e4:	4770      	bx	lr
	...

080063e8 <sin>:
 80063e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063ea:	ec53 2b10 	vmov	r2, r3, d0
 80063ee:	4828      	ldr	r0, [pc, #160]	; (8006490 <sin+0xa8>)
 80063f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80063f4:	4281      	cmp	r1, r0
 80063f6:	dc07      	bgt.n	8006408 <sin+0x20>
 80063f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006488 <sin+0xa0>
 80063fc:	2000      	movs	r0, #0
 80063fe:	b005      	add	sp, #20
 8006400:	f85d eb04 	ldr.w	lr, [sp], #4
 8006404:	f000 b910 	b.w	8006628 <__kernel_sin>
 8006408:	4822      	ldr	r0, [pc, #136]	; (8006494 <sin+0xac>)
 800640a:	4281      	cmp	r1, r0
 800640c:	dd09      	ble.n	8006422 <sin+0x3a>
 800640e:	ee10 0a10 	vmov	r0, s0
 8006412:	4619      	mov	r1, r3
 8006414:	f7f9 ff38 	bl	8000288 <__aeabi_dsub>
 8006418:	ec41 0b10 	vmov	d0, r0, r1
 800641c:	b005      	add	sp, #20
 800641e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006422:	4668      	mov	r0, sp
 8006424:	f000 f9c0 	bl	80067a8 <__ieee754_rem_pio2>
 8006428:	f000 0003 	and.w	r0, r0, #3
 800642c:	2801      	cmp	r0, #1
 800642e:	d00c      	beq.n	800644a <sin+0x62>
 8006430:	2802      	cmp	r0, #2
 8006432:	d011      	beq.n	8006458 <sin+0x70>
 8006434:	b9f0      	cbnz	r0, 8006474 <sin+0x8c>
 8006436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800643a:	ed9d 0b00 	vldr	d0, [sp]
 800643e:	2001      	movs	r0, #1
 8006440:	f000 f8f2 	bl	8006628 <__kernel_sin>
 8006444:	ec51 0b10 	vmov	r0, r1, d0
 8006448:	e7e6      	b.n	8006418 <sin+0x30>
 800644a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800644e:	ed9d 0b00 	vldr	d0, [sp]
 8006452:	f000 f821 	bl	8006498 <__kernel_cos>
 8006456:	e7f5      	b.n	8006444 <sin+0x5c>
 8006458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800645c:	ed9d 0b00 	vldr	d0, [sp]
 8006460:	2001      	movs	r0, #1
 8006462:	f000 f8e1 	bl	8006628 <__kernel_sin>
 8006466:	ec53 2b10 	vmov	r2, r3, d0
 800646a:	ee10 0a10 	vmov	r0, s0
 800646e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006472:	e7d1      	b.n	8006418 <sin+0x30>
 8006474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006478:	ed9d 0b00 	vldr	d0, [sp]
 800647c:	f000 f80c 	bl	8006498 <__kernel_cos>
 8006480:	e7f1      	b.n	8006466 <sin+0x7e>
 8006482:	bf00      	nop
 8006484:	f3af 8000 	nop.w
	...
 8006490:	3fe921fb 	.word	0x3fe921fb
 8006494:	7fefffff 	.word	0x7fefffff

08006498 <__kernel_cos>:
 8006498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	ec57 6b10 	vmov	r6, r7, d0
 80064a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80064a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80064a8:	ed8d 1b00 	vstr	d1, [sp]
 80064ac:	da07      	bge.n	80064be <__kernel_cos+0x26>
 80064ae:	ee10 0a10 	vmov	r0, s0
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa fb3a 	bl	8000b2c <__aeabi_d2iz>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	f000 8088 	beq.w	80065ce <__kernel_cos+0x136>
 80064be:	4632      	mov	r2, r6
 80064c0:	463b      	mov	r3, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	4639      	mov	r1, r7
 80064c6:	f7fa f897 	bl	80005f8 <__aeabi_dmul>
 80064ca:	4b51      	ldr	r3, [pc, #324]	; (8006610 <__kernel_cos+0x178>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	460d      	mov	r5, r1
 80064d2:	f7fa f891 	bl	80005f8 <__aeabi_dmul>
 80064d6:	a340      	add	r3, pc, #256	; (adr r3, 80065d8 <__kernel_cos+0x140>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	4682      	mov	sl, r0
 80064de:	468b      	mov	fp, r1
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	a33d      	add	r3, pc, #244	; (adr r3, 80065e0 <__kernel_cos+0x148>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 fecd 	bl	800028c <__adddf3>
 80064f2:	4622      	mov	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	f7fa f87f 	bl	80005f8 <__aeabi_dmul>
 80064fa:	a33b      	add	r3, pc, #236	; (adr r3, 80065e8 <__kernel_cos+0x150>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7f9 fec2 	bl	8000288 <__aeabi_dsub>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7fa f876 	bl	80005f8 <__aeabi_dmul>
 800650c:	a338      	add	r3, pc, #224	; (adr r3, 80065f0 <__kernel_cos+0x158>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f7f9 febb 	bl	800028c <__adddf3>
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f7fa f86d 	bl	80005f8 <__aeabi_dmul>
 800651e:	a336      	add	r3, pc, #216	; (adr r3, 80065f8 <__kernel_cos+0x160>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7f9 feb0 	bl	8000288 <__aeabi_dsub>
 8006528:	4622      	mov	r2, r4
 800652a:	462b      	mov	r3, r5
 800652c:	f7fa f864 	bl	80005f8 <__aeabi_dmul>
 8006530:	a333      	add	r3, pc, #204	; (adr r3, 8006600 <__kernel_cos+0x168>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7f9 fea9 	bl	800028c <__adddf3>
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	f7fa f85b 	bl	80005f8 <__aeabi_dmul>
 8006542:	4622      	mov	r2, r4
 8006544:	462b      	mov	r3, r5
 8006546:	f7fa f857 	bl	80005f8 <__aeabi_dmul>
 800654a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800654e:	4604      	mov	r4, r0
 8006550:	460d      	mov	r5, r1
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa f84f 	bl	80005f8 <__aeabi_dmul>
 800655a:	460b      	mov	r3, r1
 800655c:	4602      	mov	r2, r0
 800655e:	4629      	mov	r1, r5
 8006560:	4620      	mov	r0, r4
 8006562:	f7f9 fe91 	bl	8000288 <__aeabi_dsub>
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <__kernel_cos+0x17c>)
 8006568:	4598      	cmp	r8, r3
 800656a:	4606      	mov	r6, r0
 800656c:	460f      	mov	r7, r1
 800656e:	dc10      	bgt.n	8006592 <__kernel_cos+0xfa>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4650      	mov	r0, sl
 8006576:	4659      	mov	r1, fp
 8006578:	f7f9 fe86 	bl	8000288 <__aeabi_dsub>
 800657c:	460b      	mov	r3, r1
 800657e:	4926      	ldr	r1, [pc, #152]	; (8006618 <__kernel_cos+0x180>)
 8006580:	4602      	mov	r2, r0
 8006582:	2000      	movs	r0, #0
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	ec41 0b10 	vmov	d0, r0, r1
 800658c:	b003      	add	sp, #12
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	4b22      	ldr	r3, [pc, #136]	; (800661c <__kernel_cos+0x184>)
 8006594:	4920      	ldr	r1, [pc, #128]	; (8006618 <__kernel_cos+0x180>)
 8006596:	4598      	cmp	r8, r3
 8006598:	bfcc      	ite	gt
 800659a:	4d21      	ldrgt	r5, [pc, #132]	; (8006620 <__kernel_cos+0x188>)
 800659c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80065a0:	2400      	movs	r4, #0
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	2000      	movs	r0, #0
 80065a8:	f7f9 fe6e 	bl	8000288 <__aeabi_dsub>
 80065ac:	4622      	mov	r2, r4
 80065ae:	4680      	mov	r8, r0
 80065b0:	4689      	mov	r9, r1
 80065b2:	462b      	mov	r3, r5
 80065b4:	4650      	mov	r0, sl
 80065b6:	4659      	mov	r1, fp
 80065b8:	f7f9 fe66 	bl	8000288 <__aeabi_dsub>
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	f7f9 fe62 	bl	8000288 <__aeabi_dsub>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	e7da      	b.n	8006584 <__kernel_cos+0xec>
 80065ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006608 <__kernel_cos+0x170>
 80065d2:	e7db      	b.n	800658c <__kernel_cos+0xf4>
 80065d4:	f3af 8000 	nop.w
 80065d8:	be8838d4 	.word	0xbe8838d4
 80065dc:	bda8fae9 	.word	0xbda8fae9
 80065e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80065e4:	3e21ee9e 	.word	0x3e21ee9e
 80065e8:	809c52ad 	.word	0x809c52ad
 80065ec:	3e927e4f 	.word	0x3e927e4f
 80065f0:	19cb1590 	.word	0x19cb1590
 80065f4:	3efa01a0 	.word	0x3efa01a0
 80065f8:	16c15177 	.word	0x16c15177
 80065fc:	3f56c16c 	.word	0x3f56c16c
 8006600:	5555554c 	.word	0x5555554c
 8006604:	3fa55555 	.word	0x3fa55555
 8006608:	00000000 	.word	0x00000000
 800660c:	3ff00000 	.word	0x3ff00000
 8006610:	3fe00000 	.word	0x3fe00000
 8006614:	3fd33332 	.word	0x3fd33332
 8006618:	3ff00000 	.word	0x3ff00000
 800661c:	3fe90000 	.word	0x3fe90000
 8006620:	3fd20000 	.word	0x3fd20000
 8006624:	00000000 	.word	0x00000000

08006628 <__kernel_sin>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b04 	vpush	{d8-d9}
 8006630:	eeb0 8a41 	vmov.f32	s16, s2
 8006634:	eef0 8a61 	vmov.f32	s17, s3
 8006638:	ec55 4b10 	vmov	r4, r5, d0
 800663c:	b083      	sub	sp, #12
 800663e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006642:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006646:	9001      	str	r0, [sp, #4]
 8006648:	da06      	bge.n	8006658 <__kernel_sin+0x30>
 800664a:	ee10 0a10 	vmov	r0, s0
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa fa6c 	bl	8000b2c <__aeabi_d2iz>
 8006654:	2800      	cmp	r0, #0
 8006656:	d051      	beq.n	80066fc <__kernel_sin+0xd4>
 8006658:	4622      	mov	r2, r4
 800665a:	462b      	mov	r3, r5
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	4682      	mov	sl, r0
 8006666:	468b      	mov	fp, r1
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 ffc2 	bl	80005f8 <__aeabi_dmul>
 8006674:	a341      	add	r3, pc, #260	; (adr r3, 800677c <__kernel_sin+0x154>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	4680      	mov	r8, r0
 800667c:	4689      	mov	r9, r1
 800667e:	4650      	mov	r0, sl
 8006680:	4659      	mov	r1, fp
 8006682:	f7f9 ffb9 	bl	80005f8 <__aeabi_dmul>
 8006686:	a33f      	add	r3, pc, #252	; (adr r3, 8006784 <__kernel_sin+0x15c>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 fdfc 	bl	8000288 <__aeabi_dsub>
 8006690:	4652      	mov	r2, sl
 8006692:	465b      	mov	r3, fp
 8006694:	f7f9 ffb0 	bl	80005f8 <__aeabi_dmul>
 8006698:	a33c      	add	r3, pc, #240	; (adr r3, 800678c <__kernel_sin+0x164>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 fdf5 	bl	800028c <__adddf3>
 80066a2:	4652      	mov	r2, sl
 80066a4:	465b      	mov	r3, fp
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	a33a      	add	r3, pc, #232	; (adr r3, 8006794 <__kernel_sin+0x16c>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_dsub>
 80066b4:	4652      	mov	r2, sl
 80066b6:	465b      	mov	r3, fp
 80066b8:	f7f9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80066bc:	a337      	add	r3, pc, #220	; (adr r3, 800679c <__kernel_sin+0x174>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 fde3 	bl	800028c <__adddf3>
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	4606      	mov	r6, r0
 80066ca:	460f      	mov	r7, r1
 80066cc:	b9eb      	cbnz	r3, 800670a <__kernel_sin+0xe2>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4650      	mov	r0, sl
 80066d4:	4659      	mov	r1, fp
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	a325      	add	r3, pc, #148	; (adr r3, 8006770 <__kernel_sin+0x148>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 fdd2 	bl	8000288 <__aeabi_dsub>
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 fdca 	bl	800028c <__adddf3>
 80066f8:	4604      	mov	r4, r0
 80066fa:	460d      	mov	r5, r1
 80066fc:	ec45 4b10 	vmov	d0, r4, r5
 8006700:	b003      	add	sp, #12
 8006702:	ecbd 8b04 	vpop	{d8-d9}
 8006706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <__kernel_sin+0x150>)
 800670c:	ec51 0b18 	vmov	r0, r1, d8
 8006710:	2200      	movs	r2, #0
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	4632      	mov	r2, r6
 8006718:	ec41 0b19 	vmov	d9, r0, r1
 800671c:	463b      	mov	r3, r7
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 ff69 	bl	80005f8 <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	ec51 0b19 	vmov	r0, r1, d9
 800672e:	f7f9 fdab 	bl	8000288 <__aeabi_dsub>
 8006732:	4652      	mov	r2, sl
 8006734:	465b      	mov	r3, fp
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	ec53 2b18 	vmov	r2, r3, d8
 800673e:	f7f9 fda3 	bl	8000288 <__aeabi_dsub>
 8006742:	a30b      	add	r3, pc, #44	; (adr r3, 8006770 <__kernel_sin+0x148>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fd96 	bl	800028c <__adddf3>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7f9 fd8e 	bl	8000288 <__aeabi_dsub>
 800676c:	e7c4      	b.n	80066f8 <__kernel_sin+0xd0>
 800676e:	bf00      	nop
 8006770:	55555549 	.word	0x55555549
 8006774:	3fc55555 	.word	0x3fc55555
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	5acfd57c 	.word	0x5acfd57c
 8006780:	3de5d93a 	.word	0x3de5d93a
 8006784:	8a2b9ceb 	.word	0x8a2b9ceb
 8006788:	3e5ae5e6 	.word	0x3e5ae5e6
 800678c:	57b1fe7d 	.word	0x57b1fe7d
 8006790:	3ec71de3 	.word	0x3ec71de3
 8006794:	19c161d5 	.word	0x19c161d5
 8006798:	3f2a01a0 	.word	0x3f2a01a0
 800679c:	1110f8a6 	.word	0x1110f8a6
 80067a0:	3f811111 	.word	0x3f811111
 80067a4:	00000000 	.word	0x00000000

080067a8 <__ieee754_rem_pio2>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	ed2d 8b02 	vpush	{d8}
 80067b0:	ec55 4b10 	vmov	r4, r5, d0
 80067b4:	4bca      	ldr	r3, [pc, #808]	; (8006ae0 <__ieee754_rem_pio2+0x338>)
 80067b6:	b08b      	sub	sp, #44	; 0x2c
 80067b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80067bc:	4598      	cmp	r8, r3
 80067be:	4682      	mov	sl, r0
 80067c0:	9502      	str	r5, [sp, #8]
 80067c2:	dc08      	bgt.n	80067d6 <__ieee754_rem_pio2+0x2e>
 80067c4:	2200      	movs	r2, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	ed80 0b00 	vstr	d0, [r0]
 80067cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067d0:	f04f 0b00 	mov.w	fp, #0
 80067d4:	e028      	b.n	8006828 <__ieee754_rem_pio2+0x80>
 80067d6:	4bc3      	ldr	r3, [pc, #780]	; (8006ae4 <__ieee754_rem_pio2+0x33c>)
 80067d8:	4598      	cmp	r8, r3
 80067da:	dc78      	bgt.n	80068ce <__ieee754_rem_pio2+0x126>
 80067dc:	9b02      	ldr	r3, [sp, #8]
 80067de:	4ec2      	ldr	r6, [pc, #776]	; (8006ae8 <__ieee754_rem_pio2+0x340>)
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	ee10 0a10 	vmov	r0, s0
 80067e6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006aa8 <__ieee754_rem_pio2+0x300>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	4629      	mov	r1, r5
 80067ee:	dd39      	ble.n	8006864 <__ieee754_rem_pio2+0xbc>
 80067f0:	f7f9 fd4a 	bl	8000288 <__aeabi_dsub>
 80067f4:	45b0      	cmp	r8, r6
 80067f6:	4604      	mov	r4, r0
 80067f8:	460d      	mov	r5, r1
 80067fa:	d01b      	beq.n	8006834 <__ieee754_rem_pio2+0x8c>
 80067fc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x308>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f7f9 fd41 	bl	8000288 <__aeabi_dsub>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	e9ca 2300 	strd	r2, r3, [sl]
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7f9 fd39 	bl	8000288 <__aeabi_dsub>
 8006816:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x308>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fd34 	bl	8000288 <__aeabi_dsub>
 8006820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006824:	f04f 0b01 	mov.w	fp, #1
 8006828:	4658      	mov	r0, fp
 800682a:	b00b      	add	sp, #44	; 0x2c
 800682c:	ecbd 8b02 	vpop	{d8}
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x310>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fd25 	bl	8000288 <__aeabi_dsub>
 800683e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x318>)
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	4604      	mov	r4, r0
 8006846:	460d      	mov	r5, r1
 8006848:	f7f9 fd1e 	bl	8000288 <__aeabi_dsub>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	e9ca 2300 	strd	r2, r3, [sl]
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	f7f9 fd16 	bl	8000288 <__aeabi_dsub>
 800685c:	a398      	add	r3, pc, #608	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x318>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	e7db      	b.n	800681c <__ieee754_rem_pio2+0x74>
 8006864:	f7f9 fd12 	bl	800028c <__adddf3>
 8006868:	45b0      	cmp	r8, r6
 800686a:	4604      	mov	r4, r0
 800686c:	460d      	mov	r5, r1
 800686e:	d016      	beq.n	800689e <__ieee754_rem_pio2+0xf6>
 8006870:	a38f      	add	r3, pc, #572	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x308>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fd09 	bl	800028c <__adddf3>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	e9ca 2300 	strd	r2, r3, [sl]
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7f9 fcff 	bl	8000288 <__aeabi_dsub>
 800688a:	a389      	add	r3, pc, #548	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x308>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fcfc 	bl	800028c <__adddf3>
 8006894:	f04f 3bff 	mov.w	fp, #4294967295
 8006898:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800689c:	e7c4      	b.n	8006828 <__ieee754_rem_pio2+0x80>
 800689e:	a386      	add	r3, pc, #536	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x310>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fcf2 	bl	800028c <__adddf3>
 80068a8:	a385      	add	r3, pc, #532	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x318>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	4604      	mov	r4, r0
 80068b0:	460d      	mov	r5, r1
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	e9ca 2300 	strd	r2, r3, [sl]
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7f9 fce1 	bl	8000288 <__aeabi_dsub>
 80068c6:	a37e      	add	r3, pc, #504	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x318>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	e7e0      	b.n	8006890 <__ieee754_rem_pio2+0xe8>
 80068ce:	4b87      	ldr	r3, [pc, #540]	; (8006aec <__ieee754_rem_pio2+0x344>)
 80068d0:	4598      	cmp	r8, r3
 80068d2:	f300 80d8 	bgt.w	8006a86 <__ieee754_rem_pio2+0x2de>
 80068d6:	f000 f96d 	bl	8006bb4 <fabs>
 80068da:	ec55 4b10 	vmov	r4, r5, d0
 80068de:	ee10 0a10 	vmov	r0, s0
 80068e2:	a379      	add	r3, pc, #484	; (adr r3, 8006ac8 <__ieee754_rem_pio2+0x320>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7f9 fe85 	bl	80005f8 <__aeabi_dmul>
 80068ee:	4b80      	ldr	r3, [pc, #512]	; (8006af0 <__ieee754_rem_pio2+0x348>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	f7f9 fccb 	bl	800028c <__adddf3>
 80068f6:	f7fa f919 	bl	8000b2c <__aeabi_d2iz>
 80068fa:	4683      	mov	fp, r0
 80068fc:	f7f9 fe12 	bl	8000524 <__aeabi_i2d>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	ec43 2b18 	vmov	d8, r2, r3
 8006908:	a367      	add	r3, pc, #412	; (adr r3, 8006aa8 <__ieee754_rem_pio2+0x300>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f7f9 fe73 	bl	80005f8 <__aeabi_dmul>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7f9 fcb5 	bl	8000288 <__aeabi_dsub>
 800691e:	a364      	add	r3, pc, #400	; (adr r3, 8006ab0 <__ieee754_rem_pio2+0x308>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	ec51 0b18 	vmov	r0, r1, d8
 800692c:	f7f9 fe64 	bl	80005f8 <__aeabi_dmul>
 8006930:	f1bb 0f1f 	cmp.w	fp, #31
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	dc0d      	bgt.n	8006956 <__ieee754_rem_pio2+0x1ae>
 800693a:	4b6e      	ldr	r3, [pc, #440]	; (8006af4 <__ieee754_rem_pio2+0x34c>)
 800693c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006944:	4543      	cmp	r3, r8
 8006946:	d006      	beq.n	8006956 <__ieee754_rem_pio2+0x1ae>
 8006948:	4622      	mov	r2, r4
 800694a:	462b      	mov	r3, r5
 800694c:	4630      	mov	r0, r6
 800694e:	4639      	mov	r1, r7
 8006950:	f7f9 fc9a 	bl	8000288 <__aeabi_dsub>
 8006954:	e00e      	b.n	8006974 <__ieee754_rem_pio2+0x1cc>
 8006956:	462b      	mov	r3, r5
 8006958:	4622      	mov	r2, r4
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7f9 fc93 	bl	8000288 <__aeabi_dsub>
 8006962:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006966:	9303      	str	r3, [sp, #12]
 8006968:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800696c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006970:	2b10      	cmp	r3, #16
 8006972:	dc02      	bgt.n	800697a <__ieee754_rem_pio2+0x1d2>
 8006974:	e9ca 0100 	strd	r0, r1, [sl]
 8006978:	e039      	b.n	80069ee <__ieee754_rem_pio2+0x246>
 800697a:	a34f      	add	r3, pc, #316	; (adr r3, 8006ab8 <__ieee754_rem_pio2+0x310>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	ec51 0b18 	vmov	r0, r1, d8
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7f9 fc78 	bl	8000288 <__aeabi_dsub>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4680      	mov	r8, r0
 800699e:	4689      	mov	r9, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	4622      	mov	r2, r4
 80069aa:	462b      	mov	r3, r5
 80069ac:	f7f9 fc6c 	bl	8000288 <__aeabi_dsub>
 80069b0:	a343      	add	r3, pc, #268	; (adr r3, 8006ac0 <__ieee754_rem_pio2+0x318>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	4604      	mov	r4, r0
 80069b8:	460d      	mov	r5, r1
 80069ba:	ec51 0b18 	vmov	r0, r1, d8
 80069be:	f7f9 fe1b 	bl	80005f8 <__aeabi_dmul>
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	f7f9 fc57 	bl	8000288 <__aeabi_dsub>
 80069da:	9a03      	ldr	r2, [sp, #12]
 80069dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b31      	cmp	r3, #49	; 0x31
 80069e4:	dc24      	bgt.n	8006a30 <__ieee754_rem_pio2+0x288>
 80069e6:	e9ca 0100 	strd	r0, r1, [sl]
 80069ea:	4646      	mov	r6, r8
 80069ec:	464f      	mov	r7, r9
 80069ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80069f2:	4630      	mov	r0, r6
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7f9 fc45 	bl	8000288 <__aeabi_dsub>
 80069fe:	462b      	mov	r3, r5
 8006a00:	4622      	mov	r2, r4
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a0e:	f6bf af0b 	bge.w	8006828 <__ieee754_rem_pio2+0x80>
 8006a12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a16:	f8ca 3004 	str.w	r3, [sl, #4]
 8006a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a1e:	f8ca 8000 	str.w	r8, [sl]
 8006a22:	f8ca 0008 	str.w	r0, [sl, #8]
 8006a26:	f8ca 300c 	str.w	r3, [sl, #12]
 8006a2a:	f1cb 0b00 	rsb	fp, fp, #0
 8006a2e:	e6fb      	b.n	8006828 <__ieee754_rem_pio2+0x80>
 8006a30:	a327      	add	r3, pc, #156	; (adr r3, 8006ad0 <__ieee754_rem_pio2+0x328>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	ec51 0b18 	vmov	r0, r1, d8
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460d      	mov	r5, r1
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 fc1d 	bl	8000288 <__aeabi_dsub>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	4640      	mov	r0, r8
 8006a58:	4649      	mov	r1, r9
 8006a5a:	f7f9 fc15 	bl	8000288 <__aeabi_dsub>
 8006a5e:	4622      	mov	r2, r4
 8006a60:	462b      	mov	r3, r5
 8006a62:	f7f9 fc11 	bl	8000288 <__aeabi_dsub>
 8006a66:	a31c      	add	r3, pc, #112	; (adr r3, 8006ad8 <__ieee754_rem_pio2+0x330>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	ec51 0b18 	vmov	r0, r1, d8
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	4622      	mov	r2, r4
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	f7f9 fc04 	bl	8000288 <__aeabi_dsub>
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	e760      	b.n	8006948 <__ieee754_rem_pio2+0x1a0>
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <__ieee754_rem_pio2+0x350>)
 8006a88:	4598      	cmp	r8, r3
 8006a8a:	dd37      	ble.n	8006afc <__ieee754_rem_pio2+0x354>
 8006a8c:	ee10 2a10 	vmov	r2, s0
 8006a90:	462b      	mov	r3, r5
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a9e:	e9ca 0100 	strd	r0, r1, [sl]
 8006aa2:	e695      	b.n	80067d0 <__ieee754_rem_pio2+0x28>
 8006aa4:	f3af 8000 	nop.w
 8006aa8:	54400000 	.word	0x54400000
 8006aac:	3ff921fb 	.word	0x3ff921fb
 8006ab0:	1a626331 	.word	0x1a626331
 8006ab4:	3dd0b461 	.word	0x3dd0b461
 8006ab8:	1a600000 	.word	0x1a600000
 8006abc:	3dd0b461 	.word	0x3dd0b461
 8006ac0:	2e037073 	.word	0x2e037073
 8006ac4:	3ba3198a 	.word	0x3ba3198a
 8006ac8:	6dc9c883 	.word	0x6dc9c883
 8006acc:	3fe45f30 	.word	0x3fe45f30
 8006ad0:	2e000000 	.word	0x2e000000
 8006ad4:	3ba3198a 	.word	0x3ba3198a
 8006ad8:	252049c1 	.word	0x252049c1
 8006adc:	397b839a 	.word	0x397b839a
 8006ae0:	3fe921fb 	.word	0x3fe921fb
 8006ae4:	4002d97b 	.word	0x4002d97b
 8006ae8:	3ff921fb 	.word	0x3ff921fb
 8006aec:	413921fb 	.word	0x413921fb
 8006af0:	3fe00000 	.word	0x3fe00000
 8006af4:	08007570 	.word	0x08007570
 8006af8:	7fefffff 	.word	0x7fefffff
 8006afc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006b00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006b04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006b08:	4620      	mov	r0, r4
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	f7fa f80e 	bl	8000b2c <__aeabi_d2iz>
 8006b10:	f7f9 fd08 	bl	8000524 <__aeabi_i2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b20:	f7f9 fbb2 	bl	8000288 <__aeabi_dsub>
 8006b24:	4b21      	ldr	r3, [pc, #132]	; (8006bac <__ieee754_rem_pio2+0x404>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	f7f9 fd66 	bl	80005f8 <__aeabi_dmul>
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7f9 fffc 	bl	8000b2c <__aeabi_d2iz>
 8006b34:	f7f9 fcf6 	bl	8000524 <__aeabi_i2d>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b44:	f7f9 fba0 	bl	8000288 <__aeabi_dsub>
 8006b48:	4b18      	ldr	r3, [pc, #96]	; (8006bac <__ieee754_rem_pio2+0x404>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006b58:	2703      	movs	r7, #3
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	46b9      	mov	r9, r7
 8006b68:	3f01      	subs	r7, #1
 8006b6a:	f7f9 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1f5      	bne.n	8006b5e <__ieee754_rem_pio2+0x3b6>
 8006b72:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <__ieee754_rem_pio2+0x408>)
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	2302      	movs	r3, #2
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	4651      	mov	r1, sl
 8006b80:	a804      	add	r0, sp, #16
 8006b82:	f000 f821 	bl	8006bc8 <__kernel_rem_pio2>
 8006b86:	9b02      	ldr	r3, [sp, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	4683      	mov	fp, r0
 8006b8c:	f6bf ae4c 	bge.w	8006828 <__ieee754_rem_pio2+0x80>
 8006b90:	e9da 2100 	ldrd	r2, r1, [sl]
 8006b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b98:	e9ca 2300 	strd	r2, r3, [sl]
 8006b9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006ba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ba4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006ba8:	e73f      	b.n	8006a2a <__ieee754_rem_pio2+0x282>
 8006baa:	bf00      	nop
 8006bac:	41700000 	.word	0x41700000
 8006bb0:	080075f0 	.word	0x080075f0

08006bb4 <fabs>:
 8006bb4:	ec51 0b10 	vmov	r0, r1, d0
 8006bb8:	ee10 2a10 	vmov	r2, s0
 8006bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bc0:	ec43 2b10 	vmov	d0, r2, r3
 8006bc4:	4770      	bx	lr
	...

08006bc8 <__kernel_rem_pio2>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006bd4:	f112 0f14 	cmn.w	r2, #20
 8006bd8:	9306      	str	r3, [sp, #24]
 8006bda:	9104      	str	r1, [sp, #16]
 8006bdc:	4bc2      	ldr	r3, [pc, #776]	; (8006ee8 <__kernel_rem_pio2+0x320>)
 8006bde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006be0:	9009      	str	r0, [sp, #36]	; 0x24
 8006be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bee:	bfa8      	it	ge
 8006bf0:	1ed4      	subge	r4, r2, #3
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	bfb2      	itee	lt
 8006bf6:	2400      	movlt	r4, #0
 8006bf8:	2318      	movge	r3, #24
 8006bfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8006bfe:	f06f 0317 	mvn.w	r3, #23
 8006c02:	fb04 3303 	mla	r3, r4, r3, r3
 8006c06:	eb03 0a02 	add.w	sl, r3, r2
 8006c0a:	9b00      	ldr	r3, [sp, #0]
 8006c0c:	9a05      	ldr	r2, [sp, #20]
 8006c0e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006ed8 <__kernel_rem_pio2+0x310>
 8006c12:	eb03 0802 	add.w	r8, r3, r2
 8006c16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006c18:	1aa7      	subs	r7, r4, r2
 8006c1a:	ae20      	add	r6, sp, #128	; 0x80
 8006c1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c20:	2500      	movs	r5, #0
 8006c22:	4545      	cmp	r5, r8
 8006c24:	dd13      	ble.n	8006c4e <__kernel_rem_pio2+0x86>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	aa20      	add	r2, sp, #128	; 0x80
 8006c2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c2e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	4598      	cmp	r8, r3
 8006c3a:	dc31      	bgt.n	8006ca0 <__kernel_rem_pio2+0xd8>
 8006c3c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006ed8 <__kernel_rem_pio2+0x310>
 8006c40:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c48:	462f      	mov	r7, r5
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	e01b      	b.n	8006c86 <__kernel_rem_pio2+0xbe>
 8006c4e:	42ef      	cmn	r7, r5
 8006c50:	d407      	bmi.n	8006c62 <__kernel_rem_pio2+0x9a>
 8006c52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c56:	f7f9 fc65 	bl	8000524 <__aeabi_i2d>
 8006c5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c5e:	3501      	adds	r5, #1
 8006c60:	e7df      	b.n	8006c22 <__kernel_rem_pio2+0x5a>
 8006c62:	ec51 0b18 	vmov	r0, r1, d8
 8006c66:	e7f8      	b.n	8006c5a <__kernel_rem_pio2+0x92>
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c70:	f7f9 fcc2 	bl	80005f8 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7c:	f7f9 fb06 	bl	800028c <__adddf3>
 8006c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c84:	3601      	adds	r6, #1
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	429e      	cmp	r6, r3
 8006c8a:	f1a7 0708 	sub.w	r7, r7, #8
 8006c8e:	ddeb      	ble.n	8006c68 <__kernel_rem_pio2+0xa0>
 8006c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c94:	f108 0801 	add.w	r8, r8, #1
 8006c98:	ecab 7b02 	vstmia	fp!, {d7}
 8006c9c:	3508      	adds	r5, #8
 8006c9e:	e7ca      	b.n	8006c36 <__kernel_rem_pio2+0x6e>
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	aa0c      	add	r2, sp, #48	; 0x30
 8006ca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006caa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006cac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006cb0:	9c00      	ldr	r4, [sp, #0]
 8006cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb4:	00e3      	lsls	r3, r4, #3
 8006cb6:	9308      	str	r3, [sp, #32]
 8006cb8:	ab98      	add	r3, sp, #608	; 0x260
 8006cba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cbe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006cc2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006cc6:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cc8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006ccc:	46c3      	mov	fp, r8
 8006cce:	46a1      	mov	r9, r4
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	f1a5 0508 	sub.w	r5, r5, #8
 8006cd8:	dc77      	bgt.n	8006dca <__kernel_rem_pio2+0x202>
 8006cda:	ec47 6b10 	vmov	d0, r6, r7
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f000 fac2 	bl	8007268 <scalbn>
 8006ce4:	ec57 6b10 	vmov	r6, r7, d0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006cee:	ee10 0a10 	vmov	r0, s0
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 fc80 	bl	80005f8 <__aeabi_dmul>
 8006cf8:	ec41 0b10 	vmov	d0, r0, r1
 8006cfc:	f000 fb34 	bl	8007368 <floor>
 8006d00:	4b7a      	ldr	r3, [pc, #488]	; (8006eec <__kernel_rem_pio2+0x324>)
 8006d02:	ec51 0b10 	vmov	r0, r1, d0
 8006d06:	2200      	movs	r2, #0
 8006d08:	f7f9 fc76 	bl	80005f8 <__aeabi_dmul>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fab8 	bl	8000288 <__aeabi_dsub>
 8006d18:	460f      	mov	r7, r1
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	f7f9 ff06 	bl	8000b2c <__aeabi_d2iz>
 8006d20:	9002      	str	r0, [sp, #8]
 8006d22:	f7f9 fbff 	bl	8000524 <__aeabi_i2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	f1ba 0f00 	cmp.w	sl, #0
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	dd6d      	ble.n	8006e18 <__kernel_rem_pio2+0x250>
 8006d3c:	1e61      	subs	r1, r4, #1
 8006d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8006d40:	9d02      	ldr	r5, [sp, #8]
 8006d42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d46:	f1ca 0018 	rsb	r0, sl, #24
 8006d4a:	fa43 f200 	asr.w	r2, r3, r0
 8006d4e:	4415      	add	r5, r2
 8006d50:	4082      	lsls	r2, r0
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	aa0c      	add	r2, sp, #48	; 0x30
 8006d56:	9502      	str	r5, [sp, #8]
 8006d58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006d5c:	f1ca 0217 	rsb	r2, sl, #23
 8006d60:	fa43 fb02 	asr.w	fp, r3, r2
 8006d64:	f1bb 0f00 	cmp.w	fp, #0
 8006d68:	dd65      	ble.n	8006e36 <__kernel_rem_pio2+0x26e>
 8006d6a:	9b02      	ldr	r3, [sp, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	3301      	adds	r3, #1
 8006d70:	9302      	str	r3, [sp, #8]
 8006d72:	4615      	mov	r5, r2
 8006d74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006d78:	4294      	cmp	r4, r2
 8006d7a:	f300 809f 	bgt.w	8006ebc <__kernel_rem_pio2+0x2f4>
 8006d7e:	f1ba 0f00 	cmp.w	sl, #0
 8006d82:	dd07      	ble.n	8006d94 <__kernel_rem_pio2+0x1cc>
 8006d84:	f1ba 0f01 	cmp.w	sl, #1
 8006d88:	f000 80c1 	beq.w	8006f0e <__kernel_rem_pio2+0x346>
 8006d8c:	f1ba 0f02 	cmp.w	sl, #2
 8006d90:	f000 80c7 	beq.w	8006f22 <__kernel_rem_pio2+0x35a>
 8006d94:	f1bb 0f02 	cmp.w	fp, #2
 8006d98:	d14d      	bne.n	8006e36 <__kernel_rem_pio2+0x26e>
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	4954      	ldr	r1, [pc, #336]	; (8006ef0 <__kernel_rem_pio2+0x328>)
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7f9 fa71 	bl	8000288 <__aeabi_dsub>
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	2d00      	cmp	r5, #0
 8006dac:	d043      	beq.n	8006e36 <__kernel_rem_pio2+0x26e>
 8006dae:	4650      	mov	r0, sl
 8006db0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006ee0 <__kernel_rem_pio2+0x318>
 8006db4:	f000 fa58 	bl	8007268 <scalbn>
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	ec53 2b10 	vmov	r2, r3, d0
 8006dc0:	f7f9 fa62 	bl	8000288 <__aeabi_dsub>
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	460f      	mov	r7, r1
 8006dc8:	e035      	b.n	8006e36 <__kernel_rem_pio2+0x26e>
 8006dca:	4b4a      	ldr	r3, [pc, #296]	; (8006ef4 <__kernel_rem_pio2+0x32c>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	f7f9 fea9 	bl	8000b2c <__aeabi_d2iz>
 8006dda:	f7f9 fba3 	bl	8000524 <__aeabi_i2d>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	ec43 2b18 	vmov	d8, r2, r3
 8006de6:	4b44      	ldr	r3, [pc, #272]	; (8006ef8 <__kernel_rem_pio2+0x330>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7f9 fc05 	bl	80005f8 <__aeabi_dmul>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	f7f9 fa47 	bl	8000288 <__aeabi_dsub>
 8006dfa:	f7f9 fe97 	bl	8000b2c <__aeabi_d2iz>
 8006dfe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e02:	f84b 0b04 	str.w	r0, [fp], #4
 8006e06:	ec51 0b18 	vmov	r0, r1, d8
 8006e0a:	f7f9 fa3f 	bl	800028c <__adddf3>
 8006e0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	e75b      	b.n	8006cd0 <__kernel_rem_pio2+0x108>
 8006e18:	d106      	bne.n	8006e28 <__kernel_rem_pio2+0x260>
 8006e1a:	1e63      	subs	r3, r4, #1
 8006e1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e22:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006e26:	e79d      	b.n	8006d64 <__kernel_rem_pio2+0x19c>
 8006e28:	4b34      	ldr	r3, [pc, #208]	; (8006efc <__kernel_rem_pio2+0x334>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fe6a 	bl	8000b04 <__aeabi_dcmpge>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d140      	bne.n	8006eb6 <__kernel_rem_pio2+0x2ee>
 8006e34:	4683      	mov	fp, r0
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f000 80c1 	beq.w	8006fca <__kernel_rem_pio2+0x402>
 8006e48:	1e65      	subs	r5, r4, #1
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	9900      	ldr	r1, [sp, #0]
 8006e50:	428b      	cmp	r3, r1
 8006e52:	da6d      	bge.n	8006f30 <__kernel_rem_pio2+0x368>
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	f000 808a 	beq.w	8006f6e <__kernel_rem_pio2+0x3a6>
 8006e5a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006e60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80ae 	beq.w	8006fc6 <__kernel_rem_pio2+0x3fe>
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006ee0 <__kernel_rem_pio2+0x318>
 8006e70:	f000 f9fa 	bl	8007268 <scalbn>
 8006e74:	1c6b      	adds	r3, r5, #1
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	9205      	str	r2, [sp, #20]
 8006e7a:	ec57 6b10 	vmov	r6, r7, d0
 8006e7e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006e80:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006ef4 <__kernel_rem_pio2+0x32c>
 8006e84:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006e88:	462c      	mov	r4, r5
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	f280 80d4 	bge.w	800703c <__kernel_rem_pio2+0x474>
 8006e94:	462c      	mov	r4, r5
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	f2c0 8102 	blt.w	80070a0 <__kernel_rem_pio2+0x4d8>
 8006e9c:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <__kernel_rem_pio2+0x338>)
 8006e9e:	461e      	mov	r6, r3
 8006ea0:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ea2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006ea6:	1b2b      	subs	r3, r5, r4
 8006ea8:	f04f 0900 	mov.w	r9, #0
 8006eac:	f04f 0a00 	mov.w	sl, #0
 8006eb0:	2700      	movs	r7, #0
 8006eb2:	9306      	str	r3, [sp, #24]
 8006eb4:	e0e6      	b.n	8007084 <__kernel_rem_pio2+0x4bc>
 8006eb6:	f04f 0b02 	mov.w	fp, #2
 8006eba:	e756      	b.n	8006d6a <__kernel_rem_pio2+0x1a2>
 8006ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec0:	bb05      	cbnz	r5, 8006f04 <__kernel_rem_pio2+0x33c>
 8006ec2:	b123      	cbz	r3, 8006ece <__kernel_rem_pio2+0x306>
 8006ec4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006ec8:	f8c8 3000 	str.w	r3, [r8]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	3201      	adds	r2, #1
 8006ed0:	f108 0804 	add.w	r8, r8, #4
 8006ed4:	461d      	mov	r5, r3
 8006ed6:	e74f      	b.n	8006d78 <__kernel_rem_pio2+0x1b0>
	...
 8006ee4:	3ff00000 	.word	0x3ff00000
 8006ee8:	08007738 	.word	0x08007738
 8006eec:	40200000 	.word	0x40200000
 8006ef0:	3ff00000 	.word	0x3ff00000
 8006ef4:	3e700000 	.word	0x3e700000
 8006ef8:	41700000 	.word	0x41700000
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	080076f8 	.word	0x080076f8
 8006f04:	1acb      	subs	r3, r1, r3
 8006f06:	f8c8 3000 	str.w	r3, [r8]
 8006f0a:	462b      	mov	r3, r5
 8006f0c:	e7df      	b.n	8006ece <__kernel_rem_pio2+0x306>
 8006f0e:	1e62      	subs	r2, r4, #1
 8006f10:	ab0c      	add	r3, sp, #48	; 0x30
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f1a:	a90c      	add	r1, sp, #48	; 0x30
 8006f1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f20:	e738      	b.n	8006d94 <__kernel_rem_pio2+0x1cc>
 8006f22:	1e62      	subs	r2, r4, #1
 8006f24:	ab0c      	add	r3, sp, #48	; 0x30
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f2e:	e7f4      	b.n	8006f1a <__kernel_rem_pio2+0x352>
 8006f30:	a90c      	add	r1, sp, #48	; 0x30
 8006f32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	e788      	b.n	8006e4e <__kernel_rem_pio2+0x286>
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d0fa      	beq.n	8006f3c <__kernel_rem_pio2+0x374>
 8006f46:	9a08      	ldr	r2, [sp, #32]
 8006f48:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006f4c:	446a      	add	r2, sp
 8006f4e:	3a98      	subs	r2, #152	; 0x98
 8006f50:	9208      	str	r2, [sp, #32]
 8006f52:	9a06      	ldr	r2, [sp, #24]
 8006f54:	a920      	add	r1, sp, #128	; 0x80
 8006f56:	18a2      	adds	r2, r4, r2
 8006f58:	18e3      	adds	r3, r4, r3
 8006f5a:	f104 0801 	add.w	r8, r4, #1
 8006f5e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	9b02      	ldr	r3, [sp, #8]
 8006f66:	4543      	cmp	r3, r8
 8006f68:	da04      	bge.n	8006f74 <__kernel_rem_pio2+0x3ac>
 8006f6a:	461c      	mov	r4, r3
 8006f6c:	e6a2      	b.n	8006cb4 <__kernel_rem_pio2+0xec>
 8006f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f70:	2301      	movs	r3, #1
 8006f72:	e7e4      	b.n	8006f3e <__kernel_rem_pio2+0x376>
 8006f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006f7a:	f7f9 fad3 	bl	8000524 <__aeabi_i2d>
 8006f7e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f84:	46ab      	mov	fp, r5
 8006f86:	461c      	mov	r4, r3
 8006f88:	f04f 0900 	mov.w	r9, #0
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	2700      	movs	r7, #0
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	4599      	cmp	r9, r3
 8006f94:	dd06      	ble.n	8006fa4 <__kernel_rem_pio2+0x3dc>
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006f9c:	f108 0801 	add.w	r8, r8, #1
 8006fa0:	9308      	str	r3, [sp, #32]
 8006fa2:	e7df      	b.n	8006f64 <__kernel_rem_pio2+0x39c>
 8006fa4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006fa8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 f968 	bl	800028c <__adddf3>
 8006fbc:	f109 0901 	add.w	r9, r9, #1
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	e7e4      	b.n	8006f90 <__kernel_rem_pio2+0x3c8>
 8006fc6:	3d01      	subs	r5, #1
 8006fc8:	e747      	b.n	8006e5a <__kernel_rem_pio2+0x292>
 8006fca:	ec47 6b10 	vmov	d0, r6, r7
 8006fce:	f1ca 0000 	rsb	r0, sl, #0
 8006fd2:	f000 f949 	bl	8007268 <scalbn>
 8006fd6:	ec57 6b10 	vmov	r6, r7, d0
 8006fda:	4ba0      	ldr	r3, [pc, #640]	; (800725c <__kernel_rem_pio2+0x694>)
 8006fdc:	ee10 0a10 	vmov	r0, s0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 fd8e 	bl	8000b04 <__aeabi_dcmpge>
 8006fe8:	b1f8      	cbz	r0, 800702a <__kernel_rem_pio2+0x462>
 8006fea:	4b9d      	ldr	r3, [pc, #628]	; (8007260 <__kernel_rem_pio2+0x698>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	4630      	mov	r0, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	f7f9 fd99 	bl	8000b2c <__aeabi_d2iz>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	f7f9 fa92 	bl	8000524 <__aeabi_i2d>
 8007000:	4b96      	ldr	r3, [pc, #600]	; (800725c <__kernel_rem_pio2+0x694>)
 8007002:	2200      	movs	r2, #0
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	460b      	mov	r3, r1
 800700a:	4602      	mov	r2, r0
 800700c:	4639      	mov	r1, r7
 800700e:	4630      	mov	r0, r6
 8007010:	f7f9 f93a 	bl	8000288 <__aeabi_dsub>
 8007014:	f7f9 fd8a 	bl	8000b2c <__aeabi_d2iz>
 8007018:	1c65      	adds	r5, r4, #1
 800701a:	ab0c      	add	r3, sp, #48	; 0x30
 800701c:	f10a 0a18 	add.w	sl, sl, #24
 8007020:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007024:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007028:	e71f      	b.n	8006e6a <__kernel_rem_pio2+0x2a2>
 800702a:	4630      	mov	r0, r6
 800702c:	4639      	mov	r1, r7
 800702e:	f7f9 fd7d 	bl	8000b2c <__aeabi_d2iz>
 8007032:	ab0c      	add	r3, sp, #48	; 0x30
 8007034:	4625      	mov	r5, r4
 8007036:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800703a:	e716      	b.n	8006e6a <__kernel_rem_pio2+0x2a2>
 800703c:	ab0c      	add	r3, sp, #48	; 0x30
 800703e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007042:	f7f9 fa6f 	bl	8000524 <__aeabi_i2d>
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	4642      	mov	r2, r8
 8007050:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007054:	464b      	mov	r3, r9
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	3c01      	subs	r4, #1
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	e713      	b.n	8006e8e <__kernel_rem_pio2+0x2c6>
 8007066:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800706a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4648      	mov	r0, r9
 8007078:	4651      	mov	r1, sl
 800707a:	f7f9 f907 	bl	800028c <__adddf3>
 800707e:	3701      	adds	r7, #1
 8007080:	4681      	mov	r9, r0
 8007082:	468a      	mov	sl, r1
 8007084:	9b00      	ldr	r3, [sp, #0]
 8007086:	429f      	cmp	r7, r3
 8007088:	dc02      	bgt.n	8007090 <__kernel_rem_pio2+0x4c8>
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	429f      	cmp	r7, r3
 800708e:	ddea      	ble.n	8007066 <__kernel_rem_pio2+0x49e>
 8007090:	9a06      	ldr	r2, [sp, #24]
 8007092:	ab48      	add	r3, sp, #288	; 0x120
 8007094:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007098:	e9c6 9a00 	strd	r9, sl, [r6]
 800709c:	3c01      	subs	r4, #1
 800709e:	e6fa      	b.n	8006e96 <__kernel_rem_pio2+0x2ce>
 80070a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	dc0b      	bgt.n	80070be <__kernel_rem_pio2+0x4f6>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dc39      	bgt.n	800711e <__kernel_rem_pio2+0x556>
 80070aa:	d05d      	beq.n	8007168 <__kernel_rem_pio2+0x5a0>
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	f003 0007 	and.w	r0, r3, #7
 80070b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80070b6:	ecbd 8b02 	vpop	{d8}
 80070ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d1f3      	bne.n	80070ac <__kernel_rem_pio2+0x4e4>
 80070c4:	9b05      	ldr	r3, [sp, #20]
 80070c6:	9500      	str	r5, [sp, #0]
 80070c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80070cc:	eb0d 0403 	add.w	r4, sp, r3
 80070d0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80070d4:	46a2      	mov	sl, r4
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f1aa 0a08 	sub.w	sl, sl, #8
 80070de:	dc69      	bgt.n	80071b4 <__kernel_rem_pio2+0x5ec>
 80070e0:	46aa      	mov	sl, r5
 80070e2:	f1ba 0f01 	cmp.w	sl, #1
 80070e6:	f1a4 0408 	sub.w	r4, r4, #8
 80070ea:	f300 8083 	bgt.w	80071f4 <__kernel_rem_pio2+0x62c>
 80070ee:	9c05      	ldr	r4, [sp, #20]
 80070f0:	ab48      	add	r3, sp, #288	; 0x120
 80070f2:	441c      	add	r4, r3
 80070f4:	2000      	movs	r0, #0
 80070f6:	2100      	movs	r1, #0
 80070f8:	2d01      	cmp	r5, #1
 80070fa:	f300 809a 	bgt.w	8007232 <__kernel_rem_pio2+0x66a>
 80070fe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007102:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007106:	f1bb 0f00 	cmp.w	fp, #0
 800710a:	f040 8098 	bne.w	800723e <__kernel_rem_pio2+0x676>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	e9c3 7800 	strd	r7, r8, [r3]
 8007114:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007118:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800711c:	e7c6      	b.n	80070ac <__kernel_rem_pio2+0x4e4>
 800711e:	9e05      	ldr	r6, [sp, #20]
 8007120:	ab48      	add	r3, sp, #288	; 0x120
 8007122:	441e      	add	r6, r3
 8007124:	462c      	mov	r4, r5
 8007126:	2000      	movs	r0, #0
 8007128:	2100      	movs	r1, #0
 800712a:	2c00      	cmp	r4, #0
 800712c:	da33      	bge.n	8007196 <__kernel_rem_pio2+0x5ce>
 800712e:	f1bb 0f00 	cmp.w	fp, #0
 8007132:	d036      	beq.n	80071a2 <__kernel_rem_pio2+0x5da>
 8007134:	4602      	mov	r2, r0
 8007136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800713a:	9c04      	ldr	r4, [sp, #16]
 800713c:	e9c4 2300 	strd	r2, r3, [r4]
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007148:	f7f9 f89e 	bl	8000288 <__aeabi_dsub>
 800714c:	ae4a      	add	r6, sp, #296	; 0x128
 800714e:	2401      	movs	r4, #1
 8007150:	42a5      	cmp	r5, r4
 8007152:	da29      	bge.n	80071a8 <__kernel_rem_pio2+0x5e0>
 8007154:	f1bb 0f00 	cmp.w	fp, #0
 8007158:	d002      	beq.n	8007160 <__kernel_rem_pio2+0x598>
 800715a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800715e:	4619      	mov	r1, r3
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007166:	e7a1      	b.n	80070ac <__kernel_rem_pio2+0x4e4>
 8007168:	9c05      	ldr	r4, [sp, #20]
 800716a:	ab48      	add	r3, sp, #288	; 0x120
 800716c:	441c      	add	r4, r3
 800716e:	2000      	movs	r0, #0
 8007170:	2100      	movs	r1, #0
 8007172:	2d00      	cmp	r5, #0
 8007174:	da09      	bge.n	800718a <__kernel_rem_pio2+0x5c2>
 8007176:	f1bb 0f00 	cmp.w	fp, #0
 800717a:	d002      	beq.n	8007182 <__kernel_rem_pio2+0x5ba>
 800717c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007180:	4619      	mov	r1, r3
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	e9c3 0100 	strd	r0, r1, [r3]
 8007188:	e790      	b.n	80070ac <__kernel_rem_pio2+0x4e4>
 800718a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800718e:	f7f9 f87d 	bl	800028c <__adddf3>
 8007192:	3d01      	subs	r5, #1
 8007194:	e7ed      	b.n	8007172 <__kernel_rem_pio2+0x5aa>
 8007196:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800719a:	f7f9 f877 	bl	800028c <__adddf3>
 800719e:	3c01      	subs	r4, #1
 80071a0:	e7c3      	b.n	800712a <__kernel_rem_pio2+0x562>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	e7c8      	b.n	800713a <__kernel_rem_pio2+0x572>
 80071a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80071ac:	f7f9 f86e 	bl	800028c <__adddf3>
 80071b0:	3401      	adds	r4, #1
 80071b2:	e7cd      	b.n	8007150 <__kernel_rem_pio2+0x588>
 80071b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80071b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	3b01      	subs	r3, #1
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	4632      	mov	r2, r6
 80071c4:	463b      	mov	r3, r7
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 f85f 	bl	800028c <__adddf3>
 80071ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	f7f9 f855 	bl	8000288 <__aeabi_dsub>
 80071de:	4632      	mov	r2, r6
 80071e0:	463b      	mov	r3, r7
 80071e2:	f7f9 f853 	bl	800028c <__adddf3>
 80071e6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80071ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071ee:	ed8a 7b00 	vstr	d7, [sl]
 80071f2:	e770      	b.n	80070d6 <__kernel_rem_pio2+0x50e>
 80071f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80071f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80071fc:	4640      	mov	r0, r8
 80071fe:	4632      	mov	r2, r6
 8007200:	463b      	mov	r3, r7
 8007202:	4649      	mov	r1, r9
 8007204:	f7f9 f842 	bl	800028c <__adddf3>
 8007208:	e9cd 0100 	strd	r0, r1, [sp]
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4640      	mov	r0, r8
 8007212:	4649      	mov	r1, r9
 8007214:	f7f9 f838 	bl	8000288 <__aeabi_dsub>
 8007218:	4632      	mov	r2, r6
 800721a:	463b      	mov	r3, r7
 800721c:	f7f9 f836 	bl	800028c <__adddf3>
 8007220:	ed9d 7b00 	vldr	d7, [sp]
 8007224:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007228:	ed84 7b00 	vstr	d7, [r4]
 800722c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007230:	e757      	b.n	80070e2 <__kernel_rem_pio2+0x51a>
 8007232:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	3d01      	subs	r5, #1
 800723c:	e75c      	b.n	80070f8 <__kernel_rem_pio2+0x530>
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	9a04      	ldr	r2, [sp, #16]
 8007242:	601f      	str	r7, [r3, #0]
 8007244:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007248:	605c      	str	r4, [r3, #4]
 800724a:	609d      	str	r5, [r3, #8]
 800724c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007250:	60d3      	str	r3, [r2, #12]
 8007252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007256:	6110      	str	r0, [r2, #16]
 8007258:	6153      	str	r3, [r2, #20]
 800725a:	e727      	b.n	80070ac <__kernel_rem_pio2+0x4e4>
 800725c:	41700000 	.word	0x41700000
 8007260:	3e700000 	.word	0x3e700000
 8007264:	00000000 	.word	0x00000000

08007268 <scalbn>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	ec55 4b10 	vmov	r4, r5, d0
 800726e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007272:	4606      	mov	r6, r0
 8007274:	462b      	mov	r3, r5
 8007276:	b999      	cbnz	r1, 80072a0 <scalbn+0x38>
 8007278:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800727c:	4323      	orrs	r3, r4
 800727e:	d03f      	beq.n	8007300 <scalbn+0x98>
 8007280:	4b35      	ldr	r3, [pc, #212]	; (8007358 <scalbn+0xf0>)
 8007282:	4629      	mov	r1, r5
 8007284:	ee10 0a10 	vmov	r0, s0
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4b33      	ldr	r3, [pc, #204]	; (800735c <scalbn+0xf4>)
 8007290:	429e      	cmp	r6, r3
 8007292:	4604      	mov	r4, r0
 8007294:	460d      	mov	r5, r1
 8007296:	da10      	bge.n	80072ba <scalbn+0x52>
 8007298:	a327      	add	r3, pc, #156	; (adr r3, 8007338 <scalbn+0xd0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	e01f      	b.n	80072e0 <scalbn+0x78>
 80072a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80072a4:	4291      	cmp	r1, r2
 80072a6:	d10c      	bne.n	80072c2 <scalbn+0x5a>
 80072a8:	ee10 2a10 	vmov	r2, s0
 80072ac:	4620      	mov	r0, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	f7f8 ffec 	bl	800028c <__adddf3>
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	e022      	b.n	8007300 <scalbn+0x98>
 80072ba:	460b      	mov	r3, r1
 80072bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80072c0:	3936      	subs	r1, #54	; 0x36
 80072c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80072c6:	4296      	cmp	r6, r2
 80072c8:	dd0d      	ble.n	80072e6 <scalbn+0x7e>
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	a11c      	add	r1, pc, #112	; (adr r1, 8007340 <scalbn+0xd8>)
 80072ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d2:	da02      	bge.n	80072da <scalbn+0x72>
 80072d4:	a11c      	add	r1, pc, #112	; (adr r1, 8007348 <scalbn+0xe0>)
 80072d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072da:	a319      	add	r3, pc, #100	; (adr r3, 8007340 <scalbn+0xd8>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 f98a 	bl	80005f8 <__aeabi_dmul>
 80072e4:	e7e6      	b.n	80072b4 <scalbn+0x4c>
 80072e6:	1872      	adds	r2, r6, r1
 80072e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80072ec:	428a      	cmp	r2, r1
 80072ee:	dcec      	bgt.n	80072ca <scalbn+0x62>
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	dd08      	ble.n	8007306 <scalbn+0x9e>
 80072f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007300:	ec45 4b10 	vmov	d0, r4, r5
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800730a:	da08      	bge.n	800731e <scalbn+0xb6>
 800730c:	2d00      	cmp	r5, #0
 800730e:	a10a      	add	r1, pc, #40	; (adr r1, 8007338 <scalbn+0xd0>)
 8007310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007314:	dac0      	bge.n	8007298 <scalbn+0x30>
 8007316:	a10e      	add	r1, pc, #56	; (adr r1, 8007350 <scalbn+0xe8>)
 8007318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800731c:	e7bc      	b.n	8007298 <scalbn+0x30>
 800731e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007322:	3236      	adds	r2, #54	; 0x36
 8007324:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007328:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800732c:	4620      	mov	r0, r4
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <scalbn+0xf8>)
 8007330:	2200      	movs	r2, #0
 8007332:	e7d5      	b.n	80072e0 <scalbn+0x78>
 8007334:	f3af 8000 	nop.w
 8007338:	c2f8f359 	.word	0xc2f8f359
 800733c:	01a56e1f 	.word	0x01a56e1f
 8007340:	8800759c 	.word	0x8800759c
 8007344:	7e37e43c 	.word	0x7e37e43c
 8007348:	8800759c 	.word	0x8800759c
 800734c:	fe37e43c 	.word	0xfe37e43c
 8007350:	c2f8f359 	.word	0xc2f8f359
 8007354:	81a56e1f 	.word	0x81a56e1f
 8007358:	43500000 	.word	0x43500000
 800735c:	ffff3cb0 	.word	0xffff3cb0
 8007360:	3c900000 	.word	0x3c900000
 8007364:	00000000 	.word	0x00000000

08007368 <floor>:
 8007368:	ec51 0b10 	vmov	r0, r1, d0
 800736c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007378:	2e13      	cmp	r6, #19
 800737a:	ee10 5a10 	vmov	r5, s0
 800737e:	ee10 8a10 	vmov	r8, s0
 8007382:	460c      	mov	r4, r1
 8007384:	dc31      	bgt.n	80073ea <floor+0x82>
 8007386:	2e00      	cmp	r6, #0
 8007388:	da14      	bge.n	80073b4 <floor+0x4c>
 800738a:	a333      	add	r3, pc, #204	; (adr r3, 8007458 <floor+0xf0>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff7c 	bl	800028c <__adddf3>
 8007394:	2200      	movs	r2, #0
 8007396:	2300      	movs	r3, #0
 8007398:	f7f9 fbbe 	bl	8000b18 <__aeabi_dcmpgt>
 800739c:	b138      	cbz	r0, 80073ae <floor+0x46>
 800739e:	2c00      	cmp	r4, #0
 80073a0:	da53      	bge.n	800744a <floor+0xe2>
 80073a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80073a6:	4325      	orrs	r5, r4
 80073a8:	d052      	beq.n	8007450 <floor+0xe8>
 80073aa:	4c2d      	ldr	r4, [pc, #180]	; (8007460 <floor+0xf8>)
 80073ac:	2500      	movs	r5, #0
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	e024      	b.n	80073fe <floor+0x96>
 80073b4:	4f2b      	ldr	r7, [pc, #172]	; (8007464 <floor+0xfc>)
 80073b6:	4137      	asrs	r7, r6
 80073b8:	ea01 0307 	and.w	r3, r1, r7
 80073bc:	4303      	orrs	r3, r0
 80073be:	d01e      	beq.n	80073fe <floor+0x96>
 80073c0:	a325      	add	r3, pc, #148	; (adr r3, 8007458 <floor+0xf0>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f8 ff61 	bl	800028c <__adddf3>
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f7f9 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d0eb      	beq.n	80073ae <floor+0x46>
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	bfbe      	ittt	lt
 80073da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80073de:	4133      	asrlt	r3, r6
 80073e0:	18e4      	addlt	r4, r4, r3
 80073e2:	ea24 0407 	bic.w	r4, r4, r7
 80073e6:	2500      	movs	r5, #0
 80073e8:	e7e1      	b.n	80073ae <floor+0x46>
 80073ea:	2e33      	cmp	r6, #51	; 0x33
 80073ec:	dd0b      	ble.n	8007406 <floor+0x9e>
 80073ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073f2:	d104      	bne.n	80073fe <floor+0x96>
 80073f4:	ee10 2a10 	vmov	r2, s0
 80073f8:	460b      	mov	r3, r1
 80073fa:	f7f8 ff47 	bl	800028c <__adddf3>
 80073fe:	ec41 0b10 	vmov	d0, r0, r1
 8007402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007406:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800740a:	f04f 37ff 	mov.w	r7, #4294967295
 800740e:	40df      	lsrs	r7, r3
 8007410:	4238      	tst	r0, r7
 8007412:	d0f4      	beq.n	80073fe <floor+0x96>
 8007414:	a310      	add	r3, pc, #64	; (adr r3, 8007458 <floor+0xf0>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f8 ff37 	bl	800028c <__adddf3>
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	f7f9 fb79 	bl	8000b18 <__aeabi_dcmpgt>
 8007426:	2800      	cmp	r0, #0
 8007428:	d0c1      	beq.n	80073ae <floor+0x46>
 800742a:	2c00      	cmp	r4, #0
 800742c:	da0a      	bge.n	8007444 <floor+0xdc>
 800742e:	2e14      	cmp	r6, #20
 8007430:	d101      	bne.n	8007436 <floor+0xce>
 8007432:	3401      	adds	r4, #1
 8007434:	e006      	b.n	8007444 <floor+0xdc>
 8007436:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800743a:	2301      	movs	r3, #1
 800743c:	40b3      	lsls	r3, r6
 800743e:	441d      	add	r5, r3
 8007440:	45a8      	cmp	r8, r5
 8007442:	d8f6      	bhi.n	8007432 <floor+0xca>
 8007444:	ea25 0507 	bic.w	r5, r5, r7
 8007448:	e7b1      	b.n	80073ae <floor+0x46>
 800744a:	2500      	movs	r5, #0
 800744c:	462c      	mov	r4, r5
 800744e:	e7ae      	b.n	80073ae <floor+0x46>
 8007450:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007454:	e7ab      	b.n	80073ae <floor+0x46>
 8007456:	bf00      	nop
 8007458:	8800759c 	.word	0x8800759c
 800745c:	7e37e43c 	.word	0x7e37e43c
 8007460:	bff00000 	.word	0xbff00000
 8007464:	000fffff 	.word	0x000fffff

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
