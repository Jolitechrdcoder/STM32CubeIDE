
okis1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d58  08006d58  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006d58  08006d58  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d58  08006d58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  20000060  08006dc0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  08006dc0  0002133c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001954c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e5  00000000  00000000  0003961f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c0  00000000  00000000  0003e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4f4  00000000  00000000  0003f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5c3  00000000  00000000  0005d71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b57da  00000000  00000000  00078cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb8  00000000  00000000  0012e4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00134374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c80 	.word	0x08006c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c80 	.word	0x08006c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000007c 	.word	0x2000007c
 80002a0:	2000011c 	.word	0x2000011c

080002a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	f043 030c 	orr.w	r3, r3, #12
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002e4:	f107 0208 	add.w	r2, r7, #8
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2304      	movs	r3, #4
 80002ee:	214e      	movs	r1, #78	; 0x4e
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <lcd_send_cmd+0x5c>)
 80002f2:	f001 ff6b 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000036c 	.word	0x2000036c

08000304 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	f043 030d 	orr.w	r3, r3, #13
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	f043 0309 	orr.w	r3, r3, #9
 800032c:	b2db      	uxtb	r3, r3
 800032e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	f043 030d 	orr.w	r3, r3, #13
 8000336:	b2db      	uxtb	r3, r3
 8000338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	f043 0309 	orr.w	r3, r3, #9
 8000340:	b2db      	uxtb	r3, r3
 8000342:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000344:	f107 0208 	add.w	r2, r7, #8
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2304      	movs	r3, #4
 800034e:	214e      	movs	r1, #78	; 0x4e
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <lcd_send_data+0x5c>)
 8000352:	f001 ff3b 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000036c 	.word	0x2000036c

08000364 <lcd_enviar_int>:
}



void lcd_enviar_int(int numero, int row, int col)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	4908      	ldr	r1, [pc, #32]	; (8000398 <lcd_enviar_int+0x34>)
 8000378:	4618      	mov	r0, r3
 800037a:	f005 ff87 	bl	800628c <siprintf>
    lcd_put_cur(row, col);
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	68b8      	ldr	r0, [r7, #8]
 8000382:	f000 f822 	bl	80003ca <lcd_put_cur>
    lcd_send_string(buffer);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f879 	bl	8000482 <lcd_send_string>
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08006c98 	.word	0x08006c98

0800039c <lcd_clear>:

void lcd_clear (void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80003a2:	2080      	movs	r0, #128	; 0x80
 80003a4:	f7ff ff7e 	bl	80002a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	e005      	b.n	80003ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80003ae:	2020      	movs	r0, #32
 80003b0:	f7ff ffa8 	bl	8000304 <lcd_send_data>
	for (int i=0; i<70; i++)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b45      	cmp	r3, #69	; 0x45
 80003be:	ddf6      	ble.n	80003ae <lcd_clear+0x12>
	}
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <lcd_put_cur+0x18>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d005      	beq.n	80003ec <lcd_put_cur+0x22>
 80003e0:	e009      	b.n	80003f6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e8:	603b      	str	r3, [r7, #0]
            break;
 80003ea:	e004      	b.n	80003f6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003f2:	603b      	str	r3, [r7, #0]
            break;
 80003f4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff52 	bl	80002a4 <lcd_send_cmd>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <lcd_init>:


void lcd_init (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800040c:	2032      	movs	r0, #50	; 0x32
 800040e:	f000 fc97 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000412:	2030      	movs	r0, #48	; 0x30
 8000414:	f7ff ff46 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fc91 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 800041e:	2030      	movs	r0, #48	; 0x30
 8000420:	f7ff ff40 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fc8b 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 800042a:	2030      	movs	r0, #48	; 0x30
 800042c:	f7ff ff3a 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000430:	200a      	movs	r0, #10
 8000432:	f000 fc85 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000436:	2020      	movs	r0, #32
 8000438:	f7ff ff34 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(10);
 800043c:	200a      	movs	r0, #10
 800043e:	f000 fc7f 	bl	8000d40 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f7ff ff2e 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fc79 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800044e:	2008      	movs	r0, #8
 8000450:	f7ff ff28 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fc73 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ff22 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fc6d 	bl	8000d40 <HAL_Delay>
	HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 fc6a 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800046c:	2006      	movs	r0, #6
 800046e:	f7ff ff19 	bl	80002a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f000 fc64 	bl	8000d40 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000478:	200c      	movs	r0, #12
 800047a:	f7ff ff13 	bl	80002a4 <lcd_send_cmd>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800048a:	e006      	b.n	800049a <lcd_send_string+0x18>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff35 	bl	8000304 <lcd_send_data>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1f4      	bne.n	800048c <lcd_send_string+0xa>
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <Medir_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Medir_ADC()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1); // inicio mi adc
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <Medir_ADC+0x28>)
 80004b2:	f000 fdef 	bl	8001094 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80004b6:	2164      	movs	r1, #100	; 0x64
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Medir_ADC+0x28>)
 80004ba:	f000 fe8d 	bl	80011d8 <HAL_ADC_PollForConversion>

	Medida_ADC = HAL_ADC_GetValue(&hadc1); // obtengo el valor de mi adc
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <Medir_ADC+0x28>)
 80004c0:	f000 ff48 	bl	8001354 <HAL_ADC_GetValue>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <Medir_ADC+0x2c>)
 80004c8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); // detengo la lectura
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <Medir_ADC+0x28>)
 80004cc:	f000 fe4f 	bl	800116e <HAL_ADC_Stop>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000031c 	.word	0x2000031c
 80004d8:	20000450 	.word	0x20000450

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b08e      	sub	sp, #56	; 0x38
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbf7 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f839 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f963 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f931 	bl	8000754 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f2:	f000 f893 	bl	800061c <MX_ADC1_Init>
  MX_I2C1_Init();
 80004f6:	f000 f8ed 	bl	80006d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    lcd_init();
 80004fa:	f7ff ff85 	bl	8000408 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adc223 */
  osThreadDef(adc223, Startadc223, osPriorityNormal, 0, 128);
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x70>)
 8000500:	f107 041c 	add.w	r4, r7, #28
 8000504:	461d      	mov	r5, r3
 8000506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adc223Handle = osThreadCreate(osThread(adc223), NULL);
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fc6d 	bl	8004df8 <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <main+0x74>)
 8000522:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcd33 */
  osThreadDef(lcd33, Startlcd33, osPriorityNormal, 0, 128);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <main+0x78>)
 8000526:	463c      	mov	r4, r7
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcd33Handle = osThreadCreate(osThread(lcd33), NULL);
 8000536:	463b      	mov	r3, r7
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fc5c 	bl	8004df8 <osThreadCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <main+0x7c>)
 8000544:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000546:	f004 fc50 	bl	8004dea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x6e>
 800054c:	08006ca4 	.word	0x08006ca4
 8000550:	20000448 	.word	0x20000448
 8000554:	08006cc8 	.word	0x08006cc8
 8000558:	2000044c 	.word	0x2000044c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09c      	sub	sp, #112	; 0x70
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000566:	2228      	movs	r2, #40	; 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f005 feae 	bl	80062cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 fea0 	bl	80062cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800058c:	2303      	movs	r3, #3
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2310      	movs	r3, #16
 80005a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f9a4 	bl	8002904 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005c2:	f000 f98c 	bl	80008de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f9cc 	bl	8003980 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 f976 	bl	80008de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 80005f2:	23a0      	movs	r3, #160	; 0xa0
 80005f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80005fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fc24 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800060e:	f000 f966 	bl	80008de <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3770      	adds	r7, #112	; 0x70
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000634:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000662:	2201      	movs	r2, #1
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800066e:	2201      	movs	r2, #1
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800067c:	2204      	movs	r2, #4
 800067e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800068e:	f000 fb7b 	bl	8000d88 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000698:	f000 f921 	bl	80008de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800069c:	2305      	movs	r3, #5
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80006a8:	2307      	movs	r3, #7
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0xb4>)
 80006ba:	f000 fe59 	bl	8001370 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 f90b 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000031c 	.word	0x2000031c

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f001 fccc 	bl	80020ac <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f8e0 	bl	80008de <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f002 f857 	bl	80027d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f8d7 	bl	80008de <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f002 f899 	bl	800286a <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f8ce 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000036c 	.word	0x2000036c
 800074c:	40005400 	.word	0x40005400
 8000750:	2000090e 	.word	0x2000090e

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	f003 ff76 	bl	8004688 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f89c 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200003c0 	.word	0x200003c0
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0xc8>)
 8000832:	f001 fc23 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0xcc>)
 800084e:	f001 faa3 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0xc8>)
 800086c:	f001 fa94 	bl	8001d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400
 8000880:	48000800 	.word	0x48000800

08000884 <Startadc223>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startadc223 */
void Startadc223(void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Medir_ADC();
 800088c:	f7ff fe0e 	bl	80004ac <Medir_ADC>
    osDelay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f004 fafd 	bl	8004e90 <osDelay>
	  Medir_ADC();
 8000896:	e7f9      	b.n	800088c <Startadc223+0x8>

08000898 <Startlcd33>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlcd33 */
void Startlcd33(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlcd33 */
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 80008a0:	f7ff fd7c 	bl	800039c <lcd_clear>
	  lcd_enviar_int(Medida_ADC,0,0);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <Startlcd33+0x24>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd59 	bl	8000364 <lcd_enviar_int>
    osDelay(500);
 80008b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b6:	f004 faeb 	bl	8004e90 <osDelay>
	  lcd_clear();
 80008ba:	e7f1      	b.n	80008a0 <Startlcd33+0x8>
 80008bc:	20000450 	.word	0x20000450

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fa15 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e2:	b672      	cpsid	i
}
 80008e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_MspInit+0x4c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_MspInit+0x4c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x4c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f001 fa0d 	bl	8001d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000958:	d124      	bne.n	80009a4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_ADC_MspInit+0x74>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800098a:	2310      	movs	r3, #16
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 f9fa 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_I2C_MspInit+0x7c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d128      	bne.n	8000a24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <HAL_I2C_MspInit+0x84>)
 8000a08:	f001 f9c6 	bl	8001d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 8000a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_I2C_MspInit+0x80>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d128      	bne.n	8000aac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f976 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	61d3      	str	r3, [r2, #28]
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0210 	add.w	r2, r7, #16
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 f97c 	bl	8003dec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000afe:	f003 f931 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8000b02:	6378      	str	r0, [r7, #52]	; 0x34
 8000b04:	e004      	b.n	8000b10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b06:	f003 f92d 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	0c9b      	lsrs	r3, r3, #18
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b32:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b48:	f003 fb14 	bl	8004174 <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11b      	bne.n	8000b92 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b5c:	f003 fb6c 	bl	8004238 <HAL_TIM_Base_Start_IT>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d111      	bne.n	8000b92 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b6e:	201c      	movs	r0, #28
 8000b70:	f001 f904 	bl	8001d7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b0f      	cmp	r3, #15
 8000b78:	d808      	bhi.n	8000b8c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	201c      	movs	r0, #28
 8000b80:	f001 f8e0 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <HAL_InitTick+0xf0>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e002      	b.n	8000b92 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3738      	adds	r7, #56	; 0x38
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	20000454 	.word	0x20000454
 8000bac:	20000004 	.word	0x20000004

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f003 fb7d 	bl	80042e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000454 	.word	0x20000454

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f005 fbb2 	bl	8006388 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20004000 	.word	0x20004000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200004a0 	.word	0x200004a0
 8000c58:	20001340 	.word	0x20001340

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f005 fb71 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fc13 	bl	80004dc <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cc4:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8000cc8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ccc:	2000133c 	.word	0x2000133c

08000cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x28>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x28>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f001 f822 	bl	8001d2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff fee6 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fdfa 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200004a4 	.word	0x200004a4

08000d28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200004a4 	.word	0x200004a4

08000d40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e169      	b.n	800107c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d176      	bne.n	8000ea8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d152      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdab 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13b      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fdd3 	bl	800199c <ADC_Disable>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12f      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
 8000e08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d12b      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e18:	f023 0302 	bic.w	r3, r3, #2
 8000e1c:	f043 0202 	orr.w	r2, r3, #2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e44:	4b8f      	ldr	r3, [pc, #572]	; (8001084 <HAL_ADC_Init+0x2fc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a8f      	ldr	r2, [pc, #572]	; (8001088 <HAL_ADC_Init+0x300>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9a      	lsrs	r2, r3, #18
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e5a:	e002      	b.n	8000e62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f9      	bne.n	8000e5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e84:	d110      	bne.n	8000ea8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f023 0312 	bic.w	r3, r3, #18
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f040 80d6 	bne.w	8001062 <HAL_ADC_Init+0x2da>
 8000eb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 80d1 	bne.w	8001062 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 80c9 	bne.w	8001062 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ed8:	f043 0202 	orr.w	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_ADC_Init+0x304>)
 8000ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d108      	bne.n	8000f08 <HAL_ADC_Init+0x180>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_Init+0x180>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_ADC_Init+0x182>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d11c      	bne.n	8000f48 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d010      	beq.n	8000f36 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d107      	bne.n	8000f30 <HAL_ADC_Init+0x1a8>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_ADC_Init+0x1a8>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_ADC_Init+0x1aa>
 8000f30:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d108      	bne.n	8000f48 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f46:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e5b      	ldrb	r3, [r3, #25]
 8000f4c:	035b      	lsls	r3, r3, #13
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f52:	2a01      	cmp	r2, #1
 8000f54:	d002      	beq.n	8000f5c <HAL_ADC_Init+0x1d4>
 8000f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_Init+0x1d6>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d11b      	bne.n	8000fb4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e5b      	ldrb	r3, [r3, #25]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d109      	bne.n	8000f98 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	045a      	lsls	r2, r3, #17
 8000f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
 8000f96:	e00d      	b.n	8000fb4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fa0:	f043 0220 	orr.w	r2, r3, #32
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d007      	beq.n	8000fcc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d114      	bne.n	8001004 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fe8:	f023 0302 	bic.w	r3, r3, #2
 8000fec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7e1b      	ldrb	r3, [r3, #24]
 8000ff2:	039a      	lsls	r2, r3, #14
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001000:	4313      	orrs	r3, r2
 8001002:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_ADC_Init+0x308>)
 800100c:	4013      	ands	r3, r2
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001014:	430b      	orrs	r3, r1
 8001016:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10c      	bne.n	800103a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f023 010f 	bic.w	r1, r3, #15
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 020f 	bic.w	r2, r2, #15
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f023 0303 	bic.w	r3, r3, #3
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	641a      	str	r2, [r3, #64]	; 0x40
 8001060:	e00a      	b.n	8001078 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f023 0312 	bic.w	r3, r3, #18
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001078:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800107c:	4618      	mov	r0, r3
 800107e:	3768      	adds	r7, #104	; 0x68
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83
 800108c:	50000300 	.word	0x50000300
 8001090:	fff0c007 	.word	0xfff0c007

08001094 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d158      	bne.n	8001160 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_ADC_Start+0x28>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e054      	b.n	8001166 <HAL_ADC_Start+0xd2>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fc05 	bl	80018d4 <ADC_Enable>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d140      	bne.n	8001156 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800110a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800111e:	d106      	bne.n	800112e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f023 0206 	bic.w	r2, r3, #6
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
 800112c:	e002      	b.n	8001134 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	221c      	movs	r2, #28
 8001142:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0204 	orr.w	r2, r2, #4
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e006      	b.n	8001164 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800115e:	e001      	b.n	8001164 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001160:	2302      	movs	r3, #2
 8001162:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_ADC_Stop+0x1a>
 8001184:	2302      	movs	r3, #2
 8001186:	e023      	b.n	80011d0 <HAL_ADC_Stop+0x62>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001190:	216c      	movs	r1, #108	; 0x6c
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fc68 	bl	8001a68 <ADC_ConversionStop>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d111      	bne.n	80011c6 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fbfa 	bl	800199c <ADC_Disable>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d102      	bne.n	80011f4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011ee:	2308      	movs	r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e02e      	b.n	8001252 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f4:	4b56      	ldr	r3, [pc, #344]	; (8001350 <HAL_ADC_PollForConversion+0x178>)
 80011f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b00      	cmp	r3, #0
 8001202:	d112      	bne.n	800122a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11d      	bne.n	800124e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f043 0220 	orr.w	r2, r3, #32
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e08d      	b.n	8001346 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f043 0220 	orr.w	r2, r3, #32
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07b      	b.n	8001346 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800125a:	f7ff fd65 	bl	8000d28 <HAL_GetTick>
 800125e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001260:	e021      	b.n	80012a6 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d01d      	beq.n	80012a6 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_ADC_PollForConversion+0xa8>
 8001270:	f7ff fd5a 	bl	8000d28 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d212      	bcs.n	80012a6 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04f      	b.n	8001346 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0d6      	beq.n	8001262 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d131      	bne.n	8001332 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d12c      	bne.n	8001332 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d125      	bne.n	8001332 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d112      	bne.n	800131a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
 8001318:	e00b      	b.n	8001332 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	50000300 	.word	0x50000300

08001354 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001370:	b480      	push	{r7}
 8001372:	b09b      	sub	sp, #108	; 0x6c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x22>
 800138e:	2302      	movs	r3, #2
 8001390:	e295      	b.n	80018be <HAL_ADC_ConfigChannel+0x54e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 8279 	bne.w	800189c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d81c      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	461a      	mov	r2, r3
 80013c6:	231f      	movs	r3, #31
 80013c8:	4093      	lsls	r3, r2
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4019      	ands	r1, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	e063      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d81e      	bhi.n	8001432 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3b1e      	subs	r3, #30
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	3b1e      	subs	r3, #30
 8001424:	fa00 f203 	lsl.w	r2, r0, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	e040      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b0e      	cmp	r3, #14
 8001438:	d81e      	bhi.n	8001478 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	3b3c      	subs	r3, #60	; 0x3c
 800144e:	221f      	movs	r2, #31
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	4019      	ands	r1, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	3b3c      	subs	r3, #60	; 0x3c
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	e01d      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	3b5a      	subs	r3, #90	; 0x5a
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	4019      	ands	r1, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3b5a      	subs	r3, #90	; 0x5a
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 80e5 	bne.w	800168e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d91c      	bls.n	8001506 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6999      	ldr	r1, [r3, #24]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	3b1e      	subs	r3, #30
 80014de:	2207      	movs	r2, #7
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4019      	ands	r1, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6898      	ldr	r0, [r3, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	3b1e      	subs	r3, #30
 80014f8:	fa00 f203 	lsl.w	r2, r0, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e019      	b.n	800153a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	2207      	movs	r2, #7
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	4019      	ands	r1, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	3b01      	subs	r3, #1
 8001558:	2b03      	cmp	r3, #3
 800155a:	d84f      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x28c>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <HAL_ADC_ConfigChannel+0x1f4>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001597 	.word	0x08001597
 800156c:	080015b9 	.word	0x080015b9
 8001570:	080015db 	.word	0x080015db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157a:	4b97      	ldr	r3, [pc, #604]	; (80017d8 <HAL_ADC_ConfigChannel+0x468>)
 800157c:	4013      	ands	r3, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	0691      	lsls	r1, r2, #26
 8001584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001586:	430a      	orrs	r2, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001592:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001594:	e07b      	b.n	800168e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800159c:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_ADC_ConfigChannel+0x468>)
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	0691      	lsls	r1, r2, #26
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	430a      	orrs	r2, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b6:	e06a      	b.n	800168e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015be:	4b86      	ldr	r3, [pc, #536]	; (80017d8 <HAL_ADC_ConfigChannel+0x468>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	0691      	lsls	r1, r2, #26
 80015c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d8:	e059      	b.n	800168e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_ADC_ConfigChannel+0x468>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	0691      	lsls	r1, r2, #26
 80015ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ec:	430a      	orrs	r2, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fa:	e048      	b.n	800168e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	069b      	lsls	r3, r3, #26
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800161e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001642:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800164a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	069b      	lsls	r3, r3, #26
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001666:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800166e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	069b      	lsls	r3, r3, #26
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800168a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800168c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x33e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x33e>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x340>
 80016ae:	2300      	movs	r3, #0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 80fe 	bne.w	80018b2 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d00f      	beq.n	80016de <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43da      	mvns	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	400a      	ands	r2, r1
 80016d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016dc:	e049      	b.n	8001772 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	409a      	lsls	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d91c      	bls.n	800173a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6999      	ldr	r1, [r3, #24]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1b      	subs	r3, #27
 8001712:	2207      	movs	r2, #7
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	4019      	ands	r1, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	3b1b      	subs	r3, #27
 800172c:	fa00 f203 	lsl.w	r2, r0, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	e01b      	b.n	8001772 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6959      	ldr	r1, [r3, #20]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	2207      	movs	r2, #7
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	4019      	ands	r1, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6898      	ldr	r0, [r3, #8]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_ADC_ConfigChannel+0x46c>)
 8001774:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d105      	bne.n	800178a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d014      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800178e:	2b11      	cmp	r3, #17
 8001790:	d105      	bne.n	800179e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	f040 8085 	bne.w	80018b2 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d17e      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10c      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x470>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x470>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x472>
 80017d8:	83fff000 	.word	0x83fff000
 80017dc:	50000300 	.word	0x50000300
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d150      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d010      	beq.n	800180e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x498>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x498>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_ADC_ConfigChannel+0x49a>
 8001808:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800180a:	2b00      	cmp	r3, #0
 800180c:	d13c      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b10      	cmp	r3, #16
 8001814:	d11d      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4e2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d118      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_ADC_ConfigChannel+0x55c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_ADC_ConfigChannel+0x560>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9a      	lsrs	r2, r3, #18
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001842:	e002      	b.n	800184a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3b01      	subs	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001850:	e02e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b11      	cmp	r3, #17
 8001858:	d10b      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x502>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001862:	d106      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800186c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001870:	e01e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d11a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001886:	e013      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f043 0220 	orr.w	r2, r3, #32
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800189a:	e00a      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018ae:	e000      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018be:	4618      	mov	r0, r3
 80018c0:	376c      	adds	r7, #108	; 0x6c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000
 80018d0:	431bde83 	.word	0x431bde83

080018d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <ADC_Enable+0x2c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <ADC_Enable+0x2c>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <ADC_Enable+0x2e>
 8001900:	2300      	movs	r3, #0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d143      	bne.n	800198e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <ADC_Enable+0xc4>)
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f043 0210 	orr.w	r2, r3, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e02f      	b.n	8001990 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001940:	f7ff f9f2 	bl	8000d28 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001946:	e01b      	b.n	8001980 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001948:	f7ff f9ee 	bl	8000d28 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d914      	bls.n	8001980 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d00d      	beq.n	8001980 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f043 0210 	orr.w	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e007      	b.n	8001990 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d1dc      	bne.n	8001948 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	8000003f 	.word	0x8000003f

0800199c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <ADC_Disable+0x2c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <ADC_Disable+0x2c>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <ADC_Disable+0x2e>
 80019c8:	2300      	movs	r3, #0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d047      	beq.n	8001a5e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030d 	and.w	r3, r3, #13
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10f      	bne.n	80019fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0202 	orr.w	r2, r2, #2
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2203      	movs	r2, #3
 80019f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f998 	bl	8000d28 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019fa:	e029      	b.n	8001a50 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f043 0210 	orr.w	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e023      	b.n	8001a60 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a18:	f7ff f986 	bl	8000d28 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d914      	bls.n	8001a50 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f043 0210 	orr.w	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e007      	b.n	8001a60 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d0dc      	beq.n	8001a18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 809b 	beq.w	8001bc4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a9c:	d12a      	bne.n	8001af4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d126      	bne.n	8001af4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d122      	bne.n	8001af4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ab2:	e014      	b.n	8001ade <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <ADC_ConversionStop+0x168>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d90d      	bls.n	8001ad8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e076      	b.n	8001bc6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	3301      	adds	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae8:	2b40      	cmp	r3, #64	; 0x40
 8001aea:	d1e3      	bne.n	8001ab4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b60      	cmp	r3, #96	; 0x60
 8001af8:	d015      	beq.n	8001b26 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d10e      	bne.n	8001b26 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0210 	orr.w	r2, r2, #16
 8001b24:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b0c      	cmp	r3, #12
 8001b2a:	d015      	beq.n	8001b58 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d10e      	bne.n	8001b58 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0220 	orr.w	r2, r2, #32
 8001b56:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b60      	cmp	r3, #96	; 0x60
 8001b5c:	d005      	beq.n	8001b6a <ADC_ConversionStop+0x102>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b6c      	cmp	r3, #108	; 0x6c
 8001b62:	d105      	bne.n	8001b70 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001b64:	230c      	movs	r3, #12
 8001b66:	617b      	str	r3, [r7, #20]
        break;
 8001b68:	e005      	b.n	8001b76 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	617b      	str	r3, [r7, #20]
        break;
 8001b6e:	e002      	b.n	8001b76 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001b70:	2304      	movs	r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
        break;
 8001b74:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001b76:	f7ff f8d7 	bl	8000d28 <HAL_GetTick>
 8001b7a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001b7c:	e01b      	b.n	8001bb6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b7e:	f7ff f8d3 	bl	8000d28 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b0b      	cmp	r3, #11
 8001b8a:	d914      	bls.n	8001bb6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e007      	b.n	8001bc6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1dc      	bne.n	8001b7e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	000993ff 	.word	0x000993ff

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff4c 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d56:	f7ff ff61 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f7ff ffb1 	bl	8001cc8 <NVIC_EncodePriority>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff80 	bl	8001c74 <__NVIC_SetPriority>
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff54 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e14e      	b.n	8002046 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8140 	beq.w	8002040 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x40>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d017      	beq.n	8001e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d123      	bne.n	8001eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 809a 	beq.w	8002040 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0c:	4b55      	ldr	r3, [pc, #340]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a54      	ldr	r2, [pc, #336]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b52      	ldr	r3, [pc, #328]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f4e:	d013      	beq.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00d      	beq.n	8001f74 <HAL_GPIO_Init+0x1dc>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_GPIO_Init+0x2d8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <HAL_GPIO_Init+0x1d8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_GPIO_Init+0x1d4>
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e006      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f6c:	2305      	movs	r3, #5
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f8a:	4937      	ldr	r1, [pc, #220]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f aea9 	bne.w	8001da8 <HAL_GPIO_Init+0x10>
  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	48000400 	.word	0x48000400
 8002070:	48000800 	.word	0x48000800
 8002074:	48000c00 	.word	0x48000c00
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e081      	b.n	80021c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fc6c 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e006      	b.n	8002134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d104      	bne.n	8002146 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002158:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002168:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69d9      	ldr	r1, [r3, #28]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
 80021dc:	4613      	mov	r3, r2
 80021de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 80da 	bne.w	80023a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x30>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0d3      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002204:	f7fe fd90 	bl	8000d28 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2319      	movs	r3, #25
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f8f0 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0be      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2221      	movs	r2, #33	; 0x21
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2210      	movs	r2, #16
 8002232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	893a      	ldrh	r2, [r7, #8]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2bff      	cmp	r3, #255	; 0xff
 8002256:	d90e      	bls.n	8002276 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	b2da      	uxtb	r2, r3
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_I2C_Master_Transmit+0x1e0>)
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa7e 	bl	8002770 <I2C_TransferConfig>
 8002274:	e06c      	b.n	8002350 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	b2da      	uxtb	r2, r3
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_I2C_Master_Transmit+0x1e0>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fa6d 	bl	8002770 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002296:	e05b      	b.n	8002350 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	6a39      	ldr	r1, [r7, #32]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f8fc 	bl	800249a <I2C_WaitOnTXISFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e07b      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d034      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x184>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d130      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f87f 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e04d      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d90e      	bls.n	8002330 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	8979      	ldrh	r1, [r7, #10]
 8002320:	2300      	movs	r3, #0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fa21 	bl	8002770 <I2C_TransferConfig>
 800232e:	e00f      	b.n	8002350 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	b2da      	uxtb	r2, r3
 8002340:	8979      	ldrh	r1, [r7, #10]
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa10 	bl	8002770 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d19e      	bne.n	8002298 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8e2 	bl	8002528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e01a      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	80002000 	.word	0x80002000
 80023b0:	fe00e800 	.word	0xfe00e800

080023b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d103      	bne.n	80023d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d007      	beq.n	80023f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	619a      	str	r2, [r3, #24]
  }
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240c:	e031      	b.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d02d      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe fc87 	bl	8000d28 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d122      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d113      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d0be      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a6:	e033      	b.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f87f 	bl	80025b0 <I2C_IsErrorOccurred>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e031      	b.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d025      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c4:	f7fe fc30 	bl	8000d28 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11a      	bne.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d013      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d1c4      	bne.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002534:	e02f      	b.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f838 	bl	80025b0 <I2C_IsErrorOccurred>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02d      	b.n	80025a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe fbed 	bl	8000d28 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11a      	bne.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b20      	cmp	r3, #32
 800256c:	d013      	beq.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d1c8      	bne.n	8002536 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d068      	beq.n	80026ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025e4:	e049      	b.n	800267a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d045      	beq.n	800267a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7fe fb9b 	bl	8000d28 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_IsErrorOccurred+0x54>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d13a      	bne.n	800267a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002626:	d121      	bne.n	800266c <I2C_IsErrorOccurred+0xbc>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800262e:	d01d      	beq.n	800266c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b20      	cmp	r3, #32
 8002634:	d01a      	beq.n	800266c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002646:	f7fe fb6f 	bl	8000d28 <HAL_GetTick>
 800264a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	e00e      	b.n	800266c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800264e:	f7fe fb6b 	bl	8000d28 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b19      	cmp	r3, #25
 800265a:	d907      	bls.n	800266c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800266a:	e006      	b.n	800267a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d1e9      	bne.n	800264e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b20      	cmp	r3, #32
 8002686:	d003      	beq.n	8002690 <I2C_IsErrorOccurred+0xe0>
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0aa      	beq.n	80025e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800271c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fe45 	bl	80023b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <I2C_IsErrorOccurred+0x1bc>)
 8002736:	400b      	ands	r3, r1
 8002738:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002762:	4618      	mov	r0, r3
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	4613      	mov	r3, r2
 8002780:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002790:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	4313      	orrs	r3, r2
 800279a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800279e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <I2C_TransferConfig+0x60>)
 80027b0:	430b      	orrs	r3, r1
 80027b2:	43db      	mvns	r3, r3
 80027b4:	ea02 0103 	and.w	r1, r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	03ff63ff 	.word	0x03ff63ff

080027d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d138      	bne.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e032      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d139      	bne.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800288a:	2302      	movs	r3, #2
 800288c:	e033      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2224      	movs	r2, #36	; 0x24
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800290a:	af00      	add	r7, sp, #0
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f001 b823 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 817d 	beq.w	8002c3a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002940:	4bbc      	ldr	r3, [pc, #752]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b04      	cmp	r3, #4
 800294a:	d00c      	beq.n	8002966 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800294c:	4bb9      	ldr	r3, [pc, #740]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d15c      	bne.n	8002a12 <HAL_RCC_OscConfig+0x10e>
 8002958:	4bb6      	ldr	r3, [pc, #728]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d155      	bne.n	8002a12 <HAL_RCC_OscConfig+0x10e>
 8002966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800297a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_RCC_OscConfig+0x94>
 8002992:	4ba8      	ldr	r3, [pc, #672]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e015      	b.n	80029c4 <HAL_RCC_OscConfig+0xc0>
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029c0:	4b9c      	ldr	r3, [pc, #624]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 811f 	beq.w	8002c38 <HAL_RCC_OscConfig+0x334>
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 8116 	bne.w	8002c38 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f000 bfaf 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 8002a24:	4b83      	ldr	r3, [pc, #524]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a82      	ldr	r2, [pc, #520]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e036      	b.n	8002aa0 <HAL_RCC_OscConfig+0x19c>
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x158>
 8002a42:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7b      	ldr	r2, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a78      	ldr	r2, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e021      	b.n	8002aa0 <HAL_RCC_OscConfig+0x19c>
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x184>
 8002a6e:	4b71      	ldr	r3, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a70      	ldr	r2, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6d      	ldr	r2, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x19c>
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a66      	ldr	r2, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa0:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f023 020f 	bic.w	r2, r3, #15
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	495f      	ldr	r1, [pc, #380]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d059      	beq.n	8002b7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe f92d 	bl	8000d28 <HAL_GetTick>
 8002ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe f928 	bl	8000d28 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d902      	bls.n	8002aea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f000 bf43 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 8002aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002afe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_OscConfig+0x218>
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e015      	b.n	8002b48 <HAL_RCC_OscConfig+0x244>
 8002b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ab      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1d0>
 8002b7c:	e05d      	b.n	8002c3a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f8d3 	bl	8000d28 <HAL_GetTick>
 8002b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe f8ce 	bl	8000d28 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d902      	bls.n	8002b9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	f000 bee9 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 8002b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2cc>
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e015      	b.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
 8002bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c00:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c04:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c10:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f002 021f 	and.w	r2, r2, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ab      	bne.n	8002b88 <HAL_RCC_OscConfig+0x284>
 8002c30:	e003      	b.n	8002c3a <HAL_RCC_OscConfig+0x336>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 817d 	beq.w	8002f4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c50:	4ba6      	ldr	r3, [pc, #664]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c5c:	4ba3      	ldr	r3, [pc, #652]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d172      	bne.n	8002d4e <HAL_RCC_OscConfig+0x44a>
 8002c68:	4ba0      	ldr	r3, [pc, #640]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d16c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x44a>
 8002c74:	2302      	movs	r3, #2
 8002c76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c86:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3a0>
 8002c9e:	4b93      	ldr	r3, [pc, #588]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c8>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cc8:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cd2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cde:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCC_OscConfig+0x410>
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f000 be2e 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	21f8      	movs	r1, #248	; 0xf8
 8002d2a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d32:	fa91 f1a1 	rbit	r1, r1
 8002d36:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d3a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d3e:	fab1 f181 	clz	r1, r1
 8002d42:	b2c9      	uxtb	r1, r1
 8002d44:	408b      	lsls	r3, r1
 8002d46:	4969      	ldr	r1, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4c:	e0fd      	b.n	8002f4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8088 	beq.w	8002e70 <HAL_RCC_OscConfig+0x56c>
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	2301      	movs	r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fd ffcc 	bl	8000d28 <HAL_GetTick>
 8002d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fd ffc7 	bl	8000d28 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	f000 bde2 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dbe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d102      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4d8>
 8002dd6:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e013      	b.n	8002e04 <HAL_RCC_OscConfig+0x500>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dee:	2302      	movs	r3, #2
 8002df0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002df4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2202      	movs	r2, #2
 8002e06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e0e:	fa92 f2a2 	rbit	r2, r2
 8002e12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e1a:	fab2 f282 	clz	r2, r2
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f042 0220 	orr.w	r2, r2, #32
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f002 021f 	and.w	r2, r2, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0af      	beq.n	8002d96 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	21f8      	movs	r1, #248	; 0xf8
 8002e4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e54:	fa91 f1a1 	rbit	r1, r1
 8002e58:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e60:	fab1 f181 	clz	r1, r1
 8002e64:	b2c9      	uxtb	r1, r1
 8002e66:	408b      	lsls	r3, r1
 8002e68:	4920      	ldr	r1, [pc, #128]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
 8002e6e:	e06c      	b.n	8002f4a <HAL_RCC_OscConfig+0x646>
 8002e70:	2301      	movs	r3, #1
 8002e72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fd ff44 	bl	8000d28 <HAL_GetTick>
 8002ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fd ff3f 	bl	8000d28 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	f000 bd5a 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d104      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5ec>
 8002ee6:	4b01      	ldr	r3, [pc, #4]	; (8002eec <HAL_RCC_OscConfig+0x5e8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e015      	b.n	8002f18 <HAL_RCC_OscConfig+0x614>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f02:	2302      	movs	r3, #2
 8002f04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f14:	4bc8      	ldr	r3, [pc, #800]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0220 	orr.w	r2, r2, #32
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ad      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8110 	beq.w	8003180 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d079      	beq.n	8003064 <HAL_RCC_OscConfig+0x760>
 8002f70:	2301      	movs	r3, #1
 8002f72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4bab      	ldr	r3, [pc, #684]	; (800323c <HAL_RCC_OscConfig+0x938>)
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fec5 	bl	8000d28 <HAL_GetTick>
 8002f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fd fec0 	bl	8000d28 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d902      	bls.n	8002fba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	f000 bcdb 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003012:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003014:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 8003016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003020:	2102      	movs	r1, #2
 8003022:	6019      	str	r1, [r3, #0]
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f1a3 	rbit	r1, r3
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800303a:	6019      	str	r1, [r3, #0]
  return result;
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0a0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x6a0>
 8003062:	e08d      	b.n	8003180 <HAL_RCC_OscConfig+0x87c>
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003086:	601a      	str	r2, [r3, #0]
  return result;
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003090:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_OscConfig+0x938>)
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	461a      	mov	r2, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fe3f 	bl	8000d28 <HAL_GetTick>
 80030aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fd fe3a 	bl	8000d28 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d902      	bls.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	f000 bc55 	b.w	8003970 <HAL_RCC_OscConfig+0x106c>
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003130:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 8003134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800313e:	2102      	movs	r1, #2
 8003140:	6019      	str	r1, [r3, #0]
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f1a3 	rbit	r1, r3
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003158:	6019      	str	r1, [r3, #0]
  return result;
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d197      	bne.n	80030b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 81a1 	beq.w	80034d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d116      	bne.n	80031d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	61d3      	str	r3, [r2, #28]
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x93c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11a      	bne.n	8003218 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x93c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <HAL_RCC_OscConfig+0x93c>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7fd fd9b 	bl	8000d28 <HAL_GetTick>
 80031f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	e009      	b.n	800320c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7fd fd96 	bl	8000d28 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e3b1      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_OscConfig+0x93c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ef      	beq.n	80031f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x940>
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a02      	ldr	r2, [pc, #8]	; (8003238 <HAL_RCC_OscConfig+0x934>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e03c      	b.n	80032b0 <HAL_RCC_OscConfig+0x9ac>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	10908120 	.word	0x10908120
 8003240:	40007000 	.word	0x40007000
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10c      	bne.n	800326e <HAL_RCC_OscConfig+0x96a>
 8003254:	4bc1      	ldr	r3, [pc, #772]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4ac0      	ldr	r2, [pc, #768]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	4bbe      	ldr	r3, [pc, #760]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4abd      	ldr	r2, [pc, #756]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	e020      	b.n	80032b0 <HAL_RCC_OscConfig+0x9ac>
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x994>
 800327e:	4bb7      	ldr	r3, [pc, #732]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4ab6      	ldr	r2, [pc, #728]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6213      	str	r3, [r2, #32]
 800328a:	4bb4      	ldr	r3, [pc, #720]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4ab3      	ldr	r2, [pc, #716]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x9ac>
 8003298:	4bb0      	ldr	r3, [pc, #704]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4aaf      	ldr	r2, [pc, #700]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	4bad      	ldr	r3, [pc, #692]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4aac      	ldr	r2, [pc, #688]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8081 	beq.w	80033c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fd fd31 	bl	8000d28 <HAL_GetTick>
 80032c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fd2c 	bl	8000d28 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e345      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003334:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d102      	bne.n	8003350 <HAL_RCC_OscConfig+0xa4c>
 800334a:	4b84      	ldr	r3, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	e013      	b.n	8003378 <HAL_RCC_OscConfig+0xa74>
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003358:	2202      	movs	r2, #2
 800335a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003380:	2102      	movs	r1, #2
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003388:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	fa92 f1a2 	rbit	r1, r2
 8003392:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003396:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800339a:	6011      	str	r1, [r2, #0]
  return result;
 800339c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d084      	beq.n	80032cc <HAL_RCC_OscConfig+0x9c8>
 80033c2:	e07f      	b.n	80034c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fd fcb0 	bl	8000d28 <HAL_GetTick>
 80033c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00b      	b.n	80033e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fcab 	bl	8000d28 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e2c4      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033ee:	2202      	movs	r2, #2
 80033f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800342c:	601a      	str	r2, [r3, #0]
  return result;
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003436:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f043 0302 	orr.w	r3, r3, #2
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d102      	bne.n	8003452 <HAL_RCC_OscConfig+0xb4e>
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	e013      	b.n	800347a <HAL_RCC_OscConfig+0xb76>
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800345a:	2202      	movs	r2, #2
 800345c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003482:	2102      	movs	r1, #2
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	fa92 f1a2 	rbit	r1, r2
 8003494:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003498:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800349c:	6011      	str	r1, [r2, #0]
  return result;
 800349e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f002 021f 	and.w	r2, r2, #31
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d184      	bne.n	80033ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8242 	beq.w	800396e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_RCC_OscConfig+0xc58>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	f000 8213 	beq.w	800391e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b02      	cmp	r3, #2
 8003506:	f040 8162 	bne.w	80037ce <HAL_RCC_OscConfig+0xeca>
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800352e:	601a      	str	r2, [r3, #0]
  return result;
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003538:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003544:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fbea 	bl	8000d28 <HAL_GetTick>
 8003554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003558:	e00c      	b.n	8003574 <HAL_RCC_OscConfig+0xc70>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fd fbe2 	bl	8000d28 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1fd      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800357c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003598:	601a      	str	r2, [r3, #0]
  return result;
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <HAL_RCC_OscConfig+0xcba>
 80035b8:	4bb0      	ldr	r3, [pc, #704]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	e027      	b.n	800360e <HAL_RCC_OscConfig+0xd0a>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f2a3 	rbit	r2, r3
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4b9c      	ldr	r3, [pc, #624]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003612:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003616:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800361a:	6011      	str	r1, [r2, #0]
 800361c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003620:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	fa92 f1a2 	rbit	r1, r2
 800362a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003632:	6011      	str	r1, [r2, #0]
  return result;
 8003634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003638:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d182      	bne.n	8003560 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800365a:	4b88      	ldr	r3, [pc, #544]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	430b      	orrs	r3, r1
 800367c:	497f      	ldr	r1, [pc, #508]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800368a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	461a      	mov	r2, r3
 80036c4:	2301      	movs	r3, #1
 80036c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fb2e 	bl	8000d28 <HAL_GetTick>
 80036cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d0:	e009      	b.n	80036e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fd fb29 	bl	8000d28 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e144      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800370a:	601a      	str	r2, [r3, #0]
  return result;
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003714:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <HAL_RCC_OscConfig+0xe2c>
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	e027      	b.n	8003780 <HAL_RCC_OscConfig+0xe7c>
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f2a3 	rbit	r2, r3
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	fa93 f2a3 	rbit	r2, r3
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003784:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003792:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fa92 f1a2 	rbit	r1, r2
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037a4:	6011      	str	r1, [r2, #0]
  return result;
 80037a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d082      	beq.n	80036d2 <HAL_RCC_OscConfig+0xdce>
 80037cc:	e0cf      	b.n	800396e <HAL_RCC_OscConfig+0x106a>
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f2a3 	rbit	r2, r3
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037f2:	601a      	str	r2, [r3, #0]
  return result;
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	461a      	mov	r2, r3
 8003810:	2300      	movs	r3, #0
 8003812:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fd fa88 	bl	8000d28 <HAL_GetTick>
 8003818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381e:	f7fd fa83 	bl	8000d28 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e09e      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800383a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003856:	601a      	str	r2, [r3, #0]
  return result;
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003860:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d104      	bne.n	8003880 <HAL_RCC_OscConfig+0xf7c>
 8003876:	4b01      	ldr	r3, [pc, #4]	; (800387c <HAL_RCC_OscConfig+0xf78>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e029      	b.n	80038d0 <HAL_RCC_OscConfig+0xfcc>
 800387c:	40021000 	.word	0x40021000
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x1078>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	fa92 f1a2 	rbit	r1, r2
 80038ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038f4:	6011      	str	r1, [r2, #0]
  return result;
 80038f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	f042 0220 	orr.w	r2, r2, #32
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f002 021f 	and.w	r2, r2, #31
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d180      	bne.n	800381e <HAL_RCC_OscConfig+0xf1a>
 800391c:	e027      	b.n	800396e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e01e      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_OscConfig+0x1078>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800393a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800393e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	429a      	cmp	r2, r3
 8003950:	d10b      	bne.n	800396a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800395a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b09e      	sub	sp, #120	; 0x78
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e162      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b90      	ldr	r3, [pc, #576]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d910      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	498b      	ldr	r1, [pc, #556]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e14a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	497f      	ldr	r1, [pc, #508]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80dc 	beq.w	8003bac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d13c      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xf6>
 80039fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d102      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xa6>
 8003a20:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	e00f      	b.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
 8003a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	667b      	str	r3, [r7, #100]	; 0x64
 8003a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a56:	fab2 f282 	clz	r2, r2
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f042 0220 	orr.w	r2, r2, #32
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f002 021f 	and.w	r2, r2, #31
 8003a66:	2101      	movs	r1, #1
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d17b      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0f3      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d13c      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x178>
 8003a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x128>
 8003aa2:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
 8003aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aba:	643b      	str	r3, [r7, #64]	; 0x40
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac4:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003acc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad0:	fa92 f2a2 	rbit	r2, r2
 8003ad4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d13a      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b2      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
 8003af8:	2302      	movs	r3, #2
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x1a0>
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	e00d      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1bc>
 8003b20:	2302      	movs	r3, #2
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	61ba      	str	r2, [r7, #24]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	617a      	str	r2, [r7, #20]
  return result;
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e079      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	491a      	ldr	r1, [pc, #104]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd f8d4 	bl	8000d28 <HAL_GetTick>
 8003b80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fd f8d0 	bl	8000d28 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e061      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d214      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4906      	ldr	r1, [pc, #24]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e040      	b.n	8003c5e <HAL_RCC_ClockConfig+0x2de>
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_RCC_ClockConfig+0x2e8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	491a      	ldr	r1, [pc, #104]	; (8003c68 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <HAL_RCC_ClockConfig+0x2e8>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4912      	ldr	r1, [pc, #72]	; (8003c68 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c22:	f000 f829 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c26:	4601      	mov	r1, r0
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	22f0      	movs	r2, #240	; 0xf0
 8003c32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	40d3      	lsrs	r3, r2
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x2ec>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_RCC_ClockConfig+0x2f0>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_RCC_ClockConfig+0x2f4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc ff30 	bl	8000abc <HAL_InitTick>
  
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3778      	adds	r7, #120	; 0x78
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08006cec 	.word	0x08006cec
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004

08003c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b08b      	sub	sp, #44	; 0x2c
 8003c7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x36>
 8003ca6:	e03c      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003caa:	623b      	str	r3, [r7, #32]
      break;
 8003cac:	e03c      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cb8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	607a      	str	r2, [r7, #4]
  return result;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	40d3      	lsrs	r3, r2
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	220f      	movs	r2, #15
 8003cdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	40d3      	lsrs	r3, r2
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cf2:	5cd3      	ldrb	r3, [r2, r3]
 8003cf4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e004      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	623b      	str	r3, [r7, #32]
      break;
 8003d20:	e002      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d24:	623b      	str	r3, [r7, #32]
      break;
 8003d26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d28:	6a3b      	ldr	r3, [r7, #32]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	372c      	adds	r7, #44	; 0x2c
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	08006d04 	.word	0x08006d04
 8003d44:	08006d14 	.word	0x08006d14
 8003d48:	003d0900 	.word	0x003d0900

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000000 	.word	0x20000000

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d6a:	f7ff ffef 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	fa92 f2a2 	rbit	r2, r2
 8003d84:	603a      	str	r2, [r7, #0]
  return result;
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	fab2 f282 	clz	r2, r2
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	40d3      	lsrs	r3, r2
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	08006cfc 	.word	0x08006cfc

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dae:	f7ff ffcd 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003dbc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003dc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fa92 f2a2 	rbit	r2, r2
 8003dc8:	603a      	str	r2, [r7, #0]
  return result;
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	fab2 f282 	clz	r2, r2
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	40d3      	lsrs	r3, r2
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08006cfc 	.word	0x08006cfc

08003dec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	220f      	movs	r2, #15
 8003dfa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCC_GetClockConfig+0x60>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40022000 	.word	0x40022000

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b092      	sub	sp, #72	; 0x48
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80d4 	beq.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e74:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10e      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	61d3      	str	r3, [r2, #28]
 8003e8c:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fc ff37 	bl	8000d28 <HAL_GetTick>
 8003eba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fc ff33 	bl	8000d28 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e14b      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8084 	beq.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d07c      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2301      	movs	r3, #1
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d04b      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fc fee3 	bl	8000d28 <HAL_GetTick>
 8003f62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7fc fedf 	bl	8000d28 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e0f5      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	2302      	movs	r3, #2
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
  return result;
 8003f94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003faa:	4b01      	ldr	r3, [pc, #4]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	e00d      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	10908100 	.word	0x10908100
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2202      	movs	r2, #2
 8003fce:	613a      	str	r2, [r7, #16]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	fa92 f2a2 	rbit	r2, r2
 8003fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	fab2 f282 	clz	r2, r2
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f002 021f 	and.w	r2, r2, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0b7      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ff6:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	495b      	ldr	r1, [pc, #364]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004004:	4313      	orrs	r3, r2
 8004006:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004008:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b57      	ldr	r3, [pc, #348]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004028:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f023 0203 	bic.w	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	494e      	ldr	r1, [pc, #312]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f023 0210 	bic.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4947      	ldr	r1, [pc, #284]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004054:	4313      	orrs	r3, r2
 8004056:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f023 0220 	bic.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4938      	ldr	r1, [pc, #224]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004090:	4313      	orrs	r3, r2
 8004092:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a0:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	4930      	ldr	r1, [pc, #192]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4929      	ldr	r1, [pc, #164]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4921      	ldr	r1, [pc, #132]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	491a      	ldr	r1, [pc, #104]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004108:	4313      	orrs	r3, r2
 800410a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004126:	4313      	orrs	r3, r2
 8004128:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	490b      	ldr	r1, [pc, #44]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004144:	4313      	orrs	r3, r2
 8004146:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3748      	adds	r7, #72	; 0x48
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000

08004174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e049      	b.n	800421a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f841 	bl	8004222 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 f9dc 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d001      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e03b      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0x4e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d004      	beq.n	8004286 <HAL_TIM_Base_Start_IT+0x4e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d115      	bne.n	80042b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_TIM_Base_Start_IT+0xa4>)
 800428e:	4013      	ands	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b06      	cmp	r3, #6
 8004296:	d015      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x8c>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d011      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	e008      	b.n	80042c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e000      	b.n	80042c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40014000 	.word	0x40014000
 80042dc:	00010007 	.word	0x00010007

080042e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0202 	mvn.w	r2, #2
 800430c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f905 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8f7 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f908 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b04      	cmp	r3, #4
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b04      	cmp	r3, #4
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0204 	mvn.w	r2, #4
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8db 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8cd 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8de 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b08      	cmp	r3, #8
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0208 	mvn.w	r2, #8
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2204      	movs	r2, #4
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8b1 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8a3 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8b4 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d122      	bne.n	8004438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0210 	mvn.w	r2, #16
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2208      	movs	r2, #8
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f887 	bl	8004532 <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f879 	bl	800451e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f88a 	bl	8004546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0201 	mvn.w	r2, #1
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fa2e 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8e8 	bl	8004660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449e:	d10e      	bne.n	80044be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d107      	bne.n	80044be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f8db 	bl	8004674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d10e      	bne.n	80044ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f838 	bl	800455a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d10e      	bne.n	8004516 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b20      	cmp	r3, #32
 8004504:	d107      	bne.n	8004516 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0220 	mvn.w	r2, #32
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f89b 	bl	800464c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <TIM_Base_SetConfig+0xcc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0x20>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458e:	d108      	bne.n	80045a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <TIM_Base_SetConfig+0xcc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0x5a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x5a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <TIM_Base_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x5a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a21      	ldr	r2, [pc, #132]	; (8004644 <TIM_Base_SetConfig+0xd4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x5a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a20      	ldr	r2, [pc, #128]	; (8004648 <TIM_Base_SetConfig+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0e      	ldr	r2, [pc, #56]	; (800463c <TIM_Base_SetConfig+0xcc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_Base_SetConfig+0xb0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <TIM_Base_SetConfig+0xd0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_Base_SetConfig+0xb0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <TIM_Base_SetConfig+0xd4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0xb0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <TIM_Base_SetConfig+0xd8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	615a      	str	r2, [r3, #20]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800

0800464c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e040      	b.n	800471c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc f9c4 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f82c 	bl	8004724 <UART_SetConfig>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e022      	b.n	800471c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f956 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f9dd 	bl	8004ad4 <UART_CheckIdleState>
 800471a:	4603      	mov	r3, r0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b8a      	ldr	r3, [pc, #552]	; (8004978 <UART_SetConfig+0x254>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	430b      	orrs	r3, r1
 800475a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a78      	ldr	r2, [pc, #480]	; (800497c <UART_SetConfig+0x258>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d120      	bne.n	80047e2 <UART_SetConfig+0xbe>
 80047a0:	4b77      	ldr	r3, [pc, #476]	; (8004980 <UART_SetConfig+0x25c>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d817      	bhi.n	80047dc <UART_SetConfig+0xb8>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x90>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047d1 	.word	0x080047d1
 80047bc:	080047d7 	.word	0x080047d7
 80047c0:	080047cb 	.word	0x080047cb
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e01d      	b.n	8004806 <UART_SetConfig+0xe2>
 80047ca:	2302      	movs	r3, #2
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e01a      	b.n	8004806 <UART_SetConfig+0xe2>
 80047d0:	2304      	movs	r3, #4
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e017      	b.n	8004806 <UART_SetConfig+0xe2>
 80047d6:	2308      	movs	r3, #8
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0xe2>
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e011      	b.n	8004806 <UART_SetConfig+0xe2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a67      	ldr	r2, [pc, #412]	; (8004984 <UART_SetConfig+0x260>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d102      	bne.n	80047f2 <UART_SetConfig+0xce>
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0xe2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a64      	ldr	r2, [pc, #400]	; (8004988 <UART_SetConfig+0x264>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d102      	bne.n	8004802 <UART_SetConfig+0xde>
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e001      	b.n	8004806 <UART_SetConfig+0xe2>
 8004802:	2310      	movs	r3, #16
 8004804:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d15a      	bne.n	80048c6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d827      	bhi.n	8004866 <UART_SetConfig+0x142>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0xf8>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff fa90 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8004844:	61b8      	str	r0, [r7, #24]
        break;
 8004846:	e013      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7ff faae 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 800484c:	61b8      	str	r0, [r7, #24]
        break;
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b4e      	ldr	r3, [pc, #312]	; (800498c <UART_SetConfig+0x268>)
 8004852:	61bb      	str	r3, [r7, #24]
        break;
 8004854:	e00c      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7ff fa0f 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 800485a:	61b8      	str	r0, [r7, #24]
        break;
 800485c:	e008      	b.n	8004870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	61bb      	str	r3, [r7, #24]
        break;
 8004864:	e004      	b.n	8004870 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	77bb      	strb	r3, [r7, #30]
        break;
 800486e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d074      	beq.n	8004960 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	005a      	lsls	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b0f      	cmp	r3, #15
 8004890:	d916      	bls.n	80048c0 <UART_SetConfig+0x19c>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d212      	bcs.n	80048c0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f023 030f 	bic.w	r3, r3, #15
 80048a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	89fb      	ldrh	r3, [r7, #14]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	89fa      	ldrh	r2, [r7, #14]
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	e04f      	b.n	8004960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	77bb      	strb	r3, [r7, #30]
 80048c4:	e04c      	b.n	8004960 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d828      	bhi.n	800491e <UART_SetConfig+0x1fa>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x1b0>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004909 	.word	0x08004909
 80048e0:	0800491f 	.word	0x0800491f
 80048e4:	0800490f 	.word	0x0800490f
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800491f 	.word	0x0800491f
 80048f0:	0800491f 	.word	0x0800491f
 80048f4:	08004917 	.word	0x08004917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7ff fa34 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e013      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004900:	f7ff fa52 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e00f      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <UART_SetConfig+0x268>)
 800490a:	61bb      	str	r3, [r7, #24]
        break;
 800490c:	e00c      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7ff f9b3 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8004912:	61b8      	str	r0, [r7, #24]
        break;
 8004914:	e008      	b.n	8004928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491a:	61bb      	str	r3, [r7, #24]
        break;
 800491c:	e004      	b.n	8004928 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	77bb      	strb	r3, [r7, #30]
        break;
 8004926:	bf00      	nop
    }

    if (pclk != 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	085a      	lsrs	r2, r3, #1
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d909      	bls.n	800495c <UART_SetConfig+0x238>
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d205      	bcs.n	800495c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e001      	b.n	8004960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800496c:	7fbb      	ldrb	r3, [r7, #30]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	efff69f3 	.word	0xefff69f3
 800497c:	40013800 	.word	0x40013800
 8004980:	40021000 	.word	0x40021000
 8004984:	40004400 	.word	0x40004400
 8004988:	40004800 	.word	0x40004800
 800498c:	007a1200 	.word	0x007a1200

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b098      	sub	sp, #96	; 0x60
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc f920 	bl	8000d28 <HAL_GetTick>
 8004ae8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d12e      	bne.n	8004b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f88c 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e062      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d149      	bne.n	8004bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f856 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03c      	beq.n	8004bf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e011      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3758      	adds	r7, #88	; 0x58
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e049      	b.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d045      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc f873 	bl	8000d28 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e048      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d031      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d110      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f838 	bl	8004cf2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2208      	movs	r2, #8
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e029      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d111      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f81e 	bl	8004cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0a6      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b095      	sub	sp, #84	; 0x54
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d118      	bne.n	8004d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dcc:	2b84      	cmp	r3, #132	; 0x84
 8004dce:	d005      	beq.n	8004ddc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004dd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3303      	adds	r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dee:	f000 faed 	bl	80053cc <vTaskStartScheduler>
  
  return osOK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <osThreadCreate+0x54>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01c      	beq.n	8004e4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685c      	ldr	r4, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691e      	ldr	r6, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ffc8 	bl	8004dba <makeFreeRtosPriority>
 8004e2a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e34:	9202      	str	r2, [sp, #8]
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	9100      	str	r1, [sp, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4620      	mov	r0, r4
 8004e42:	f000 f8ed 	bl	8005020 <xTaskCreateStatic>
 8004e46:	4603      	mov	r3, r0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e01c      	b.n	8004e86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685c      	ldr	r4, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e58:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ffaa 	bl	8004dba <makeFreeRtosPriority>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	9200      	str	r2, [sp, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4632      	mov	r2, r6
 8004e74:	4629      	mov	r1, r5
 8004e76:	4620      	mov	r0, r4
 8004e78:	f000 f92e 	bl	80050d8 <xTaskCreate>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <osDelay+0x16>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	e000      	b.n	8004ea8 <osDelay+0x18>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa5b 	bl	8005364 <vTaskDelay>
  
  return osOK;
 8004eae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f103 0208 	add.w	r2, r3, #8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f103 0208 	add.w	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 0208 	add.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d103      	bne.n	8004f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e00c      	b.n	8004f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e002      	b.n	8004f88 <vListInsert+0x2e>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d2f6      	bcs.n	8004f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6892      	ldr	r2, [r2, #8]
 8004fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d103      	bne.n	8005000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08e      	sub	sp, #56	; 0x38
 8005024:	af04      	add	r7, sp, #16
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xTaskCreateStatic+0x46>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61fb      	str	r3, [r7, #28]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005066:	23a0      	movs	r3, #160	; 0xa0
 8005068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2ba0      	cmp	r3, #160	; 0xa0
 800506e:	d00a      	beq.n	8005086 <xTaskCreateStatic+0x66>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	61bb      	str	r3, [r7, #24]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01e      	beq.n	80050ca <xTaskCreateStatic+0xaa>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01b      	beq.n	80050ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800509a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050a4:	2300      	movs	r3, #0
 80050a6:	9303      	str	r3, [sp, #12]
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f851 	bl	8005164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050c4:	f000 f8e4 	bl	8005290 <prvAddNewTaskToReadyList>
 80050c8:	e001      	b.n	80050ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050ce:	697b      	ldr	r3, [r7, #20]
	}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3728      	adds	r7, #40	; 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af04      	add	r7, sp, #16
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fef3 	bl	8005ed8 <pvPortMalloc>
 80050f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00e      	beq.n	8005118 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050fa:	20a0      	movs	r0, #160	; 0xa0
 80050fc:	f000 feec 	bl	8005ed8 <pvPortMalloc>
 8005100:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
 800510e:	e005      	b.n	800511c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f000 ffa5 	bl	8006060 <vPortFree>
 8005116:	e001      	b.n	800511c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	2300      	movs	r3, #0
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f80f 	bl	8005164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005146:	69f8      	ldr	r0, [r7, #28]
 8005148:	f000 f8a2 	bl	8005290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800514c:	2301      	movs	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e002      	b.n	8005158 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005158:	69bb      	ldr	r3, [r7, #24]
	}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800517c:	3b01      	subs	r3, #1
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	617b      	str	r3, [r7, #20]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ac:	2300      	movs	r3, #0
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e012      	b.n	80051d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	3334      	adds	r3, #52	; 0x34
 80051c2:	460a      	mov	r2, r1
 80051c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d9e9      	bls.n	80051b2 <prvInitialiseNewTask+0x4e>
 80051de:	e000      	b.n	80051e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80051e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	d901      	bls.n	80051f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051f0:	2306      	movs	r3, #6
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe74 	bl	8004ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	3318      	adds	r3, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fe6f 	bl	8004ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	f1c3 0207 	rsb	r2, r3, #7
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	2200      	movs	r2, #0
 800523c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	334c      	adds	r3, #76	; 0x4c
 8005244:	224c      	movs	r2, #76	; 0x4c
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f001 f83f 	bl	80062cc <memset>
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <prvInitialiseNewTask+0x120>)
 8005252:	651a      	str	r2, [r3, #80]	; 0x50
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <prvInitialiseNewTask+0x124>)
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <prvInitialiseNewTask+0x128>)
 800525e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	69b8      	ldr	r0, [r7, #24]
 8005266:	f000 fc2b 	bl	8005ac0 <pxPortInitialiseStack>
 800526a:	4602      	mov	r2, r0
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800527c:	bf00      	nop
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	200011f4 	.word	0x200011f4
 8005288:	2000125c 	.word	0x2000125c
 800528c:	200012c4 	.word	0x200012c4

08005290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005298:	f000 fd3c 	bl	8005d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800529c:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <prvAddNewTaskToReadyList+0xb8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	4a29      	ldr	r2, [pc, #164]	; (8005348 <prvAddNewTaskToReadyList+0xb8>)
 80052a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052a6:	4b29      	ldr	r3, [pc, #164]	; (800534c <prvAddNewTaskToReadyList+0xbc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ae:	4a27      	ldr	r2, [pc, #156]	; (800534c <prvAddNewTaskToReadyList+0xbc>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <prvAddNewTaskToReadyList+0xb8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d110      	bne.n	80052de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052bc:	f000 fad2 	bl	8005864 <prvInitialiseTaskLists>
 80052c0:	e00d      	b.n	80052de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052c2:	4b23      	ldr	r3, [pc, #140]	; (8005350 <prvAddNewTaskToReadyList+0xc0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <prvAddNewTaskToReadyList+0xbc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d802      	bhi.n	80052de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <prvAddNewTaskToReadyList+0xbc>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <prvAddNewTaskToReadyList+0xc4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <prvAddNewTaskToReadyList+0xc4>)
 80052e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <prvAddNewTaskToReadyList+0xc8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <prvAddNewTaskToReadyList+0xc8>)
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <prvAddNewTaskToReadyList+0xcc>)
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f7ff fdfe 	bl	8004f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005316:	f000 fd2d 	bl	8005d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <prvAddNewTaskToReadyList+0xc0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00e      	beq.n	8005340 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <prvAddNewTaskToReadyList+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	429a      	cmp	r2, r3
 800532e:	d207      	bcs.n	8005340 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <prvAddNewTaskToReadyList+0xd0>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	200005a8 	.word	0x200005a8
 800534c:	200004a8 	.word	0x200004a8
 8005350:	200005b4 	.word	0x200005b4
 8005354:	200005c4 	.word	0x200005c4
 8005358:	200005b0 	.word	0x200005b0
 800535c:	200004ac 	.word	0x200004ac
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <vTaskDelay+0x60>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <vTaskDelay+0x30>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60bb      	str	r3, [r7, #8]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005394:	f000 f884 	bl	80054a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005398:	2100      	movs	r1, #0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb2a 	bl	80059f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a0:	f000 f88c 	bl	80054bc <xTaskResumeAll>
 80053a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <vTaskDelay+0x64>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200005d0 	.word	0x200005d0
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	; 0x28
 80053d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053da:	463a      	mov	r2, r7
 80053dc:	1d39      	adds	r1, r7, #4
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fa ff44 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	9202      	str	r2, [sp, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	460a      	mov	r2, r1
 80053fa:	4921      	ldr	r1, [pc, #132]	; (8005480 <vTaskStartScheduler+0xb4>)
 80053fc:	4821      	ldr	r0, [pc, #132]	; (8005484 <vTaskStartScheduler+0xb8>)
 80053fe:	f7ff fe0f 	bl	8005020 <xTaskCreateStatic>
 8005402:	4603      	mov	r3, r0
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <vTaskStartScheduler+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <vTaskStartScheduler+0xbc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e001      	b.n	800541a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d11b      	bne.n	8005458 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vTaskStartScheduler+0xc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	334c      	adds	r3, #76	; 0x4c
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <vTaskStartScheduler+0xc4>)
 800543c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <vTaskStartScheduler+0xc8>)
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <vTaskStartScheduler+0xcc>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800544c:	4b13      	ldr	r3, [pc, #76]	; (800549c <vTaskStartScheduler+0xd0>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005452:	f000 fbbd 	bl	8005bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005456:	e00e      	b.n	8005476 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d10a      	bne.n	8005476 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <vTaskStartScheduler+0xa8>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	08006ce4 	.word	0x08006ce4
 8005484:	08005835 	.word	0x08005835
 8005488:	200005cc 	.word	0x200005cc
 800548c:	200004a8 	.word	0x200004a8
 8005490:	2000005c 	.word	0x2000005c
 8005494:	200005c8 	.word	0x200005c8
 8005498:	200005b4 	.word	0x200005b4
 800549c:	200005ac 	.word	0x200005ac

080054a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a03      	ldr	r2, [pc, #12]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054ac:	6013      	str	r3, [r2, #0]
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	200005d0 	.word	0x200005d0

080054bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <xTaskResumeAll+0x114>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e8:	f000 fc14 	bl	8005d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ec:	4b38      	ldr	r3, [pc, #224]	; (80055d0 <xTaskResumeAll+0x114>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <xTaskResumeAll+0x114>)
 80054f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <xTaskResumeAll+0x114>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d161      	bne.n	80055c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fe:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <xTaskResumeAll+0x118>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05d      	beq.n	80055c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005506:	e02e      	b.n	8005566 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005508:	4b33      	ldr	r3, [pc, #204]	; (80055d8 <xTaskResumeAll+0x11c>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3318      	adds	r3, #24
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fd59 	bl	8004fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fd54 	bl	8004fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <xTaskResumeAll+0x120>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <xTaskResumeAll+0x120>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <xTaskResumeAll+0x124>)
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7ff fce0 	bl	8004f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <xTaskResumeAll+0x128>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <xTaskResumeAll+0x12c>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <xTaskResumeAll+0x11c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cc      	bne.n	8005508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005574:	f000 fa18 	bl	80059a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005578:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <xTaskResumeAll+0x130>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005584:	f000 f836 	bl	80055f4 <xTaskIncrementTick>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <xTaskResumeAll+0x12c>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f1      	bne.n	8005584 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <xTaskResumeAll+0x130>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <xTaskResumeAll+0x12c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <xTaskResumeAll+0x134>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f000 fbd7 	bl	8005d74 <vPortExitCritical>

	return xAlreadyYielded;
 80055c6:	68bb      	ldr	r3, [r7, #8]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200005d0 	.word	0x200005d0
 80055d4:	200005a8 	.word	0x200005a8
 80055d8:	20000568 	.word	0x20000568
 80055dc:	200005b0 	.word	0x200005b0
 80055e0:	200004ac 	.word	0x200004ac
 80055e4:	200004a8 	.word	0x200004a8
 80055e8:	200005bc 	.word	0x200005bc
 80055ec:	200005b8 	.word	0x200005b8
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fe:	4b51      	ldr	r3, [pc, #324]	; (8005744 <xTaskIncrementTick+0x150>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 808d 	bne.w	8005722 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005608:	4b4f      	ldr	r3, [pc, #316]	; (8005748 <xTaskIncrementTick+0x154>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005610:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <xTaskIncrementTick+0x154>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d120      	bne.n	800565e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800561c:	4b4b      	ldr	r3, [pc, #300]	; (800574c <xTaskIncrementTick+0x158>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <xTaskIncrementTick+0x48>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xTaskIncrementTick+0x46>
 800563c:	4b43      	ldr	r3, [pc, #268]	; (800574c <xTaskIncrementTick+0x158>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b43      	ldr	r3, [pc, #268]	; (8005750 <xTaskIncrementTick+0x15c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a41      	ldr	r2, [pc, #260]	; (800574c <xTaskIncrementTick+0x158>)
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	4a41      	ldr	r2, [pc, #260]	; (8005750 <xTaskIncrementTick+0x15c>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4b40      	ldr	r3, [pc, #256]	; (8005754 <xTaskIncrementTick+0x160>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a3f      	ldr	r2, [pc, #252]	; (8005754 <xTaskIncrementTick+0x160>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	f000 f9a5 	bl	80059a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800565e:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <xTaskIncrementTick+0x164>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	d34d      	bcc.n	8005704 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005668:	4b38      	ldr	r3, [pc, #224]	; (800574c <xTaskIncrementTick+0x158>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <xTaskIncrementTick+0x82>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <xTaskIncrementTick+0x84>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	4b36      	ldr	r3, [pc, #216]	; (8005758 <xTaskIncrementTick+0x164>)
 800567e:	f04f 32ff 	mov.w	r2, #4294967295
 8005682:	601a      	str	r2, [r3, #0]
					break;
 8005684:	e03e      	b.n	8005704 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <xTaskIncrementTick+0x158>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d203      	bcs.n	80056a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800569e:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <xTaskIncrementTick+0x164>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6013      	str	r3, [r2, #0]
						break;
 80056a4:	e02e      	b.n	8005704 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fc8e 	bl	8004fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff fc85 	bl	8004fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	2201      	movs	r2, #1
 80056c8:	409a      	lsls	r2, r3
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <xTaskIncrementTick+0x168>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	4a22      	ldr	r2, [pc, #136]	; (800575c <xTaskIncrementTick+0x168>)
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <xTaskIncrementTick+0x16c>)
 80056e2:	441a      	add	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f7ff fc11 	bl	8004f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <xTaskIncrementTick+0x170>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3b4      	bcc.n	8005668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	e7b1      	b.n	8005668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005704:	4b17      	ldr	r3, [pc, #92]	; (8005764 <xTaskIncrementTick+0x170>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4915      	ldr	r1, [pc, #84]	; (8005760 <xTaskIncrementTick+0x16c>)
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d907      	bls.n	800572c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e004      	b.n	800572c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <xTaskIncrementTick+0x174>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <xTaskIncrementTick+0x174>)
 800572a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <xTaskIncrementTick+0x178>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200005d0 	.word	0x200005d0
 8005748:	200005ac 	.word	0x200005ac
 800574c:	20000560 	.word	0x20000560
 8005750:	20000564 	.word	0x20000564
 8005754:	200005c0 	.word	0x200005c0
 8005758:	200005c8 	.word	0x200005c8
 800575c:	200005b0 	.word	0x200005b0
 8005760:	200004ac 	.word	0x200004ac
 8005764:	200004a8 	.word	0x200004a8
 8005768:	200005b8 	.word	0x200005b8
 800576c:	200005bc 	.word	0x200005bc

08005770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <vTaskSwitchContext+0xac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577e:	4b28      	ldr	r3, [pc, #160]	; (8005820 <vTaskSwitchContext+0xb0>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005784:	e044      	b.n	8005810 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <vTaskSwitchContext+0xb0>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <vTaskSwitchContext+0xb4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	f1c3 031f 	rsb	r3, r3, #31
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	4921      	ldr	r1, [pc, #132]	; (8005828 <vTaskSwitchContext+0xb8>)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	607b      	str	r3, [r7, #4]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vTaskSwitchContext+0x5a>
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4a14      	ldr	r2, [pc, #80]	; (8005828 <vTaskSwitchContext+0xb8>)
 80057d8:	4413      	add	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3308      	adds	r3, #8
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d104      	bne.n	80057fc <vTaskSwitchContext+0x8c>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a0a      	ldr	r2, [pc, #40]	; (800582c <vTaskSwitchContext+0xbc>)
 8005804:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <vTaskSwitchContext+0xbc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	334c      	adds	r3, #76	; 0x4c
 800580c:	4a08      	ldr	r2, [pc, #32]	; (8005830 <vTaskSwitchContext+0xc0>)
 800580e:	6013      	str	r3, [r2, #0]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	200005d0 	.word	0x200005d0
 8005820:	200005bc 	.word	0x200005bc
 8005824:	200005b0 	.word	0x200005b0
 8005828:	200004ac 	.word	0x200004ac
 800582c:	200004a8 	.word	0x200004a8
 8005830:	2000005c 	.word	0x2000005c

08005834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800583c:	f000 f852 	bl	80058e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <prvIdleTask+0x28>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d9f9      	bls.n	800583c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <prvIdleTask+0x2c>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005858:	e7f0      	b.n	800583c <prvIdleTask+0x8>
 800585a:	bf00      	nop
 800585c:	200004ac 	.word	0x200004ac
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	e00c      	b.n	800588a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <prvInitialiseTaskLists+0x60>)
 800587c:	4413      	add	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fb1a 	bl	8004eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3301      	adds	r3, #1
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d9ef      	bls.n	8005870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005890:	480d      	ldr	r0, [pc, #52]	; (80058c8 <prvInitialiseTaskLists+0x64>)
 8005892:	f7ff fb11 	bl	8004eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005896:	480d      	ldr	r0, [pc, #52]	; (80058cc <prvInitialiseTaskLists+0x68>)
 8005898:	f7ff fb0e 	bl	8004eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800589c:	480c      	ldr	r0, [pc, #48]	; (80058d0 <prvInitialiseTaskLists+0x6c>)
 800589e:	f7ff fb0b 	bl	8004eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058a2:	480c      	ldr	r0, [pc, #48]	; (80058d4 <prvInitialiseTaskLists+0x70>)
 80058a4:	f7ff fb08 	bl	8004eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058a8:	480b      	ldr	r0, [pc, #44]	; (80058d8 <prvInitialiseTaskLists+0x74>)
 80058aa:	f7ff fb05 	bl	8004eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <prvInitialiseTaskLists+0x78>)
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <prvInitialiseTaskLists+0x64>)
 80058b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <prvInitialiseTaskLists+0x7c>)
 80058b6:	4a05      	ldr	r2, [pc, #20]	; (80058cc <prvInitialiseTaskLists+0x68>)
 80058b8:	601a      	str	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200004ac 	.word	0x200004ac
 80058c8:	20000538 	.word	0x20000538
 80058cc:	2000054c 	.word	0x2000054c
 80058d0:	20000568 	.word	0x20000568
 80058d4:	2000057c 	.word	0x2000057c
 80058d8:	20000594 	.word	0x20000594
 80058dc:	20000560 	.word	0x20000560
 80058e0:	20000564 	.word	0x20000564

080058e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ea:	e019      	b.n	8005920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058ec:	f000 fa12 	bl	8005d14 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <prvCheckTasksWaitingTermination+0x50>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fb65 	bl	8004fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <prvCheckTasksWaitingTermination+0x54>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	4a0b      	ldr	r2, [pc, #44]	; (8005938 <prvCheckTasksWaitingTermination+0x54>)
 800590a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 8005914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005916:	f000 fa2d 	bl	8005d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f810 	bl	8005940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvCheckTasksWaitingTermination+0x58>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e1      	bne.n	80058ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2000057c 	.word	0x2000057c
 8005938:	200005a8 	.word	0x200005a8
 800593c:	20000590 	.word	0x20000590

08005940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	334c      	adds	r3, #76	; 0x4c
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fcc5 	bl	80062dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fb7d 	bl	8006060 <vPortFree>
				vPortFree( pxTCB );
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb7a 	bl	8006060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800596c:	e018      	b.n	80059a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005974:	2b01      	cmp	r3, #1
 8005976:	d103      	bne.n	8005980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb71 	bl	8006060 <vPortFree>
	}
 800597e:	e00f      	b.n	80059a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005986:	2b02      	cmp	r3, #2
 8005988:	d00a      	beq.n	80059a0 <prvDeleteTCB+0x60>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <prvDeleteTCB+0x5e>
	}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <prvResetNextTaskUnblockTime+0x44>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <prvResetNextTaskUnblockTime+0x14>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <prvResetNextTaskUnblockTime+0x16>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <prvResetNextTaskUnblockTime+0x48>)
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059ca:	e008      	b.n	80059de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <prvResetNextTaskUnblockTime+0x44>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <prvResetNextTaskUnblockTime+0x48>)
 80059dc:	6013      	str	r3, [r2, #0]
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000560 	.word	0x20000560
 80059f0:	200005c8 	.word	0x200005c8

080059f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a04:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fade 	bl	8004fcc <uxListRemove>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	4b21      	ldr	r3, [pc, #132]	; (8005aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	4a20      	ldr	r2, [pc, #128]	; (8005aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d10a      	bne.n	8005a4c <prvAddCurrentTaskToDelayedList+0x58>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	481a      	ldr	r0, [pc, #104]	; (8005ab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a46:	f7ff fa64 	bl	8004f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a4a:	e026      	b.n	8005a9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a54:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d209      	bcs.n	8005a78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7ff fa72 	bl	8004f5a <vListInsert>
}
 8005a76:	e010      	b.n	8005a9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7ff fa68 	bl	8004f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d202      	bcs.n	8005a9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6013      	str	r3, [r2, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200005ac 	.word	0x200005ac
 8005aa8:	200004a8 	.word	0x200004a8
 8005aac:	200005b0 	.word	0x200005b0
 8005ab0:	20000594 	.word	0x20000594
 8005ab4:	20000564 	.word	0x20000564
 8005ab8:	20000560 	.word	0x20000560
 8005abc:	200005c8 	.word	0x200005c8

08005ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3b04      	subs	r3, #4
 8005ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3b04      	subs	r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005af0:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <pxPortInitialiseStack+0x64>)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3b14      	subs	r3, #20
 8005afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f06f 0202 	mvn.w	r2, #2
 8005b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3b20      	subs	r3, #32
 8005b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b16:	68fb      	ldr	r3, [r7, #12]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	08005b29 	.word	0x08005b29

08005b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <prvTaskExitError+0x54>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d00a      	beq.n	8005b52 <prvTaskExitError+0x2a>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <prvTaskExitError+0x28>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60bb      	str	r3, [r7, #8]
}
 8005b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b66:	bf00      	nop
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0fc      	beq.n	8005b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	2000000c 	.word	0x2000000c

08005b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <pxCurrentTCBConst2>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	6808      	ldr	r0, [r1, #0]
 8005b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8a:	f380 8809 	msr	PSP, r0
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	4770      	bx	lr
 8005b9c:	f3af 8000 	nop.w

08005ba0 <pxCurrentTCBConst2>:
 8005ba0:	200004a8 	.word	0x200004a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ba8:	4808      	ldr	r0, [pc, #32]	; (8005bcc <prvPortStartFirstTask+0x24>)
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	6800      	ldr	r0, [r0, #0]
 8005bae:	f380 8808 	msr	MSP, r0
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f380 8814 	msr	CONTROL, r0
 8005bba:	b662      	cpsie	i
 8005bbc:	b661      	cpsie	f
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	df00      	svc	0
 8005bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bca:	bf00      	nop
 8005bcc:	e000ed08 	.word	0xe000ed08

08005bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bd6:	4b46      	ldr	r3, [pc, #280]	; (8005cf0 <xPortStartScheduler+0x120>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <xPortStartScheduler+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10a      	bne.n	8005bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bf6:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <xPortStartScheduler+0x120>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a3f      	ldr	r2, [pc, #252]	; (8005cf8 <xPortStartScheduler+0x128>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10a      	bne.n	8005c16 <xPortStartScheduler+0x46>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <xPortStartScheduler+0x12c>)
 8005c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <xPortStartScheduler+0x130>)
 8005c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c40:	2207      	movs	r2, #7
 8005c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c44:	e009      	b.n	8005c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d0ef      	beq.n	8005c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d00a      	beq.n	8005c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c88:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c9a:	4a1a      	ldr	r2, [pc, #104]	; (8005d04 <xPortStartScheduler+0x134>)
 8005c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <xPortStartScheduler+0x138>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <xPortStartScheduler+0x138>)
 8005cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cbe:	f000 f8dd 	bl	8005e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <xPortStartScheduler+0x13c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cc8:	f000 f8fc 	bl	8005ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <xPortStartScheduler+0x140>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <xPortStartScheduler+0x140>)
 8005cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cd8:	f7ff ff66 	bl	8005ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cdc:	f7ff fd48 	bl	8005770 <vTaskSwitchContext>
	prvTaskExitError();
 8005ce0:	f7ff ff22 	bl	8005b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000ed00 	.word	0xe000ed00
 8005cf4:	410fc271 	.word	0x410fc271
 8005cf8:	410fc270 	.word	0x410fc270
 8005cfc:	e000e400 	.word	0xe000e400
 8005d00:	200005d4 	.word	0x200005d4
 8005d04:	200005d8 	.word	0x200005d8
 8005d08:	e000ed20 	.word	0xe000ed20
 8005d0c:	2000000c 	.word	0x2000000c
 8005d10:	e000ef34 	.word	0xe000ef34

08005d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	607b      	str	r3, [r7, #4]
}
 8005d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <vPortEnterCritical+0x58>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10f      	bne.n	8005d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <vPortEnterCritical+0x5c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <vPortEnterCritical+0x4a>
	}
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <vPortExitCritical+0x50>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <vPortExitCritical+0x24>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	607b      	str	r3, [r7, #4]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <vPortExitCritical+0x50>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <vPortExitCritical+0x50>)
 8005da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <vPortExitCritical+0x50>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <vPortExitCritical+0x42>
 8005daa:	2300      	movs	r3, #0
 8005dac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c
	...

08005dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005dd0:	f3ef 8009 	mrs	r0, PSP
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <pxCurrentTCBConst>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	f01e 0f10 	tst.w	lr, #16
 8005de0:	bf08      	it	eq
 8005de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005df4:	f380 8811 	msr	BASEPRI, r0
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f7ff fcb6 	bl	8005770 <vTaskSwitchContext>
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f380 8811 	msr	BASEPRI, r0
 8005e0c:	bc09      	pop	{r0, r3}
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	6808      	ldr	r0, [r1, #0]
 8005e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e16:	f01e 0f10 	tst.w	lr, #16
 8005e1a:	bf08      	it	eq
 8005e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e20:	f380 8809 	msr	PSP, r0
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst>:
 8005e30:	200004a8 	.word	0x200004a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e52:	f7ff fbcf 	bl	80055f4 <xTaskIncrementTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <SysTick_Handler+0x40>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <vPortSetupTimerInterrupt+0x38>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <vPortSetupTimerInterrupt+0x3c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <vPortSetupTimerInterrupt+0x40>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <vPortSetupTimerInterrupt+0x44>)
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010
 8005eb4:	e000e018 	.word	0xe000e018
 8005eb8:	20000000 	.word	0x20000000
 8005ebc:	10624dd3 	.word	0x10624dd3
 8005ec0:	e000e014 	.word	0xe000e014

08005ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ed4 <vPortEnableVFP+0x10>
 8005ec8:	6801      	ldr	r1, [r0, #0]
 8005eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ece:	6001      	str	r1, [r0, #0]
 8005ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ed2:	bf00      	nop
 8005ed4:	e000ed88 	.word	0xe000ed88

08005ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ee4:	f7ff fadc 	bl	80054a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ee8:	4b58      	ldr	r3, [pc, #352]	; (800604c <pvPortMalloc+0x174>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ef0:	f000 f910 	bl	8006114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ef4:	4b56      	ldr	r3, [pc, #344]	; (8006050 <pvPortMalloc+0x178>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 808e 	bne.w	800601e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01d      	beq.n	8005f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f08:	2208      	movs	r2, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d014      	beq.n	8005f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f023 0307 	bic.w	r3, r3, #7
 8005f20:	3308      	adds	r3, #8
 8005f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <pvPortMalloc+0x6c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	617b      	str	r3, [r7, #20]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d069      	beq.n	800601e <pvPortMalloc+0x146>
 8005f4a:	4b42      	ldr	r3, [pc, #264]	; (8006054 <pvPortMalloc+0x17c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d864      	bhi.n	800601e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f54:	4b40      	ldr	r3, [pc, #256]	; (8006058 <pvPortMalloc+0x180>)
 8005f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f58:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <pvPortMalloc+0x180>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5e:	e004      	b.n	8005f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d903      	bls.n	8005f7c <pvPortMalloc+0xa4>
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f1      	bne.n	8005f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f7c:	4b33      	ldr	r3, [pc, #204]	; (800604c <pvPortMalloc+0x174>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d04b      	beq.n	800601e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d91f      	bls.n	8005fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	613b      	str	r3, [r7, #16]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fe2:	69b8      	ldr	r0, [r7, #24]
 8005fe4:	f000 f8f8 	bl	80061d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <pvPortMalloc+0x17c>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	4a18      	ldr	r2, [pc, #96]	; (8006054 <pvPortMalloc+0x17c>)
 8005ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <pvPortMalloc+0x17c>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <pvPortMalloc+0x184>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d203      	bcs.n	800600a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <pvPortMalloc+0x17c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a15      	ldr	r2, [pc, #84]	; (800605c <pvPortMalloc+0x184>)
 8006008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <pvPortMalloc+0x178>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	431a      	orrs	r2, r3
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800601e:	f7ff fa4d 	bl	80054bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <pvPortMalloc+0x16a>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <pvPortMalloc+0x168>
	return pvReturn;
 8006042:	69fb      	ldr	r3, [r7, #28]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3728      	adds	r7, #40	; 0x28
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200011e4 	.word	0x200011e4
 8006050:	200011f0 	.word	0x200011f0
 8006054:	200011e8 	.word	0x200011e8
 8006058:	200011dc 	.word	0x200011dc
 800605c:	200011ec 	.word	0x200011ec

08006060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d048      	beq.n	8006104 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006072:	2308      	movs	r3, #8
 8006074:	425b      	negs	r3, r3
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b21      	ldr	r3, [pc, #132]	; (800610c <vPortFree+0xac>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vPortFree+0x44>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <vPortFree+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <vPortFree+0xac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d115      	bne.n	8006104 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <vPortFree+0xac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060e8:	f7ff f9da 	bl	80054a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <vPortFree+0xb0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a06      	ldr	r2, [pc, #24]	; (8006110 <vPortFree+0xb0>)
 80060f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f86c 	bl	80061d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006100:	f7ff f9dc 	bl	80054bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006104:	bf00      	nop
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	200011f0 	.word	0x200011f0
 8006110:	200011e8 	.word	0x200011e8

08006114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800611a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800611e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <prvHeapInit+0xac>)
 8006122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <prvHeapInit+0xac>)
 8006144:	4413      	add	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <prvHeapInit+0xb0>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <prvHeapInit+0xb0>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006160:	2208      	movs	r2, #8
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <prvHeapInit+0xb4>)
 8006174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvHeapInit+0xb4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800617e:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <prvHeapInit+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <prvHeapInit+0xb4>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <prvHeapInit+0xb8>)
 80061a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <prvHeapInit+0xbc>)
 80061aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <prvHeapInit+0xc0>)
 80061ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	200005dc 	.word	0x200005dc
 80061c4:	200011dc 	.word	0x200011dc
 80061c8:	200011e4 	.word	0x200011e4
 80061cc:	200011ec 	.word	0x200011ec
 80061d0:	200011e8 	.word	0x200011e8
 80061d4:	200011f0 	.word	0x200011f0

080061d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <prvInsertBlockIntoFreeList+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e002      	b.n	80061ec <prvInsertBlockIntoFreeList+0x14>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d8f7      	bhi.n	80061e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d108      	bne.n	800621a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d118      	bne.n	8006260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d00d      	beq.n	8006256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e008      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e003      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	429a      	cmp	r2, r3
 800626e:	d002      	beq.n	8006276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	200011dc 	.word	0x200011dc
 8006288:	200011e4 	.word	0x200011e4

0800628c <siprintf>:
 800628c:	b40e      	push	{r1, r2, r3}
 800628e:	b500      	push	{lr}
 8006290:	b09c      	sub	sp, #112	; 0x70
 8006292:	ab1d      	add	r3, sp, #116	; 0x74
 8006294:	9002      	str	r0, [sp, #8]
 8006296:	9006      	str	r0, [sp, #24]
 8006298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800629c:	4809      	ldr	r0, [pc, #36]	; (80062c4 <siprintf+0x38>)
 800629e:	9107      	str	r1, [sp, #28]
 80062a0:	9104      	str	r1, [sp, #16]
 80062a2:	4909      	ldr	r1, [pc, #36]	; (80062c8 <siprintf+0x3c>)
 80062a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a8:	9105      	str	r1, [sp, #20]
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	a902      	add	r1, sp, #8
 80062b0:	f000 f9f6 	bl	80066a0 <_svfiprintf_r>
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	b01c      	add	sp, #112	; 0x70
 80062bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c0:	b003      	add	sp, #12
 80062c2:	4770      	bx	lr
 80062c4:	2000005c 	.word	0x2000005c
 80062c8:	ffff0208 	.word	0xffff0208

080062cc <memset>:
 80062cc:	4402      	add	r2, r0
 80062ce:	4603      	mov	r3, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d100      	bne.n	80062d6 <memset+0xa>
 80062d4:	4770      	bx	lr
 80062d6:	f803 1b01 	strb.w	r1, [r3], #1
 80062da:	e7f9      	b.n	80062d0 <memset+0x4>

080062dc <_reclaim_reent>:
 80062dc:	4b29      	ldr	r3, [pc, #164]	; (8006384 <_reclaim_reent+0xa8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4283      	cmp	r3, r0
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	4604      	mov	r4, r0
 80062e6:	d04b      	beq.n	8006380 <_reclaim_reent+0xa4>
 80062e8:	69c3      	ldr	r3, [r0, #28]
 80062ea:	b143      	cbz	r3, 80062fe <_reclaim_reent+0x22>
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d144      	bne.n	800637c <_reclaim_reent+0xa0>
 80062f2:	69e3      	ldr	r3, [r4, #28]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	b111      	cbz	r1, 80062fe <_reclaim_reent+0x22>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 f87f 	bl	80063fc <_free_r>
 80062fe:	6961      	ldr	r1, [r4, #20]
 8006300:	b111      	cbz	r1, 8006308 <_reclaim_reent+0x2c>
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f87a 	bl	80063fc <_free_r>
 8006308:	69e1      	ldr	r1, [r4, #28]
 800630a:	b111      	cbz	r1, 8006312 <_reclaim_reent+0x36>
 800630c:	4620      	mov	r0, r4
 800630e:	f000 f875 	bl	80063fc <_free_r>
 8006312:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006314:	b111      	cbz	r1, 800631c <_reclaim_reent+0x40>
 8006316:	4620      	mov	r0, r4
 8006318:	f000 f870 	bl	80063fc <_free_r>
 800631c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800631e:	b111      	cbz	r1, 8006326 <_reclaim_reent+0x4a>
 8006320:	4620      	mov	r0, r4
 8006322:	f000 f86b 	bl	80063fc <_free_r>
 8006326:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006328:	b111      	cbz	r1, 8006330 <_reclaim_reent+0x54>
 800632a:	4620      	mov	r0, r4
 800632c:	f000 f866 	bl	80063fc <_free_r>
 8006330:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006332:	b111      	cbz	r1, 800633a <_reclaim_reent+0x5e>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f861 	bl	80063fc <_free_r>
 800633a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800633c:	b111      	cbz	r1, 8006344 <_reclaim_reent+0x68>
 800633e:	4620      	mov	r0, r4
 8006340:	f000 f85c 	bl	80063fc <_free_r>
 8006344:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006346:	b111      	cbz	r1, 800634e <_reclaim_reent+0x72>
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f857 	bl	80063fc <_free_r>
 800634e:	6a23      	ldr	r3, [r4, #32]
 8006350:	b1b3      	cbz	r3, 8006380 <_reclaim_reent+0xa4>
 8006352:	4620      	mov	r0, r4
 8006354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006358:	4718      	bx	r3
 800635a:	5949      	ldr	r1, [r1, r5]
 800635c:	b941      	cbnz	r1, 8006370 <_reclaim_reent+0x94>
 800635e:	3504      	adds	r5, #4
 8006360:	69e3      	ldr	r3, [r4, #28]
 8006362:	2d80      	cmp	r5, #128	; 0x80
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	d1f8      	bne.n	800635a <_reclaim_reent+0x7e>
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f847 	bl	80063fc <_free_r>
 800636e:	e7c0      	b.n	80062f2 <_reclaim_reent+0x16>
 8006370:	680e      	ldr	r6, [r1, #0]
 8006372:	4620      	mov	r0, r4
 8006374:	f000 f842 	bl	80063fc <_free_r>
 8006378:	4631      	mov	r1, r6
 800637a:	e7ef      	b.n	800635c <_reclaim_reent+0x80>
 800637c:	2500      	movs	r5, #0
 800637e:	e7ef      	b.n	8006360 <_reclaim_reent+0x84>
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	bf00      	nop
 8006384:	2000005c 	.word	0x2000005c

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000005c 	.word	0x2000005c

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	; (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	; (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	; (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 fc6a 	bl	8006c80 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08006d58 	.word	0x08006d58
 80063d0:	08006d58 	.word	0x08006d58
 80063d4:	08006d58 	.word	0x08006d58
 80063d8:	08006d5c 	.word	0x08006d5c

080063dc <__retarget_lock_acquire_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_release_recursive>:
 80063de:	4770      	bx	lr

080063e0 <memcpy>:
 80063e0:	440a      	add	r2, r1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e8:	d100      	bne.n	80063ec <memcpy+0xc>
 80063ea:	4770      	bx	lr
 80063ec:	b510      	push	{r4, lr}
 80063ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f6:	4291      	cmp	r1, r2
 80063f8:	d1f9      	bne.n	80063ee <memcpy+0xe>
 80063fa:	bd10      	pop	{r4, pc}

080063fc <_free_r>:
 80063fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fe:	2900      	cmp	r1, #0
 8006400:	d044      	beq.n	800648c <_free_r+0x90>
 8006402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006406:	9001      	str	r0, [sp, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f1a1 0404 	sub.w	r4, r1, #4
 800640e:	bfb8      	it	lt
 8006410:	18e4      	addlt	r4, r4, r3
 8006412:	f000 f8df 	bl	80065d4 <__malloc_lock>
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <_free_r+0x94>)
 8006418:	9801      	ldr	r0, [sp, #4]
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	b933      	cbnz	r3, 800642c <_free_r+0x30>
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6014      	str	r4, [r2, #0]
 8006422:	b003      	add	sp, #12
 8006424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006428:	f000 b8da 	b.w	80065e0 <__malloc_unlock>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d908      	bls.n	8006442 <_free_r+0x46>
 8006430:	6825      	ldr	r5, [r4, #0]
 8006432:	1961      	adds	r1, r4, r5
 8006434:	428b      	cmp	r3, r1
 8006436:	bf01      	itttt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	1949      	addeq	r1, r1, r5
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	e7ed      	b.n	800641e <_free_r+0x22>
 8006442:	461a      	mov	r2, r3
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	b10b      	cbz	r3, 800644c <_free_r+0x50>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x46>
 800644c:	6811      	ldr	r1, [r2, #0]
 800644e:	1855      	adds	r5, r2, r1
 8006450:	42a5      	cmp	r5, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x70>
 8006454:	6824      	ldr	r4, [r4, #0]
 8006456:	4421      	add	r1, r4
 8006458:	1854      	adds	r4, r2, r1
 800645a:	42a3      	cmp	r3, r4
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	d1e0      	bne.n	8006422 <_free_r+0x26>
 8006460:	681c      	ldr	r4, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	440c      	add	r4, r1
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	e7da      	b.n	8006422 <_free_r+0x26>
 800646c:	d902      	bls.n	8006474 <_free_r+0x78>
 800646e:	230c      	movs	r3, #12
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	e7d6      	b.n	8006422 <_free_r+0x26>
 8006474:	6825      	ldr	r5, [r4, #0]
 8006476:	1961      	adds	r1, r4, r5
 8006478:	428b      	cmp	r3, r1
 800647a:	bf04      	itt	eq
 800647c:	6819      	ldreq	r1, [r3, #0]
 800647e:	685b      	ldreq	r3, [r3, #4]
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	bf04      	itt	eq
 8006484:	1949      	addeq	r1, r1, r5
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	6054      	str	r4, [r2, #4]
 800648a:	e7ca      	b.n	8006422 <_free_r+0x26>
 800648c:	b003      	add	sp, #12
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	20001334 	.word	0x20001334

08006494 <sbrk_aligned>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4e0e      	ldr	r6, [pc, #56]	; (80064d0 <sbrk_aligned+0x3c>)
 8006498:	460c      	mov	r4, r1
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	4605      	mov	r5, r0
 800649e:	b911      	cbnz	r1, 80064a6 <sbrk_aligned+0x12>
 80064a0:	f000 fba6 	bl	8006bf0 <_sbrk_r>
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 fba1 	bl	8006bf0 <_sbrk_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d00a      	beq.n	80064c8 <sbrk_aligned+0x34>
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d007      	beq.n	80064cc <sbrk_aligned+0x38>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fb96 	bl	8006bf0 <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d101      	bne.n	80064cc <sbrk_aligned+0x38>
 80064c8:	f04f 34ff 	mov.w	r4, #4294967295
 80064cc:	4620      	mov	r0, r4
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	20001338 	.word	0x20001338

080064d4 <_malloc_r>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	1ccd      	adds	r5, r1, #3
 80064da:	f025 0503 	bic.w	r5, r5, #3
 80064de:	3508      	adds	r5, #8
 80064e0:	2d0c      	cmp	r5, #12
 80064e2:	bf38      	it	cc
 80064e4:	250c      	movcc	r5, #12
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	4607      	mov	r7, r0
 80064ea:	db01      	blt.n	80064f0 <_malloc_r+0x1c>
 80064ec:	42a9      	cmp	r1, r5
 80064ee:	d905      	bls.n	80064fc <_malloc_r+0x28>
 80064f0:	230c      	movs	r3, #12
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	2600      	movs	r6, #0
 80064f6:	4630      	mov	r0, r6
 80064f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065d0 <_malloc_r+0xfc>
 8006500:	f000 f868 	bl	80065d4 <__malloc_lock>
 8006504:	f8d8 3000 	ldr.w	r3, [r8]
 8006508:	461c      	mov	r4, r3
 800650a:	bb5c      	cbnz	r4, 8006564 <_malloc_r+0x90>
 800650c:	4629      	mov	r1, r5
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ffc0 	bl	8006494 <sbrk_aligned>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	4604      	mov	r4, r0
 8006518:	d155      	bne.n	80065c6 <_malloc_r+0xf2>
 800651a:	f8d8 4000 	ldr.w	r4, [r8]
 800651e:	4626      	mov	r6, r4
 8006520:	2e00      	cmp	r6, #0
 8006522:	d145      	bne.n	80065b0 <_malloc_r+0xdc>
 8006524:	2c00      	cmp	r4, #0
 8006526:	d048      	beq.n	80065ba <_malloc_r+0xe6>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	4631      	mov	r1, r6
 800652c:	4638      	mov	r0, r7
 800652e:	eb04 0903 	add.w	r9, r4, r3
 8006532:	f000 fb5d 	bl	8006bf0 <_sbrk_r>
 8006536:	4581      	cmp	r9, r0
 8006538:	d13f      	bne.n	80065ba <_malloc_r+0xe6>
 800653a:	6821      	ldr	r1, [r4, #0]
 800653c:	1a6d      	subs	r5, r5, r1
 800653e:	4629      	mov	r1, r5
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa7 	bl	8006494 <sbrk_aligned>
 8006546:	3001      	adds	r0, #1
 8006548:	d037      	beq.n	80065ba <_malloc_r+0xe6>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	442b      	add	r3, r5
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	f8d8 3000 	ldr.w	r3, [r8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d038      	beq.n	80065ca <_malloc_r+0xf6>
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	42a2      	cmp	r2, r4
 800655c:	d12b      	bne.n	80065b6 <_malloc_r+0xe2>
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e00f      	b.n	8006584 <_malloc_r+0xb0>
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	1b52      	subs	r2, r2, r5
 8006568:	d41f      	bmi.n	80065aa <_malloc_r+0xd6>
 800656a:	2a0b      	cmp	r2, #11
 800656c:	d917      	bls.n	800659e <_malloc_r+0xca>
 800656e:	1961      	adds	r1, r4, r5
 8006570:	42a3      	cmp	r3, r4
 8006572:	6025      	str	r5, [r4, #0]
 8006574:	bf18      	it	ne
 8006576:	6059      	strne	r1, [r3, #4]
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	bf08      	it	eq
 800657c:	f8c8 1000 	streq.w	r1, [r8]
 8006580:	5162      	str	r2, [r4, r5]
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	4638      	mov	r0, r7
 8006586:	f104 060b 	add.w	r6, r4, #11
 800658a:	f000 f829 	bl	80065e0 <__malloc_unlock>
 800658e:	f026 0607 	bic.w	r6, r6, #7
 8006592:	1d23      	adds	r3, r4, #4
 8006594:	1af2      	subs	r2, r6, r3
 8006596:	d0ae      	beq.n	80064f6 <_malloc_r+0x22>
 8006598:	1b9b      	subs	r3, r3, r6
 800659a:	50a3      	str	r3, [r4, r2]
 800659c:	e7ab      	b.n	80064f6 <_malloc_r+0x22>
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6862      	ldr	r2, [r4, #4]
 80065a2:	d1dd      	bne.n	8006560 <_malloc_r+0x8c>
 80065a4:	f8c8 2000 	str.w	r2, [r8]
 80065a8:	e7ec      	b.n	8006584 <_malloc_r+0xb0>
 80065aa:	4623      	mov	r3, r4
 80065ac:	6864      	ldr	r4, [r4, #4]
 80065ae:	e7ac      	b.n	800650a <_malloc_r+0x36>
 80065b0:	4634      	mov	r4, r6
 80065b2:	6876      	ldr	r6, [r6, #4]
 80065b4:	e7b4      	b.n	8006520 <_malloc_r+0x4c>
 80065b6:	4613      	mov	r3, r2
 80065b8:	e7cc      	b.n	8006554 <_malloc_r+0x80>
 80065ba:	230c      	movs	r3, #12
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f80e 	bl	80065e0 <__malloc_unlock>
 80065c4:	e797      	b.n	80064f6 <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7dc      	b.n	8006584 <_malloc_r+0xb0>
 80065ca:	605b      	str	r3, [r3, #4]
 80065cc:	deff      	udf	#255	; 0xff
 80065ce:	bf00      	nop
 80065d0:	20001334 	.word	0x20001334

080065d4 <__malloc_lock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__malloc_lock+0x8>)
 80065d6:	f7ff bf01 	b.w	80063dc <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	20001330 	.word	0x20001330

080065e0 <__malloc_unlock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__malloc_unlock+0x8>)
 80065e2:	f7ff befc 	b.w	80063de <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	20001330 	.word	0x20001330

080065ec <__ssputs_r>:
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	688e      	ldr	r6, [r1, #8]
 80065f2:	461f      	mov	r7, r3
 80065f4:	42be      	cmp	r6, r7
 80065f6:	680b      	ldr	r3, [r1, #0]
 80065f8:	4682      	mov	sl, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	4690      	mov	r8, r2
 80065fe:	d82c      	bhi.n	800665a <__ssputs_r+0x6e>
 8006600:	898a      	ldrh	r2, [r1, #12]
 8006602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006606:	d026      	beq.n	8006656 <__ssputs_r+0x6a>
 8006608:	6965      	ldr	r5, [r4, #20]
 800660a:	6909      	ldr	r1, [r1, #16]
 800660c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006610:	eba3 0901 	sub.w	r9, r3, r1
 8006614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006618:	1c7b      	adds	r3, r7, #1
 800661a:	444b      	add	r3, r9
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	429d      	cmp	r5, r3
 8006620:	bf38      	it	cc
 8006622:	461d      	movcc	r5, r3
 8006624:	0553      	lsls	r3, r2, #21
 8006626:	d527      	bpl.n	8006678 <__ssputs_r+0x8c>
 8006628:	4629      	mov	r1, r5
 800662a:	f7ff ff53 	bl	80064d4 <_malloc_r>
 800662e:	4606      	mov	r6, r0
 8006630:	b360      	cbz	r0, 800668c <__ssputs_r+0xa0>
 8006632:	6921      	ldr	r1, [r4, #16]
 8006634:	464a      	mov	r2, r9
 8006636:	f7ff fed3 	bl	80063e0 <memcpy>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6126      	str	r6, [r4, #16]
 8006648:	6165      	str	r5, [r4, #20]
 800664a:	444e      	add	r6, r9
 800664c:	eba5 0509 	sub.w	r5, r5, r9
 8006650:	6026      	str	r6, [r4, #0]
 8006652:	60a5      	str	r5, [r4, #8]
 8006654:	463e      	mov	r6, r7
 8006656:	42be      	cmp	r6, r7
 8006658:	d900      	bls.n	800665c <__ssputs_r+0x70>
 800665a:	463e      	mov	r6, r7
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	4632      	mov	r2, r6
 8006660:	4641      	mov	r1, r8
 8006662:	f000 faab 	bl	8006bbc <memmove>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	1b9b      	subs	r3, r3, r6
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	4433      	add	r3, r6
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	2000      	movs	r0, #0
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	462a      	mov	r2, r5
 800667a:	f000 fac9 	bl	8006c10 <_realloc_r>
 800667e:	4606      	mov	r6, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d1e0      	bne.n	8006646 <__ssputs_r+0x5a>
 8006684:	6921      	ldr	r1, [r4, #16]
 8006686:	4650      	mov	r0, sl
 8006688:	f7ff feb8 	bl	80063fc <_free_r>
 800668c:	230c      	movs	r3, #12
 800668e:	f8ca 3000 	str.w	r3, [sl]
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
 800669e:	e7e9      	b.n	8006674 <__ssputs_r+0x88>

080066a0 <_svfiprintf_r>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	4698      	mov	r8, r3
 80066a6:	898b      	ldrh	r3, [r1, #12]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	b09d      	sub	sp, #116	; 0x74
 80066ac:	4607      	mov	r7, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	d50e      	bpl.n	80066d2 <_svfiprintf_r+0x32>
 80066b4:	690b      	ldr	r3, [r1, #16]
 80066b6:	b963      	cbnz	r3, 80066d2 <_svfiprintf_r+0x32>
 80066b8:	2140      	movs	r1, #64	; 0x40
 80066ba:	f7ff ff0b 	bl	80064d4 <_malloc_r>
 80066be:	6028      	str	r0, [r5, #0]
 80066c0:	6128      	str	r0, [r5, #16]
 80066c2:	b920      	cbnz	r0, 80066ce <_svfiprintf_r+0x2e>
 80066c4:	230c      	movs	r3, #12
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	e0d0      	b.n	8006870 <_svfiprintf_r+0x1d0>
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	616b      	str	r3, [r5, #20]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	2320      	movs	r3, #32
 80066d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e0:	2330      	movs	r3, #48	; 0x30
 80066e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006888 <_svfiprintf_r+0x1e8>
 80066e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ea:	f04f 0901 	mov.w	r9, #1
 80066ee:	4623      	mov	r3, r4
 80066f0:	469a      	mov	sl, r3
 80066f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f6:	b10a      	cbz	r2, 80066fc <_svfiprintf_r+0x5c>
 80066f8:	2a25      	cmp	r2, #37	; 0x25
 80066fa:	d1f9      	bne.n	80066f0 <_svfiprintf_r+0x50>
 80066fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006700:	d00b      	beq.n	800671a <_svfiprintf_r+0x7a>
 8006702:	465b      	mov	r3, fp
 8006704:	4622      	mov	r2, r4
 8006706:	4629      	mov	r1, r5
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ff6f 	bl	80065ec <__ssputs_r>
 800670e:	3001      	adds	r0, #1
 8006710:	f000 80a9 	beq.w	8006866 <_svfiprintf_r+0x1c6>
 8006714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006716:	445a      	add	r2, fp
 8006718:	9209      	str	r2, [sp, #36]	; 0x24
 800671a:	f89a 3000 	ldrb.w	r3, [sl]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80a1 	beq.w	8006866 <_svfiprintf_r+0x1c6>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672e:	f10a 0a01 	add.w	sl, sl, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673a:	931a      	str	r3, [sp, #104]	; 0x68
 800673c:	4654      	mov	r4, sl
 800673e:	2205      	movs	r2, #5
 8006740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006744:	4850      	ldr	r0, [pc, #320]	; (8006888 <_svfiprintf_r+0x1e8>)
 8006746:	f7f9 fd43 	bl	80001d0 <memchr>
 800674a:	9a04      	ldr	r2, [sp, #16]
 800674c:	b9d8      	cbnz	r0, 8006786 <_svfiprintf_r+0xe6>
 800674e:	06d0      	lsls	r0, r2, #27
 8006750:	bf44      	itt	mi
 8006752:	2320      	movmi	r3, #32
 8006754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006758:	0711      	lsls	r1, r2, #28
 800675a:	bf44      	itt	mi
 800675c:	232b      	movmi	r3, #43	; 0x2b
 800675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b2a      	cmp	r3, #42	; 0x2a
 8006768:	d015      	beq.n	8006796 <_svfiprintf_r+0xf6>
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4654      	mov	r4, sl
 800676e:	2000      	movs	r0, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4621      	mov	r1, r4
 8006776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677a:	3b30      	subs	r3, #48	; 0x30
 800677c:	2b09      	cmp	r3, #9
 800677e:	d94d      	bls.n	800681c <_svfiprintf_r+0x17c>
 8006780:	b1b0      	cbz	r0, 80067b0 <_svfiprintf_r+0x110>
 8006782:	9207      	str	r2, [sp, #28]
 8006784:	e014      	b.n	80067b0 <_svfiprintf_r+0x110>
 8006786:	eba0 0308 	sub.w	r3, r0, r8
 800678a:	fa09 f303 	lsl.w	r3, r9, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	46a2      	mov	sl, r4
 8006794:	e7d2      	b.n	800673c <_svfiprintf_r+0x9c>
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbb      	ittet	lt
 80067a2:	425b      	neglt	r3, r3
 80067a4:	f042 0202 	orrlt.w	r2, r2, #2
 80067a8:	9307      	strge	r3, [sp, #28]
 80067aa:	9307      	strlt	r3, [sp, #28]
 80067ac:	bfb8      	it	lt
 80067ae:	9204      	strlt	r2, [sp, #16]
 80067b0:	7823      	ldrb	r3, [r4, #0]
 80067b2:	2b2e      	cmp	r3, #46	; 0x2e
 80067b4:	d10c      	bne.n	80067d0 <_svfiprintf_r+0x130>
 80067b6:	7863      	ldrb	r3, [r4, #1]
 80067b8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ba:	d134      	bne.n	8006826 <_svfiprintf_r+0x186>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067cc:	3402      	adds	r4, #2
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006898 <_svfiprintf_r+0x1f8>
 80067d4:	7821      	ldrb	r1, [r4, #0]
 80067d6:	2203      	movs	r2, #3
 80067d8:	4650      	mov	r0, sl
 80067da:	f7f9 fcf9 	bl	80001d0 <memchr>
 80067de:	b138      	cbz	r0, 80067f0 <_svfiprintf_r+0x150>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	eba0 000a 	sub.w	r0, r0, sl
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	4082      	lsls	r2, r0
 80067ea:	4313      	orrs	r3, r2
 80067ec:	3401      	adds	r4, #1
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f4:	4825      	ldr	r0, [pc, #148]	; (800688c <_svfiprintf_r+0x1ec>)
 80067f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fa:	2206      	movs	r2, #6
 80067fc:	f7f9 fce8 	bl	80001d0 <memchr>
 8006800:	2800      	cmp	r0, #0
 8006802:	d038      	beq.n	8006876 <_svfiprintf_r+0x1d6>
 8006804:	4b22      	ldr	r3, [pc, #136]	; (8006890 <_svfiprintf_r+0x1f0>)
 8006806:	bb1b      	cbnz	r3, 8006850 <_svfiprintf_r+0x1b0>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	3307      	adds	r3, #7
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	3308      	adds	r3, #8
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	4433      	add	r3, r6
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	e768      	b.n	80066ee <_svfiprintf_r+0x4e>
 800681c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006820:	460c      	mov	r4, r1
 8006822:	2001      	movs	r0, #1
 8006824:	e7a6      	b.n	8006774 <_svfiprintf_r+0xd4>
 8006826:	2300      	movs	r3, #0
 8006828:	3401      	adds	r4, #1
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0c0a 	mov.w	ip, #10
 8006832:	4620      	mov	r0, r4
 8006834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	2a09      	cmp	r2, #9
 800683c:	d903      	bls.n	8006846 <_svfiprintf_r+0x1a6>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0c6      	beq.n	80067d0 <_svfiprintf_r+0x130>
 8006842:	9105      	str	r1, [sp, #20]
 8006844:	e7c4      	b.n	80067d0 <_svfiprintf_r+0x130>
 8006846:	fb0c 2101 	mla	r1, ip, r1, r2
 800684a:	4604      	mov	r4, r0
 800684c:	2301      	movs	r3, #1
 800684e:	e7f0      	b.n	8006832 <_svfiprintf_r+0x192>
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	462a      	mov	r2, r5
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <_svfiprintf_r+0x1f4>)
 8006858:	a904      	add	r1, sp, #16
 800685a:	4638      	mov	r0, r7
 800685c:	f3af 8000 	nop.w
 8006860:	1c42      	adds	r2, r0, #1
 8006862:	4606      	mov	r6, r0
 8006864:	d1d6      	bne.n	8006814 <_svfiprintf_r+0x174>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	065b      	lsls	r3, r3, #25
 800686a:	f53f af2d 	bmi.w	80066c8 <_svfiprintf_r+0x28>
 800686e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006870:	b01d      	add	sp, #116	; 0x74
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	ab03      	add	r3, sp, #12
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462a      	mov	r2, r5
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <_svfiprintf_r+0x1f4>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	4638      	mov	r0, r7
 8006882:	f000 f879 	bl	8006978 <_printf_i>
 8006886:	e7eb      	b.n	8006860 <_svfiprintf_r+0x1c0>
 8006888:	08006d24 	.word	0x08006d24
 800688c:	08006d2e 	.word	0x08006d2e
 8006890:	00000000 	.word	0x00000000
 8006894:	080065ed 	.word	0x080065ed
 8006898:	08006d2a 	.word	0x08006d2a

0800689c <_printf_common>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	4616      	mov	r6, r2
 80068a2:	4699      	mov	r9, r3
 80068a4:	688a      	ldr	r2, [r1, #8]
 80068a6:	690b      	ldr	r3, [r1, #16]
 80068a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bfb8      	it	lt
 80068b0:	4613      	movlt	r3, r2
 80068b2:	6033      	str	r3, [r6, #0]
 80068b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b8:	4607      	mov	r7, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	b10a      	cbz	r2, 80068c2 <_printf_common+0x26>
 80068be:	3301      	adds	r3, #1
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	0699      	lsls	r1, r3, #26
 80068c6:	bf42      	ittt	mi
 80068c8:	6833      	ldrmi	r3, [r6, #0]
 80068ca:	3302      	addmi	r3, #2
 80068cc:	6033      	strmi	r3, [r6, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	f015 0506 	ands.w	r5, r5, #6
 80068d4:	d106      	bne.n	80068e4 <_printf_common+0x48>
 80068d6:	f104 0a19 	add.w	sl, r4, #25
 80068da:	68e3      	ldr	r3, [r4, #12]
 80068dc:	6832      	ldr	r2, [r6, #0]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	dc26      	bgt.n	8006932 <_printf_common+0x96>
 80068e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e8:	1e13      	subs	r3, r2, #0
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	bf18      	it	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	0692      	lsls	r2, r2, #26
 80068f2:	d42b      	bmi.n	800694c <_printf_common+0xb0>
 80068f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f8:	4649      	mov	r1, r9
 80068fa:	4638      	mov	r0, r7
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d01e      	beq.n	8006940 <_printf_common+0xa4>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	f003 0306 	and.w	r3, r3, #6
 800690a:	2b04      	cmp	r3, #4
 800690c:	bf02      	ittt	eq
 800690e:	68e5      	ldreq	r5, [r4, #12]
 8006910:	6833      	ldreq	r3, [r6, #0]
 8006912:	1aed      	subeq	r5, r5, r3
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	bf0c      	ite	eq
 8006918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800691c:	2500      	movne	r5, #0
 800691e:	4293      	cmp	r3, r2
 8006920:	bfc4      	itt	gt
 8006922:	1a9b      	subgt	r3, r3, r2
 8006924:	18ed      	addgt	r5, r5, r3
 8006926:	2600      	movs	r6, #0
 8006928:	341a      	adds	r4, #26
 800692a:	42b5      	cmp	r5, r6
 800692c:	d11a      	bne.n	8006964 <_printf_common+0xc8>
 800692e:	2000      	movs	r0, #0
 8006930:	e008      	b.n	8006944 <_printf_common+0xa8>
 8006932:	2301      	movs	r3, #1
 8006934:	4652      	mov	r2, sl
 8006936:	4649      	mov	r1, r9
 8006938:	4638      	mov	r0, r7
 800693a:	47c0      	blx	r8
 800693c:	3001      	adds	r0, #1
 800693e:	d103      	bne.n	8006948 <_printf_common+0xac>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	3501      	adds	r5, #1
 800694a:	e7c6      	b.n	80068da <_printf_common+0x3e>
 800694c:	18e1      	adds	r1, r4, r3
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	2030      	movs	r0, #48	; 0x30
 8006952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006956:	4422      	add	r2, r4
 8006958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006960:	3302      	adds	r3, #2
 8006962:	e7c7      	b.n	80068f4 <_printf_common+0x58>
 8006964:	2301      	movs	r3, #1
 8006966:	4622      	mov	r2, r4
 8006968:	4649      	mov	r1, r9
 800696a:	4638      	mov	r0, r7
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d0e6      	beq.n	8006940 <_printf_common+0xa4>
 8006972:	3601      	adds	r6, #1
 8006974:	e7d9      	b.n	800692a <_printf_common+0x8e>
	...

08006978 <_printf_i>:
 8006978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	7e0f      	ldrb	r7, [r1, #24]
 800697e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006980:	2f78      	cmp	r7, #120	; 0x78
 8006982:	4691      	mov	r9, r2
 8006984:	4680      	mov	r8, r0
 8006986:	460c      	mov	r4, r1
 8006988:	469a      	mov	sl, r3
 800698a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800698e:	d807      	bhi.n	80069a0 <_printf_i+0x28>
 8006990:	2f62      	cmp	r7, #98	; 0x62
 8006992:	d80a      	bhi.n	80069aa <_printf_i+0x32>
 8006994:	2f00      	cmp	r7, #0
 8006996:	f000 80d4 	beq.w	8006b42 <_printf_i+0x1ca>
 800699a:	2f58      	cmp	r7, #88	; 0x58
 800699c:	f000 80c0 	beq.w	8006b20 <_printf_i+0x1a8>
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a8:	e03a      	b.n	8006a20 <_printf_i+0xa8>
 80069aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ae:	2b15      	cmp	r3, #21
 80069b0:	d8f6      	bhi.n	80069a0 <_printf_i+0x28>
 80069b2:	a101      	add	r1, pc, #4	; (adr r1, 80069b8 <_printf_i+0x40>)
 80069b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	080069a1 	.word	0x080069a1
 80069c4:	080069a1 	.word	0x080069a1
 80069c8:	080069a1 	.word	0x080069a1
 80069cc:	080069a1 	.word	0x080069a1
 80069d0:	08006a25 	.word	0x08006a25
 80069d4:	080069a1 	.word	0x080069a1
 80069d8:	080069a1 	.word	0x080069a1
 80069dc:	080069a1 	.word	0x080069a1
 80069e0:	080069a1 	.word	0x080069a1
 80069e4:	08006b29 	.word	0x08006b29
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006ae3 	.word	0x08006ae3
 80069f0:	080069a1 	.word	0x080069a1
 80069f4:	080069a1 	.word	0x080069a1
 80069f8:	08006b4b 	.word	0x08006b4b
 80069fc:	080069a1 	.word	0x080069a1
 8006a00:	08006a51 	.word	0x08006a51
 8006a04:	080069a1 	.word	0x080069a1
 8006a08:	080069a1 	.word	0x080069a1
 8006a0c:	08006aeb 	.word	0x08006aeb
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	1d1a      	adds	r2, r3, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	602a      	str	r2, [r5, #0]
 8006a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a20:	2301      	movs	r3, #1
 8006a22:	e09f      	b.n	8006b64 <_printf_i+0x1ec>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	0607      	lsls	r7, r0, #24
 8006a2a:	f103 0104 	add.w	r1, r3, #4
 8006a2e:	6029      	str	r1, [r5, #0]
 8006a30:	d501      	bpl.n	8006a36 <_printf_i+0xbe>
 8006a32:	681e      	ldr	r6, [r3, #0]
 8006a34:	e003      	b.n	8006a3e <_printf_i+0xc6>
 8006a36:	0646      	lsls	r6, r0, #25
 8006a38:	d5fb      	bpl.n	8006a32 <_printf_i+0xba>
 8006a3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	da03      	bge.n	8006a4a <_printf_i+0xd2>
 8006a42:	232d      	movs	r3, #45	; 0x2d
 8006a44:	4276      	negs	r6, r6
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4a:	485a      	ldr	r0, [pc, #360]	; (8006bb4 <_printf_i+0x23c>)
 8006a4c:	230a      	movs	r3, #10
 8006a4e:	e012      	b.n	8006a76 <_printf_i+0xfe>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	1d19      	adds	r1, r3, #4
 8006a56:	6029      	str	r1, [r5, #0]
 8006a58:	0605      	lsls	r5, r0, #24
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0xe8>
 8006a5c:	681e      	ldr	r6, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0xee>
 8006a60:	0641      	lsls	r1, r0, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0xe4>
 8006a64:	881e      	ldrh	r6, [r3, #0]
 8006a66:	4853      	ldr	r0, [pc, #332]	; (8006bb4 <_printf_i+0x23c>)
 8006a68:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2308      	moveq	r3, #8
 8006a6e:	230a      	movne	r3, #10
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a76:	6865      	ldr	r5, [r4, #4]
 8006a78:	60a5      	str	r5, [r4, #8]
 8006a7a:	2d00      	cmp	r5, #0
 8006a7c:	bfa2      	ittt	ge
 8006a7e:	6821      	ldrge	r1, [r4, #0]
 8006a80:	f021 0104 	bicge.w	r1, r1, #4
 8006a84:	6021      	strge	r1, [r4, #0]
 8006a86:	b90e      	cbnz	r6, 8006a8c <_printf_i+0x114>
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	d04b      	beq.n	8006b24 <_printf_i+0x1ac>
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a92:	fb03 6711 	mls	r7, r3, r1, r6
 8006a96:	5dc7      	ldrb	r7, [r0, r7]
 8006a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a9c:	4637      	mov	r7, r6
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	d9f4      	bls.n	8006a8e <_printf_i+0x116>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x148>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07de      	lsls	r6, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x148>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	; 0x30
 8006ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac0:	1b52      	subs	r2, r2, r5
 8006ac2:	6122      	str	r2, [r4, #16]
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fee4 	bl	800689c <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14a      	bne.n	8006b6e <_printf_i+0x1f6>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	b004      	add	sp, #16
 8006ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f043 0320 	orr.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	4833      	ldr	r0, [pc, #204]	; (8006bb8 <_printf_i+0x240>)
 8006aec:	2778      	movs	r7, #120	; 0x78
 8006aee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6829      	ldr	r1, [r5, #0]
 8006af6:	061f      	lsls	r7, r3, #24
 8006af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006afc:	d402      	bmi.n	8006b04 <_printf_i+0x18c>
 8006afe:	065f      	lsls	r7, r3, #25
 8006b00:	bf48      	it	mi
 8006b02:	b2b6      	uxthmi	r6, r6
 8006b04:	07df      	lsls	r7, r3, #31
 8006b06:	bf48      	it	mi
 8006b08:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0c:	6029      	str	r1, [r5, #0]
 8006b0e:	bf48      	it	mi
 8006b10:	6023      	strmi	r3, [r4, #0]
 8006b12:	b91e      	cbnz	r6, 8006b1c <_printf_i+0x1a4>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	f023 0320 	bic.w	r3, r3, #32
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	e7a7      	b.n	8006a70 <_printf_i+0xf8>
 8006b20:	4824      	ldr	r0, [pc, #144]	; (8006bb4 <_printf_i+0x23c>)
 8006b22:	e7e4      	b.n	8006aee <_printf_i+0x176>
 8006b24:	4615      	mov	r5, r2
 8006b26:	e7bd      	b.n	8006aa4 <_printf_i+0x12c>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	6826      	ldr	r6, [r4, #0]
 8006b2c:	6961      	ldr	r1, [r4, #20]
 8006b2e:	1d18      	adds	r0, r3, #4
 8006b30:	6028      	str	r0, [r5, #0]
 8006b32:	0635      	lsls	r5, r6, #24
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	d501      	bpl.n	8006b3c <_printf_i+0x1c4>
 8006b38:	6019      	str	r1, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <_printf_i+0x1ca>
 8006b3c:	0670      	lsls	r0, r6, #25
 8006b3e:	d5fb      	bpl.n	8006b38 <_printf_i+0x1c0>
 8006b40:	8019      	strh	r1, [r3, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	4615      	mov	r5, r2
 8006b48:	e7bc      	b.n	8006ac4 <_printf_i+0x14c>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	602a      	str	r2, [r5, #0]
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	2100      	movs	r1, #0
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7f9 fb3a 	bl	80001d0 <memchr>
 8006b5c:	b108      	cbz	r0, 8006b62 <_printf_i+0x1ea>
 8006b5e:	1b40      	subs	r0, r0, r5
 8006b60:	6060      	str	r0, [r4, #4]
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	2300      	movs	r3, #0
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	e7aa      	b.n	8006ac4 <_printf_i+0x14c>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4649      	mov	r1, r9
 8006b74:	4640      	mov	r0, r8
 8006b76:	47d0      	blx	sl
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d0ad      	beq.n	8006ad8 <_printf_i+0x160>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	079b      	lsls	r3, r3, #30
 8006b80:	d413      	bmi.n	8006baa <_printf_i+0x232>
 8006b82:	68e0      	ldr	r0, [r4, #12]
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	4298      	cmp	r0, r3
 8006b88:	bfb8      	it	lt
 8006b8a:	4618      	movlt	r0, r3
 8006b8c:	e7a6      	b.n	8006adc <_printf_i+0x164>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4632      	mov	r2, r6
 8006b92:	4649      	mov	r1, r9
 8006b94:	4640      	mov	r0, r8
 8006b96:	47d0      	blx	sl
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d09d      	beq.n	8006ad8 <_printf_i+0x160>
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	9903      	ldr	r1, [sp, #12]
 8006ba2:	1a5b      	subs	r3, r3, r1
 8006ba4:	42ab      	cmp	r3, r5
 8006ba6:	dcf2      	bgt.n	8006b8e <_printf_i+0x216>
 8006ba8:	e7eb      	b.n	8006b82 <_printf_i+0x20a>
 8006baa:	2500      	movs	r5, #0
 8006bac:	f104 0619 	add.w	r6, r4, #25
 8006bb0:	e7f5      	b.n	8006b9e <_printf_i+0x226>
 8006bb2:	bf00      	nop
 8006bb4:	08006d35 	.word	0x08006d35
 8006bb8:	08006d46 	.word	0x08006d46

08006bbc <memmove>:
 8006bbc:	4288      	cmp	r0, r1
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	eb01 0402 	add.w	r4, r1, r2
 8006bc4:	d902      	bls.n	8006bcc <memmove+0x10>
 8006bc6:	4284      	cmp	r4, r0
 8006bc8:	4623      	mov	r3, r4
 8006bca:	d807      	bhi.n	8006bdc <memmove+0x20>
 8006bcc:	1e43      	subs	r3, r0, #1
 8006bce:	42a1      	cmp	r1, r4
 8006bd0:	d008      	beq.n	8006be4 <memmove+0x28>
 8006bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bda:	e7f8      	b.n	8006bce <memmove+0x12>
 8006bdc:	4402      	add	r2, r0
 8006bde:	4601      	mov	r1, r0
 8006be0:	428a      	cmp	r2, r1
 8006be2:	d100      	bne.n	8006be6 <memmove+0x2a>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bee:	e7f7      	b.n	8006be0 <memmove+0x24>

08006bf0 <_sbrk_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d06      	ldr	r5, [pc, #24]	; (8006c0c <_sbrk_r+0x1c>)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7f9 fff8 	bl	8000bf0 <_sbrk>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_sbrk_r+0x1a>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_sbrk_r+0x1a>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000132c 	.word	0x2000132c

08006c10 <_realloc_r>:
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	4680      	mov	r8, r0
 8006c16:	4614      	mov	r4, r2
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b921      	cbnz	r1, 8006c26 <_realloc_r+0x16>
 8006c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	4611      	mov	r1, r2
 8006c22:	f7ff bc57 	b.w	80064d4 <_malloc_r>
 8006c26:	b92a      	cbnz	r2, 8006c34 <_realloc_r+0x24>
 8006c28:	f7ff fbe8 	bl	80063fc <_free_r>
 8006c2c:	4625      	mov	r5, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c34:	f000 f81b 	bl	8006c6e <_malloc_usable_size_r>
 8006c38:	4284      	cmp	r4, r0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	d802      	bhi.n	8006c44 <_realloc_r+0x34>
 8006c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c42:	d812      	bhi.n	8006c6a <_realloc_r+0x5a>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fc44 	bl	80064d4 <_malloc_r>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d0ed      	beq.n	8006c2e <_realloc_r+0x1e>
 8006c52:	42bc      	cmp	r4, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	4631      	mov	r1, r6
 8006c58:	bf28      	it	cs
 8006c5a:	463a      	movcs	r2, r7
 8006c5c:	f7ff fbc0 	bl	80063e0 <memcpy>
 8006c60:	4631      	mov	r1, r6
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fbca 	bl	80063fc <_free_r>
 8006c68:	e7e1      	b.n	8006c2e <_realloc_r+0x1e>
 8006c6a:	4635      	mov	r5, r6
 8006c6c:	e7df      	b.n	8006c2e <_realloc_r+0x1e>

08006c6e <_malloc_usable_size_r>:
 8006c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c72:	1f18      	subs	r0, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfbc      	itt	lt
 8006c78:	580b      	ldrlt	r3, [r1, r0]
 8006c7a:	18c0      	addlt	r0, r0, r3
 8006c7c:	4770      	bx	lr
	...

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
